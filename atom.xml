<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="https://blog.toshimaru.net/atom.xml" rel="self" type="application/atom+xml" /><link href="https://blog.toshimaru.net/" rel="alternate" type="text/html" /><updated>2023-01-21T02:29:31+09:00</updated><id>https://blog.toshimaru.net/atom.xml</id><title type="html">Hack Your Design!</title><subtitle>toshimaruの技術系なブログ</subtitle><author><name>Toshimaru</name></author><entry><title type="html">無償版G Suite終了にともないプランアップグレードしたけど、サポートに問い合わせて無償版G Suiteに戻してもらった</title><link href="https://blog.toshimaru.net/google-workspace-for-free/" rel="alternate" type="text/html" title="無償版G Suite終了にともないプランアップグレードしたけど、サポートに問い合わせて無償版G Suiteに戻してもらった" /><published>2022-05-22T00:00:00+09:00</published><updated>2022-05-22T00:00:00+09:00</updated><id>https://blog.toshimaru.net/google-workspace-for-free</id><content type="html" xml:base="https://blog.toshimaru.net/google-workspace-for-free/"><![CDATA[<h2 id="結論">結論</h2>

<p>先に結論だけ書きます。ここだけ押さえておけばOK。</p>

<ul>
  <li>「無償版G Suite終了」という方針が撤回され、継続されることになった</li>
  <li>まだ無償版からアップグレードしていない方: <a href="https://support.google.com/a/answer/60217?hl=ja#nocost">こちら</a>から申請</li>
  <li>既にアップグレード対応してしまってた方: サポートに問い合わせれば :ok:</li>
</ul>

<h2 id="無償版g-suiteが終わる">無償版G Suiteが終わる！？</h2>

<p>独自ドメインでメールアドレスを運用する場合、無償版G Suiteが定番でした。</p>

<p class="warning">無償版 G Suiteの新規契約は、2012年12月5日をもって終了しており、現在新規契約は停止しています<sup id="fnref:g-suite" role="doc-noteref"><a href="#fn:g-suite" class="footnote" rel="footnote">1</a></sup>。</p>

<p>しかし、2022年一月に<a href="https://www.itmedia.co.jp/news/articles/2201/20/news065.html">無償版G Suiteの終了がアナウンス</a>されました。これにより、長らく無償版G Suiteを使用していたユーザーはアカウント移行を余儀なくされるかたちとなりました。</p>

<p>しかし、結論としては無償版G Suiteは継続されることになりました。それに至る経緯をまとめたいと思います。</p>

<h2 id="対応タイムライン">対応タイムライン</h2>

<p>個人的な対応タイムラインを時系列で追います。</p>

<ul>
  <li>2022年1月下旬: <a href="https://rebuild.fm/327/">rebuild.fm</a> で無償版G Suite が終了することを知る
    <ul>
      <li>この時点で僕のG Suiteアカウントに日本語のアナウンスメールは無し</li>
      <li>この回で話されているように、影響を受ける人も多くクラスアクションが取られることを考えると有償化方針は撤回される可能性もあると考え、この時点では特にアクションせず様子見をすることに</li>
    </ul>
  </li>
  <li>2022年4月上旬: Googleから無償版G Suite終了のアナウンスメールがアカウントに届く
    <ul>
      <li>
        <blockquote class="twitter-tweet"><p lang="ja" dir="ltr">先行して話題になってたからわかってはいたけど、ついにGoogle workspaceの有料化の案内が今朝きてしまった。どうするか検討せねば… <a href="https://t.co/7Tg2VcpSTH">pic.twitter.com/7Tg2VcpSTH</a></p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/1512269037790670851?ref_src=twsrc%5Etfw">April 8, 2022</a></blockquote>
      </li>
      <li>この頃から本格的にアカウント移行のための準備を始める</li>
      <li>手始めに、無償版G Suiteアカウントを最小限にするために、家族のために作成したアカウントのGmail移行を行う
        <ul>
          <li>幸いにも家族アカウントはヘビーに運用していなかったのですんなりいった</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>2022年5月上旬:
    <ul>
      <li>謎の「料金不要化のオプション」が登場したが詳細不明</li>
      <li>有償化アップグレード後も「3ヶ月無料、一年は1アカウントあたり月額300円」とのことだったので、とりあえずこのプランを契約して一年アカウントを延命することにした</li>
      <li>
        <blockquote class="twitter-tweet"><p lang="ja" dir="ltr">６月までにプラン変えろとのことなのでとりあえず上げといた <a href="https://t.co/DpYMmd6tso">pic.twitter.com/DpYMmd6tso</a></p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/1521380188902551553?ref_src=twsrc%5Etfw">May 3, 2022</a></blockquote>
        <script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
      </li>
    </ul>
  </li>
  <li>2022年5月17日: パーソナルユースのアカウントは無償版G Suiteは継続されることが発表された
    <ul>
      <li>
        <blockquote class="twitter-tweet"><p lang="en" dir="ltr">For users of the free legacy GSuite, <a href="https://twitter.com/Google?ref_src=twsrc%5Etfw">@Google</a> has added an option in the admin console to opt out of the <a href="https://twitter.com/GoogleWorkspace?ref_src=twsrc%5Etfw">@GoogleWorkspace</a> transition for personal accounts. The personaly use option is rolling out slowly, so if you don&#39;t see it now, check back later. <a href="https://t.co/PURAsEM2cG">https://t.co/PURAsEM2cG</a> <a href="https://t.co/MhIiTdQElx">pic.twitter.com/MhIiTdQElx</a></p>&mdash; Steve Whitcher (@NeighborGeek) <a href="https://twitter.com/NeighborGeek/status/1526267594180857856?ref_src=twsrc%5Etfw">May 16, 2022</a></blockquote>
      </li>
      <li>既にアップグレードしてしまった人に関しては<a href="https://twitter.com/AskWorkspace/status/1526364256521924608">サポートに問い合わせを行えば対応してもらえる</a>とのことだったので、サポートに問い合わせた
        <ul>
          <li>状況を伝えるとすんなりわかってくれた</li>
          <li>やりとりの中で同意書への同意を求められた</li>
          <li>同意後、移行を進めます、となった</li>
          <li>移行完了後にメールで連絡するとのこと</li>
          <li>（もうすぐ一週間がたつがまだ無償版への移行は未完了）</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p>ということで現在は一度アップグレードしてしまったプランを無償版G Suiteに戻してもらう移行手続きの途中ということになります（移行完了後にまたこちらに報告します）。</p>

<h2 id="無償版g-suiteが終了した場合どうしていたか">無償版G Suiteが終了した場合どうしていたか？</h2>

<p>今回は無償版G Suiteが継続されることになったから良かったものの、ついでに本当に無償版が終了していた場合に対応はどうしていたかも書いておこうと思います。</p>

<p>いろいろ検討した中では、最終的には<a href="https://developers.cloudflare.com/email-routing/">Cloudflare Email Routing</a>が一番良さそうでした。</p>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr"><a href="https://t.co/wkrifm4rz2">https://t.co/wkrifm4rz2</a> 聴きつつ Cloudflare Email Routing が良さそうやんって思って試したら全然イケたので「これでいいや」という気持ちになった<a href="https://t.co/q0gxfT5ZTs">https://t.co/q0gxfT5ZTs</a></p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/1517408538221768704?ref_src=twsrc%5Etfw">April 22, 2022</a></blockquote>

<p><a href="https://blog.cloudflare.com/announcing-route-to-workers/">Cloudflare Worker にルーティングしてEメール処理をゴニョったり</a>もできて、カスタマイズ性・拡張性に富み良さそうでした。</p>

<h2 id="いつか来る有償化の流れに備えを">いつか来る有償化の流れに備えを</h2>

<p>今回のアナウンスに伴い、アカウントを削除・移行したり、その作業に多くの時間を費やした方も多くいらっしゃるのではないかと思います。残念ながら削除したアカウントは戻ってきませんし、費やした時間・労力も当然戻ってきません。</p>

<p>先般も<a href="https://www.itmedia.co.jp/news/articles/2205/13/news131.html">楽天モバイルの0円プラン廃止</a>が話題となりました。こういった”おいしい”無料プランは未来永劫続くわけではないことを肝に命じて、いつか来る有償化の流れに備えておく必要がありそうです。</p>

<h2 id="参考">参考</h2>

<ul>
  <li><a href="https://support.google.com/a/answer/60217?hl=ja#nocost">従来の無償版 G Suite からのアップグレード - Google Workspace 管理者 ヘルプ</a></li>
</ul>
<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:g-suite" role="doc-endnote">
      <p><a href="https://support.google.com/a/answer/2855120">従来の無償版 G Suite - Google Workspace 管理者 ヘルプ</a> <a href="#fnref:g-suite" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Toshimaru</name></author><category term="google" /><summary type="html"><![CDATA[「無償版G Suite終了」という方針が撤回され、継続されることになった まだ無償版からアップグレードしていない方: こちらから申請 既にアップグレード対応してしまってた方: サポートに問い合わせればOK]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/g-suite/og.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/g-suite/og.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Dockerマルチステージビルドの並列実行</title><link href="https://blog.toshimaru.net/docker-concurrent-build/" rel="alternate" type="text/html" title="Dockerマルチステージビルドの並列実行" /><published>2021-03-15T00:00:00+09:00</published><updated>2021-03-28T00:00:00+09:00</updated><id>https://blog.toshimaru.net/docker-concurrent-build</id><content type="html" xml:base="https://blog.toshimaru.net/docker-concurrent-build/"><![CDATA[<p>本記事では、マルチステージビルド構成の<code class="language-plaintext highlighter-rouge">Dockerfile</code>のビルドの並列実行について紹介したいと思います。</p>

<h2 id="前提">前提</h2>

<ul>
  <li>Docker Desktop v3.2.1
    <ul>
      <li>Docker v20.10</li>
      <li>Docker Compose v1.28</li>
    </ul>
  </li>
</ul>

<p><img src="/images/posts/docker/desktop1.png" alt="" /></p>

<h2 id="dockerfile">Dockerfile</h2>

<p>今回テストで使うマルチステージビルドのサンプルとなる<code class="language-plaintext highlighter-rouge">Dockerfile</code>は下記です。</p>

<div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">FROM</span><span class="w"> </span><span class="s">alpine</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="s">test1</span>
<span class="k">RUN </span><span class="nb">sleep </span>10.1 <span class="c"># sleep from test1</span>

<span class="k">FROM</span><span class="w"> </span><span class="s">alpine</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="s">test2</span>
<span class="k">RUN </span><span class="nb">sleep </span>10.2 <span class="c"># sleep from test2</span>

<span class="k">FROM</span><span class="w"> </span><span class="s">alpine</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="s">test3</span>
<span class="k">RUN </span><span class="nb">sleep </span>10.3 <span class="c"># sleep from test3</span>


<span class="k">FROM</span><span class="s"> alpine</span>
<span class="k">RUN </span><span class="nb">echo</span> <span class="s2">"build start"</span>
<span class="k">RUN </span><span class="nb">sleep </span>10.0 <span class="c"># sleep from main</span>

<span class="k">COPY</span><span class="s"> --from=test1 /tmp /tmp</span>
<span class="k">COPY</span><span class="s"> --from=test2 /tmp /tmp</span>
<span class="k">COPY</span><span class="s"> --from=test3 /tmp /tmp</span>

<span class="k">RUN </span><span class="nb">echo</span> <span class="s2">"build finished"</span>
</code></pre></div></div>

<h2 id="直列実行-vs-並列実行">直列実行 vs 並列実行</h2>

<p>実際に上述の <code class="language-plaintext highlighter-rouge">Dockerfile</code> のビルドを並列実行しない場合（直列実行）と並列実行する場合の結果を比較してみます。</p>

<h3 id="並列実行しない場合">並列実行しない場合</h3>

<p>並列実行をOFFにして実行するには <code class="language-plaintext highlighter-rouge">DOCKER_BUILDKIT=0</code> の環境変数をセットして <code class="language-plaintext highlighter-rouge">docker build</code>を行います。</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nv">DOCKER_BUILDKIT</span><span class="o">=</span>0 docker build <span class="nt">--no-cache</span> <span class="nb">.</span>
<span class="go">Sending build context to Docker daemon  331.1MB
Step 1/13 : FROM alpine as test1
</span><span class="gp"> ---&gt;</span><span class="w"> </span>b7b28af77ffe
<span class="gp">Step 2/13 : RUN sleep 10.1 #</span><span class="w"> </span><span class="nb">sleep </span>from test1
<span class="gp"> ---&gt;</span><span class="w"> </span>Using cache
<span class="gp"> ---&gt;</span><span class="w"> </span>11b4518313de
<span class="go">Step 3/13 : FROM alpine as test2
</span><span class="gp"> ---&gt;</span><span class="w"> </span>b7b28af77ffe
<span class="gp">Step 4/13 : RUN sleep 10.2 #</span><span class="w"> </span><span class="nb">sleep </span>from test2
<span class="gp"> ---&gt;</span><span class="w"> </span>Using cache
<span class="gp"> ---&gt;</span><span class="w"> </span>c61101646517
<span class="go">Step 5/13 : FROM alpine as test3
</span><span class="gp"> ---&gt;</span><span class="w"> </span>b7b28af77ffe
<span class="gp">Step 6/13 : RUN sleep 10.3 #</span><span class="w"> </span><span class="nb">sleep </span>from test3
<span class="gp"> ---&gt;</span><span class="w"> </span>Using cache
<span class="gp"> ---&gt;</span><span class="w"> </span>1aa97a170923
<span class="go">Step 7/13 : FROM alpine
</span><span class="gp"> ---&gt;</span><span class="w"> </span>b7b28af77ffe
<span class="go">Step 8/13 : RUN echo "build start"
</span><span class="gp"> ---&gt;</span><span class="w"> </span>Using cache
<span class="gp"> ---&gt;</span><span class="w"> </span>8b2b09749321
<span class="gp">Step 9/13 : RUN sleep 10.0 #</span><span class="w"> </span><span class="nb">sleep </span>from main
<span class="gp"> ---&gt;</span><span class="w"> </span>Using cache
<span class="gp"> ---&gt;</span><span class="w"> </span>bc3f772d3fb1
<span class="go">Step 10/13 : COPY --from=test1 /tmp /tmp
</span><span class="gp"> ---&gt;</span><span class="w"> </span>Using cache
<span class="gp"> ---&gt;</span><span class="w"> </span>0f861020f1c0
<span class="go">Step 11/13 : COPY --from=test2 /tmp /tmp
</span><span class="gp"> ---&gt;</span><span class="w"> </span>Using cache
<span class="gp"> ---&gt;</span><span class="w"> </span>eea3d212c0b7
<span class="go">Step 12/13 : COPY --from=test3 /tmp /tmp
</span><span class="gp"> ---&gt;</span><span class="w"> </span>Using cache
<span class="gp"> ---&gt;</span><span class="w"> </span>9beba31a0ff6
<span class="go">Step 13/13 : RUN echo "build finished"
</span><span class="gp"> ---&gt;</span><span class="w"> </span>Using cache
<span class="gp"> ---&gt;</span><span class="w"> </span>0986bef3d18f
<span class="go">Successfully built 0986bef3d18f
</span></code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">sleep 10</code> × 4 が直列に実行されるため、ビルドに <strong>最低でも40秒</strong> かかっていました。</p>

<h3 id="並列実行する場合">並列実行する場合</h3>

<p>では次に並列実行してみましょう。</p>

<p>並列実行するには <code class="language-plaintext highlighter-rouge">DOCKER_BUILDKIT=1</code> をセットするか、私の環境の場合 <code class="language-plaintext highlighter-rouge">DOCKER_BUILDKIT</code> の環境変数のセットしなくてもデフォルトで並列実行されるようになっていました。</p>

<p class="info"><strong>Docker Desktop v3.2</strong> を使っている場合は <code class="language-plaintext highlighter-rouge">DOCKER_BUILDKIT=1</code> の環境変数が不要でデフォルトで並列実行されるようになっており、一方、<strong>Docker Desktop v3.1</strong>の場合は並列実行するためには<code class="language-plaintext highlighter-rouge">DOCKER_BUILDKIT=1</code> の環境変数の指定が必要でした。</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>docker build <span class="nt">--no-cache</span> <span class="nb">.</span>
<span class="go">[+] Building 13.9s (14/14) FINISHED
</span><span class="gp"> =&gt;</span><span class="w"> </span><span class="o">[</span>internal] load build definition from Dockerfile                                            0.1s
<span class="gp"> =&gt;</span><span class="w"> </span><span class="o">=&gt;</span> transferring dockerfile: 37B                                                             0.0s
<span class="gp"> =&gt;</span><span class="w"> </span><span class="o">[</span>internal] load .dockerignore                                                               0.1s
<span class="gp"> =&gt;</span><span class="w"> </span><span class="o">=&gt;</span> transferring context: 2B                                                                 0.0s
<span class="gp"> =&gt;</span><span class="w"> </span><span class="o">[</span>internal] load metadata <span class="k">for </span>docker.io/library/alpine:latest                                0.0s
<span class="gp"> =&gt;</span><span class="w"> </span>CACHED <span class="o">[</span>test3 1/2] FROM docker.io/library/alpine                                            0.0s
<span class="gp"> =&gt;</span><span class="w"> </span><span class="o">[</span>test2 2/2] RUN <span class="nb">sleep </span>10.2 <span class="c"># sleep from test2                                              12.4s</span>
<span class="gp"> =&gt;</span><span class="w"> </span><span class="o">[</span>stage-3 2/7] RUN <span class="nb">echo</span> <span class="s2">"build start"</span>                                                        2.3s
<span class="gp"> =&gt;</span><span class="w"> </span><span class="o">[</span>test3 2/2] RUN <span class="nb">sleep </span>10.3 <span class="c"># sleep from test3                                              12.5s</span>
<span class="gp"> =&gt;</span><span class="w"> </span><span class="o">[</span>test1 2/2] RUN <span class="nb">sleep </span>10.1 <span class="c"># sleep from test1                                              12.3s</span>
<span class="gp"> =&gt;</span><span class="w"> </span><span class="o">[</span>stage-3 3/7] RUN <span class="nb">sleep </span>10.0 <span class="c"># sleep from main                                             10.6s</span>
<span class="gp"> =&gt;</span><span class="w"> </span><span class="o">[</span>stage-3 4/7] COPY <span class="nt">--from</span><span class="o">=</span>test1 /tmp /tmp                                                   0.1s
<span class="gp"> =&gt;</span><span class="w"> </span><span class="o">[</span>stage-3 5/7] COPY <span class="nt">--from</span><span class="o">=</span>test2 /tmp /tmp                                                   0.1s
<span class="gp"> =&gt;</span><span class="w"> </span><span class="o">[</span>stage-3 6/7] COPY <span class="nt">--from</span><span class="o">=</span>test3 /tmp /tmp                                                   0.1s
<span class="gp"> =&gt;</span><span class="w"> </span><span class="o">[</span>stage-3 7/7] RUN <span class="nb">echo</span> <span class="s2">"build finished"</span>                                                     0.4s
<span class="gp"> =&gt;</span><span class="w"> </span>exporting to image                                                                          0.2s
<span class="gp"> =&gt;</span><span class="w"> </span><span class="o">=&gt;</span> exporting layers                                                                         0.2s
<span class="gp"> =&gt;</span><span class="w"> </span><span class="o">=&gt;</span> writing image sha256:2dfb39f0fbed99a19fee51b23db685a0878eed7291bce08e88c3226e8fea271d    0.0s
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">sleep 10</code> × 4 が並列に実行されるため、全体として10秒程度でビルドが終了しています。</p>

<h2 id="比較結果">比較結果</h2>

<table>
  <thead>
    <tr>
      <th> </th>
      <th>ビルド時間</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>並列実行しない場合</td>
      <td><strong>50秒</strong></td>
    </tr>
    <tr>
      <td>並列実行する場合</td>
      <td><strong>15秒</strong></td>
    </tr>
  </tbody>
</table>

<p>今回サンプルとなった <code class="language-plaintext highlighter-rouge">Dockerfile</code> の場合、<strong>3倍の高速化</strong> に成功しました。</p>

<h2 id="参考">参考</h2>

<ul>
  <li><a href="https://kotaroooo0-dev.hatenablog.com/entry/2020/06/10/225333">DockerイメージのビルドをBuildKitで並列実行し高速化する - 🤖</a></li>
  <li><a href="https://matsuand.github.io/docs.docker.jp.onthefly/develop/develop-images/multistage-build/">マルチステージビルドの利用 | Docker ドキュメント</a></li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="docker" /><summary type="html"><![CDATA[本記事では、マルチステージビルド構成のDockerfileのビルドの並列実行について紹介したいと思います。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/docker/desktop1.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/docker/desktop1.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Disqusコメント再有効化しました（Disqus有料プランに一度切り替えると二度と無料プランに戻れない）</title><link href="https://blog.toshimaru.net/enable-disqus-again/" rel="alternate" type="text/html" title="Disqusコメント再有効化しました（Disqus有料プランに一度切り替えると二度と無料プランに戻れない）" /><published>2021-03-07T00:00:00+09:00</published><updated>2021-03-07T00:00:00+09:00</updated><id>https://blog.toshimaru.net/enable-disqus-again</id><content type="html" xml:base="https://blog.toshimaru.net/enable-disqus-again/"><![CDATA[<p>タイトルの通り。</p>

<p>本ブログは <a href="https://disqus.com/">Disqus</a> を使ってコメントフォームを設置しています。いや、正確には設置していました。</p>

<blockquote>
  <p>SNSのプラットフォームが十分に成熟している昨今ですから、そもそもコメント欄を設置すること自体がなんとなく時代遅れになってきているのでは？と感じるのですが、Jekyllを使われている皆さんはDisqusを使ってコメント欄を設置されているようなので、それに倣ってDisqusでコメントフォームを設置。</p>
</blockquote>

<p><a href="/new-blog-concept/">Jekyllならここまでできる！ブログをJekyllに移行しました</a></p>

<p>しかしながら、試したいDisqus有料機能があり有料プランに一度トライアル申込みするとトライアル終了後に <strong>広告が表示され続けて消せない</strong> という事態に見舞われました。</p>

<p>サポートチームに問い合わせたのですが <strong>広告を消す唯一の手段は再度有料プランに切り替えることだ</strong> ということらしいです。（今までは無料で広告無しで使えていたのですが、一度有料プランにしてしまうとそれが継続できなくなるっぽい😢</p>

<p>そんなこんなでしばらく Disqus コメントフォームを閉鎖していたのですが、やはりコメントフォームはあったほうがいいかなぁということで、 Disqus の別のアカウントを作成し Disqus のコメントを再設置いたしました。</p>

<p><img src="/images/posts/disqus-comment.png" alt="" /></p>

<p>過去のコメントも移行できれば良かったのですが、どうやら Disqus から Disqus のコメント移行はサポートされていないようだったので、過去コメントは失ってしまいました。（過去にコメントいただいた方すみません🙇 データは旧アカウントには一応残っています…</p>

<p>Disqus側のほうで方針変わって広告が無料プランでも表示されるようになったら再び消す可能性もありますが、しばらくはこちらをご利用いただければと思います。🙏</p>

<h2 id="まとめ">まとめ</h2>

<p><strong>Disqus有料プランに（トライアルでも）一度切り替えると、二度と広告無しの無料プランには戻れない。</strong></p>

<h2 id="参考">参考</h2>

<ul>
  <li><a href="https://help.disqus.com/en/articles/1717293-how-do-i-import-my-old-comments">How do I import my old comments? | Disqus</a></li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="雑記" /><summary type="html"><![CDATA[しばらく Disqus コメントフォームを閉鎖していたのですが、やはりコメントフォームはあったほうがいいかなぁということで、 Disqus の別のアカウントを作成し Disqus のコメントを再設置いたしました。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/disqus.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/disqus.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">CircleCIのベースイメージを次世代イメージ cimg に移行する</title><link href="https://blog.toshimaru.net/use-circleci-cimg/" rel="alternate" type="text/html" title="CircleCIのベースイメージを次世代イメージ cimg に移行する" /><published>2021-03-05T00:00:00+09:00</published><updated>2021-03-05T00:00:00+09:00</updated><id>https://blog.toshimaru.net/use-circleci-cimg</id><content type="html" xml:base="https://blog.toshimaru.net/use-circleci-cimg/"><![CDATA[<p>2020年にCircleCIの次世代イメージ・cimg が登場しました<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>。</p>

<p>個人のRuby on Railsプロジェクトで、従来のcircleci/rubyから次世代イメージであるところの<a href="https://github.com/toshimaru/RailsTwitterClone/pull/920">cimg/rubyに移行</a>してみたので紹介します。</p>

<h2 id="ベースイメージの変更">ベースイメージの変更</h2>

<p><code class="language-plaintext highlighter-rouge">circleci/ruby</code> から <code class="language-plaintext highlighter-rouge">cimg/ruby</code> へ変更します。</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code> executors:
   default:
     working_directory: ~/app
     docker:
<span class="gi">+      - image: circleci/ruby:2.7-node-browsers
</span><span class="gd">-      - image: cimg/ruby:2.7-browsers
</span></code></pre></div></div>

<h2 id="circleci-公式-orb-の利用">CircleCI 公式 Orb の利用</h2>

<p>今回の変更とあわせて、下記２つのCircleCI公式Orbも導入しました。</p>

<ul>
  <li><a href="https://circleci.com/developer/orbs/orb/circleci/ruby">CircleCI Developer Hub - circleci/ruby</a></li>
  <li><a href="https://circleci.com/developer/orbs/orb/circleci/browser-tools">CircleCI Developer Hub - circleci/browser-tools</a></li>
</ul>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">orbs</span><span class="pi">:</span>
  <span class="na">ruby</span><span class="pi">:</span> <span class="s">circleci/ruby@1.1.2</span>
  <span class="na">browser-tools</span><span class="pi">:</span> <span class="s">circleci/browser-tools@1.1.3</span>
</code></pre></div></div>

<h2 id="rspec-の実行">RSpec の実行</h2>

<p>上述のOrbを有効活用することで</p>

<ol>
  <li>bundle Install</li>
  <li>chromedriverインストール</li>
  <li>rspecの実行</li>
</ol>

<p>のstepを下記のようにシンプルに記述することが可能になります。</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">rspec</span><span class="pi">:</span>
  <span class="na">executor</span><span class="pi">:</span> <span class="s">default</span>
  <span class="na">steps</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">checkout</span>
    <span class="pi">-</span> <span class="s">ruby/install-deps</span>
    <span class="pi">-</span> <span class="s">browser-tools/install-chrome</span>
    <span class="pi">-</span> <span class="s">browser-tools/install-chromedriver</span>
    <span class="pi">-</span> <span class="na">run</span><span class="pi">:</span> <span class="s">bin/rails db:schema:load --trace</span>
    <span class="pi">-</span> <span class="s">ruby/rspec-test</span>
</code></pre></div></div>

<h2 id="rubocop-の実行">rubocop の実行</h2>

<p>rubocop の実行も同様に <code class="language-plaintext highlighter-rouge">circleci/ruby</code> Orbに組み込まれており、簡単に実行できます。</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">rubocop</span><span class="pi">:</span>
  <span class="na">executor</span><span class="pi">:</span> <span class="s">default</span>
  <span class="na">steps</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">checkout</span>
    <span class="pi">-</span> <span class="s">ruby/install-deps</span>
    <span class="pi">-</span> <span class="s">ruby/rubocop-check</span>
</code></pre></div></div>

<h2 id="最終形">最終形</h2>

<p>実際に <code class="language-plaintext highlighter-rouge">circleci/ruby</code> から <code class="language-plaintext highlighter-rouge">cimg/ruby</code> へと移行した Pull Request の全体像としては下記のようになります。</p>

<p><a href="https://github.com/toshimaru/RailsTwitterClone/pull/920">Migrate CircleCI image from circleci/ruby to cimg/ruby by toshimaru · Pull Request</a></p>

<h2 id="参考リンク">参考リンク</h2>

<ul>
  <li>紹介したCircleCI Orbs
    <ul>
      <li><a href="https://circleci.com/developer/orbs/orb/circleci/ruby">CircleCI Developer Hub - circleci/ruby</a></li>
      <li><a href="https://circleci.com/developer/orbs/orb/circleci/browser-tools">CircleCI Developer Hub - circleci/browser-tools</a></li>
    </ul>
  </li>
  <li><a href="https://circleci.com/developer/images/image/cimg/ruby">cimg/ruby - CircleCI</a></li>
  <li><a href="https://github.com/CircleCI-Public/circleci-demo-ruby-rails/blob/master/.circleci/config.yml">circleci-demo-ruby-rails/config.yml at master · CircleCI-Public/circleci-demo-ruby-rails</a></li>
</ul>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><a href="https://circleci.com/ja/blog/announcing-our-next-generation-convenience-images-smaller-faster-more-deterministic/">次世代コンビニエンス イメージをリリース: より小さく、速く、確定的</a> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Toshimaru</name></author><category term="circleci" /><category term="ci" /><summary type="html"><![CDATA[2020年にCircleCIの次世代イメージ・cimg が登場しました。個人のRuby on Railsプロジェクトで、従来のcircleci/rubyから次世代イメージであるところのcimg/rubyに移行してみたので紹介します。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/cimg.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/cimg.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Gemfile.lock 内の特定バージョンgemをインストールする bgem コマンド作った</title><link href="https://blog.toshimaru.net/rubygems-bundled-gems/" rel="alternate" type="text/html" title="Gemfile.lock 内の特定バージョンgemをインストールする bgem コマンド作った" /><published>2021-02-28T00:00:00+09:00</published><updated>2021-02-28T00:00:00+09:00</updated><id>https://blog.toshimaru.net/rubygems-bundled-gems</id><content type="html" xml:base="https://blog.toshimaru.net/rubygems-bundled-gems/"><![CDATA[<p><code class="language-plaintext highlighter-rouge">Gemfile.lock</code>に記述された特定バージョンのgemを簡単にインストールできる bgem コマンドを作った。</p>

<p>（gem名としては <a href="https://github.com/rubygems/rubygems">rubygems/rubygems</a> にインスパイアされて <code class="language-plaintext highlighter-rouge">bundled_gems</code> とした）</p>

<p><a href="https://github.com/toshimaru/bundled_gems">toshimaru/bundled_gems: Install gem specified in Gemfile.lock without bundle install.</a></p>

<h2 id="モチベーション">モチベーション</h2>

<p>もともとは、GitHub Actionに <a href="https://docs.github.com/en/actions/guides/caching-dependencies-to-speed-up-workflows">cache機能</a>が来る前に作ったもの。</p>

<p>GitHub Action でCIしていた場合、cache機能がないと毎回 <code class="language-plaintext highlighter-rouge">bundle install</code>走らせる必要があり、巨大プロジェクトだとそこがCIにおけるコストになっていた。</p>

<p>また CI で rubocop だけを走らせている、みたいな場合、全てのライブラリのインストールは必要なく、rubocopと一部のライブラリさえあれば十分で、それ以外のライブラリのインストールはいわば無駄なインストールとなっている。</p>

<p>「だったら必要なライブラリだけインストールしてCI走らせりゃいいじゃん」というのが今回のgemの着想。</p>

<h2 id="使い方">使い方</h2>

<h3 id="インストール">インストール</h3>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>gem <span class="nb">install </span>bundled_gems
</code></pre></div></div>

<p>これで <code class="language-plaintext highlighter-rouge">bgem</code> コマンドが利用可能になる。</p>

<h3 id="gemfilelock-内のgemのインストール">Gemfile.lock 内のgemのインストール</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ bgem install gem_name
</code></pre></div></div>

<p>こうすることで <code class="language-plaintext highlighter-rouge">Gemfile.lock</code>内に記載されている <code class="language-plaintext highlighter-rouge">gem_name</code> のバージョンを読み取ってそれをインストールしてくれる（内部的には <code class="language-plaintext highlighter-rouge">gem install gem_name:version</code> を走らせている）。</p>

<p>例としては、<code class="language-plaintext highlighter-rouge">bgem install rubocop</code>とした場合、<code class="language-plaintext highlighter-rouge">Gemfile.lock</code>に記載されているバージョンの <code class="language-plaintext highlighter-rouge">rubocop</code> をインストールする。</p>

<h2 id="課題">課題</h2>

<ul>
  <li>installするgemの子となる依存gemのバージョンまでは解決してくれない点
    <ul>
      <li>このへん実装しようと思っていたら、先にGitHub公式の <a href="https://github.com/actions/cache">actions/cache</a>が来てしまった次第。。。</li>
    </ul>
  </li>
</ul>

<h2 id="special-thanks">Special Thanks</h2>

<p><code class="language-plaintext highlighter-rouge">Gemfile.lock</code> のパースに関しては、<a href="https://github.com/ledsun">@ledsun</a> さんにサンプルをいただきました<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>。ありがとうございました。</p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><a href="https://github.com/ledsun/orgen">ledsun/orgen</a> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Toshimaru</name></author><category term="ruby" /><category term="gem" /><category term="oss" /><summary type="html"><![CDATA[Gemfile.lockに記述された特定バージョンのgemを簡単にインストールできる bgem コマンドを作った。 toshimaru/bundled_gems: Install gem specified in Gemfile.lock without bundle install.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/bgem.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/bgem.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Dependabot で go modules の自動アップデートをする（go mod tidy付き）</title><link href="https://blog.toshimaru.net/dependabot-gomod/" rel="alternate" type="text/html" title="Dependabot で go modules の自動アップデートをする（go mod tidy付き）" /><published>2021-01-27T00:00:00+09:00</published><updated>2021-01-27T00:00:00+09:00</updated><id>https://blog.toshimaru.net/dependabot-gomod</id><content type="html" xml:base="https://blog.toshimaru.net/dependabot-gomod/"><![CDATA[<p>Dependabot が GitHub の公式機能の一部として利用可能になりました。</p>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">blogged. | DependabotをGitHub公式Dependabotに移行させた - Hack Your Design! <a href="https://t.co/6Mb0XDSaSC">https://t.co/6Mb0XDSaSC</a></p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/1273437750499270659?ref_src=twsrc%5Etfw">June 18, 2020</a></blockquote>

<p>ただ go modules のアップデートに関しては、アップデート時に <code class="language-plaintext highlighter-rouge">go mod tidy</code> を実行してくれないという問題がありました。</p>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">renovate ならオプションでやってくれるみたいなのでGoプロジェクトはこっちに乗り換えるかー<a href="https://t.co/qVbkb5UXlA">https://t.co/qVbkb5UXlA</a></p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/1219800597982932992?ref_src=twsrc%5Etfw">January 22, 2020</a></blockquote>

<p>代替として、<a href="https://github.com/renovatebot/renovate">Renovate</a>という <code class="language-plaintext highlighter-rouge">go mod tidy</code> してくれるアップデーターを使っていました。</p>

<p>しかし、この度 Dependabot が <code class="language-plaintext highlighter-rouge">go mod tidy</code> も実行してくれるようになっていました。</p>

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Dependabot: `go mod tidy` and `vendor` support <a href="https://t.co/x9Wwj0yuMG">https://t.co/x9Wwj0yuMG</a></p>&mdash; GitHub Changelog (@GHchangelog) <a href="https://twitter.com/GHchangelog/status/1318223496569290752?ref_src=twsrc%5Etfw">October 19, 2020</a></blockquote>

<h2 id="dependabot-go-modules設定">Dependabot Go Modules設定</h2>

<p><code class="language-plaintext highlighter-rouge">.github/dependabot.yml</code> ファイルを作って、下記のように記述すればOK。</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># .github/dependabot.yml</span>
<span class="na">version</span><span class="pi">:</span> <span class="m">2</span>
<span class="na">updates</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">package-ecosystem</span><span class="pi">:</span> <span class="s2">"</span><span class="s">gomod"</span>
    <span class="na">directory</span><span class="pi">:</span> <span class="s2">"</span><span class="s">/"</span> <span class="c1"># Location of package manifests</span>
    <span class="na">schedule</span><span class="pi">:</span>
      <span class="na">interval</span><span class="pi">:</span> <span class="s2">"</span><span class="s">weekly"</span>
</code></pre></div></div>

<p>下記のPRの通り、きちんと <code class="language-plaintext highlighter-rouge">go mod tidy</code> をやってくれています。</p>

<p><a href="https://github.com/toshimaru/nyan/pull/104">github.com/toshimaru/nyan/pull/104</a></p>

<h2 id="参考">参考</h2>

<ul>
  <li><a href="https://github.blog/changelog/2020-10-19-dependabot-go-mod-tidy-and-vendor-support/">Dependabot: <code class="language-plaintext highlighter-rouge">go mod tidy</code> and <code class="language-plaintext highlighter-rouge">vendor</code> support - GitHub Changelog</a></li>
  <li><a href="https://github.com/golang/go/wiki/Modules">Modules · golang/go Wiki</a></li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="go" /><summary type="html"><![CDATA[Dependabot が GitHub の公式機能の一部として利用可能になりました。ただ go modules のアップデートに関しては、アップデート時に go mod tidy を実行してくれないという問題がありました。代替として、Renovateという go mod tidy してくれるアップデーターを使っていました。しかし、この度 Dependabot が go mod tidy も実行してくれるようになっていました。]]></summary></entry><entry><title type="html">頑張らない在宅ワーク環境</title><link href="https://blog.toshimaru.net/no-hustle-wfh-setup/" rel="alternate" type="text/html" title="頑張らない在宅ワーク環境" /><published>2020-12-12T00:00:00+09:00</published><updated>2020-12-13T00:00:00+09:00</updated><id>https://blog.toshimaru.net/no-hustle-wfh-setup</id><content type="html" xml:base="https://blog.toshimaru.net/no-hustle-wfh-setup/"><![CDATA[<p>この記事は <a href="https://qiita.com/advent-calendar/2020/lenovo_env">生産性向上のための環境整備2020 【PR】 Lenovo Advent Calendar 2020</a> 12日目の記事です。</p>

<p>Withコロナの時代においてリモートワーク、もっというとWork from Homeーーすなわち在宅ワークは当たり前のものとなりました。</p>

<p>そんな中、少なくない人が＜最強の在宅ワーク環境＞を求めて、インターネットの海を泳いだことでしょう。</p>

<p>その結果、見つかる情報は、</p>

<ul>
  <li>◯万円のディスプレイ （ドン！）</li>
  <li>◯万円のデスク （ドン！）</li>
  <li>◯万円のマイク （ドン！）</li>
  <li>◯万円のヘッドホン （ドン！）</li>
  <li>◯◯万円の高級チェア （ドドン！）</li>
</ul>

<p>みたいなものであったりします。</p>

<p>ーーで、思うわけです。</p>

<p><strong>「そんな金もそんなスペースも家にはねぇ❗💢」</strong></p>

<p>そもそもそんな金をかけて作る在宅ワーク環境は書斎や仕事部屋であったりしますが、そんな贅沢なスペースは誰しもがあるわけではありません。既存の限られたスペースの中でいかに仕事をするためのスペースを確保していくかが重要になります。</p>

<p>また良いモノに高いお金を払う、それ自体は素晴らしいことですし否定はしませんが、誰しもが手元にそんなお金があるわけではありません。在りモノ・もしくは安価に環境が揃えられるのであればそれに越したことはありません。</p>

<p>ということで、今日は「<strong>頑張らない在宅ワーク環境</strong>」ということでまとめてみようと思います。</p>

<h2 id="この記事のゴール">この記事のゴール</h2>

<p>在りモノを活用しつつ、安価にそこそこの在宅ワーク環境を整えること<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>。</p>

<!--
## 前提
## この記事のターゲット
-->

<h2 id="椅子">椅子</h2>

<p>良い椅子・チェアがなく腰痛に悩まされている方も多くいるのでは、と思います。</p>

<p>つい高級チェアなんかを求めがちですが、発想を転換させて「そもそも座らない」とするのはいかがでしょうか？</p>

<p>僕は子ども用に購入した棚が高さとしてちょうど良かったので、そいつをちょいと拝借して雑なスタンディングデスク（？）を構築しました。</p>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">これが在宅ワーク環境のリアルだ！（子ども用に新調した棚の上にむりやり作ったスタンディング環境） <a href="https://t.co/gFMsDeIp75">pic.twitter.com/gFMsDeIp75</a></p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/1260827322568994816?ref_src=twsrc%5Etfw">May 14, 2020</a></blockquote>

<p>ただずっと立っているのも疲れるので（無理に立ち続ける必要はないと思います）、たまに座れる椅子を横に用意しておくと良いかと思います。僕は5年以上前に<a href="https://www.nitori-net.jp/ec/product/8700459s/">ニトリで買った折り畳み椅子</a>をいまだに使い続けています。</p>

<p class="warn"><a href="https://www.esquire.com/jp/menshealth/wellness/a30352943/standing-desk-benefits-truth/">スタンディングデスクを使うことで全てが解決するわけではない</a>ようなので、体勢を変えることやストレッチを挟むなどの工夫は依然必要だと思います。</p>

<p>ただこれだけだと心許ないので気分にあわせて下記を使っています<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup>。</p>

<ul>
  <li><a href="https://amzn.to/3qSEjno">Backjoy</a></li>
  <li><a href="https://amzn.to/37bhfsb">腰サポーター</a></li>
</ul>

<p>これらそのものが腰に効くというよりは、姿勢を矯正することで腰の負担を軽減してくれる、というモノと理解しています。</p>

<p>良い椅子はないけど、仕事時の腰の負担を軽減したいという人にはおすすめのグッズです。</p>

<h2 id="ラップトップスタンド">ラップトップスタンド</h2>

<p>ラップトップスタンドとしては、<a href="https://amzn.to/37dhrqG">BoYataのノートパソコンスタンド</a>を使っています。</p>

<p><a href="https://www.amazon.co.jp/dp/B07VXCVVRM/ref=as_li_ss_il?ie=UTF8&amp;linkCode=li2&amp;tag=toshimaru-22&amp;linkId=84bbc110999727ee8549075d6cd1afae&amp;language=ja_JP" target="_blank"><img border="0" src="//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;ASIN=B07VXCVVRM&amp;Format=_SL160_&amp;ID=AsinImage&amp;MarketPlace=JP&amp;ServiceVersion=20070822&amp;WS=1&amp;tag=toshimaru-22&amp;language=ja_JP" /></a><img src="https://ir-jp.amazon-adsystem.com/e/ir?t=toshimaru-22&amp;language=ja_JP&amp;l=li2&amp;o=9&amp;a=B07VXCVVRM" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p>他の製品より多少値が張るのですが、安いスタンド買って失敗したことのある僕にとって、これは買ってよかったと思える製品でした。</p>

<p>抜群の安定感があることに加え高さ、角度がよい感じに調整できるのが素晴らしいです。</p>

<p class="info">しっかりとしたモニタ &amp; デスクがある方であれば<a href="https://amzn.to/2W87iVX">モニターアーム</a>を取り付けると机上のスペースがスッキリして良さそうです。</p>

<h2 id="サブディスプレイ">サブディスプレイ</h2>

<p>金とスペースがあればウン万円するようなウルトラワイド曲面ディスプレイがほしいところですがそんなスペースも金もありません。</p>

<p>MacユーザーかつiPadをお持ちであれば<a href="https://support.apple.com/ja-jp/HT210380">Sidecar で iPad をサブディスプレイとして使う</a>のがオススメです。</p>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">スタンディングスペースにSidecar iPad用のスタンド買い足して幾分かワーク体験がよくなった <a href="https://t.co/cv1T8akL4j">pic.twitter.com/cv1T8akL4j</a></p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/1318697515466682368?ref_src=twsrc%5Etfw">October 20, 2020</a></blockquote>

<p>ノートパソコンと高さをあわせるため、先程紹介したラップトップスタンドに加え、Amazonで見つけた安いスマホ兼タブレットスタンドを使ってます。</p>

<h2 id="キーボード">キーボード</h2>

<p>現状のラップトップ付属のキーボードに満足しているなら無理に用意する必要はないと思いますが、在宅ワークが状態化して家にいることが多いのであれば、使いやすい・疲れにくいキーボードを一台常備しても良いかと思います。</p>

<p>僕はエンジニアなので元々手元にあったHHKBを使っています。ただ高いしエンジニア向けなので万人におすすめはしません。</p>

<ul>
  <li><a href="/macbook-hhkb-sonshi-style/">俺流 MacBook+HHKB 最強尊師スタイル</a></li>
  <li><a href="/hhkb-hybrid-type-s/">【レビュー】HHKB Hybrid Type-S をしばらく使ってみた感想 - Hack Your Design!</a></li>
</ul>

<p>何をもって使いやすいというのは人それぞれなので、ここでは特にコレ！といったおすすめキーボードは上げません。一番良いのは、実際に店頭にいって試してみて自分に最もあったものを購入することかと思います。</p>

<p class="info">最近だと老舗の<a href="https://amzn.to/2W8pyOV">REALFORCE</a>や<a href="https://amzn.to/3nfbMWz">HHKB</a>でなくとも、1万円以下でも良いキーボードが買えるようなので、いろいろ調べてみると良いかと思います（こだわりすぎると、いわゆるキーボード沼にはまるので注意⚠️）。</p>

<h2 id="音声環境">音声環境</h2>

<p>リモートワークとともにリモート会議も当たり前のものとなりました。Zoom, Google Meet, Slack Callーー使っているリモート会議ツールはそれぞれでしょう。</p>

<p>リモート会議で音声が悪いというのは喋る側、聴く側双方にとってかなりストレスとなります。ですので仕事を円滑に進めるためにも音声にはこだわりましょう。</p>

<p>といっても、音声に関してはそこまでお金をかけなくていいと思っています。みなさんiPhoneは持ってますよね？ じゃあ付属のApple EarPodsを使いましょう。これだけで格段に喋る側、聴く側双方が幸せになれます。</p>

<p>参考. <a href="https://www.itmedia.co.jp/news/articles/2005/01/news118.html">テレワーク用にヘッドセットは買わなくてもいい　“iPhoneのオマケ”が役に立つ - ITmedia NEWS</a></p>

<p>一方、ソフトウェアでノイズを削減するというのも手です。</p>

<p>おすすめは<a href="https://ref.krisp.ai/u/ud778344eb">Krisp</a>です。Krispをかますだけで出力側、入力側の両方でめちゃめちゃノイズを削減してくれます。</p>

<blockquote class="twitter-tweet" data-cards="hidden"><p lang="ja" dir="ltr">最高のリモートミーティング体験を求めて Krisp を試用してみたけど、ホントにものっそい周囲のノイズがカットされていてすごかった<br />Krisp | Noise Cancelling App <a href="https://t.co/bF8bQ8q2xg">https://t.co/bF8bQ8q2xg</a></p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/1240137161405607939?ref_src=twsrc%5Etfw">March 18, 2020</a></blockquote>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">リモート戦国時代を生き抜くために Krisp を年間購読した</p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/1252784955878305792?ref_src=twsrc%5Etfw">April 22, 2020</a></blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>Beforeコロナ時代に、カフェとかからリモート会議繋ぐとめちゃめちゃ周囲のノイズが入っていたのですが、これを使うことでだいぶ改善されました。</p>

<p><a href="https://iwashi.co/2020/03/27/Effective-Remote-Meeting">効果的なリモート会議にするためのプラクティス</a>から音声環境として意識すべき点をいくつか抜粋します。</p>

<ul>
  <li>ヘッドセット、イヤフォンマイクを使う</li>
  <li>ヘッドセットには無線ではなく有線を</li>
  <li>マイクミュートの使用</li>
  <li>マイクは口元に近いほどよい</li>
  <li>ネットワーク回線は安定したものを</li>
</ul>

<h2 id="ネットワーク環境">ネットワーク環境</h2>

<p>在宅ワークにおいて強いネットワーク環境を用意することが大事なのは言うまでもありません。</p>

<p>僕の場合、しばらく<a href="https://amzn.to/348KppT">Google Wifi</a>を使っていたのですが、WiFiルーターを変更することでWifiの速度が劇的に向上しました。</p>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">同じデバイス、回線、時間帯と条件を合わせて２つのWi-Fiルーターで速度テスト。これだけ速度が違うのだからやっぱWi-Fiルーターにはこだわりたい。 <a href="https://t.co/VLn89H1xRS">pic.twitter.com/VLn89H1xRS</a></p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/1337794637289775104?ref_src=twsrc%5Etfw">December 12, 2020</a></blockquote>

<p>（ちなみに早い結果のほうのルーターは<a href="https://amzn.to/3qQbsjr">AtermのWG1200HP3 </a>です）</p>

<p>インターネット回線に関しては家庭によっていろいろな制限がある（マンション共有回線が厳しい、高速なXXX社の回線は引けない、速度制限がある等）ので、すぐには改善できない方も多いかもしれませんが下記などで改善できそうなら検討してみてもいいかもしれません。</p>

<ul>
  <li>WiFiルーターを早いもの・安定するものに変えてみる</li>
  <li>WiFi中継機を仕事スペースの近くに用意してみる</li>
  <li>無線接続を諦めて有線接続にしてみる</li>
  <li>IPoE 接続方式に変えてみる</li>
</ul>

<h2 id="さいごに">さいごに</h2>

<p>みなさんはどんな工夫をして在宅ワーク環境を乗り越えているでしょうか？　もし「頑張らないリモート環境」のコンセプトに合致する良いアイディアがあればぜひ教えてください。😄</p>

<p>余談で実は今年引越ししたのですが、本記事で紹介したようなセットアップさえ整っていれば、下記のとおり引越し後の部屋の片隅に引っ越しダンボールを積み上げて、即席のスタンディング環境を用意することができました。</p>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">最強のWFH環境（2020年） <a href="https://t.co/bwEdUgNUmX">pic.twitter.com/bwEdUgNUmX</a></p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/1325591907687309312?ref_src=twsrc%5Etfw">November 9, 2020</a></blockquote>

<p>最後に在宅ワークのお供として飲んでいるコーヒーグッズのおすすめを置いておきます。</p>

<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=toshimaru-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B00EJADDW4&amp;linkId=71ac203f4b5d035f61d3cf6b8ff11888"></iframe>
<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=toshimaru-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B074MX813G&amp;linkId=a2f0a0cd65b264b7d5319baf90080eb7"></iframe>
<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=toshimaru-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B07VFLG85K&amp;linkId=34e1630223bc31fb9d8a438140d41ba5"></iframe>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>一方で本当に良いと思えるものはケチらずお金を投資してよいと思ってます。 <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>たまに姿勢を変えて考え込んだり、ダラーっとリラックスしつつコーヒーを飲んだりするときにそれらが邪魔になったりするので常に使っているわけではありません。 <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Toshimaru</name></author><category term="wfh" /><category term="productivity" /><summary type="html"><![CDATA[Withコロナの時代においてリモートワーク、もっというとWork from Homeーーすなわち在宅ワークは当たり前のものとなりました。 今日は在りモノを活用しつつ、安価に整えられるそこそこの在宅ワーク環境を「頑張らない在宅ワーク環境」と題してまとめてみようと思います。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/wfh-og.jpg" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/wfh-og.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">git switch養成ギプス 〜git checkoutからの卒業〜</title><link href="https://blog.toshimaru.net/git-switch-restore/" rel="alternate" type="text/html" title="git switch養成ギプス 〜git checkoutからの卒業〜" /><published>2020-12-09T00:00:00+09:00</published><updated>2021-03-18T00:00:00+09:00</updated><id>https://blog.toshimaru.net/git-switch-restore</id><content type="html" xml:base="https://blog.toshimaru.net/git-switch-restore/"><![CDATA[<p>本記事は<a href="https://qiita.com/advent-calendar/2020/git">Git Advent Calendar 2020</a> 9日目の記事です。</p>

<p>git 2.23 にて <code class="language-plaintext highlighter-rouge">git switch</code>, <code class="language-plaintext highlighter-rouge">git restore</code> というコマンドが導入されたことはみなさん既にご存知のことかと思います。</p>

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">One of our favorite open source projects has a big update... Git 2.23 is here!<br /><br />Read all about the latest release and new features ✨<a href="https://t.co/fpQICF8Onc">https://t.co/fpQICF8Onc</a></p>&mdash; GitHub (@github) <a href="https://twitter.com/github/status/1162474366380269568?ref_src=twsrc%5Etfw">August 16, 2019</a></blockquote>

<p>雑に要約すると「<strong><code class="language-plaintext highlighter-rouge">git checkout</code>に機能もたせすぎてわかりにくくなっちゃったから、<code class="language-plaintext highlighter-rouge">git switch</code>, <code class="language-plaintext highlighter-rouge">git restore</code>でわかりやすくしたよ！</strong>」ってことだと思います。</p>

<p>一方、まだ<code class="language-plaintext highlighter-rouge">git switch</code>に移行しきれていないという人も多くいるのではないかと思います。実際、私の周囲でも今も<code class="language-plaintext highlighter-rouge">git checkout</code>を使い続けている人をちらほら見るので、本記事では<code class="language-plaintext highlighter-rouge">git switch</code>に移行していくためのコツを書いてみます。</p>

<h2 id="結論">結論</h2>

<p><strong><code class="language-plaintext highlighter-rouge">switch</code> のaliasを設定しろ、そして<code class="language-plaintext highlighter-rouge">checkout</code>のaliasを捨てろ</strong></p>

<h2 id="git-checkout-only時代">git checkout only時代</h2>

<p><code class="language-plaintext highlighter-rouge">checkout</code>というコマンドは長ったらしいのでaliasを設定して運用していたのではないでしょうか。</p>

<p>僕の場合、下記のようにaliasを設定しました。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># ~/.gitconfig
[alias]
  co = checkout
</code></pre></div></div>

<p>ただこれだと <code class="language-plaintext highlighter-rouge">git checkout</code>をそのまま便利に使い続けてしまうので、思い切ってこいつを削除してしまうと良いかと思います。</p>

<p>もしくは下記のようにメッセージ出すとかでもOK。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># ~/.gitconfig
[alias]
  co = !echo "Use git switch/restore instead!"
</code></pre></div></div>

<h2 id="git-switch時代">git switch時代</h2>

<p><code class="language-plaintext highlighter-rouge">git switch</code>を使いやすくするために下記のようなaliasを設定します。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># ~/.gitconfig
[alias]
  sw = switch
  swc = switch -c
</code></pre></div></div>

<p>こうすることで checkout コマンドが下記のように生まれ変わります。</p>

<h3 id="main-branch-へ切り替え">main branch へ切り替え</h3>

<p>before:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>git checkout main
</code></pre></div></div>

<p>after:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>git switch main
</code></pre></div></div>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">#</span><span class="w"> </span>sw <span class="o">=</span> switch を設定している場合
<span class="gp">$</span><span class="w"> </span>git sw main
</code></pre></div></div>

<h3 id="main-branch-から-hoge-branch-作成">main branch から hoge branch 作成</h3>

<p>before:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">git checkout -b hoge main
</span></code></pre></div></div>

<p>after:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>git switch <span class="nt">-c</span> hoge main
</code></pre></div></div>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">#</span><span class="w"> </span>sw <span class="o">=</span> switch <span class="nt">-c</span>
<span class="go">g swc hoge main
</span></code></pre></div></div>

<h2 id="余談">余談</h2>

<p><code class="language-plaintext highlighter-rouge">git restore</code>に対する良いaliasは今のところ見つかっていません。</p>

<p><code class="language-plaintext highlighter-rouge">git reset</code>とalias的に名前空間かぶつかるので、自分の中でしっくりくる命名できていないんですよね。何かいいアイディアのお持ちの方は教えてください。</p>]]></content><author><name>Toshimaru</name></author><category term="git" /><summary type="html"><![CDATA[git 2.23 にて git switch, git restore というコマンドが導入されたことはみなさん既にご存知のことかと思います。一方、まだgit switchに移行しきれていないという人も多くいるのではないかと思います。実際、私の周囲でも今もgit checkoutを使い続けている人をちらほら見るので、本記事ではgit switchに移行していくためのコツを書いてみます。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/git-switch.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/git-switch.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PR作者を自動でアサインするGitHub Actions, auto-author-assign を作った</title><link href="https://blog.toshimaru.net/auto-author-assign/" rel="alternate" type="text/html" title="PR作者を自動でアサインするGitHub Actions, auto-author-assign を作った" /><published>2020-12-06T00:00:00+09:00</published><updated>2020-12-06T00:00:00+09:00</updated><id>https://blog.toshimaru.net/auto-author-assign</id><content type="html" xml:base="https://blog.toshimaru.net/auto-author-assign/"><![CDATA[<p>本記事は<a href="https://qiita.com/advent-calendar/2020/github-actions">GitHub Actions Advent Calendar 2020</a>６日目の記事です。</p>

<p>今日は作ったGitHub Actions、<a href="https://github.com/toshimaru/auto-author-assign">auto-author-assign</a>の紹介をしたいと思います。</p>

<h2 id="作ったきっかけ">作ったきっかけ</h2>

<p>Pull Request（以下、PRと表記）を作成をしたとき、多くの場合そのPRの担当者（<code class="language-plaintext highlighter-rouge">Assignee</code>）はそのPR作者自身になるかと思います。</p>

<p>その「PR担当者をPR作者にアサインする」アクションを自動化した、というのが今回作成したGitHub Actionsになります。</p>

<h2 id="何が嬉しいか">何が嬉しいか？</h2>

<p>たくさんの人がPRを出しまくる、そんな大規模プロジェクトだとPR一覧を開いたときに</p>

<ul>
  <li>「誰がPRの担当者なのか？」がアイコンで一目でわかるようになる</li>
  <li>（<code class="language-plaintext highlighter-rouge">Author</code> に加えて）<code class="language-plaintext highlighter-rouge">Assignee</code> によるフィルターができるようになる</li>
</ul>

<p>あたりが嬉しさになります。</p>

<p><img src="/images/posts/auto-author-assign/pull-request-list.png" alt="PR list" /></p>

<h2 id="設定">設定</h2>

<p>リポジトリに <code class="language-plaintext highlighter-rouge">.github/workflows/auto-author-assign.yml</code> みたいなファイルを用意して下記のように設定すればOK。</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Auto</span><span class="nv"> </span><span class="s">Author</span><span class="nv"> </span><span class="s">Assign'</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">pull_request_target</span><span class="pi">:</span>
    <span class="na">types</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">opened</span><span class="pi">,</span> <span class="nv">reopened</span><span class="pi">]</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">assign-author</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">uses</span><span class="pi">:</span> <span class="s">toshimaru/auto-author-assign@v1.2.0</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">repo-token</span><span class="pi">:</span> <span class="s2">"</span><span class="s">$"</span>
</code></pre></div></div>

<h3 id="on-pull_request-ではアサイン失敗することがある">on: pull_request ではアサイン失敗することがある</h3>

<p>最初、 <code class="language-plaintext highlighter-rouge">on: pull_request</code> でイベント発火させていたのですが、これだとfolkしたレポジトリからのPRで下記エラーが出てアサインが失敗します。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Error: Resource not accessible by integration
</code></pre></div></div>

<p>なぜなら folk したレポジトリからは <code class="language-plaintext highlighter-rouge">secrets.GITHUB_TOKEN</code> にアクセスできないためです。</p>

<blockquote>
  <p>This event is similar to pull_request, except that it runs in the context of the base repository of the pull request (snip) This means that you can more safely make your secrets available to the workflows triggered by the pull request</p>
</blockquote>

<p>via. <a href="https://docs.github.com/en/free-pro-team@latest/actions/reference/events-that-trigger-workflows#pull_request_target">Events that trigger workflows - GitHub Docs</a></p>

<p>ということで、 <code class="language-plaintext highlighter-rouge">on: pull_request_target</code> 使ってActionを起動させる必要があります。</p>

<h2 id="余談">余談</h2>

<p>本Actionは<a href="https://dev.to/devteam/announcing-the-github-actions-hackathon-on-dev-3ljn">GitHub Actions Hackathon</a>にも提出しました<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>。</p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><a href="https://dev.to/toshimaru/assign-pull-request-author-automatically-with-github-actions-2i9o">Assign pull request author automatically with GitHub Actions - DEV Community 👩‍💻👨‍💻</a> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Toshimaru</name></author><category term="github_actions" /><category term="ci" /><category term="github" /><summary type="html"><![CDATA[本記事はGitHub Actions Advent Calendar 2020６日目の記事です。 今日は作ったGitHub Actions、auto-author-assignの紹介をしたいと思います。Pull Request（以下、PRと表記）を作成をしたとき、多くの場合そのPRの担当者（Assignee）はそのPR作者自身になるかと思います。 その「PR担当者をPR作者にアサインする」アクションを自動化した、というのが今回作成したGitHub Actionsになります。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/auto-author-assign/auto-author-assign.jpg" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/auto-author-assign/auto-author-assign.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">rubocop-rails_config v1.0 をリリースした</title><link href="https://blog.toshimaru.net/rubocop-rails-config-v1/" rel="alternate" type="text/html" title="rubocop-rails_config v1.0 をリリースした" /><published>2020-11-23T00:00:00+09:00</published><updated>2020-11-23T00:00:00+09:00</updated><id>https://blog.toshimaru.net/rubocop-rails-config-v1</id><content type="html" xml:base="https://blog.toshimaru.net/rubocop-rails-config-v1/"><![CDATA[<p><a href="https://github.com/toshimaru/rubocop-rails_config">rubocop-rails_config</a> gem の v1.0 をリリースした。</p>

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">rubocop-rails_config v1.0.0 has been released! rubocop-rails_config now requires rubocop v1.0. <a href="https://t.co/PL2v9POeVC">https://t.co/PL2v9POeVC</a></p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/1320895710254882817?ref_src=twsrc%5Etfw">October 27, 2020</a></blockquote>

<h2 id="今までの流れ">今までの流れ</h2>

<p>もともと作ったきっかけとかの記事。</p>

<blockquote class="twitter-tweet" data-cards="hidden"><p lang="ja" dir="ltr">つくったやつ | Railsと同じRuboCopの設定が利用できるrubocop-rails gemを作った - Hack Your Design! <a href="https://t.co/szG0eLPetS">https://t.co/szG0eLPetS</a></p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/958123075572195331?ref_src=twsrc%5Etfw">January 29, 2018</a></blockquote>

<p>作ったプロジェクト名を公式に譲ってリネームした話。</p>

<blockquote class="twitter-tweet" data-cards="hidden"><p lang="ja" dir="ltr">Blogged. RuboCopチームにgemの名前を譲った話 - Hack Your Design! <a href="https://t.co/vumSGBK3UN">https://t.co/vumSGBK3UN</a></p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/1019011276561833985?ref_src=twsrc%5Etfw">July 17, 2018</a></blockquote>

<h2 id="v10-に上げたきっかけ">v1.0 に上げたきっかけ</h2>

<p>rubocopメンテナの<a href="https://github.com/koic">@koic</a>さんとは、rubocop v1.0 に<a href="https://github.com/toshimaru/rubocop-rails_config/issues/71#issuecomment-617490886">あわせて rubocop-rails_config v1.0 もリリースしようぜ</a>と話していた。</p>

<p>今回rubocop v1.0 がリリースされたことに加えて、Rails本体でも<a href="https://github.com/rails/rails/pull/40436">rubocop v1.0が使用されるようになった</a>ことをきっかけとして rubocop-rails_config も v1.0 にあげることを決めた。</p>

<blockquote class="twitter-tweet" data-cards="hidden"><p lang="ja" dir="ltr">RuboCop 1.0 がリリースされた - koicの日記<a href="https://t.co/ii353h4ZBQ">https://t.co/ii353h4ZBQ</a></p>&mdash; Koichi ITO (@koic) <a href="https://twitter.com/koic/status/1318884005941374979?ref_src=twsrc%5Etfw">October 21, 2020</a></blockquote>

<h2 id="rubocop-rails_config-v101">rubocop-rails_config v1.0.1</h2>

<p>この記事を書いている時点で既に rubocop は v1.3 までリリースされていたので、 v1.3 までのバージョンは<a href="https://github.com/toshimaru/rubocop-rails_config/pull/84">サポートしておいた</a>。</p>

<p><a href="https://github.com/toshimaru/rubocop-rails_config/releases/tag/v1.0.1">Release v1.0.1 · toshimaru/rubocop-rails_config</a></p>]]></content><author><name>Toshimaru</name></author><category term="rubocop" /><summary type="html"><![CDATA[rubocop-rails_config gem の v1.0 をリリースした。 rubocop-rails_config v1.0.0 has been released!]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/rubocop-rails-config/readme.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/rubocop-rails-config/readme.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>