<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://blog.toshimaru.net/atom.xml" rel="self" type="application/atom+xml" /><link href="https://blog.toshimaru.net/" rel="alternate" type="text/html" /><updated>2020-10-07T23:23:14+09:00</updated><id>https://blog.toshimaru.net/atom.xml</id><title type="html">Hack Your Design!</title><subtitle>toshimaruの技術系なブログ</subtitle><author><name>Toshimaru</name></author><entry><title type="html">Kaigi on Railsで「FactoryBot the Right Way」を発表しました</title><link href="https://blog.toshimaru.net/kaigi-on-rails/" rel="alternate" type="text/html" title="Kaigi on Railsで「FactoryBot the Right Way」を発表しました" /><published>2020-10-07T00:00:00+09:00</published><updated>2020-10-07T00:00:00+09:00</updated><id>https://blog.toshimaru.net/kaigi-on-rails</id><content type="html" xml:base="https://blog.toshimaru.net/kaigi-on-rails/">&lt;p&gt;&lt;a href=&quot;https://kaigionrails.org/&quot;&gt;Kaigi on Rails&lt;/a&gt;で「FactoryBot the Right Way」というタイトルで発表しました&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h2 id=&quot;スライド&quot;&gt;スライド&lt;/h2&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;8084985a97ce4b6685d8528388da9779&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;アーカイブ動画&quot;&gt;アーカイブ動画&lt;/h2&gt;

&lt;p&gt;動画もYouTubeにアーカイブとして上がっておりますので、音声付きで聴きたい方はこちらをどうぞ。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;先行して &lt;a href=&quot;https://twitter.com/toshimaru_e?ref_src=twsrc%5Etfw&quot;&gt;@toshimaru_e&lt;/a&gt; さんの動画をアップしました！他のセッションも順次公開していきますのでお楽しみに！ &lt;a href=&quot;https://twitter.com/hashtag/kaigionrails?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#kaigionrails&lt;/a&gt;&lt;a href=&quot;https://t.co/duhoF1Xu1S&quot;&gt;https://t.co/duhoF1Xu1S&lt;/a&gt; &lt;a href=&quot;https://t.co/y3PRYVRlO8&quot;&gt;https://t.co/y3PRYVRlO8&lt;/a&gt;&lt;/p&gt;&amp;mdash; Kaigi on Rails (@kaigionrails) &lt;a href=&quot;https://twitter.com/kaigionrails/status/1312397413592653824?ref_src=twsrc%5Etfw&quot;&gt;October 3, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;感想&quot;&gt;感想&lt;/h2&gt;

&lt;p&gt;今回は初のビデオ録画登壇でした。今までのリモート登壇（&lt;a href=&quot;/career-strategy-for-around-thirty-engineer/&quot;&gt;アラサーエンジニアの生存戦略&lt;/a&gt;、&lt;a href=&quot;/how-to-deal-with-fat-model/&quot;&gt;Fat Modelの倒し方&lt;/a&gt;）は基本Zoomを使ったLIVE登壇だったので、今回初めて録画登壇を経験はできたのは良かったと思います。&lt;/p&gt;

&lt;p&gt;録画のセットアップとしては下記を利用しました。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;プレゼンテーションツール: Keynote&lt;/li&gt;
  &lt;li&gt;スライド録画+音声録音: Keynoteのレコーディング機能 (with Krisp)
    &lt;ul&gt;
      &lt;li&gt;参考: &lt;a href=&quot;https://support.apple.com/ja-jp/guide/keynote/tan8a5df9cc5/mac&quot;&gt;MacのKeynoteでオーディオを録音する - Apple サポート&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;スピーカー側の動画撮影: iPad&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Kaigi on Railsのコアコンセプトは 「初学者から上級者までが楽しめるWeb系の技術カンファレンス」 です。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ということでしたが、今回の発表の内容的には初心者もそこそこ楽しめる内容になっていのではないでしょうか。参考になったのなら幸いです&lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://twitter.com/hashtag/kaigionrails?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#kaigionrails&lt;/a&gt; 発表資料チラ見せ。FactoryBotをより上手に使いこなしたい初級者〜中級者レベルの方にはそこそこ有益な情報になっていると思いますので是非😊 &lt;a href=&quot;https://t.co/dQDOzP3BpX&quot;&gt;pic.twitter.com/dQDOzP3BpX&lt;/a&gt;&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/1311079864070369280?ref_src=twsrc%5Etfw&quot;&gt;September 29, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;おわり&quot;&gt;おわり&lt;/h2&gt;

&lt;p&gt;Kaigi on Railsをオンラインで開催してくださったチーフオーガナイザーの &lt;a href=&quot;https://twitter.com/okuramasafumi&quot;&gt;@okuramasafumi&lt;/a&gt; をはじめ、運営スタッフの皆さま、ありがとうございました。&lt;/p&gt;

&lt;h2 id=&quot;参考リンク&quot;&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;公式ドキュメント
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/thoughtbot/factory_bot/blob/master/GETTING_STARTED.md&quot;&gt;GETTING_STARTED.md&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/thoughtbot/factory_bot/blob/master/NAME.md&quot;&gt;Project Naming History&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ベンチマークソースコード: &lt;a href=&quot;https://github.com/toshimaru/factory-bot-the-right-way&quot;&gt;toshimaru/factory-bot-the-right-way&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://fukabori.fm/episode/13&quot;&gt;13. ペアプロやテストの疑問とか、ソフトウェアエンジニアの育成とか | fukabori.fm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://sinsoku.hatenablog.com/entry/2017/04/09/214728&quot;&gt;Rails アンチパターン - 錆びついたファクトリー (factory_girl) - アジャイルSEの憂鬱&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://magazine.rubyist.net/articles/kaigi_on_rails/index.html&quot;&gt;Rubyist Magazine: Kaigi on Rails 特集号&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;たぶん文法的には「FactoryBot in the right way」ってのが正しい気がするけど、こちらがゴロが良かったのでご愛嬌ということで。。。 &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;RailsDM2018で発表したこちらの内容もあわせて参考にしていただけると :pray: &lt;a href=&quot;/rdm2018-active-record-anti-patterns/&quot;&gt;railsdm2018で「ActiveRecordデータ処理アンチパターン」を発表しました&lt;/a&gt; &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Toshimaru</name></author><category term="presentation" /><category term="rspec" /><category term="rails" /><summary type="html">Kaigi on Railsで「FactoryBot the Right Way」というタイトルで発表しました1。 たぶん文法的には「FactoryBot in the right way」ってのが正しい気がするけど、こちらがゴロが良かったのでご愛嬌ということで。。。 &amp;#8617;</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/kaigi-on-rails.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/kaigi-on-rails.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">「アラサーエンジニアの生存戦略」を発表しました</title><link href="https://blog.toshimaru.net/career-strategy-for-around-thirty-engineer/" rel="alternate" type="text/html" title="「アラサーエンジニアの生存戦略」を発表しました" /><published>2020-08-09T00:00:00+09:00</published><updated>2020-09-11T00:00:00+09:00</updated><id>https://blog.toshimaru.net/career-strategy-for-around-thirty-engineer</id><content type="html" xml:base="https://blog.toshimaru.net/career-strategy-for-around-thirty-engineer/">&lt;p&gt;&lt;a href=&quot;https://medpeer.connpass.com/event/181835/&quot;&gt;リードエンジニアから学ぶMedPeerのプロダクト開発&lt;/a&gt;という僕が所属する企業のイベントで、「&lt;a href=&quot;https://speakerdeck.com/toshimaru/career-strategy-for-around-thirty-engineer&quot;&gt;アラサーエンジニアの生存戦略&lt;/a&gt;」というタイトルで発表しました。&lt;/p&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;314bb46f6f1e423d98dddadd84e9bc77&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;発表の経緯&quot;&gt;発表の経緯&lt;/h2&gt;

&lt;p&gt;もともとの発表の着想となったエントリはこちらになります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/like-a-sponge-as-an-engineer/&quot;&gt;技術者としてスポンジであり続けること　あるいは老害回避戦略の話&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;エンジニアリングとは常に学習し続けることである。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;思うに、コードを書かず学習意欲を失ってしまった35歳のおじさんたちが自分がコードが書けないこと・学ばないことの言い訳として言い出し始めたのがこの「35歳定年説」の真実じゃないだろうか。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;この文章は僕自身が若手とは言えない年齢となり今後シニアな立場へとなっていく中で「自分は老害化していくのではないか」という危機感から自戒も込めて書いたものである。願わくば五年後十年後自分がここに書いたような老害になっていないことを祈る。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;この記事のトピックとしては、「エンジニアの学習」「老害にならないためのマインド」になります。&lt;/p&gt;

&lt;p&gt;これらのトピックに「キャリア論」を加えて、「エンジニアにとってのキャリア戦略」みたいな話はどこかでまとめてみたいなー、という思いがありました。&lt;/p&gt;

&lt;p&gt;そんな中、僕の所属する企業から「会社ミートアップを開催するので、シニアエンジニア向けのネタで登壇してくれないか？」という話が舞い込んできたので、今回の発表に至ったという感じです。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;会社主催イベントの登壇依頼来ているけど、同僚が十分にテックトークしてくれそうなので、僕はアラサーエンジニア向けのエモエモ・エンジニアキャリアトークでもしようかと画策している&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/1281043327958147072?ref_src=twsrc%5Etfw&quot;&gt;July 9, 2020&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;また、僕自身がアラサーといえる世代ではなくなってきて（35歳に接近してきていて）自分の今の考えをスナップショットとして残しておきたかったという思いもあります。この発表内容がアラフォーになっても通じるものかは今後自分自身の身を持って検証していきたいと思っています。&lt;/p&gt;

&lt;p&gt;正直、この手のキャリア論みたいなものはおっさんの成功体験語りみたいなものになりがちな気がしていて（それこそ老害トークですね）、そうはならないように気をつけたつもりです。&lt;/p&gt;

&lt;p&gt;なのでスライド中にも書いた通り、歩むキャリアに「正解はない」というスタンスですし、最終的に「自分の道は自分で決める」というスタンスです。安易な正解はないとした上で、確固たる軸は確立しておきましょうねという話です。&lt;/p&gt;

&lt;h2 id=&quot;発表のメインメッセージ&quot;&gt;発表のメインメッセージ&lt;/h2&gt;

&lt;p&gt;今回の発表のメインメッセージとしては要約すると下記の通りです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;技術の判断軸（審美眼）を持ち、継続的に学習しましょう&lt;/li&gt;
  &lt;li&gt;自身の仕事の価値観（仕事観）を明確にし、成長できるキャリアを歩みましょう&lt;/li&gt;
  &lt;li&gt;成長のためにチャレンジし続けよう&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;審美眼という言葉は &lt;a href=&quot;https://twitter.com/t_wada&quot;&gt;twada&lt;/a&gt; さんからお借りいたしました。詳しくは&lt;a href=&quot;https://speakerdeck.com/twada/worse-is-better-understanding-the-spiral-of-technologies-2019-edition&quot;&gt;スライド&lt;/a&gt;と合わせて下記Podcastを聴いてみるとよいかと思います。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://fukabori.fm/episode/28&quot;&gt;28. 技術選定の審美眼(1) w/ twada | fukabori.fm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://fukabori.fm/episode/29&quot;&gt;29. 技術選定の審美眼(2) w/ twada | fukabori.fm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;お前の場合どうなのよ&quot;&gt;お前の場合どうなのよ？&lt;/h2&gt;

&lt;p&gt;おっさんの成功体験語りにならないようにあえて自分の話は発表内には多くは入れませんでした。ただ本発表に至る原体験としては僕自身の20代の経験が元になっていることは間違いありません。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://files.speakerdeck.com/presentations/314bb46f6f1e423d98dddadd84e9bc77/slide_12.jpg&quot; alt=&quot;全能感&quot; /&gt;&lt;/p&gt;

&lt;p&gt;これとかまさに20代中盤くらいの僕です。&lt;/p&gt;

&lt;p&gt;若手時代は黙ってても成長してきました。時期的には丁度新卒3~5年くらいですかね。そりゃそうだ、知らないことしかない。ただ目の前の技術を追いかけるだけで十分成長してきた。ある程度成長実感を得た、さぁどうする？　周囲を見渡す、そこにはさらに広い世界があった。自分の小ささを実感する、20代後半。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://files.speakerdeck.com/presentations/314bb46f6f1e423d98dddadd84e9bc77/slide_19.jpg&quot; alt=&quot;憂鬱&quot; /&gt;&lt;/p&gt;

&lt;p&gt;そんなときに僕がとったチャレンジが「マネージャーへの挑戦」でした。単に技術者としてやっているだけじゃ成長に陰りが出てきた。＜非連続的な成長＞へとつながるNext Dotがマネージャーへの挑戦だったわけです。実際振り返ってみると、これは僕にとっての大きな成長へとつながったと実感しています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://files.speakerdeck.com/presentations/314bb46f6f1e423d98dddadd84e9bc77/slide_59.jpg&quot; alt=&quot;チャレンジする&quot; /&gt;&lt;/p&gt;

&lt;p&gt;（一方で、この手のチャレンジは誰しもが即座にできるわけでなくタイミング・運も重要なので、そういう意味で僕は運が良かったと思っています）&lt;/p&gt;

&lt;h2 id=&quot;ロールモデルになっている人たち&quot;&gt;ロールモデルになっている人たち&lt;/h2&gt;

&lt;p&gt;発表内ではバイネームで言及しなかったものの、いくつかロールモデルになっている人たちを補足します&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h3 id=&quot;35歳定年説とか関係なさそうな人&quot;&gt;35歳定年説とか関係なさそうな人&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Miyagawa さん
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://rebuild.fm/&quot;&gt;Rebuild.fm&lt;/a&gt;のホストの方&lt;/li&gt;
      &lt;li&gt;昔からPerl Hackerとして有名で、現Fastly勤務、アメリカ在住&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/kazuho&quot;&gt;kazuho&lt;/a&gt; さん
    &lt;ul&gt;
      &lt;li&gt;同Fastly勤務、&lt;a href=&quot;https://github.com/h2o/h2o&quot;&gt;H2O&lt;/a&gt;の作者&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://blog.kazuhooku.com/2017/01/fastly.html&quot;&gt;OSS活動が転職のきっかけになった&lt;/a&gt;のは良い話&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mattn&quot;&gt;mattn&lt;/a&gt; さん
    &lt;ul&gt;
      &lt;li&gt;OSSの世界で大活躍している方&lt;/li&gt;
      &lt;li&gt;本当に幅広くOSSコントリビュートされていてすごいなぁと尊敬します&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Guido van Rossum
    &lt;ul&gt;
      &lt;li&gt;Python の作者。GoogleからDropboxに転職&lt;/li&gt;
      &lt;li&gt;引退に至る最後の最後までエンジニアリングし続けた人。カッコイイ！
        &lt;ul&gt;
          &lt;li&gt;
            &lt;blockquote&gt;
              &lt;p&gt;While mypy was one of the projects Guido spent a lot of his time on, he also cared deeply about making engineering culture, both at Dropbox and in the Python community, more inclusive for women.&lt;/p&gt;
            &lt;/blockquote&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://blog.dropbox.com/topics/company/thank-you--guido&quot;&gt;Thank you, Guido | Dropbox Blog&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;登大遊さん
    &lt;ul&gt;
      &lt;li&gt;最近だとこのニュースが話題になりました: &lt;a href=&quot;https://xtech.nikkei.com/atcl/nxt/column/18/00001/04192/&quot;&gt;天才プログラマーのテレワークシステムに4万人殺到、開発費わずか65万円&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;彼のすごさはこの記事に集約されています。絶対マネはできませんが…
        &lt;ul&gt;
          &lt;li&gt;
            &lt;blockquote&gt;
              &lt;p&gt;僕は、1 日に少なくとも 3,000 行程度、多く書くときで 10,000 行以上のプログラムを書くことができる。その結果、多い月で 10 万行 / 月くらいである。なお、言語は書くソフトウェアの性質上、大半が C 言語である。&lt;/p&gt;
            &lt;/blockquote&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://softether.hatenadiary.org/entry/20070324/p1&quot;&gt;論理的思考の放棄 - 登 大遊 (Daiyuu Nobori) の個人日記&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;楽しんで技術学習している人&quot;&gt;楽しんで技術学習している人&lt;/h3&gt;

&lt;p&gt;「継続的学習において楽しむことは重要だ」と発表しましたが、楽しんで学習を継続してる方で参考にしたい方でいうと下記です。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/DQNEO&quot;&gt;ドキュネオ&lt;/a&gt;さん
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://qiita.com/DQNEO/items/2efaec18772a1ae3c198&quot;&gt;Goコンパイラをゼロから作って147日でセルフホストを達成した - Qiita&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;楽しんで続けていたからこそできる偉業だなぁと思いました&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=d0mYwTj2O1M&quot;&gt;builderscon の発表&lt;/a&gt;も素晴らしい&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/tomzoh&quot;&gt;tomzoh&lt;/a&gt; さん
    &lt;ul&gt;
      &lt;li&gt;PHPer Kaigi Organizerの方（いろいろなイベントのオーガナイザーやってらっしゃってすごい）&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.hasegawa-tomoki.com/blog/2018/10/16/php-terminal-nes-emulator/&quot;&gt;PHPで動くファミコンエミュレータを作った&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;PHPでファミコンエミュレータを作ってみようという発想がすごいし、達成するのもすごい&lt;/li&gt;
          &lt;li&gt;（とむぞーさん以外にもファミコンエミュレータを作ってらっしゃる方は多くいるようです。こういった興味の持てる学習トピックを１つ見つけてやり込むのは良さそうですね）&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/Lily0727K&quot;&gt;Lillian&lt;/a&gt; さん
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://note.com/neko_chan0214/n/n3a64bc1e1412&quot;&gt;医師 → Google という異色の経歴&lt;/a&gt;の方&lt;/li&gt;
      &lt;li&gt;地頭よければソフトウェアエンジニアへの転身も華麗にできるという良い例&lt;/li&gt;
      &lt;li&gt;プログラミング初学者は学習リソースとか学習方法は参考にしてみていいかもしれません&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;エンジニア35歳定年説の嘘&quot;&gt;「エンジニア35歳定年説」の嘘&lt;/h2&gt;

&lt;p&gt;上記に紹介させていただいた方々はほんのごく一部ですが、そんな方々を見ていて「もう35歳だしコードは書けないわぁ」とか「新しいこと学習できなくなってきたわぁ」とか言ってられないのは明白ですね。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://files.speakerdeck.com/presentations/314bb46f6f1e423d98dddadd84e9bc77/slide_22.jpg&quot; alt=&quot;定年説&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;アラフォーアラフィフに向けて&quot;&gt;アラフォー、アラフィフに向けて&lt;/h2&gt;

&lt;p&gt;一方で「生涯コードを書き続ける」ことだけが正解だとは思っていなくて、Linux作者のリーナス・トーバルズやRuby作者のMatzのように&lt;a href=&quot;https://ja.wikipedia.org/wiki/%E5%84%AA%E3%81%97%E3%81%84%E7%B5%82%E8%BA%AB%E3%81%AE%E7%8B%AC%E8%A3%81%E8%80%85&quot;&gt;優しい終身の独裁者&lt;/a&gt;として存在を確立している人もいます。彼らは今でこそ最前線でコードは書いてはいませんが、コミュニティにとって重要な存在であることは言うまでもないでしょう。&lt;/p&gt;

&lt;p&gt;またエンジニアキャリアパスの上を目指す人は技術以外の知識を深める必要が出てくるでしょう。具体的には組織運営の手法であったり経営に関する知識であったりします。アラフォー、アラフィフに向けてジョブグレードを高めていきたい人にとってはより多角的な知識・経験が求められるようになっていく気がしています。&lt;/p&gt;

&lt;p&gt;今回の発表は僕自身がアラサーだったのでターゲットとしてもアラサー世代になりましたが、アラフォー世代にも通じるところが多くあるとは考えているので&lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;（アラフィフ世代に通じるかは自信がないですが）、今後僕がアラフォー世代になったときに本発表内容がどれだけ通じるのかは僕自身検証していきたいと思っています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://files.speakerdeck.com/presentations/314bb46f6f1e423d98dddadd84e9bc77/slide_38.jpg&quot; alt=&quot;雑キャリアパス&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;アンサーソング&quot;&gt;アンサーソング&lt;/h2&gt;

&lt;p&gt;元同僚が良いツッコミを書いてくれました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://note.com/imagawa_yakata/n/na2ddc9126f7f&quot;&gt;アラサー終盤エンジニアの生存戦略｜いまがわ｜note&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;しかしこうした「成長」を最も重視したキャリアのモデルはアラサーエンジニア全般に適したものでは無い。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;要するにとしまるさんの発表はエンジニアの「成長戦略」であって「生存戦略」ではないと言いたかった&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;指摘としてはもっともで、発表タイトルとしては＜生存戦略＞というキャッチーな言葉をあえて選びましたが、正しくタイトルを付けると＜成長戦略＞であり、もっと言うなら「アラサーエンジニアの成長のためのキャリア戦略」と言うべきものでしょう。&lt;/p&gt;

&lt;p&gt;本発表は「成長したいと思っているエンジニア」を暗黙的なターゲットとしており、「別に成長とかどうでもいいし〜」みたいな人にはあまり響かない・刺さらないかもしれません。一方、そんな人にも共通して言えることがあって、それが「キャリアの軸・仕事観は持っておく」ということです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://files.speakerdeck.com/presentations/314bb46f6f1e423d98dddadd84e9bc77/slide_67.jpg&quot; alt=&quot;ぶれない軸&quot; /&gt;&lt;/p&gt;

&lt;p&gt;それさえハッキリしていれば特に僕から言うこともないし、迷うこともないと思うんですよね。&lt;/p&gt;

&lt;p&gt;例えば「俺は何より金が重要じゃ！」って人はお賃金だけを指標として持ってキャリアを選択していけばいいし、「この事業にフルコミットしたいんじゃ！他の要素はどうでもええ！」って人は自分の目先の成長ではなくフルコミットしたい事業成長に全力を注ぐべきだと思います（えてしてそれが自分の成長にも結果的につながるケースが多い）。むしろそちらのほうが変に＜成長＞に束縛されず楽しく生きていけそうで健全とさえ感じます。&lt;/p&gt;

&lt;p&gt;発表内のメッセージとしては「エンジニア業界で長く生存し続けられるのは最後まで学習しつづけるヤツだ」という意識高い系メッセージでしたが、そもそも成長しなくともある程度技術力があればしばらくやっていけると正直思いますし、「成長しないキャリアを選択した」のであればそれはそれで全く否定すべきものではないでしょう。&lt;/p&gt;

&lt;p&gt;最終的にやっぱり一番大事なのは「&lt;strong&gt;自分の道は自分で決める&lt;/strong&gt;」、これに尽きると思います。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://files.speakerdeck.com/presentations/314bb46f6f1e423d98dddadd84e9bc77/slide_68.jpg&quot; alt=&quot;自分の道は自分で決める&quot; /&gt;&lt;/p&gt;

&lt;!-- （説教臭いのでカット）年齢を経るにつれ人間の価値観は良い意味でも悪い意味でも固定化していきます。（僕の発表含め）それに口出しする人がいるかもしれません。それに「うるせぇ」と返せるくらいの軸を持ちましょう。他人に耳を貸すなという意味ではありません。他の人の話を聴いた上でそれを自分の中で消化（昇華）して、「これが俺の人生だ」って納得して、胸を張って言える人生が素敵だなぁと思います。 --&gt;

&lt;h2 id=&quot;発表を終えての感想&quot;&gt;発表を終えての感想&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;今回はエモめ成分多めの発表だったので Keynote を使ってスライドを作成しました
    &lt;ul&gt;
      &lt;li&gt;図・絵を自由に入れられたり、レイアウトを柔軟に変えたりできるのは良い（markdown のみで作ったスライドだとこうもいきません）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;画像素材は &lt;a href=&quot;https://pixabay.com/ja/&quot;&gt;pixabay&lt;/a&gt; を使わせていただきました
    &lt;ul&gt;
      &lt;li&gt;プレゼン内で画像素材を適切に使うことで、オーディエンスに内容をよりイメージさせやすくすることができます&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;リモート発表は&lt;a href=&quot;/how-to-deal-with-fat-model-after/&quot;&gt;銀座Railsの前回&lt;/a&gt;に引き続き二回目だったのですんなりできました
    &lt;ul&gt;
      &lt;li&gt;やっぱりオーディエンスの顔が見れないとか、反応ないとかは悲しいけど、これがIT系勉強会のニューノーマルだと思って落ち着くまではこのスタイルを続けたいと思います&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;ここではあくまで知名度のある人だけ書きます。ですが有名であることがロールモデルになる人の必要条件というわけではありません。 &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;実際、はてブコメントを観ていると「アラサーより上の世代だけどわかる」というコメントが寄せられていました。 &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Toshimaru</name></author><category term="presentation" /><summary type="html">リードエンジニアから学ぶMedPeerのプロダクト開発という僕が所属する企業のイベントで、「アラサーエンジニアの生存戦略」というタイトルで発表しました。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/career/slide_0.jpg" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/career/slide_0.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Rubyで数値の0埋め</title><link href="https://blog.toshimaru.net/ruby-0-padding/" rel="alternate" type="text/html" title="Rubyで数値の0埋め" /><published>2020-06-30T00:00:00+09:00</published><updated>2020-06-30T00:00:00+09:00</updated><id>https://blog.toshimaru.net/ruby-0-padding</id><content type="html" xml:base="https://blog.toshimaru.net/ruby-0-padding/">&lt;p&gt;Rubyで数値の0埋めするときの書き方をよく忘れるのでメモ。&lt;/p&gt;

&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;結論としては下記のように書くとよい。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;number: %09&amp;lt;number&amp;gt;d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;number: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; &quot;number: 000000001&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;rubyで数値の0埋め&quot;&gt;Rubyで数値の0埋め&lt;/h2&gt;

&lt;p&gt;Rubyで数値の0埋めしようと思うとこんな感じのコードになる。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;number: %09d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; &quot;number: 000000001&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.ruby-lang.org/ja/latest/doc/print_format.html&quot;&gt;sprintf フォーマット&lt;/a&gt;はC由来の関数だ。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%09d&lt;/code&gt;の意味としては&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%d&lt;/code&gt;が数値、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;09&lt;/code&gt;は9桁の0埋めという意味になる。&lt;/p&gt;

&lt;p&gt;また、&lt;a href=&quot;https://docs.ruby-lang.org/ja/latest/class/String.html#I_--25&quot;&gt;String#%&lt;/a&gt;を使う方法もある。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sprintf&lt;/code&gt;と同じ挙動をする。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;number: %09d&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; &quot;number: 000000001&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;こちらのほうがより簡潔な表記だ。&lt;/p&gt;

&lt;h2 id=&quot;rubocopのオススメ書き方&quot;&gt;RuboCopのオススメ書き方&lt;/h2&gt;

&lt;p&gt;上述の書き方でも問題ないのだが、rubocop（デフォルト設定）に通すと下記の通り怒られる。&lt;/p&gt;

&lt;h3 id=&quot;favor-format-over-sprintf&quot;&gt;Favor format over sprintf&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C: Style/FormatString: Favor format over sprintf.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sprintf&lt;/code&gt;ではなく&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;format&lt;/code&gt;を使え、と。また &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String#%&lt;/code&gt; を使った書き方も下記の指摘がくる。&lt;/p&gt;

&lt;h3 id=&quot;favor-format-over-string&quot;&gt;Favor format over String#%&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C: Style/FormatString: Favor format over String#%.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ちなみに&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;format&lt;/code&gt;は&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sprintf&lt;/code&gt;のエイリアス関数。&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;rb_define_global_function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sprintf&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_sprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rb_define_global_function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;format&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_sprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ref. &lt;a href=&quot;https://github.com/ruby/ruby/blob/946e5cc668f66a4a0b79461047d3fcba8b71eef0/object.c#L4630-L4631&quot;&gt;ruby/object.c at 946e5cc668f66a4a0b79461047d3fcba8b71eef0 · ruby/ruby&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;rubocopの指摘に従って下記のように修正してみる。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;number: %09d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; &quot;number: 000000001&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;prefer-annotated-tokens&quot;&gt;Prefer annotated tokens&lt;/h3&gt;

&lt;p&gt;これでもrubocopに下記のように怒られる。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C: Style/FormatStringToken: Prefer annotated tokens (like %&amp;lt;foo&amp;gt;s) over unannotated tokens (like %s).
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;foo&amp;gt;&lt;/code&gt;のようなannotated tokenを使って名前を与えてやれ、とのことらしい。&lt;/p&gt;

&lt;h2 id=&quot;結論&quot;&gt;結論&lt;/h2&gt;

&lt;p&gt;rubocopの指摘を乗り越えて、最終的には下記で完成です。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;number: %09&amp;lt;number&amp;gt;d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;number: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; &quot;number: 000000001&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Toshimaru</name></author><category term="ruby" /><summary type="html">Rubyで数値の0埋めするときの書き方をよく忘れるのでメモ。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/ruby/zero-padding.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/ruby/zero-padding.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">JekyllのGitHub PagesへのデプロイをGitHub Actionsを自動化する</title><link href="https://blog.toshimaru.net/jekyll-deploy-with-github-actions/" rel="alternate" type="text/html" title="JekyllのGitHub PagesへのデプロイをGitHub Actionsを自動化する" /><published>2020-06-22T00:00:00+09:00</published><updated>2020-06-22T00:00:00+09:00</updated><id>https://blog.toshimaru.net/jekyll-deploy-with-github-actions</id><content type="html" xml:base="https://blog.toshimaru.net/jekyll-deploy-with-github-actions/">&lt;p&gt;Jekyll製&lt;a href=&quot;https://blog.toshima.ru/&quot;&gt;英語ブログ&lt;/a&gt;のGitHub PagesへのデプロイをGitHub Actionsで自動化したのでそのメモ。&lt;/p&gt;

&lt;h2 id=&quot;今までのデプロイ方式&quot;&gt;今までのデプロイ方式&lt;/h2&gt;

&lt;p&gt;今までどうページソースをGitHub Pagesに自動デプロイしていたかでいうと、&lt;a href=&quot;/autodeploy-jekyll/&quot;&gt;Jekyllでgit pushをフックしてGithub Pagesへ自動デプロイ&lt;/a&gt;するようにしていた。&lt;/p&gt;

&lt;p&gt;この方法でも全く問題ないがセットアップがやや面倒。なので英語ブログは手動デプロイ状態のまま放置していた。今はGitHub Actionsを使ったデプロイ方式がナウそうだ、とのことで重い腰を上げてその方式をトライ。&lt;/p&gt;

&lt;h2 id=&quot;新しいデプロイ方式&quot;&gt;新しいデプロイ方式&lt;/h2&gt;

&lt;p&gt;対応したPull Request: &lt;a href=&quot;https://github.com/toshimaru/blog.toshima.ru/pull/160&quot;&gt;Deploy Automation with GitHub Actions · toshimaru/blog.toshima.ru&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;やっていることとしては至ってシンプル。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;masterブランチで変更があった場合にActionをトリガー&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle install&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll build&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;生成した静的コンテンツのデータを&lt;a href=&quot;https://github.com/peaceiris/actions-gh-pages&quot;&gt;peaceiris/actions-gh-pages&lt;/a&gt;を使って&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt;ブランチにデプロイ&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;github-actions-configuration&quot;&gt;GitHub Actions Configuration&lt;/h2&gt;

&lt;p&gt;実際のyamlファイルの設定は下記の通り。&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;master&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;gh-pages-deploy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/checkout@v2&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Set up Ruby&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/setup-ruby@v1&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;ruby-version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2.7&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bundle install&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;bundle config set path 'vendor/bundle'&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;bundle install&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Jekyll Build&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bundle exec jekyll build&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deploy&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;peaceiris/actions-gh-pages@v3&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;personal_token&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;publish_dir&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./_site&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;従来と比べて良い点&quot;&gt;従来と比べて良い点&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt;ブランチにpushするにあたって&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;secrets.GITHUB_TOKEN&lt;/code&gt; でトークンをセットするだけ。&lt;/p&gt;</content><author><name>Toshimaru</name></author><category term="jekyll" /><category term="github" /><category term="ci" /><summary type="html">Jekyll製英語ブログのGitHub PagesへのデプロイをGitHub Actionsで自動化したのでそのメモ。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/github-pages/action-gh-pages.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/github-pages/action-gh-pages.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">DependabotをGitHub公式Dependabotに移行させた</title><link href="https://blog.toshimaru.net/github-dependabot/" rel="alternate" type="text/html" title="DependabotをGitHub公式Dependabotに移行させた" /><published>2020-06-18T00:00:00+09:00</published><updated>2020-06-28T00:00:00+09:00</updated><id>https://blog.toshimaru.net/github-dependabot</id><content type="html" xml:base="https://blog.toshimaru.net/github-dependabot/">&lt;p&gt;&lt;a href=&quot;https://dependabot.com/blog/hello-github/&quot;&gt;2019年、DependabotがGitHubに買収された&lt;/a&gt;ことはご存知の通り。&lt;/p&gt;

&lt;p&gt;そのDependabotの機能が公式機能として取り込まれたということので早速移行してみた。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.blog/2020-06-01-keep-all-your-packages-up-to-date-with-dependabot/&quot;&gt;Keep all your packages up to date with Dependabot - The GitHub Blog&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;dependabot管理画面から簡単移行&quot;&gt;Dependabot管理画面から簡単移行&lt;/h2&gt;

&lt;p&gt;既存のDependabot管理画面から &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Create config file&lt;/code&gt;をクリック。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/github-dependabot/create-config.png&quot; alt=&quot;config&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;githubdependabotyml-作成&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github/dependabot.yml&lt;/code&gt; 作成&lt;/h2&gt;

&lt;p&gt;するとdependabot-preview氏がPull Requestを自動的に作ってくれる。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/github-dependabot/pr.png&quot; alt=&quot;pull request&quot; /&gt;&lt;/p&gt;

&lt;p&gt;via. &lt;a href=&quot;https://github.com/toshimaru/auto-author-assign/pull/15&quot;&gt;Create Dependabot config file by dependabot-preview · Pull Request #15 · toshimaru/auto-author-assign&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;yamlの内容は下記の通り。&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;updates&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;package-ecosystem&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;npm&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;directory&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;schedule&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;interval&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;weekly&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;21:00'&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;open-pull-requests-limit&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;reviewers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;toshimaru&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;既存の設定をベースに自動的に内容を作成してくれた雰囲気。&lt;/p&gt;

&lt;h2 id=&quot;移行完了&quot;&gt;移行完了&lt;/h2&gt;

&lt;p&gt;PRをマージし、無事に移行が完了するとDependabot管理画面は下記のような表示となる。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/github-dependabot/finish.png&quot; alt=&quot;done&quot; /&gt;&lt;/p&gt;

&lt;p&gt;下記の通りユーザー名は &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dependabot-preview&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dependabot&lt;/code&gt; へと変更されている。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/github-dependabot/commit-log.png&quot; alt=&quot;log&quot; /&gt;&lt;/p&gt;

&lt;p&gt;新しいdependabotが作るPRはgithubの公式ロゴが入っている。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/github-dependabot/new-pr.png&quot; alt=&quot;log&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;余談だが&lt;a href=&quot;https://github.blog/2019-06-17-github-acquires-pull-panda/&quot;&gt;同年に買収されたPull Panda&lt;/a&gt;のリマインダー機能もGitHubの公式機能に取り込まれている。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/managing-scheduled-reminders-for-your-team&quot;&gt;Managing scheduled reminders for your team - GitHub Help&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;良い機能がこのように＜買収→公式機能＞となっていくのは良い流れですね。&lt;/p&gt;</content><author><name>Toshimaru</name></author><category term="github" /><category term="ci" /><summary type="html">2019年、DependabotがGitHubに買収されたことはご存知の通り。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/github-dependabot/og.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/github-dependabot/og.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">銀座Rails#21で「Fat Modelの倒し方」を発表しました 〜質問・感想編〜</title><link href="https://blog.toshimaru.net/how-to-deal-with-fat-model-after/" rel="alternate" type="text/html" title="銀座Rails#21で「Fat Modelの倒し方」を発表しました 〜質問・感想編〜" /><published>2020-06-05T00:00:00+09:00</published><updated>2020-06-05T00:00:00+09:00</updated><id>https://blog.toshimaru.net/how-to-deal-with-fat-model-after</id><content type="html" xml:base="https://blog.toshimaru.net/how-to-deal-with-fat-model-after/">&lt;p&gt;本記事は『&lt;a href=&quot;/how-to-deal-with-fat-model/&quot;&gt;銀座Rails#21で「Fat Modelの倒し方」を発表しました&lt;/a&gt;』の後編になります。&lt;/p&gt;

&lt;p&gt;当日あった質問、発表してみての感想などを書きたいと思います。&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#当日の質問&quot; id=&quot;markdown-toc-当日の質問&quot;&gt;当日の質問&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#ファイルの置き場について&quot; id=&quot;markdown-toc-ファイルの置き場について&quot;&gt;ファイルの置き場について&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#trailblazer-について&quot; id=&quot;markdown-toc-trailblazer-について&quot;&gt;trailblazer について&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#初リモート登壇してみて&quot; id=&quot;markdown-toc-初リモート登壇してみて&quot;&gt;初リモート登壇してみて&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#セットアップ&quot; id=&quot;markdown-toc-セットアップ&quot;&gt;セットアップ&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#感想&quot; id=&quot;markdown-toc-感想&quot;&gt;感想&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#special-thanks&quot; id=&quot;markdown-toc-special-thanks&quot;&gt;Special Thanks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;当日の質問&quot;&gt;当日の質問&lt;/h2&gt;

&lt;h3 id=&quot;ファイルの置き場について&quot;&gt;ファイルの置き場について&lt;/h3&gt;

&lt;p&gt;質問の文脈としては「POROファイルの置き場ってどこ？」という内容でした。&lt;/p&gt;

&lt;p&gt;発表中でPOROは「Modelの補助輪」という表現をしましたが、役割としてはModelにあたるので置き場所も&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/models&lt;/code&gt;配下で問題ないと考えます。&lt;/p&gt;

&lt;p&gt;特別な置き場を作りたくなってしまうかもしれませんが、Railsの提供するMVCのレールを逸脱しない範囲で独自路線を作っていくのが個人的には良いアプローチかなと考えています。POROをモデルの延長線上にあるものと考えれば、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/models&lt;/code&gt;にPOROが配置されているのは不自然ではないかと思います。&lt;/p&gt;

&lt;p&gt;もちろん &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/models&lt;/code&gt; の内部でドメイン毎にnamespace（module）を持たせファイルを構造化していくのはアリだと思います。例えば下記の例です。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app/models
├── application_record.rb
├── domain1
│   └── plain_object.rb
├── domain2
│   └── plain_object.rb
├── domain3
│   └── plain_object.rb
|
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/models&lt;/code&gt;にフラットにファイルを置いていくと、テーブル数増加・コード肥大化とともにものすごい数になってしまいます。意味のある単位でディレクトリ（module）を切っておくのは今すぐできる手軽な構造化という意味で、早いうちに導入しておくと良いと思います。&lt;/p&gt;

&lt;h3 id=&quot;trailblazer-について&quot;&gt;trailblazer について&lt;/h3&gt;

&lt;p&gt;「&lt;a href=&quot;https://github.com/trailblazer/trailblazer&quot;&gt;trailblazer&lt;/a&gt; についてどう思う？」という話がありました。今回の発表にあたりtrailblazerはノーマークだったので、当日は「ちゃんと調べて触ったわけではないので、正直わかりません」という回答をしました。&lt;/p&gt;

&lt;p&gt;trailblazer自体は、2015年頃に&lt;a href=&quot;https://devchat.tv/ruby-rogues/206-rr-trailblazer-with-nick-sutterer/&quot;&gt;Ruby Rogues Podcast&lt;/a&gt;で聞いて知っていて、当時は「へ〜、興味深いコンセプトのフレームワークだけど、Not for meかな〜」「RailsのMVC構造とは違って小難しそうなフレームワークだな〜」などと思っていました。&lt;/p&gt;

&lt;p&gt;今回の発表を通して改めて trailblazer を評価してみると、&lt;strong&gt;Railsの巨大化にともなって発生するペインポイントを回避するためによく考えられたアーキテクチャだ&lt;/strong&gt; と思いました。&lt;/p&gt;

&lt;p&gt;trailblazer は「高度に抽象化（high-level abstractions）されたRubyフレームワーク」だと謳っています。「何と比べて高度か？」というと、明らかに「Rails（MVCアーキテクチャ）と比べて高度だ」と考えることができます。具体的にはMVCアーキテクチャと比べて、大規模化しても破綻しにくいアーキテクチャになっているかと思います。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ginzarails-21/trailblazer.png&quot; alt=&quot;trailblazer&quot; /&gt;&lt;/p&gt;

&lt;p&gt;一方でtrailblazerアーキテクチャの中には「Railsでもgemとか使えば表現できるよね？」っていう部分もあるのは事実だと思います。trailblazerのアドバンテージとしては &lt;strong&gt;gem拡張なし&lt;/strong&gt; で &lt;strong&gt;標準で&lt;/strong&gt; 実現できる点と言えます。素の状態で破綻しにくいアーキテクチャが提供されています。&lt;/p&gt;

&lt;p&gt;Hanamiにも共通して言えることなのですが、trailblazerを採用するときのディスアドバンテージはこんな感じでしょうか。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;gem拡張に乏しい
    &lt;ul&gt;
      &lt;li&gt;やりたいことをやれるgemが転がっているか？&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ハマったときのトラブルシュートの難しさ
    &lt;ul&gt;
      &lt;li&gt;ドキュメントは十分にあるか？&lt;/li&gt;
      &lt;li&gt;コミュニティは成熟しているか？&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;バグを踏んだときの問題解決の難しさ
    &lt;ul&gt;
      &lt;li&gt;アクティブなメンテナはどれだけいるか？&lt;/li&gt;
      &lt;li&gt;バグを報告したらすぐ反応して直してくれるか？&lt;/li&gt;
      &lt;li&gt;Pull Request を upstream にカジュアルに投げることができそうか？&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上述したデメリットを考えると、Hanamiないしtrailblazerがどれだけ優秀なアーキテクチャであっても採用は慎重にならざるを得ないと言えます。&lt;/p&gt;

&lt;p&gt;Ruby on Railsの優位性はRuby Webフレームワークの圧倒的デファクトになっていることです。gemエコシステムやコミュニティ、ドキュメント、ブログ記事がしっかり整っているのは圧倒的アドバンテージと言えるのではないでしょうか。&lt;/p&gt;

&lt;h2 id=&quot;初リモート登壇してみて&quot;&gt;初リモート登壇してみて&lt;/h2&gt;

&lt;h3 id=&quot;セットアップ&quot;&gt;セットアップ&lt;/h3&gt;

&lt;p&gt;今回の発表が初の&lt;a href=&quot;https://zoom.us/&quot;&gt;Zoom&lt;/a&gt;によるリモート登壇でした。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;初リモート登壇セットアップ &lt;a href=&quot;https://twitter.com/hashtag/ginzarails?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#ginzarails&lt;/a&gt; &lt;a href=&quot;https://t.co/Ays780ImG9&quot;&gt;pic.twitter.com/Ays780ImG9&lt;/a&gt;&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/1261229167036653570?ref_src=twsrc%5Etfw&quot;&gt;May 15, 2020&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;macOS + iPad の2画面を&lt;a href=&quot;https://support.apple.com/ja-jp/HT210380&quot;&gt;Sidecar&lt;/a&gt;を使って実現した形となります。通常登壇だとスピーカーノートを手元のマシンに映して、プレゼン資料をプロジェクタに映して…とするところですが、リモート登壇だとプロジェクタにあたる部分が無いのでサブディスプレイは必須だなと感じました。&lt;/p&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=toshimaru-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B07PRX2Q11&amp;amp;linkId=496cfb91e959b3c29be79559c0666db9&quot;&gt;&lt;/iframe&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=toshimaru-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B07H27J698&amp;amp;linkId=aa0e907ba05d2a0e01a21b30e73d5b86&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;リモート発表ということもありネットワークが一番の心配事だったのですが、Google WiFiルーター ⇔ macOS とのネットワーク優先度をMAXにして、5GHz帯を掴むようにして発表に臨むことで、特に問題は発生しませんでした。&lt;/p&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=toshimaru-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B084ZCV6M5&amp;amp;linkId=dd1f57286c1fe56f3d3bc5db74ef399e&quot;&gt;&lt;/iframe&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=toshimaru-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B01MAW2294&amp;amp;linkId=bdc1818106278e95163b1f29f12bfdd9&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;また発声がキレイに通るように、ノイズキャンセリングApp・&lt;a href=&quot;https://krisp.ai/&quot;&gt;Krisp&lt;/a&gt;を導入していました（&lt;a href=&quot;https://ref.krisp.ai/u/ud778344eb&quot;&gt;こちら&lt;/a&gt;から登録すると一ヶ月無料で使えます）。リモート時代には必須。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;リモート戦国時代を生き抜くために Krisp を年間購読した&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/1252784955878305792?ref_src=twsrc%5Etfw&quot;&gt;April 22, 2020&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;プレゼンツールはおなじみの&lt;a href=&quot;https://www.deckset.com/&quot;&gt;Deckset&lt;/a&gt;。マークダウンでまとめられるのはGood、一方でデザインを凝ろうとするとパワポやキーノートより逆に大変なのでそのへんは課題感あります。&lt;/p&gt;

&lt;h3 id=&quot;感想&quot;&gt;感想&lt;/h3&gt;

&lt;p&gt;正直な気持ちをいうと、「発表するならジェスチャーが使えて、オーディエンスの顔・反応が見れて、緊張感を持って臨めるリアル登壇が良いかなー」って考えだったのですが、コロナが長期化しそうな状況を鑑みて今回のリモート登壇にチャレンジしてみることにしました。&lt;/p&gt;

&lt;p&gt;実際にやってみて良かったこととしては、お家環境で椅子に座ってノンビリ発表できるのでそこまで疲れないという点でした。あとZoomはリモート登壇にはとても便利なツール（良い背景画像が無かったので今回はバーチャル背景を使わなかったのが若干後悔）。&lt;/p&gt;

&lt;p&gt;逆に難しいなと思ったのはやっぱりオーディエンスの反応が見えない点。ここは運営側で&lt;a href=&quot;http://commentscreen.com/&quot;&gt;Comment Screen&lt;/a&gt;環境を用意してもらえたことで、発表中のオーディエンスへの質問や反応はある程度見ることができました。またこれは登壇者側・参加者側どちらでもそうなのですが、リアル現場での懇親会のように発表後にカジュアルに話せないのはちょっと残念だなーと思う点です。&lt;/p&gt;

&lt;p&gt;総じてリモート登壇を初めての体験できてよかったと思います。&lt;/p&gt;

&lt;p&gt;あと今回いただいた30分という尺はある程度まとまった量の発表をゆっくり進行するには丁度良い尺でした。それ以上の長さになると発表者側もオーディエンス側もダレそうだなぁという印象。&lt;/p&gt;

&lt;h2 id=&quot;special-thanks&quot;&gt;Special Thanks&lt;/h2&gt;

&lt;p&gt;本発表はもともと銀座Rails#18で発表予定だったものです。改めての発表機会をいただき、銀座Rails運営の皆様ありがとうございました。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;イベントキャンセルによってお蔵入りした発表資料。普通に喋ったら20分超えの大作だっただけに残念。。。コロナが落ち着くまでは蔵出しせずに寝かせておくかな...😷 &lt;a href=&quot;https://t.co/Qzu2YNQyve&quot;&gt;pic.twitter.com/Qzu2YNQyve&lt;/a&gt;&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/1229425295930716160?ref_src=twsrc%5Etfw&quot;&gt;February 17, 2020&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;Rails Model の限界を考えるにあたり、&lt;a href=&quot;https://twitter.com/_yasaichi&quot;&gt;yasaichiさん&lt;/a&gt;、&lt;a href=&quot;https://github.com/hshimoyama&quot;&gt;hshiroyamaさん&lt;/a&gt;の発表を参考にさせていただきました。ありがとうございました。&lt;/p&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;b5579c5fa5fa4e479ec81fda3b231eb2&quot; data-ratio=&quot;1.33333333333333&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;ce30c3cf9433471283e24855f6bdd2b4&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;1年前に「Ruby on Railsの正体と向き合い方」というテーマで登壇したときに、時間の関係で言及できなかった「コードレベルの向き合い方」の詳細が綺麗に整理された上でまとまっていて、いたく感動してしまった。おすすめ / Fat Modelの倒し方 / how to deal with fat model &lt;a href=&quot;https://t.co/0vMubQfiLb&quot;&gt;https://t.co/0vMubQfiLb&lt;/a&gt;&lt;/p&gt;&amp;mdash; (やさいち|yasaichi) (@_yasaichi) &lt;a href=&quot;https://twitter.com/_yasaichi/status/1264889633332060160?ref_src=twsrc%5Etfw&quot;&gt;May 25, 2020&lt;/a&gt;&lt;/blockquote&gt;</content><author><name>Toshimaru</name></author><category term="presentation" /><category term="rails" /><summary type="html">本記事は『銀座Rails#21で「Fat Modelの倒し方」を発表しました』の後編になります。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/ginzarails-21/og2.jpg" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/ginzarails-21/og2.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">銀座Rails#21で「Fat Modelの倒し方」を発表しました</title><link href="https://blog.toshimaru.net/how-to-deal-with-fat-model/" rel="alternate" type="text/html" title="銀座Rails#21で「Fat Modelの倒し方」を発表しました" /><published>2020-06-01T00:00:00+09:00</published><updated>2020-06-05T00:00:00+09:00</updated><id>https://blog.toshimaru.net/how-to-deal-with-fat-model</id><content type="html" xml:base="https://blog.toshimaru.net/how-to-deal-with-fat-model/">&lt;p&gt;&lt;a href=&quot;https://ginza-rails.connpass.com/event/173610/&quot;&gt;銀座Rails#21&lt;/a&gt;で「Fat Modelの倒し方」と題して発表してきました。&lt;/p&gt;

&lt;h2 id=&quot;発表スライド&quot;&gt;発表スライド&lt;/h2&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;fa367404507c4311aa3eeb087fc45a6e&quot; data-ratio=&quot;1.33333333333333&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;目次&quot;&gt;目次&lt;/h2&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#発表スライド&quot; id=&quot;markdown-toc-発表スライド&quot;&gt;発表スライド&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#目次&quot; id=&quot;markdown-toc-目次&quot;&gt;目次&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#fat-rails-stage&quot; id=&quot;markdown-toc-fat-rails-stage&quot;&gt;Fat Rails Stage&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#fat-model対処のための３つのアプローチ&quot; id=&quot;markdown-toc-fat-model対処のための３つのアプローチ&quot;&gt;Fat Model対処のための３つのアプローチ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#rails-modelの限界&quot; id=&quot;markdown-toc-rails-modelの限界&quot;&gt;Rails Modelの限界&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#rails-modelはなぜ辛くなるのか&quot; id=&quot;markdown-toc-rails-modelはなぜ辛くなるのか&quot;&gt;Rails Modelはなぜ辛くなるのか？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#目指すべきゴール&quot; id=&quot;markdown-toc-目指すべきゴール&quot;&gt;目指すべきゴール&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#rails-way&quot; id=&quot;markdown-toc-rails-way&quot;&gt;Rails Way&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#concerns&quot; id=&quot;markdown-toc-concerns&quot;&gt;Concerns&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#sti&quot; id=&quot;markdown-toc-sti&quot;&gt;STI&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#polymorphic-association&quot; id=&quot;markdown-toc-polymorphic-association&quot;&gt;Polymorphic Association&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#accepts_nested_attributes_for&quot; id=&quot;markdown-toc-accepts_nested_attributes_for&quot;&gt;accepts_nested_attributes_for&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#その他細かめのテクニック&quot; id=&quot;markdown-toc-その他細かめのテクニック&quot;&gt;その他細かめのテクニック&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#rails-wayまとめ&quot; id=&quot;markdown-toc-rails-wayまとめ&quot;&gt;「Rails Way」まとめ&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#sub-rails-way&quot; id=&quot;markdown-toc-sub-rails-way&quot;&gt;Sub-Rails Way&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#view-model&quot; id=&quot;markdown-toc-view-model&quot;&gt;View Model&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#権限管理認可&quot; id=&quot;markdown-toc-権限管理認可&quot;&gt;権限管理・認可&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#interactor&quot; id=&quot;markdown-toc-interactor&quot;&gt;Interactor&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#特定の課題の解決&quot; id=&quot;markdown-toc-特定の課題の解決&quot;&gt;特定の課題の解決&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#それrailsでできるよ&quot; id=&quot;markdown-toc-それrailsでできるよ&quot;&gt;「それRailsでできるよ」&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#それrubyでできるよ&quot; id=&quot;markdown-toc-それrubyでできるよ&quot;&gt;「それRubyでできるよ」&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#saasに切り出す&quot; id=&quot;markdown-toc-saasに切り出す&quot;&gt;SaaSに切り出す&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#sub-rails-wayまとめ&quot; id=&quot;markdown-toc-sub-rails-wayまとめ&quot;&gt;「Sub-Rails Way」まとめ&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#non-rails-way&quot; id=&quot;markdown-toc-non-rails-way&quot;&gt;Non-Rails Way&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#form-model&quot; id=&quot;markdown-toc-form-model&quot;&gt;Form Model&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#poro&quot; id=&quot;markdown-toc-poro&quot;&gt;PORO&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#service-class&quot; id=&quot;markdown-toc-service-class&quot;&gt;Service Class&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#1-table-multiple-models&quot; id=&quot;markdown-toc-1-table-multiple-models&quot;&gt;1 Table Multiple Models&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#non-rails-wayまとめ&quot; id=&quot;markdown-toc-non-rails-wayまとめ&quot;&gt;「Non-Rails Way」まとめ&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#全体のまとめ&quot; id=&quot;markdown-toc-全体のまとめ&quot;&gt;全体のまとめ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#参考資料&quot; id=&quot;markdown-toc-参考資料&quot;&gt;参考資料&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#後編質問感想編&quot; id=&quot;markdown-toc-後編質問感想編&quot;&gt;後編（質問・感想編）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;fat-rails-stage&quot;&gt;Fat Rails Stage&lt;/h2&gt;

&lt;p&gt;肥大化したRailsアプリケーション（Fat Rails Application）において最も辛いレイヤーはどこでしょうか？&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Fat View&lt;/li&gt;
  &lt;li&gt;Fat Controller&lt;/li&gt;
  &lt;li&gt;Fat Model&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;僕はFat Modelだと考えています。&lt;/p&gt;

&lt;p&gt;下記は「RailsがどのようにFatになっていくか」段階を示した表です。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Fat Stage&lt;/th&gt;
      &lt;th&gt;Rails習熟度&lt;/th&gt;
      &lt;th&gt;Fat Layer&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;低&lt;/td&gt;
      &lt;td&gt;Fat View&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;中&lt;/td&gt;
      &lt;td&gt;Fat Controller&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;高&lt;/td&gt;
      &lt;td&gt;Fat Model&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;まずはFatステージ1。Railsというものを全然知らない超初心者が陥るステージです。ビューに何でもかんでもロジックを書いちゃう。その結果がFat Viewです。&lt;/p&gt;

&lt;p&gt;次にFatステージ2。ある程度Railsに慣れてきた開発者が陥るステージです。Modelへのロジック分離がうまくできず、Controllerにロジックが集中する。その結果はFat Controllerです。&lt;/p&gt;

&lt;p&gt;最後がFatステージ3。Railsを習熟したエンジニアであればModelにロジックを寄せていくのが定石です。その結果出来上がるのはFat Modelです。&lt;/p&gt;

&lt;p&gt;このように &lt;strong&gt;どんなにRailsに習熟してようと最終的にぶつかる壁がFat Model&lt;/strong&gt; です。&lt;/p&gt;

&lt;h2 id=&quot;fat-model対処のための３つのアプローチ&quot;&gt;Fat Model対処のための３つのアプローチ&lt;/h2&gt;

&lt;p&gt;Fat Modelを倒すためのアプローチとして、僕は下記の3つに分けて整理すれば良いのではと考えました。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Rails Way&lt;/li&gt;
  &lt;li&gt;Sub-Rails Way&lt;/li&gt;
  &lt;li&gt;Non-Rails Way&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;rails-modelの限界&quot;&gt;Rails Modelの限界&lt;/h2&gt;

&lt;p&gt;なぜRailsアプリケーションのModel層は限界を迎えてしまうのでしょうか？&lt;/p&gt;

&lt;p&gt;Railsの原始的な状態は、1つのModelに1つのControllerが結びついています。すなわち、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User&lt;/code&gt;モデルがあれば&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UsersController&lt;/code&gt;があり、Controllerのそれぞれのアクションに&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User&lt;/code&gt;モデルが紐づくという形です。&lt;/p&gt;

&lt;p&gt;しかし下図&lt;sup id=&quot;fnref:a&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:a&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;はそれが破綻した状態です。どうなっているかというと、複数のControllerからいろんなかたちで１つのモデルが触られる、そういう状態です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ginzarails-21/controllers-model.jpg&quot; alt=&quot;inline&quot; /&gt;&lt;/p&gt;

&lt;p&gt;続いてのスライドです&lt;sup id=&quot;fnref:b&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:b&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://speakerd.s3.amazonaws.com/presentations/ce30c3cf9433471283e24855f6bdd2b4/slide_42.jpg?12161035&quot; alt=&quot;inline&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ここのキーワードとしては &lt;strong&gt;ユースケース&lt;/strong&gt;。いろんなユースケースを1つのModelで表現しなければならないという状況が辛いと言えます。&lt;/p&gt;

&lt;h2 id=&quot;rails-modelはなぜ辛くなるのか&quot;&gt;Rails Modelはなぜ辛くなるのか？&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;1つのModelが複数の異なるユースケースに密結合して実装されるとき
    &lt;ul&gt;
      &lt;li&gt;→ ある条件やcontextに紐付いたValidation/Callback処理&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;1つのフォームで複数のサブリソースが更新されるとき（フォームとModelが1対1で紐付かないとき）
    &lt;ul&gt;
      &lt;li&gt;→ 1つのModelを起点とした複数Modelを跨ぐトランザクション処理&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上述の限界は、Rails ModelとDBのテーブルが一対一で紐づくRailsの世界観に起因する限界と言えます。&lt;/p&gt;

&lt;h2 id=&quot;目指すべきゴール&quot;&gt;目指すべきゴール&lt;/h2&gt;

&lt;p&gt;ではどうRailsの限界を乗り越えていけばいいでしょうか？&lt;/p&gt;

&lt;p&gt;下記は横軸がコードベースのサイズ、縦軸がペイン（痛みの度合い）を描いたグラフです&lt;sup id=&quot;fnref:c&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:c&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ginzarails-21/growth.png&quot; alt=&quot;inline&quot; /&gt;&lt;/p&gt;

&lt;p&gt;赤線はバニラRailsです。コードベースのサイズとともにペインが増大しています。&lt;/p&gt;

&lt;p&gt;緑線はストラクチャードRails。コードベースが増大してもペインが増大しません。&lt;/p&gt;

&lt;p&gt;僕の発表の言うところでは、赤線（バニラRails）がRails Way、緑線（ストラクチャードRails）がSub-Rails・Non-Rails Wayにあたります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ginzarails-21/growth2.png&quot; alt=&quot;inline&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ということで我々の基本的なゴールとしてはこの緑線、すなわち、 &lt;strong&gt;コードベースが大きくなってもペインが増大しないRailsコードベース&lt;/strong&gt; を目指しましょう、ということになります。&lt;/p&gt;

&lt;h2 id=&quot;rails-way&quot;&gt;Rails Way&lt;/h2&gt;

&lt;p&gt;小学生の絵みたいで恐縮なんですが、Rails Wayを絵にするとこんなイメージです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ginzarails-21/rails-way.png&quot; alt=&quot;fit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;つまり &lt;strong&gt;Railsのレールに沿った開発アプローチ&lt;/strong&gt; です。&lt;/p&gt;

&lt;h3 id=&quot;concerns&quot;&gt;Concerns&lt;/h3&gt;

&lt;p&gt;まずはConcerns。Model/Controllerの共通の関心事（Concern）をmoduleに切り出す手法です（代表例: DHH’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Recording&lt;/code&gt; Class&lt;sup id=&quot;fnref:6&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:6&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ginzarails-21/concerns.png&quot; alt=&quot;inline&quot; /&gt;&lt;/p&gt;

&lt;p&gt;注意すべきは、ConcernのRails公式ガイドはありません。強いて言うなら下記の記事でDHHがConcernを紹介しています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://signalvnoise.com/posts/3372-put-chubby-models-on-a-diet-with-concerns&quot;&gt;Put chubby models on a diet with concerns&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Modelの持っている能力（ability = &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-able&lt;/code&gt; suffix）に着目してConcern moduleに切り出していくのが、Rails Wayっぽさがあると言えます。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# app/models/concerns/concernable.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Concernable&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveSupport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Concern&lt;/span&gt;

  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;your&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;concern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;sti&quot;&gt;STI&lt;/h3&gt;

&lt;p&gt;RailsにおいてテーブルとModelは原則的に1対1で結びつきます。しかし、STIを使えば1つのテーブルで複数Model紐付けることができます。&lt;/p&gt;

&lt;p&gt;下図は&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;players&lt;/code&gt;という単一テーブルに複数のクラスが結びついている図です&lt;sup id=&quot;fnref:5&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:5&quot; class=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ginzarails-21/sti.png&quot; alt=&quot;inline&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Railsのコード例です。 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;companies&lt;/code&gt; テーブルに紐づく &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Firm&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Client&lt;/code&gt;モデルの例だと下記の通りです。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# app/models/company.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Company&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationRecord&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# app/models/firm.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Firm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Company&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# app/models/client.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Company&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;polymorphic-association&quot;&gt;Polymorphic Association&lt;/h3&gt;

&lt;p&gt;1つのポリモーフィック関連付け定義で複数のテーブルを従属させることができるのがポリモーフィック関連です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ginzarails-21/polymorphic.png&quot; alt=&quot;inline&quot; /&gt;&lt;/p&gt;

&lt;p&gt;上図の場合、通常のRails DB設計であれば &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pictures&lt;/code&gt;テーブルが&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;employee_id&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;product_id&lt;/code&gt;を持っているべきですが、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;imagable_id&lt;/code&gt;という1つカラムで複数のテーブルを従属させることができています。&lt;/p&gt;

&lt;p&gt;これをRailsのコードであらわすと下記の通りです。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# app/models/picture.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Picture&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;belongs_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:imageable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;polymorphic: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# app/models/employee.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Employee&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:pictures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;as: :imageable&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# app/models/product.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:pictures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;as: :imageable&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ただし注意点があります。ポリモーフィック関連は『SQLアンチパターン』6章でアンチパターンとして紹介されており、使用する際は気をつける必要があります。&lt;/p&gt;

&lt;p&gt;詳しくは『SQLアンチパターン』を読んでいただければと思います。&lt;/p&gt;

&lt;h3 id=&quot;accepts_nested_attributes_for&quot;&gt;accepts_nested_attributes_for&lt;/h3&gt;

&lt;p&gt;ネストされたアトリビュートで関連リソースの作成・更新・削除を行うのが&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;accepts_nested_attributes_for&lt;/code&gt;です。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:posts&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;accepts_nested_attributes_for&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:posts&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;member: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;name: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'joe'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;posts_attributes: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;title: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Kari, the awesome Ruby documentation browser!'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;title: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'The egalitarian assumption of the modern citizen'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:member&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ただしこの&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;accepts_nested_attributes_for&lt;/code&gt;はDHH自らが「消したい」と発言しており&lt;sup id=&quot;fnref:7&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:7&quot; class=&quot;footnote&quot;&gt;7&lt;/a&gt;&lt;/sup&gt;、積極的に使うのはやや躊躇われるかもしれません。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ginzarails-21/dhh.png&quot; alt=&quot;inline&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;その他細かめのテクニック&quot;&gt;その他細かめのテクニック&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Serialize Attribute&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;json型カラムへのメタデータ保存に便利&lt;/li&gt;
      &lt;li&gt;⚠️『SQLアンチパターン』5章 EAV&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Value Object&lt;/strong&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;compose_of&lt;/code&gt;)
    &lt;ul&gt;
      &lt;li&gt;複数カラムをValueオブジェクトとして展開するときに便利&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Validation Class&lt;/strong&gt;/&lt;strong&gt;Callback Class&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;クラスとして分離可能 → 分離することで複数モデルで再利用可能に&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;rails-wayまとめ&quot;&gt;「Rails Way」まとめ&lt;/h3&gt;

&lt;p&gt;全体としては、Rails WayだけではFat Modelを倒す手段として手数が少なく物足りないと感じます。&lt;/p&gt;

&lt;p&gt;アプリケーションサイズがFatになっている時点でそのRailsアプリケーションは中規模以上のサイズが見込まれますから、正直Rails WayだけでFat Modelを倒すのは無理だと思います。&lt;/p&gt;

&lt;p&gt;❌ Concerns, Validation ClassなどFat ModelをDRYに記述する手段にはなるが、構造的にダイエットする手段にはなっていません。あくまでそれらは局所的なダイエットに留まっています。&lt;/p&gt;

&lt;p&gt;❌ STI, PolymorphicなどはDB設計と密結合したソリューションで、完全なコードレベルの解決にはなっていません。また、アンチパターンとして紹介されているように、それ自体が技術負債になりえる構造的問題を孕んでいます。&lt;/p&gt;

&lt;h2 id=&quot;sub-rails-way&quot;&gt;Sub-Rails Way&lt;/h2&gt;

&lt;p&gt;Sub-Rails Wayはレールを補強・拡張しつつレールに乗るスタイルです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ginzarails-21/sub-rails-way.png&quot; alt=&quot;fit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;レールを何を使って補強・拡張するのでしょうか？それは下記２つになります。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;gem&lt;/li&gt;
  &lt;li&gt;SaaS&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;view-model&quot;&gt;View Model&lt;/h3&gt;

&lt;p&gt;ModelにおけるView関連ロジックを &lt;strong&gt;View Model&lt;/strong&gt; として切り出す手法です。&lt;/p&gt;

&lt;p&gt;Development of Further PoEAAで&lt;a href=&quot;https://martinfowler.com/eaaDev/PresentationModel.html&quot;&gt;Presentation Model&lt;/a&gt;という概念で紹介されているパターンにあたると考えています。ModelをDecoratorパターンっぽく拡張しているのでDecoratorとも呼ばれることが多いです&lt;sup id=&quot;fnref:8&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:8&quot; class=&quot;footnote&quot;&gt;8&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;このView Modelの良いところとしては、Fat Model の対処として機能するだけでなく、Fat View の対処としても機能する点です。&lt;/p&gt;

&lt;p&gt;💎 gemの実装としては下記のようなものがあります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/drapergem/draper&quot;&gt;draper&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/amatsuda/active_decorator&quot;&gt;active_decorator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;🔧 draperの場合、コードは下記のようになります（ArticleモデルのDecoratorクラス）。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# app/decorators/article_decorator.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArticleDecorator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Draper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Decorator&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;delegate_all&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;publication_status&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;published?&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;Published at &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;published_at&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;Unpublished&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;published_at&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;published_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;strftime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;%A, %B %e&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;権限管理認可&quot;&gt;権限管理・認可&lt;/h3&gt;

&lt;p&gt;管理画面実装において逃げられない実装は認証とあわせて、権限管理・認可ではないでしょうか？&lt;/p&gt;

&lt;p&gt;ResourceのCRUDでユーザーのアクセス制御するのが「Railsらしい」権限管理と考えています。&lt;/p&gt;

&lt;p&gt;💎 gemの実装としては下記のようなものです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/varvet/pundit&quot;&gt;pundit&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/kyuden/banken&quot;&gt;banken&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/CanCanCommunity/cancancan&quot;&gt;cancancan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;🔧 punditの場合、コードは下記の通りです（Postモデルの認可クラス）。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# app/policies/post_policy.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PostPolicy&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:post&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update?&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;admin?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;published?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;interactor&quot;&gt;Interactor&lt;/h3&gt;

&lt;p&gt;InteractorはClean Architecture由来する概念です。&lt;/p&gt;

&lt;p&gt;下記の図は見たことある方も多くいらっしゃるかもしれません。赤い部分がClean Architectureにおけるユースケース層になります。このユースケース層に Interactor が表現されています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://blog.cleancoder.com/uncle-bob/images/2012-08-13-the-clean-architecture/CleanArchitecture.jpg&quot; alt=&quot;inline&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ユースケース層というアプローチはとても良いと思っています。なぜなら先程「1つのModelが複数の異なるユースケースに密結合して実装されるとき―」と言いましたが、そのユースケースをまさにInteractorとして表現できるからです。&lt;/p&gt;

&lt;p&gt;個人的にClean ArchitectureとRailsは相性が良いと思っていて、このようにMVC+InteractorでClean Architectureのそれぞれの層と一致させることができるからです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ginzarails-21/Clean_Coder_Blog.png&quot; alt=&quot;inline&quot; /&gt;&lt;/p&gt;

&lt;p&gt;💎 gemとしては下記があります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/collectiveidea/interactor-rails&quot;&gt;interactor-rails&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;(not Rails) &lt;a href=&quot;https://github.com/hanami&quot;&gt;hanami&lt;/a&gt;’s &lt;a href=&quot;https://github.com/hanami/utils/blob/master/lib/hanami/interactor.rb&quot;&gt;Interactor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;hanamiはRailsではありませんが、Clean Architectureに強く影響を受けたRuby製Webフレームワークです。hanamiには Interactor の仕組みが標準で実装されています。&lt;/p&gt;

&lt;p&gt;🔧 interactor-railsの場合のコードは下記の通りです（ユーザーを認証するクラス）。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# app/interactors/authenticate_user.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AuthenticateUser&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Interactor&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;authenticate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;secret_token&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fail!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;message: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;authenticate_user.failure&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Inside your controller,&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;AuthenticateUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;特定の課題の解決&quot;&gt;特定の課題の解決&lt;/h3&gt;

&lt;p&gt;特定の課題を解決するgemとしては例えば下記のようなものがあります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;論理削除&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;💎 gem: &lt;a href=&quot;https://github.com/jhawthorn/discard&quot;&gt;discard&lt;/a&gt;, &lt;a href=&quot;https://github.com/rubysherpas/paranoia&quot;&gt;paranoia&lt;/a&gt;, &lt;a href=&quot;https://github.com/ActsAsParanoid/acts_as_paranoid&quot;&gt;acts_as_paranoid&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;⚠️ &lt;a href=&quot;https://www.slideshare.net/t_wada/ronsakucasual&quot;&gt;SQLアンチパターン 幻の第26章「とりあえず削除フラグ」&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;要素のソート・並び替え&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;💎 gem: &lt;a href=&quot;https://github.com/brendon/acts_as_list&quot;&gt;acts_as_list&lt;/a&gt;, &lt;a href=&quot;https://github.com/mixonic/ranked-model&quot;&gt;ranked-model&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;State Machine&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;💎 gem: &lt;a href=&quot;https://github.com/aasm/aasm&quot;&gt;aasm&lt;/a&gt;, &lt;a href=&quot;https://github.com/amatsuda/stateful_enum&quot;&gt;stateful_enum&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Tagging&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;💎 gem: &lt;a href=&quot;https://github.com/mbleigh/acts-as-taggable-on&quot;&gt;acts-as-taggable-on&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;HashをActiveRecordっぽく操作&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;💎 gem: &lt;a href=&quot;https://github.com/zilkey/active_hash&quot;&gt;active_hash&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;解決したい課題に応じて導入していくのが良いと思います。&lt;/p&gt;

&lt;h3 id=&quot;それrailsでできるよ&quot;&gt;「それRailsでできるよ」&lt;sup id=&quot;fnref:10&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:10&quot; class=&quot;footnote&quot;&gt;9&lt;/a&gt;&lt;/sup&gt;&lt;/h3&gt;

&lt;p&gt;逆にgemを使わずともRails標準で解決できるよって課題も多く存在します。例えば下記のような例です。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;:gem: &lt;a href=&quot;https://github.com/brainspec/enumerize&quot;&gt;enumerize&lt;/a&gt; (Emumerized Attributes)
    &lt;ul&gt;
      &lt;li&gt;Rails 4.1: ActiveRecord enum&lt;/li&gt;
      &lt;li&gt;参考. &lt;a href=&quot;https://api.rubyonrails.org/v5.2.3/classes/ActiveRecord/Enum.html&quot;&gt;ActiveRecord::Enum&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;:gem: &lt;a href=&quot;https://github.com/eagletmt/switch_point&quot;&gt;switch_point&lt;/a&gt; (Database R/W Split)
    &lt;ul&gt;
      &lt;li&gt;Rails 6: Multi-DB&lt;/li&gt;
      &lt;li&gt;参考: &lt;a href=&quot;https://railsguides.jp/active_record_multiple_databases.html&quot;&gt;Active Record で複数のデータベース利用 - Railsガイド&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;:gem: &lt;a href=&quot;https://github.com/zdennis/activerecord-import&quot;&gt;activerecord-import&lt;/a&gt; (Bulk Import)
    &lt;ul&gt;
      &lt;li&gt;Rails 6: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;insert_all&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;upsert_all&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;:gem: &lt;a href=&quot;https://github.com/carrierwaveuploader/carrierwave&quot;&gt;carrierwave&lt;/a&gt;, &lt;a href=&quot;https://github.com/shrinerb/shrine&quot;&gt;shrine&lt;/a&gt; (File Uploader)
    &lt;ul&gt;
      &lt;li&gt;Rails 5.2: Active Storage&lt;/li&gt;
      &lt;li&gt;参考: &lt;a href=&quot;https://railsguides.jp/active_storage_overview.html&quot;&gt;Active Storage の概要 - Railsガイド&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;:gem: &lt;a href=&quot;https://github.com/norman/friendly_id&quot;&gt;friendly_id&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;ActiveRecord: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;to_param&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;参考: &lt;a href=&quot;https://api.rubyonrails.org/classes/ActiveRecord/Integration.html#method-i-to_param&quot;&gt;ActiveRecord::Integration&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;:gem: &lt;a href=&quot;https://github.com/magnusvk/counter_culture&quot;&gt;counter_culture&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;ActiveRecord: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;counter_cache&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;参考: &lt;a href=&quot;https://railsguides.jp/association_basics.html#belongs-to%E3%81%AE%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3-counter-cache&quot;&gt;Active Record の関連付け&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ID/Password認証
    &lt;ul&gt;
      &lt;li&gt;ActiveModel: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;has_secure_password&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;参考: &lt;a href=&quot;https://api.rubyonrails.org/classes/ActiveModel/SecurePassword/ClassMethods.html&quot;&gt;ActiveModel::SecurePassword::ClassMethods&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;:gem: &lt;a href=&quot;https://github.com/rubyconfig/config&quot;&gt;config&lt;/a&gt; (YAML Config Management)
    &lt;ul&gt;
      &lt;li&gt;Rails Custom configuration:&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Rails::Application.config_for&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config.x&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;参考: &lt;a href=&quot;https://railsguides.jp/configuring.html#%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%A0%E8%A8%AD%E5%AE%9A&quot;&gt;Rails アプリケーションを設定する - Railsガイド&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;それrubyでできるよ&quot;&gt;「それRubyでできるよ」&lt;sup id=&quot;fnref:10:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:10&quot; class=&quot;footnote&quot;&gt;9&lt;/a&gt;&lt;/sup&gt;&lt;/h3&gt;

&lt;p&gt;gemを使わずともRubyでもできるよってケースもあります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;:gem: &lt;a href=&quot;https://github.com/pry/pry&quot;&gt;pry&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Ruby 2.4: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;binding.irb&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Ruby 2.7: REPL Syntax Highlighting&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;saasに切り出す&quot;&gt;SaaSに切り出す&lt;/h3&gt;

&lt;p&gt;処理をSaaSに切り出す、という意味では下記の例があります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://auth0.com/jp/&quot;&gt;Auth0&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;ユーザー認証ロジックをAuth0に移譲&lt;/li&gt;
      &lt;li&gt;認証にともなうMFA、パスワードリセット、セキュリティ対策などの面倒な実装をAuth0が肩代わり&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://sentry.io/welcome/&quot;&gt;Sentry&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;エラー通知をSentryに移譲&lt;/li&gt;
      &lt;li&gt;サービスにエラーをぽんぽん投げ込めばいい感じにエラーをアグリゲーション・可視化・各種通知してくれる&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://newrelic.co.jp/&quot;&gt;NewRelic&lt;/a&gt;/&lt;a href=&quot;https://www.datadoghq.com/ja/&quot;&gt;Datadog&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;APM (Application Performance Monitoring)を NewRelic/Datadog APMでやる&lt;/li&gt;
      &lt;li&gt;自前で Elasticsearch + Kibana 環境を構築してもいいが、構築コスト・運用コストともに高くつく&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;sub-rails-wayまとめ&quot;&gt;「Sub-Rails Way」まとめ&lt;/h3&gt;

&lt;p&gt;gem を使うことでFat Model対処法のバリエーションがぐっと広がります。独自実装でModelを太らせることをせず、使えるgemは積極的に利用していくとよいでしょう。&lt;/p&gt;

&lt;p&gt;一方、gemを使わずともRails標準で解決できることも実は多くあるので見極めた上でgem導入しましょう。&lt;/p&gt;

&lt;p&gt;また、選択肢はさほど多くないものの、最近はさまざまな便利SaaSが出ているので SaaSを使うのもFat Model対抗手段の１つとして検討してもよいでしょう。&lt;/p&gt;

&lt;h2 id=&quot;non-rails-way&quot;&gt;Non-Rails Way&lt;/h2&gt;

&lt;p&gt;Non-Railsはレールに乗らない別のレール、独自路線のことです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ginzarails-21/non-rails-way.png&quot; alt=&quot;fit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;つまり自らレールを作っていくスタイルです。&lt;/p&gt;

&lt;h3 id=&quot;form-model&quot;&gt;Form Model&lt;/h3&gt;

&lt;p&gt;Form Modelとは、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;include ActiveModel&lt;/code&gt;したRubyクラスのことです。&lt;/p&gt;

&lt;p&gt;巷ではForm Objectと呼ばれることが多いですが、＜Formに特化したActiveModel＞という意味で、あえてForm Modelと本発表では呼んでいます。&lt;/p&gt;

&lt;p&gt;フォームとForm Modelは一対一で紐付きます。こうすることで &lt;strong&gt;特定の＜Formのユースケース＞に対応したModel&lt;/strong&gt; が作成可能になります。&lt;/p&gt;

&lt;p&gt;💎 gemの実装としては下記のようなものがあります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/trailblazer/reform&quot;&gt;reform&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dry-rb/&quot;&gt;dry-rb&lt;/a&gt;シリーズ（旧・&lt;a href=&quot;https://github.com/solnic/virtus&quot;&gt;virtus&lt;/a&gt;）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Form Modelの使い所としては下記のように整理できると思います。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;紐づく&lt;br /&gt;テーブル数&lt;/th&gt;
      &lt;th&gt;Form Modelのユースケース&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;問い合わせフォームなどテーブルを作るまでもないフォームで利用&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2以上&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;accepts_nested_attributes_for&lt;/code&gt;の代わりとして、複雑なフォームの組み立て時に利用&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;テーブルとフォームが1対1で紐づく場合はRails Wayで解決させるのが素直な実装&lt;/p&gt;

&lt;p&gt;その他の特定のユースケースに特化したForm Model実装としては、下記のようなものが考えられます。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SearchForm: 条件に基づく検索に特化したフォーム&lt;/li&gt;
  &lt;li&gt;DownloadForm: CSVなどのダウンロードに特化したフォーム&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;poro&quot;&gt;PORO&lt;/h3&gt;

&lt;p&gt;POROとはPlain Old Ruby Objectの略です。元ネタはPoEAAのPOJO (Plain Old Java Object)です。&lt;/p&gt;

&lt;p&gt;POROは、ActiveRecordの機能に依存しない純粋なRuby実装です。なので&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;include ActiveModel&lt;/code&gt;しているRubyクラスは個人的にはPOROとは呼んでいません。&lt;/p&gt;

&lt;p&gt;純粋なRuby実装なのである意味、 &lt;strong&gt;Ruby Way&lt;/strong&gt; とも言うことができます。&lt;/p&gt;

&lt;p&gt;POROの主な用途としてはModelの補助輪的な役割だと考えています。&lt;/p&gt;

&lt;p&gt;例えば下記の例ではクラスメソッド&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;create!&lt;/code&gt;呼び出し時に引数を受け取って&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;create!&lt;/code&gt;インスタンスメソッド内でトランザクションを張って複数モデルの更新を行っています。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PostWithNotifications&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;creator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;creator: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;creator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;body: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create!&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;creator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@creator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;creator&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create!&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;transaction&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;create_post!&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;create_notifications!&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;    
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;このRubyクラスの場合、＜&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Post&lt;/code&gt;作成とともに&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Notification&lt;/code&gt;も作成する＞という複数モデル更新のユースケースをPOROに閉じ込めたということができるでしょう。&lt;/p&gt;

&lt;h3 id=&quot;service-class&quot;&gt;Service Class&lt;/h3&gt;

&lt;p&gt;続いてはサービスクラスです。&lt;/p&gt;

&lt;p&gt;サービスクラスに関してはもしかしたら賛否両論あるかもしれません。サービスという概念がデカすぎる故に、人によって使い方・解釈が異なり、サービスクラスにまつわる巷のすれ違いを起こしている印象があります。&lt;/p&gt;

&lt;p&gt;サービスクラスに関してはまずはサービスの定義問題があると思っています。つまり「あなたの言うServiceってなんですか？」という問題です。&lt;/p&gt;

&lt;p&gt;一口にサービスといっても様々な文脈のサービスがあります。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Architecture&lt;/th&gt;
      &lt;th&gt;Service Name&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;PoEAA&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Service Layer&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;DDD&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Service Class&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Onion Architecture&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Application Service, Domain Service&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Rails “Service”&lt;/strong&gt; ?&lt;/td&gt;
      &lt;td&gt;上記のどれでもない”Service”&lt;br /&gt;上記を組み合わせた”Service”&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;「どういう文脈のサービスか？」を明確にした上で議論しないとサービスクラスの定義・概念がボンヤリしてしまう印象です。なのでサービスクラスを導入する際は、サービスクラスの定義・使い方を明確にした上でチームに導入していくのが良いと思います。&lt;/p&gt;

&lt;p&gt;個人的な見解にはなりますが、＜特定のユースケースの解決＞という意味においてはInteractorのほうが少なくともRailsにおいては筋が良いと考えています。&lt;/p&gt;

&lt;p&gt;また、個人的に下手にサービスという巨大で強い概念を持ち込むより、POROという概念で雑にまとめたほうが好みだったりします。&lt;/p&gt;

&lt;h3 id=&quot;1-table-multiple-models&quot;&gt;1 Table Multiple Models&lt;/h3&gt;

&lt;p&gt;一つのテーブルに複数Modelを紐付けるアプローチです。&lt;/p&gt;

&lt;p&gt;Rails WayだとSTIでのみこれは実現可能ですが、STIを使わずにがんばってアプリケーションコードで複数モデルを表現しちゃいましょうというやり方です。&lt;/p&gt;

&lt;p&gt;コードにすると、例えば下記のようなコードになります。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationRecord&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User::AsSignUp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;validates&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;after_create&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:send_welcome_email&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;send_welcome_email&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;この例では＜&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User&lt;/code&gt;のサインアップ＞というユースケースにのみ特化したActiveRecordのModelを作成しています。&lt;/p&gt;

&lt;p&gt;ただこの実装に関しては、1 Table 1 ModelというRailsのパラダイム（規約）を壊すことになってしまうので、いささか危険思想という印象があります。&lt;/p&gt;

&lt;p&gt;ただ僕自身実際にプロダクションに導入して運用した経験はないので、もし実運用における成功例お持ちの方がいれば教えていただけると幸いです。&lt;/p&gt;

&lt;h3 id=&quot;non-rails-wayまとめ&quot;&gt;「Non-Rails Way」まとめ&lt;/h3&gt;

&lt;p&gt;4つの Non-Railsを紹介しました。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Form Model&lt;/li&gt;
  &lt;li&gt;PORO&lt;/li&gt;
  &lt;li&gt;Service Class&lt;/li&gt;
  &lt;li&gt;1 Table Multiple Models&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;これらをうまく導入できればFat Modelを倒す強力な武器となるのは間違いないでしょう。&lt;/p&gt;

&lt;p&gt;どれをどう導入するかに関しては正解はないと思うのでチームにあった手法を選択すると良いと考えています。&lt;/p&gt;

&lt;p&gt;といっても「どれを導入すればいいかわからん…」ってなると思うので個人的なおすすめアプローチを紹介すると、モデルを太らせてしまうような複雑なフォームに関してはForm Modelで表現するのがわかりやすいと思います。&lt;/p&gt;

&lt;p&gt;何らかのユースケースに特化したクラスを作りたいのであれば、Sub-Railsのセクションで紹介したInteractorを使うのが個人的にはオススメです。&lt;/p&gt;

&lt;p&gt;上記で足りないユースケースが出てきた場合、POROと総称してModelの補助輪となるようなRubyクラスを用意してあげると良いかと思います。&lt;/p&gt;

&lt;h2 id=&quot;全体のまとめ&quot;&gt;全体のまとめ&lt;/h2&gt;

&lt;p&gt;Fat Modelを倒すための3つのアプローチを紹介しました。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Rails Way&lt;/strong&gt;: Railsの規約に沿った開発アプローチ&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sub-Rails Way&lt;/strong&gt;: Railsの規約をgemで補強・拡張するアプローチ&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Non-Rails Way&lt;/strong&gt;: Railsの規約から外れる独自実装アプローチ&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;まずは、 &lt;strong&gt;Rails Way&lt;/strong&gt; + &lt;strong&gt;Sub-Rails Way&lt;/strong&gt; でFat Modelをダイエットできないか考えましょう。小規模なRailsアプリケーションであれば Rails Way + Sub-Rails Way で十分戦えると思います。&lt;/p&gt;

&lt;p&gt;Rails Way + Sub-Rails Way だけで立ち行かなくなった場合に、必要に応じて適切な &lt;strong&gt;Non-Rails Way&lt;/strong&gt; を取り入れていきましょう。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Non-Rails Way&lt;/strong&gt; はチーム毎に最適解があると思っています。チームで合意できる独自路線を選択・導入すればよいのではないでしょうか。&lt;/p&gt;

&lt;h2 id=&quot;参考資料&quot;&gt;参考資料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;書籍
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://amzn.to/2TO3ZTe&quot;&gt;エンタープライズアプリケーションアーキテクチャパターン&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://amzn.to/2XfXKJT&quot;&gt;Clean Architecture　達人に学ぶソフトウェアの構造と設計&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://amzn.to/3exaz8y&quot;&gt;エリック・エヴァンスのドメイン駆動設計&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://leanpub.com/growing-rails&quot;&gt;Growing Rails Applications in Practice&lt;/a&gt; by Henning Koch and Thomas Eisenbarth&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;アーキテクチャにまつわる資料
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://martinfowler.com/eaaDev/&quot;&gt;Martin Fowler: Development of Further Patterns of Enterprise Application Architecture&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html&quot;&gt;Clean Coder Blog: The Clean Architecture&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://jeffreypalermo.com/2008/07/the-onion-architecture-part-1/&quot;&gt;The Onion Architecture : part 1 | Programming with Palermo&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://guides.hanamirb.org/architecture/interactors/&quot;&gt;Architecture: Interactors | Hanami Guides&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://qiita.com/yuku_t/items/961194a5443b618a4cac&quot;&gt;中規模Web開発のためのMVC分割とレイヤアーキテクチャ - Qiita&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Rails公式ドキュメント
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://guides.rubyonrails.org/association_basics.html&quot;&gt;Active Record Associations — Ruby on Rails Guides&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://guides.rubyonrails.org/active_model_basics.html&quot;&gt;Active Model Basics — Ruby on Rails Guides&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://api.rubyonrails.org/classes/ActiveRecord/NestedAttributes/ClassMethods.html&quot;&gt;accepts_nested_attributes_for&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://api.rubyonrails.org/classes/ActiveRecord/Inheritance.html&quot;&gt;ActiveRecord::Inheritance&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://api.rubyonrails.org/v6.0.2.1/classes/ActiveSupport/Concern.html&quot;&gt;ActiveSupport::Concern&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Form Model (Form Object)について
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://tech.libinc.co.jp/entry/2019/04/05/113000&quot;&gt;Railsで複数モデルを扱うフォームをすっきり書く（Formオブジェクト） - LiBz Tech Blog&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://moneyforward.com/engineers_blog/2018/12/15/formobject/&quot;&gt;accepts_nested_attributes_forを使わず、複数の子レコードを保存する | Money Forward Engineers’ Blog&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://discourse.clean-rails.org/t/model-form-1-1/14&quot;&gt;Model と画面上の form が1対1で一致しない場合、どのように実装するのが綺麗なのか？ - clean-rails.org&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Service Class (Service Object) について
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://techracho.bpsinc.jp/hachi8833/2017_10_16/46482&quot;&gt;Railsで重要なパターンpart 1: Service Object（翻訳）｜TechRacho（テックラッチョ）〜エンジニアの「？」を「！」に〜｜BPS株式会社&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://qiita.com/joker1007/items/2a03500017766bdb0234&quot;&gt;てめえらのRailsはオブジェクト指向じゃねえ！まずはCallbackクラス、Validatorクラスを活用しろ！ - Qiita&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://intersect.whitefusion.io/the-art-of-code/why-service-objects-are-an-anti-pattern&quot;&gt;Why Service Objects are an Anti-Pattern — INTERSECT&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://techracho.bpsinc.jp/hachi8833/2018_04_16/55130&quot;&gt;Service Objectがアンチパターンである理由とよりよい代替手段（翻訳）｜TechRacho（テックラッチョ）〜エンジニアの「？」を「！」に〜｜BPS株式会社&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/willnet/concerns-about-concerns&quot;&gt;Concerns about Concerns - Speaker Deck&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tech.kitchhike.com/entry/2018/02/28/221159&quot;&gt;Decorator と Presenter を使い分けて、 Rails を ViewModel ですっきりさせよう - KitchHike Tech Blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://qiita.com/hanachin_/items/ba1dd93905567d88145c&quot;&gt;ActiveRecordのモデルが1つだとつらい - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;後編質問感想編&quot;&gt;後編（質問・感想編）&lt;/h2&gt;

&lt;p&gt;別記事にまとめました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/how-to-deal-with-fat-model-after&quot;&gt;銀座Rails#21で「Fat Modelの倒し方」を発表しました 〜質問・感想編〜&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://weblog.jamisbuck.org/2006/10/18/skinny-controller-fat-model&quot;&gt;Buckblog: Skinny Controller, Fat Model&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:a&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/hshimoyama/rails-with-applicationmodel&quot;&gt;ApplicationModel のある風景 - Speaker Deck&lt;/a&gt; &lt;a href=&quot;#fnref:a&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:b&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/yasaichi/what-is-ruby-on-rails-and-how-to-deal-with-it&quot;&gt;Ruby on Railsの正体と向き合い方 - Speaker Deck&lt;/a&gt; &lt;a href=&quot;#fnref:b&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:c&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://leanpub.com/growing-rails&quot;&gt;Growing Rails Applications in Practice&lt;/a&gt; &lt;a href=&quot;#fnref:c&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:6&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://twitter.com/dhh/status/964244090224128001&quot;&gt;https://twitter.com/dhh/status/964244090224128001&lt;/a&gt; &lt;a href=&quot;#fnref:6&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:5&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;PoEAA: &lt;a href=&quot;https://www.martinfowler.com/eaaCatalog/singleTableInheritance.html&quot;&gt;Single Table Inheritance&lt;/a&gt; &lt;a href=&quot;#fnref:5&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:7&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://github.com/rails/rails/pull/26976#discussion_r87855694&quot;&gt;https://github.com/rails/rails/pull/26976#discussion_r87855694&lt;/a&gt; &lt;a href=&quot;#fnref:7&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:8&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;参考: &lt;a href=&quot;https://amzn.to/3cekmi3&quot;&gt;『Rubyによるデザインパターン』&lt;/a&gt; 第11章 オブジェクトを改良する：Decorator &lt;a href=&quot;#fnref:8&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:10&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Ruby/Rails公式の提供する機能はgemより貧弱だったりするのであしからず &lt;a href=&quot;#fnref:10&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt; &lt;a href=&quot;#fnref:10:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Toshimaru</name></author><category term="presentation" /><category term="rails" /><category term="activerecord" /><summary type="html">銀座Rails#21で「Fat Modelの倒し方」と題して発表してきました。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/ginzarails-21/og.jpg" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/ginzarails-21/og.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">reviewdogを使ってGitHub Actions上でRuboCop自動レビューを動かす</title><link href="https://blog.toshimaru.net/reviewdog-rubocop-github-actions/" rel="alternate" type="text/html" title="reviewdogを使ってGitHub Actions上でRuboCop自動レビューを動かす" /><published>2020-05-31T00:00:00+09:00</published><updated>2020-06-08T00:00:00+09:00</updated><id>https://blog.toshimaru.net/reviewdog-rubocop-github-actions</id><content type="html" xml:base="https://blog.toshimaru.net/reviewdog-rubocop-github-actions/">&lt;p&gt;過去に&lt;a href=&quot;/reviewdog-rubocop/&quot;&gt;reviewdogを使ってCircleCI上でrubocop自動レビューを動かす記事&lt;/a&gt;を書きました。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;Blogged. | reviewdogを使ってCI上でRuboCop自動レビューを動かす - Hack Your Design! &lt;a href=&quot;https://t.co/8vdNUEIisX&quot;&gt;https://t.co/8vdNUEIisX&lt;/a&gt;&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/1064661783594491904?ref_src=twsrc%5Etfw&quot;&gt;November 19, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;本記事はそれの&lt;a href=&quot;https://github.com/features/actions&quot;&gt;GitHub Actions&lt;/a&gt;バージョンになります。&lt;/p&gt;

&lt;h2 id=&quot;なぜgithub-actionなのか&quot;&gt;なぜGitHub Actionなのか？&lt;/h2&gt;

&lt;p&gt;以前に書いた記事のようにCircleCIでも問題はないものの、GitHub ActionsはデフォルトでPull Requestにコメント可能な &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GITHUB_TOKEN&lt;/code&gt; を吐くことが可能で、そのへんのtoken周りの煩雑な設定が不要という点でCircleCIよりアドバンテージがあると言えます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://help.github.com/en/actions/configuring-and-managing-workflows/authenticating-with-the-github_token&quot;&gt;Authenticating with the GITHUB_TOKEN - GitHub Help&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;GitHubが公式機能として出していることもあり、GitHubとのIntegrationはGitHub Actionsのほうが優れている印象があります。&lt;/p&gt;

&lt;h2 id=&quot;基本のrubocop設定&quot;&gt;基本のrubocop設定&lt;/h2&gt;

&lt;p&gt;GitHub Actionsで動かす基本となるrubocop設定は下記の通りです。&lt;/p&gt;

&lt;p&gt;※ 実際はbundlerのキャッシュの設定などが必要ですが今回は設定していません&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# .github/workflows/rubocop.yml&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;RuboCop&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;pull_request&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;rubocop&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/checkout@v2&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/setup-ruby@v1&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;ruby-version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2.6&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;gem install bundler&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;bundle install&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Run rubocop&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bundle exec rubocop&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上述の設定をベースにreviewdogを使った自動レビューの設定を追加していきます。&lt;/p&gt;

&lt;h2 id=&quot;reviewdogによる自動レビューを追加&quot;&gt;reviewdogによる自動レビューを追加&lt;/h2&gt;

&lt;p&gt;追加するのは下記の2ステップです。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Setup reviewdog: reviewdog のバイナリをインストール&lt;/li&gt;
  &lt;li&gt;Run rubocop with reviewdog: rubocop の指摘を reviewdog に渡してPRコメントを付けさせる&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;yamlファイルとしては下記になります。&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# .github/workflows/rubocop.yml&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;RuboCop&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;pull_request&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;rubocop&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/checkout@v2&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/setup-ruby@v1&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;ruby-version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2.6&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;gem install bundler&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;bundle install&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Setup reviewdog&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;mkdir -p $HOME/bin &amp;amp;&amp;amp; curl -sfL https://raw.githubusercontent.com/reviewdog/reviewdog/master/install.sh | sh -s -- -b $HOME/bin&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;echo ::add-path::$HOME/bin&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Run rubocop with reviewdog&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;REVIEWDOG_GITHUB_API_TOKEN&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bundle exec rubocop | reviewdog -reporter=github-pr-review -f=rubocop&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;レビューコメント&quot;&gt;レビューコメント&lt;/h2&gt;

&lt;p&gt;設定がうまくいっていれば、下記のように &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;github-actions&lt;/code&gt; からの自動レビューコメントが付きます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/rubocop-actions/rubocop-by-github-actions.png&quot; alt=&quot;comment by github-actions&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;実際に動かしてみたpull-request&quot;&gt;実際に動かしてみたPull Request&lt;/h2&gt;

&lt;p&gt;実際にこの構成で設定してみたPRは下記になります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/toshimaru/Test/pull/16&quot;&gt;rubocop x reviewdog x GitHub Actions by toshimaru · Pull Request #16 · toshimaru/Test&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;余談&quot;&gt;余談&lt;/h2&gt;

&lt;p&gt;本記事ではミニマルな設定を紹介しましたが、実行高速化のために実際は下記の設定もあわせてしたほうが良いでしょう。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;bundler cache の設定&lt;/li&gt;
  &lt;li&gt;rubocop cache の設定（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.cache/rubocop_cache&lt;/code&gt;）&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--parallel&lt;/code&gt; オプションの追加&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Toshimaru</name></author><category term="rubocop" /><category term="github" /><category term="ci" /><category term="review" /><summary type="html">過去にreviewdogを使ってCircleCI上でrubocop自動レビューを動かす記事を書きました。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/rubocop-actions/rubocop-actions.jpg" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/rubocop-actions/rubocop-actions.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">[Ruby]日時が特定日時の範囲内にあるかのチェック</title><link href="https://blog.toshimaru.net/datetime-range-check/" rel="alternate" type="text/html" title="[Ruby]日時が特定日時の範囲内にあるかのチェック" /><published>2020-05-17T00:00:00+09:00</published><updated>2020-05-17T00:00:00+09:00</updated><id>https://blog.toshimaru.net/datetime-range-check</id><content type="html" xml:base="https://blog.toshimaru.net/datetime-range-check/">&lt;h1 id=&quot;timewithzonebetween-で範囲内判定&quot;&gt;TimeWithZone#between? で範囲内判定&lt;/h1&gt;

&lt;p&gt;特定日付が範囲内にあるかの判定を行うには &lt;a href=&quot;https://railsdoc.github.io/classes/ActiveSupport/TimeWithZone.html#method-i-between-3F&quot;&gt;ActiveSupport::TimeWithZone#between?&lt;/a&gt; が使える。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# 日時.between?(始端, 終端)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;between?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;yesterday&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tomorrow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;実際に範囲内チェックを行うとこんな感じ。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;between?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;yesterday&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tomorrow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;between?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;week&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ago&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;yesterday&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;between?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tomorrow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;week&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;since&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ただ上記の書き方の場合、始端もしくは終端が &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nil&lt;/code&gt; の場合にエラーが出てしまう。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;today&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;between?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;yesterday&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;ArgumentError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comparison&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;failed&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:in&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`between?`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;rangecover-で範囲内判定&quot;&gt;Range#cover? で範囲内判定&lt;/h2&gt;

&lt;p&gt;上述の問題が回避するには、Rubyの &lt;a href=&quot;https://docs.ruby-lang.org/ja/2.7.0/method/Range/i/cover=3f.html&quot;&gt;Range#cover?&lt;/a&gt; が使える。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# (始端..終端).cover? 日時&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;yesterday&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tomorrow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cover?&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;始端終端が-nil-の場合&quot;&gt;始端/終端が nil の場合&lt;/h3&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# 始端がnil&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tomorrow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cover?&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 終端がnil&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;yesterday&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cover?&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;下記の通り範囲内から外れた場合は &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt; が帰ってくる。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;yesterday&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cover?&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tomorrow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cover?&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Toshimaru</name></author><category term="ruby" /><category term="rails" /><summary type="html">TimeWithZone#between? で範囲内判定</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/ruby-range.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/ruby-range.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">【レビュー】HHKB Hybrid Type-S をしばらく使ってみた感想</title><link href="https://blog.toshimaru.net/hhkb-hybrid-type-s/" rel="alternate" type="text/html" title="【レビュー】HHKB Hybrid Type-S をしばらく使ってみた感想" /><published>2020-05-02T00:00:00+09:00</published><updated>2020-05-16T00:00:00+09:00</updated><id>https://blog.toshimaru.net/hhkb-hybrid-type-s</id><content type="html" xml:base="https://blog.toshimaru.net/hhkb-hybrid-type-s/">&lt;p&gt;&lt;a href=&quot;https://happyhackingkb.com/jp/products/hybrid_types/&quot;&gt;HHKB Professional
HYBRID Type-S&lt;/a&gt; を購入してしばらく経ったので使ってみた感想を書いてみます。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;例のブツです &lt;a href=&quot;https://twitter.com/hashtag/HHKB?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#HHKB&lt;/a&gt; &lt;a href=&quot;https://t.co/agDV1Hol5Z&quot;&gt;pic.twitter.com/agDV1Hol5Z&lt;/a&gt;&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/1206387903632248833?ref_src=twsrc%5Etfw&quot;&gt;December 16, 2019&lt;/a&gt;&lt;/blockquote&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=toshimaru-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B082TXLC2B&amp;amp;linkId=c5256b54070710d4ccbe87264a98553d&quot;&gt;&lt;/iframe&gt;
&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=toshimaru-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B082TSZ27D&amp;amp;linkId=06db5d4f52a7b49dce985f7445194cbb&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;購入モチベーション&quot;&gt;購入モチベーション&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;not Type-SなHHKBはややうるさい&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;自分でタイピングしているときは気にならないけど、隣でバシバシ叩かれているのを体験するとやや音が耳障りなときがある。ノイズを気にせずタイピングできるように静音性のある Type-S が欲しかった&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Type-C接続&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;mini USB接続で macbook の Type-C と接続しているのがどうも時代遅れ感があってイヤだった&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Bluetooth接続&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;BT無線接続でもキーボードを接続したかった&lt;/li&gt;
      &lt;li&gt;⚠️ Bluetooth接続できるのは、macOS 10.15（Catalina）以降&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;その他
    &lt;ul&gt;
      &lt;li&gt;（&lt;a href=&quot;https://medpeer.co.jp/recruit/workplace/development.html&quot;&gt;会社の補助&lt;/a&gt;が出る 😏）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;購入したモデル&quot;&gt;購入したモデル&lt;/h2&gt;

&lt;p&gt;カラーは白、日本語配列を購入しました。&lt;/p&gt;

&lt;p&gt;今までは中二心をくすぐる墨カラーを使用していましたが、キーの視認性が悪く不便と気づいてしまったので白をセレクトしました（大人になったのね、私）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/hhkb/white-hhkb.jpg&quot; alt=&quot;白、日本語配列HHKB&quot; /&gt;&lt;/p&gt;

&lt;p&gt;下記エントリで紹介した通り、尊師スタイルで利用しています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/macbook-hhkb-sonshi-style/&quot;&gt;俺流 MacBook+HHKB 最強尊師スタイル&lt;/a&gt;&lt;/p&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=toshimaru-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B077ZSGQDH&amp;amp;linkId=254fa7761170460244a7a889534107de&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;hhkb-hybrid-特徴&quot;&gt;HHKB Hybrid 特徴&lt;/h2&gt;

&lt;h3 id=&quot;無線接続有線接続&quot;&gt;無線接続/有線接続&lt;/h3&gt;

&lt;p&gt;名前のHybridというのはどうやら無線接続・有線接続のハイブリッド接続が可能、という意味っぽいです。&lt;/p&gt;

&lt;p&gt;これにより、シーンに合わせて下記のように使い分けできるのは便利かもしれません。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;自宅メインで接続するときは有線接続&lt;/li&gt;
  &lt;li&gt;持ち運び利用するときは無線接続&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;なお、無線の給電がバッテリーではなく乾電池なのは「HHKBを長く使ってもらうため」とのこと。バッテリーだと確かにヘタってしまうので、乾電池の採用はPFUらしい設計思想と言えるかもしれません。&lt;/p&gt;

&lt;h3 id=&quot;usb-type-c&quot;&gt;USB Type-C&lt;/h3&gt;

&lt;p&gt;HHKB Hybrid ではUSB Type-Cによる接続が可能です。&lt;/p&gt;

&lt;p&gt;上述の通り僕は尊師スタイルでHHKBを使っているのでディスプレイとHHKB接続面がぶつからないように下記のL字のUSB Type-Cケーブルを購入しておきました。&lt;/p&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=toshimaru-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B07PLRNWQ7&amp;amp;linkId=012378bddd1c67b23ef7468a9f50f430&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/hhkb/hhkbcover.jpg&quot; alt=&quot;キーボードルーフ&quot; /&gt;&lt;/p&gt;

&lt;p&gt;☝️キャンペーンで無料で付いてきたキーボードルーフ。キーボード隙間に入り込むホコリを防げて地味に便利。&lt;/p&gt;

&lt;h2 id=&quot;しばらく使ってみた感想&quot;&gt;しばらく使ってみた感想&lt;/h2&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;Type-S、静かだし打ち心地もソフトで気持ちいい&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/1207643044020801538?ref_src=twsrc%5Etfw&quot;&gt;December 19, 2019&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3 id=&quot;静音性&quot;&gt;静音性&lt;/h3&gt;

&lt;p&gt;キータイプしてまず驚くのは、その静音性。&lt;/p&gt;

&lt;p&gt;not Type-SなHHKBを使ったことのなかった僕にとってType-Sを触ったのはこれが初でした。Type-SじゃなくともHHKBは十分に静かだと感じていたのですが、いざType-Sを使ってみると無印HHKBに比してやはり静か。&lt;/p&gt;

&lt;p&gt;更に静音性を極めたい方であれば、PFU公式のHHKB吸振マットがあるのでこちらを購入すると良さそうです。&lt;/p&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=toshimaru-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B08344W1DY&amp;amp;linkId=2671483c8c0b7897242464be48511332&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;これだけの静音性であれば、HHKB使用時の同僚や家族からの「（うるせーな、こいつのキーボード…）」と思われる恐怖からは、いくばくか逃れることができると思います。&lt;/p&gt;

&lt;h2 id=&quot;キータッチ&quot;&gt;キータッチ&lt;/h2&gt;

&lt;p&gt;静音性とあわせて、キータッチもType-Sはだいぶソフトな印象があります。&lt;/p&gt;

&lt;p&gt;これに関しては好みが分かれると思っていて「確かな打鍵感や音が好み」という方はType-Sではないほうが、好みではないかと思いました。&lt;/p&gt;

&lt;p&gt;かくいう僕もそっちのタイプで、カチャカチャ鳴っているほうが＜俺仕事してる感＞が出て好きなんですよね（笑）。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;Type-SなHHKB, not Type-SなHHKBを両方使った結果、not Type-SなHHKBのほうが好きということがわかった。「ｶﾁｬｶﾁｬ...ｯターン!!!」したい僕のような人間にとっては確かな打鍵感や打鍵時のフィードバックがあったほうが嬉しいのだ&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/1222712303713312770?ref_src=twsrc%5Etfw&quot;&gt;January 30, 2020&lt;/a&gt;&lt;/blockquote&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Type-C・Bluetooth接続は良いぞ&lt;/li&gt;
  &lt;li&gt;Type-S は静かで良い
    &lt;ul&gt;
      &lt;li&gt;周囲に人がいる職場や家庭で使う場合はType-Sが良いのではないでしょうか&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;キータッチの感触は not Type-S のほうが個人的には好き&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=toshimaru-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B082TXLC2B&amp;amp;linkId=c5256b54070710d4ccbe87264a98553d&quot;&gt;&lt;/iframe&gt;
&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=toshimaru-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B082TSZ27D&amp;amp;linkId=06db5d4f52a7b49dce985f7445194cbb&quot;&gt;&lt;/iframe&gt;
&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=toshimaru-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B082TQK2SB&amp;amp;linkId=666af27170fbdef39da1b8d2de31e88d&quot;&gt;&lt;/iframe&gt;
&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=toshimaru-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B082TYNNL2&amp;amp;linkId=70759e0c4f584e35a0935d040fa17d96&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;おまけ&quot;&gt;おまけ&lt;/h2&gt;

&lt;p&gt;HHKBの持ち運びに100均のペットボトルクッションケースがシンデレラ・フィットという噂を聞いて試してみたらたしかにいい感じにフィットしました。公式ケースだとけっこういいお値段するのでオススメです。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;もしお知り合いに、「HHKBの新型を買って、持ち歩きたいけど安いクッションケースないんだよなー」という人がいたら、100均で売ってたペットボトルクッションケースがシンデレラフィットですよ、と伝えてあげてください。&lt;br /&gt; &lt;a href=&quot;https://twitter.com/hashtag/HHKB?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#HHKB&lt;/a&gt; &lt;a href=&quot;https://t.co/zgopIDk2vJ&quot;&gt;pic.twitter.com/zgopIDk2vJ&lt;/a&gt;&lt;/p&gt;&amp;mdash; いちのせさん (@yuhkiichinose) &lt;a href=&quot;https://twitter.com/yuhkiichinose/status/1206531899209863168?ref_src=twsrc%5Etfw&quot;&gt;December 16, 2019&lt;/a&gt;&lt;/blockquote&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=toshimaru-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B073XGWYVH&amp;amp;linkId=1cfa8610e160a15364c222146ccca7cd&quot;&gt;&lt;/iframe&gt;
&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=toshimaru-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B07DC5732N&amp;amp;linkId=743a7be3aa6974683f9ad656223c2d8d&quot;&gt;&lt;/iframe&gt;</content><author><name>Toshimaru</name></author><category term="tech" /><summary type="html">HHKB Professional HYBRID Type-S を購入してしばらく経ったので使ってみた感想を書いてみます。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/hhkb/hhkb-hybrid.jpg" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/hhkb/hhkb-hybrid.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>