<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="https://blog.toshimaru.net/feed/by_tag/review.xml" rel="self" type="application/atom+xml" /><link href="https://blog.toshimaru.net/" rel="alternate" type="text/html" /><updated>2022-11-05T23:59:22+09:00</updated><id>https://blog.toshimaru.net/feed/by_tag/review.xml</id><title type="html">Hack Your Design!</title><subtitle>toshimaruの技術系なブログ</subtitle><author><name>Toshimaru</name></author><entry><title type="html">reviewdogを使ってGitHub Actions上でRuboCop自動レビューを動かす</title><link href="https://blog.toshimaru.net/reviewdog-rubocop-github-actions/" rel="alternate" type="text/html" title="reviewdogを使ってGitHub Actions上でRuboCop自動レビューを動かす" /><published>2020-05-31T00:00:00+09:00</published><updated>2020-06-08T00:00:00+09:00</updated><id>https://blog.toshimaru.net/reviewdog-rubocop-github-actions</id><content type="html" xml:base="https://blog.toshimaru.net/reviewdog-rubocop-github-actions/"><![CDATA[<p>過去に<a href="/reviewdog-rubocop/">reviewdogを使ってCircleCI上でrubocop自動レビューを動かす記事</a>を書きました。</p>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">Blogged. | reviewdogを使ってCI上でRuboCop自動レビューを動かす - Hack Your Design! <a href="https://t.co/8vdNUEIisX">https://t.co/8vdNUEIisX</a></p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/1064661783594491904?ref_src=twsrc%5Etfw">November 19, 2018</a></blockquote>

<p>本記事はそれの<a href="https://github.com/features/actions">GitHub Actions</a>バージョンになります。</p>

<h2 id="なぜgithub-actionなのか">なぜGitHub Actionなのか？</h2>

<p>以前に書いた記事のようにCircleCIでも問題はないものの、GitHub ActionsはデフォルトでPull Requestにコメント可能な <code class="language-plaintext highlighter-rouge">GITHUB_TOKEN</code> を吐くことが可能で、そのへんのtoken周りの煩雑な設定が不要という点でCircleCIよりアドバンテージがあると言えます。</p>

<p><a href="https://help.github.com/en/actions/configuring-and-managing-workflows/authenticating-with-the-github_token">Authenticating with the GITHUB_TOKEN - GitHub Help</a></p>

<p>GitHubが公式機能として出していることもあり、GitHubとのIntegrationはGitHub Actionsのほうが優れている印象があります。</p>

<h2 id="基本のrubocop設定">基本のrubocop設定</h2>

<p>GitHub Actionsで動かす基本となるrubocop設定は下記の通りです。</p>

<p>※ 実際はbundlerのキャッシュの設定などが必要ですが今回は設定していません</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># .github/workflows/rubocop.yml</span>
<span class="na">name</span><span class="pi">:</span> <span class="s">RuboCop</span>
<span class="na">on</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">pull_request</span><span class="pi">]</span>
<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">rubocop</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">steps</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v2</span>
    <span class="pi">-</span> <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/setup-ruby@v1</span>
      <span class="na">with</span><span class="pi">:</span>
        <span class="na">ruby-version</span><span class="pi">:</span> <span class="m">2.6</span>
    <span class="pi">-</span> <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
        <span class="s">gem install bundler</span>
        <span class="s">bundle install</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Run rubocop</span>
      <span class="na">run</span><span class="pi">:</span> <span class="s">bundle exec rubocop</span>
</code></pre></div></div>

<p>上述の設定をベースにreviewdogを使った自動レビューの設定を追加していきます。</p>

<h2 id="reviewdogによる自動レビューを追加">reviewdogによる自動レビューを追加</h2>

<p>追加するのは下記の2ステップです。</p>

<ol>
  <li>Setup reviewdog: reviewdog のバイナリをインストール</li>
  <li>Run rubocop with reviewdog: rubocop の指摘を reviewdog に渡してPRコメントを付けさせる</li>
</ol>

<p>yamlファイルとしては下記になります。</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># .github/workflows/rubocop.yml</span>
<span class="na">name</span><span class="pi">:</span> <span class="s">RuboCop</span>
<span class="na">on</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">pull_request</span><span class="pi">]</span>
<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">rubocop</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">steps</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v2</span>
    <span class="pi">-</span> <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/setup-ruby@v1</span>
      <span class="na">with</span><span class="pi">:</span>
        <span class="na">ruby-version</span><span class="pi">:</span> <span class="m">2.6</span>
    <span class="pi">-</span> <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
        <span class="s">gem install bundler</span>
        <span class="s">bundle install</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Setup reviewdog</span>
      <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
        <span class="s">mkdir -p $HOME/bin &amp;&amp; curl -sfL https://raw.githubusercontent.com/reviewdog/reviewdog/master/install.sh | sh -s -- -b $HOME/bin</span>
        <span class="s">echo ::add-path::$HOME/bin</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Run rubocop with reviewdog</span>
      <span class="na">env</span><span class="pi">:</span>
        <span class="na">REVIEWDOG_GITHUB_API_TOKEN</span><span class="pi">:</span> <span class="s">${{ secrets.GITHUB_TOKEN }}</span>
      <span class="na">run</span><span class="pi">:</span> <span class="s">bundle exec rubocop | reviewdog -reporter=github-pr-review -f=rubocop</span>
</code></pre></div></div>

<h2 id="レビューコメント">レビューコメント</h2>

<p>設定がうまくいっていれば、下記のように <code class="language-plaintext highlighter-rouge">github-actions</code> からの自動レビューコメントが付きます。</p>

<p><img src="/images/posts/rubocop-actions/rubocop-by-github-actions.png" alt="comment by github-actions" /></p>

<h2 id="実際に動かしてみたpull-request">実際に動かしてみたPull Request</h2>

<p>実際にこの構成で設定してみたPRは下記になります。</p>

<p><a href="https://github.com/toshimaru/Test/pull/16">rubocop x reviewdog x GitHub Actions by toshimaru · Pull Request #16 · toshimaru/Test</a></p>

<h2 id="余談">余談</h2>

<p>本記事ではミニマルな設定を紹介しましたが、実行高速化のために実際は下記の設定もあわせてしたほうが良いでしょう。</p>

<ul>
  <li>bundler cache の設定</li>
  <li>rubocop cache の設定（<code class="language-plaintext highlighter-rouge">~/.cache/rubocop_cache</code>）</li>
  <li><code class="language-plaintext highlighter-rouge">--parallel</code> オプションの追加</li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="rubocop" /><category term="github" /><category term="ci" /><category term="review" /><summary type="html"><![CDATA[過去にreviewdogを使ってCircleCI上でrubocop自動レビューを動かす記事を書きました。 本記事はそれのGitHub Actionsバージョンになります。　GitHub Actions上でreviewdogを使ってRuboCop自動レビューを動かすための設定を紹介します。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/rubocop-actions/rubocop-actions.jpg" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/rubocop-actions/rubocop-actions.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">アンチパターンから学ぶHRTなコードレビュー</title><link href="https://blog.toshimaru.net/hrt-review/" rel="alternate" type="text/html" title="アンチパターンから学ぶHRTなコードレビュー" /><published>2019-08-12T00:00:00+09:00</published><updated>2019-08-12T00:00:00+09:00</updated><id>https://blog.toshimaru.net/hrt-review</id><content type="html" xml:base="https://blog.toshimaru.net/hrt-review/"><![CDATA[<p><a href="/team-geek/">『Team Geek』の書評でも書いた</a>んだけど、コードレビューのときはHRTの精神を大事にしたい。</p>

<h2 id="what-is-hrt">What is HRT?</h2>

<p>HRTとは下記の３つの精神のことだ。</p>

<ul>
  <li><strong>Humility</strong>（謙虚）</li>
  <li><strong>Respect</strong>（尊敬）</li>
  <li><strong>Trust</strong>（信頼）</li>
</ul>

<p>HRTについて詳しくは弊ブログの下記記事を参照。</p>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">心理的安全性の阻害はHRT精神の欠如によって起こる。常に仲間に対して謙虚、尊敬、信頼の念を持とうな。お兄さんとの約束だぞ！<br />『Team Geek』読んだ ~HRTの精神を知り会社でサバイブしていく方法~ - Hack Your Design! <a href="https://t.co/EHogf87DOd">https://t.co/EHogf87DOd</a></p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/1142027694709698561?ref_src=twsrc%5Etfw">June 21, 2019</a></blockquote>

<p>以下、アンチパターンなコードレビューのシーンを先輩（👿）と後輩（👼）でお送りする。</p>

<h2 id="アンチパターン1コメントが怖い">アンチパターン1・コメントが怖い</h2>

<p>⛔️<strong>アンチパターンなコードレビュー</strong></p>

<blockquote>
  <p>👿「typoです。直してください」</p>

  <p>👿「これはこう書くべきです（…以下コード提案…）」</p>

  <p>👿「どうしてこのようなコードにしたんですか？」</p>

  <p>👼「（えっ… 怒っているの？ 怖い…）」</p>
</blockquote>

<h3 id="説明">説明</h3>

<p>コードレビューじゃなくとも、テキスト・コミュニケーションであれば手段を問わず発生しうる問題。<strong>文字だけのコミュニケーションは、発言の背後にあるコンテキストや感情が汲み取りにくい</strong>。</p>

<p>上記の例だと背後にある感情が「typoじぇねぇか💢 直せ😠」なのか「typoみつけちゃった👀 指摘して直してもらおう😃」なのかがわからないので、先輩・後輩という関係性を前提とした場合、後輩からは先輩が怒っていると思われていても仕方ない状況と言える。</p>

<p>先輩の他の指摘に関しても同様に、「こう書くべき💢」なのか「個人的にこう書くべきだと思っているんだけどなぁ…🤔」なのかわからないし、「どうしてこんなひどいコード書いた？💢」なのか「このコードの意図が知りたいなぁ、どうしてこう書いたんだろう？🤔」なのかがわからない。</p>

<h3 id="解決策">解決策</h3>

<ul>
  <li>絵文字を使う😃
    <ul>
      <li>絵文字で感情を表現して、発言の背後にある感情の誤読を減らす</li>
    </ul>
  </li>
  <li>コードレビュー・ラベルを使う
    <ul>
      <li>コメントの前に<code class="language-plaintext highlighter-rouge">[nits]</code> <code class="language-plaintext highlighter-rouge">[imo]</code> <code class="language-plaintext highlighter-rouge">[ask]</code>などのラベルをつける
        <ul>
          <li><code class="language-plaintext highlighter-rouge">[nits]</code> 些細な指摘であることを伝える</li>
          <li><code class="language-plaintext highlighter-rouge">[imo]</code> 個人的な意見であることを伝える</li>
          <li><code class="language-plaintext highlighter-rouge">[ask]</code> 質問事項、確認事項を訊く</li>
          <li>参考: <a href="https://employment.en-japan.com/engineerhub/entry/2018/01/24/110000">悪いコードを憎んで人を憎まず！ プルリク送付前に心がけたいコードレビューのコミュニケーション術</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li>断定口調・命令口調ではなく提案口調を使う
    <ul>
      <li>「〜すべき」「〜してください」などの高圧的な断定・命令口調ではなく、「〜どうでしょう？」などの提案口調を使う</li>
    </ul>
  </li>
  <li>質問の背景を明確にする
    <ul>
      <li>質問をするということは質問をするに至った背景が何かあるはずなので、それを一緒に提示する</li>
    </ul>
  </li>
  <li>口頭で指摘する</li>
  <li>上述の<code class="language-plaintext highlighter-rouge">[nits]</code>な指摘で自動化できる点は自動化する
    <ul>
      <li>Rubyにおける<a href="https://github.com/rubocop-hq/rubocop">rubocop</a>、JSにおける<a href="https://github.com/eslint/eslint">ESLint</a>などは自動化可能なのでCIで自動化する</li>
      <li>人間がいちいち指摘するよりも時間的コスト・心理的コストがレビュワー、レビュイー双方にとってずっと低い</li>
      <li>ツールとしては<a href="https://github.com/reviewdog/reviewdog">reviewdog</a>や<a href="https://sider.review">sider</a>など</li>
    </ul>
  </li>
</ul>

<p>✅<strong>改善後</strong></p>

<blockquote>
  <p>👿「[nits]typo❗️😄」</p>

  <p>👿「[imo]これはこう書くべきだと思ったのですが、どうでしょう❓😺（…以下コード提案…）」</p>

  <p>👿「[ask]モデルにあっても良い処理なように感じましたが、どうしてここに処理を書いたんでしょう？」</p>

  <p>👿「[ask]xxx関数を使えばもうちょっとシンプルに書ける気がしますが、どうしてこう書いたんでしょう？」</p>

  <p>🤖(bots) 「Trailing whitespace detected.」</p>
</blockquote>

<p>あるいは口頭で:</p>

<blockquote>
  <p>👿「さっき上げたコードでちょっと気になるところがあるから聞いてもいいですか？ （コードを指差しして）この部分のコードの意図が汲み取れなかったんですけど、どうしてこんなコードにしたんでしょう？」</p>

  <p>👼「あー、そこは〇〇〇で、△△△だからそう書いたんですよね。（…以下説明…）」</p>
</blockquote>

<h2 id="アンチパターン2理由がない">アンチパターン2・理由がない</h2>

<p>⛔️<strong>アンチパターンなコードレビュー</strong></p>

<blockquote>
  <p>👿「これは残念なコードですので、直してください」</p>

  <p>👿「この書き方をしたらダメです」</p>

  <p>👼「はい…（えぇぇ！？ 何がダメなんだろう…？）」</p>
</blockquote>

<h3 id="説明-1">説明</h3>

<p>コードレビューコメントに指示はあるが、理由がないケース。</p>

<p>上記のケースだと「なぜ残念なコードと言えるのか？」というポイントが欠如している。コードに対する価値観が完全に合致していれば、「残念なコード」でレビュイーに伝わるが、大抵の場合はそうではないので理由がないと伝わらないケースが多い。特にレビュイーがジュニアレベルであればコード良し悪しの分別がつかないのでなおさら伝わらない。</p>

<h3 id="解決策-1">解決策</h3>

<ul>
  <li>レビュイーが納得できるに足る理由を示す
    <ul>
      <li>なぜ残念なのか？ なぜダメなのか？ 必ずWhyを示す</li>
      <li>「個人的にこっちのほうが好きだから」「なんとなく」などは納得できる理由ではないのでアウト 👉 上述の<code class="language-plaintext highlighter-rouge">[imo]</code>提案行き</li>
    </ul>
  </li>
</ul>

<p>✅<strong>改善後</strong></p>

<blockquote>
  <p>👿「これはマジックナンバーになっているので、定数に切り出すように直してください😉」</p>

  <p>👿「この書き方はXSS脆弱性がある書き方だからダメです🙅」</p>

  <p>👿「[imo]こっちのほうがスッキリしていて個人的に好きなのですがいかがでしょう？（…以下コード提案…）」</p>
</blockquote>

<h2 id="アンチパターン3誹謗中傷">アンチパターン3・誹謗中傷</h2>

<p>⛔️<strong>アンチパターンなコードレビュー</strong></p>

<blockquote>
  <p>👿「これはクソコードですね」</p>

  <p>👼「ごめんなさい（一生懸命書いたのに…（泣））」</p>
</blockquote>

<h3 id="説明-2">説明</h3>

<p>コードに対する誹謗中傷。これを乱用すると現場が殺伐とする。</p>

<h3 id="解決策-2">解決策</h3>

<ul>
  <li>「クソコード」などのコードの誹謗中傷となるような言い回しは使わない
    <ul>
      <li>「あまり強い言葉を遣うなよ。弱く見えるぞ。」</li>
    </ul>
  </li>
  <li>口頭でコミュニケーションする
    <ul>
      <li>クソコードのような強い言葉を使いたくなるような場面は感情が昂ぶっているときであり、テキスト・コミュニケーションだとすれ違いが起きる可能性が高い。クソコードと思い至るまでの理由を膝を突き合わせてきちんと説明する</li>
    </ul>
  </li>
</ul>

<p>✅<strong>改善後</strong></p>

<blockquote>
  <p>👿「これは今後メンテしていくのがとても辛いコードになりそうです。なぜなら〇〇だし、△△ともなり、××だからです。」</p>

  <p>👼「なるほど〜〜〜！（私クソコードを書いてたかもしれない…）」</p>
</blockquote>

<h2 id="アンチパターン４大量コメント">アンチパターン４・大量コメント</h2>

<p>⛔️<strong>アンチパターンなコードレビュー</strong></p>

<blockquote>
  <p>👿「〇〇〇〇」</p>

  <p>👿「△△△△」</p>

  <p>👿「××××」</p>

  <p>（以下大量のレビューコメント）</p>
</blockquote>

<h3 id="説明-3">説明</h3>

<p>一連のコード変更に対して大量のレビューコメントが付く事象のこと。</p>

<p>シニアエンジニアがジュニアエンジニアのコードをレビューするときなど、レビュワー・レビュイー間のスキル・知識・経験に大きな差があるときに陥りやすい。大量のコメントを付ける/付けられることになるので、レビュワーにとってもレビュイーにとっても心的労力が高い。</p>

<p>また１つ１つのコメントがどれだけ丁寧だとしても、その数が多くなるとレビュイーに無力感を味あわせてしまうことになり心理的ストレスに繋がる可能性がある。</p>

<h3 id="解決策-3">解決策</h3>

<ul>
  <li>コードの差分を小さくするように分割する
    <ul>
      <li>コメントが多く付くのはそもそもコードの差分が大きいからなので差分を小さくしてレビュー対象コードを少なくする</li>
      <li>GitHub であれば Pull Request を可能な限り分割し１つ１つを小さい差分に保つ</li>
    </ul>
  </li>
  <li>コードレビューの代わりにペアプログラミングをする
    <ul>
      <li>コードレビューが大変ならコードレビューをしない。ペアプロでその場で一緒に解決させる</li>
      <li>モブプログラミングでもOK</li>
    </ul>
  </li>
  <li>研修の実施および内容見直し
    <ul>
      <li>スキルに大きな差があることが原因なので、その差を埋めるための研修を実施</li>
      <li>もし新入社員向けに研修がないのであれば、新入社員を対象に技術研修を新たに計画すべきかもしれない。既にあるのだとすれば研修内容の見直しが必要かもしれない</li>
      <li>中途であればオンボーディング・プロセスの見直しが必要かもしれない</li>
    </ul>
  </li>
</ul>

<p>✅<strong>改善後</strong></p>

<blockquote>
  <p>（ナビゲーター👿/ドライバー👼がペアプログラミング中）</p>

  <p>👿「ここのコードは 〇〇〇 できれいに書けるんじゃないかな」</p>

  <p>👼「なるほど、やってみます。（コードを修正する）」</p>

  <p>👿「次に 〇〇〇 によって ××× が要らなくなったから直せそう」</p>

  <p>👼「あ、たしかに。やってみます（コードを修正する）」</p>
</blockquote>

<h2 id="アンチパターン５長大な議論">アンチパターン５・長大な議論</h2>

<p>⛔️<strong>アンチパターンなコードレビュー</strong></p>

<blockquote>
  <p>👿「ここの設計、私としては 〇〇〇 だと思うんです」</p>

  <p>👨「僕はそうは思いません。△△△ にしたほうが良いと思うんです」</p>

  <p>👩「私は 〇〇〇 案と △△△ 案を組み合わせた ××× でも良いかと」</p>

  <p>（以下、👿, 👨, 👩 の議論が延々と続く）</p>

  <p>👼「（あわわわわわ、、、どうすれば…）」</p>
</blockquote>

<h3 id="説明-4">説明</h3>

<p>１つのコードレビューに端を発して長大な議論をスタートさせること。これが始まると一つのコメントに対してのスレッドがどんどん伸びていくことになる。</p>

<p>設計などの大枠なトピックだと、長大な議論になりやすい。</p>

<h3 id="解決策-4">解決策</h3>

<ul>
  <li>話し合いで解決させる
    <ul>
      <li>テキストで延々と話すより、わーっとみんなで集まって話し合うとすぐに決まるケースが多かったりする</li>
      <li>話し合った結果をテキストとして残しておく</li>
    </ul>
  </li>
</ul>

<p>✅<strong>改善後</strong></p>

<blockquote>
  <p>👿「ここの設計、私としては 〇〇〇 だと思うんです」</p>

  <p>👨「僕はそうは思いません。△△△ にしたほうが良いと思うんです」</p>

  <p>👩「私は 〇〇〇 案と △△△ 案を組み合わせた ××× でも良いかと」</p>

  <p>👿「では話し合って決めましょう！」</p>

  <p>（集まって話し合い）</p>

  <p>👿 👨 👩「議論した結果、△△△ が良いとなったので △△△ な方針でいきましょう」</p>

  <p>👼「ラジャー!」</p>
</blockquote>

<h2 id="なぜhrtなレビューが必要なのか">なぜHRTなレビューが必要なのか？</h2>

<p>なぜHRTなコードレビューを心がける必要があるのか？　答えは<strong>チームの心理的安全性を確保するため</strong>だ。</p>

<h3 id="全ては心理的安全性のため">全ては心理的安全性のため</h3>

<p>最近では共通認識になりつつあるので改めて言う必要はないかもしれないが、<strong>ハイパフォーマンスなチームにとって心理的安全性は極めて重要</strong>だ。それはGoogleの調査によって証明されている。</p>

<blockquote>
  <p>Google のリサーチチームが発見した、チームの効果性が高いチームに固有の 5 つの力学のうち、圧倒的に重要なのが心理的安全性です。リサーチ結果によると、心理的安全性の高いチームのメンバーは、Google からの離職率が低く、他のチームメンバーが発案した多様なアイデアをうまく利用することができ、収益性が高く、「効果的に働く」とマネージャーから評価される機会が 2 倍多い、という特徴がありました。</p>
</blockquote>

<p>via. <a href="https://rework.withgoogle.com/jp/guides/understanding-team-effectiveness/steps/foster-psychological-safety/">Google re:Work - ガイド: 「効果的なチームとは何か」を知る</a></p>

<p><img src="/images/posts/hrt/psychological-safety.png" alt="psychological safety" /></p>

<p><a href="https://ja.wikipedia.org/wiki/モヒカン族_(ネット用語)">モヒカン族</a>の方々は下記のように考えるかもしれない。</p>

<ul>
  <li>「何を言ったってそれはコードに対する批判であって書いた人への批判ではない。何を言ってもええやろ」</li>
  <li>「間違ったことは言っていない。言い方はどうだってええやろ」</li>
</ul>

<p>気持ちはわからなくはないが、残念ながら我々は人間である。人間であるということは感情があるということ。自分が頑張って書いたコードを「クソコード」などというリスペクトの無い言い方で批判されて平常心でいられるだろうか？　「〜するべき」「〜しろ」などと高圧的なコメントを受けてレビュイーは気持ちよく受け止められるだろうか？　そこに違和感があった場合、遠慮なく異を唱えることができるだろうか？</p>

<p><strong>「心理的安全性を気にしすぎて何も言えない」のではなく、お互いが年齢・ジェンダー・人種の区別なくフラットな関係性で何でも言い合えるようにするためのHRTであり、そのための心理的安全性である</strong>。そこは勘違いしてはいけない。</p>

<blockquote>
  <p>チーム中にある個人の関係において、「様々な形で課題や問題についての提起がされる」ということに他なりません。（…中略…）つまるところ、心理的安全性が高いとは、「些細な問題であっても提起される」「多く問題に対して自己主張がなされる」という観測可能なチームの状態を意味しています。</p>
</blockquote>

<p>via <a href="https://qiita.com/hirokidaichi/items/5d8c4294083d85654a04">心理的安全性ガイドライン（あるいは権威勾配に関する一考察）</a></p>

<h2 id="参考情報">参考情報</h2>

<ul>
  <li><a href="https://rework.withgoogle.com/jp/guides/understanding-team-effectiveness/steps/introduction/">Google re:Work - ガイド: 「効果的なチームとは何か」を知る</a></li>
  <li><a href="https://qiita.com/hirokidaichi/items/5d8c4294083d85654a04">心理的安全性ガイドライン（あるいは権威勾配に関する一考察） - Qiita</a></li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="review" /><summary type="html"><![CDATA[『Team Geek』の書評でも書いたんだけど、コードレビューのときはHRTの精神を大事にしたい。 HRTとは下記の３つの精神のことだ。 Humility（謙虚） Respect（尊敬） Trust（信頼）以下、アンチパターンなコードレビューのシーンを先輩（👿）と後輩（👼）でお送りする。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/hrt/hrt-review.jpg" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/hrt/hrt-review.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">reviewdogを使ってCI上でRuboCop自動レビューを動かす</title><link href="https://blog.toshimaru.net/reviewdog-rubocop/" rel="alternate" type="text/html" title="reviewdogを使ってCI上でRuboCop自動レビューを動かす" /><published>2018-11-19T00:00:00+09:00</published><updated>2020-06-08T00:00:00+09:00</updated><id>https://blog.toshimaru.net/reviewdog-rubocop</id><content type="html" xml:base="https://blog.toshimaru.net/reviewdog-rubocop/"><![CDATA[<p><a href="https://github.com/rubocop-hq/rubocop">rubocop</a>の自動レビューを<a href="https://github.com/haya14busa/reviewdog">reviewdog</a>を使ってやってみたのでその知見です。</p>

<ul id="markdown-toc">
  <li><a href="#追記" id="markdown-toc-追記">追記</a></li>
  <li><a href="#auto-rubocop-on-circleci-powered-by-reviewdog" id="markdown-toc-auto-rubocop-on-circleci-powered-by-reviewdog">Auto-RuboCop on CircleCI powered by reviewdog</a>    <ul>
      <li><a href="#1-configymlの設定" id="markdown-toc-1-configymlの設定">1. <code class="language-plaintext highlighter-rouge">config.yml</code>の設定</a></li>
      <li><a href="#2コメントできるtokenを取得--設定" id="markdown-toc-2コメントできるtokenを取得--設定">2.コメントできるTokenを取得 &amp; 設定</a></li>
      <li><a href="#3-rubucopの結果をreviewdogで通知" id="markdown-toc-3-rubucopの結果をreviewdogで通知">3. rubucopの結果をreviewdogで通知</a></li>
    </ul>
  </li>
  <li><a href="#完成yamlイメージ" id="markdown-toc-完成yamlイメージ">完成yamlイメージ</a></li>
  <li><a href="#なぜreviewdogなのか" id="markdown-toc-なぜreviewdogなのか">なぜreviewdogなのか</a></li>
  <li><a href="#最後に" id="markdown-toc-最後に">最後に</a></li>
  <li><a href="#参考資料" id="markdown-toc-参考資料">参考資料</a></li>
</ul>

<h2 id="追記">追記</h2>

<p>本記事の GitHub Actions 版を書きました。</p>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">blogged. | reviewdogを使ってGitHub Actions上でRuboCop自動レビューを動かす - Hack Your Design! <a href="https://t.co/4u11iBjm6G">https://t.co/4u11iBjm6G</a></p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/1267121968307814401?ref_src=twsrc%5Etfw">May 31, 2020</a></blockquote>

<h2 id="auto-rubocop-on-circleci-powered-by-reviewdog">Auto-RuboCop on CircleCI powered by reviewdog</h2>

<p>僕の作っているプロジェクトでrubocop自動レビューをCircleCI上で設定してみました。そのプルリクエストを見てもらうのが一番早いと思いますので、下記リンクより差分を確認してください。</p>

<p><a href="https://github.com/toshimaru/RailsTwitterClone/pull/254">https://github.com/toshimaru/RailsTwitterClone/pull/254</a></p>

<h3 id="1-configymlの設定">1. <code class="language-plaintext highlighter-rouge">config.yml</code>の設定</h3>

<p>基本的には<a href="https://github.com/haya14busa/reviewdog#circle-ci">公式READMEのCircleCIセットアップ手順</a>通りですが、まずは下記のようにreviewdogのバイナリを<code class="language-plaintext highlighter-rouge">curl</code>経由で落とします。</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 環境変数でダウンロードするreviewdogのバージョンを指定</span>
<span class="na">environment</span><span class="pi">:</span>
  <span class="na">REVIEWDOG_VERSION</span><span class="pi">:</span> <span class="s2">"</span><span class="s">0.9.11"</span>

<span class="c1"># reviewdogをcurlでダウンロード</span>
<span class="pi">-</span> <span class="na">run</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">Install reviewdog</span>
    <span class="na">command</span><span class="pi">:</span> <span class="pi">|</span>
      <span class="s">curl -fSL https://github.com/haya14busa/reviewdog/releases/download/$REVIEWDOG_VERSION/reviewdog_linux_amd64 -o reviewdog &amp;&amp; chmod +x ./reviewdog</span>
</code></pre></div></div>

<h3 id="2コメントできるtokenを取得--設定">2.コメントできるTokenを取得 &amp; 設定</h3>

<p>reviewdogにコメントさせるためにはコメントできる権限を持ったGitHub Tokenが必要になります。下記手順でGitHub Tokenを取得してください。</p>

<ul>
  <li><a href="https://github.com/settings/tokens">アクセストークンの取得ページ</a>にいく</li>
  <li>下記の権限を設定してTokenを発行
    <ul>
      <li>Privateレポジトリの設定: <code class="language-plaintext highlighter-rouge">repo</code>をチェック</li>
      <li>Publicレポジトリの設定: <code class="language-plaintext highlighter-rouge">public_repo</code>をチェック</li>
    </ul>
  </li>
</ul>

<p>これでTokenが発行できましたので、次にそのTokenの設定です。</p>

<ul>
  <li>CircleCIの環境変数の設定画面を開く</li>
  <li>下記の環境変数を設定
    <ul>
      <li><code class="language-plaintext highlighter-rouge">REVIEWDOG_GITHUB_API_TOKEN</code>の値に前手順で取得したTokenを設定</li>
    </ul>
  </li>
</ul>

<p>これにてreviewdogにコメントできる権限が付与されました。</p>

<h3 id="3-rubucopの結果をreviewdogで通知">3. rubucopの結果をreviewdogで通知</h3>

<p>あとはいつも通りのrubocopのコマンドをパイプしてreviewdogに渡してあげればOK。その際のオプションは <code class="language-plaintext highlighter-rouge">-f=rubocop</code>（rubocopフォーマット指定）, <code class="language-plaintext highlighter-rouge">-reporter=github-pr-review</code>（GitHub PRレビューコメント形式の指定） の２つを指定します。</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">-</span> <span class="na">run</span><span class="pi">:</span> <span class="s">bundle exec rubocop | ./reviewdog -f=rubocop -reporter=github-pr-review</span>
</code></pre></div></div>

<h2 id="完成yamlイメージ">完成yamlイメージ</h2>

<p><code class="language-plaintext highlighter-rouge">.circleci/config.yml</code>の完成イメージは下記です（完全なyamlファイル<a href="https://github.com/toshimaru/RailsTwitterClone/pull/254/files">当該Pull Request</a>より確認してください）。なおCircleCIはversion2.1を使用していることに注意してください（現時点の最新バージョン）。</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="m">2.1</span>
<span class="na">executors</span><span class="pi">:</span>
  <span class="na">default</span><span class="pi">:</span>
    <span class="na">working_directory</span><span class="pi">:</span> <span class="s">~/app</span>
    <span class="na">docker</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">image</span><span class="pi">:</span> <span class="s">circleci/ruby:2.5-node-browsers</span>
        <span class="na">environment</span><span class="pi">:</span>
          <span class="na">RAILS_ENV</span><span class="pi">:</span> <span class="s">test</span>
          <span class="na">REVIEWDOG_VERSION</span><span class="pi">:</span> <span class="s">0.9.11</span>
<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">rubocop</span><span class="pi">:</span>
    <span class="na">executor</span><span class="pi">:</span>
      <span class="na">name</span><span class="pi">:</span> <span class="s">default</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">checkout</span>
      <span class="pi">-</span> <span class="s">bundle_install</span>
      <span class="pi">-</span> <span class="na">run</span><span class="pi">:</span>
          <span class="na">name</span><span class="pi">:</span> <span class="s">Install reviewdog</span>
          <span class="na">command</span><span class="pi">:</span> <span class="pi">|</span>
            <span class="s">curl -fSL https://github.com/haya14busa/reviewdog/releases/download/$REVIEWDOG_VERSION/reviewdog_linux_amd64 -o reviewdog &amp;&amp; chmod +x ./reviewdog</span>
      <span class="pi">-</span> <span class="na">run</span><span class="pi">:</span> <span class="s">bundle exec rubocop | ./reviewdog -f=rubocop -reporter=github-pr-review</span>

<span class="na">workflows</span><span class="pi">:</span>
  <span class="na">test</span><span class="pi">:</span>
    <span class="na">jobs</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">...省略...</span>
</code></pre></div></div>

<h2 id="なぜreviewdogなのか">なぜreviewdogなのか</h2>

<p>ruboop自動レビューのための既にあるツールとしては、<a href="https://github.com/packsaddle/ruby-saddler">Saddler</a>や<a href="https://github.com/prontolabs/pronto">pronto</a>などがありますが、なぜそれらを使わずにreviewdogを採用したのかというと下記の理由からです。</p>

<ul>
  <li>Goのシングルバイナリポン置き（curlワンコマンド）でSetupがめちゃくちゃ楽</li>
  <li>Language Agnostic （Ruby以外もGo, PHP, Pythonなど他言語で使える）</li>
  <li>Go実装でパフォーマンスが良い</li>
  <li>Activeにメンテされている</li>
  <li>READMEドキュメントが充実している</li>
  <li>日本人が作っている！（おまけ理由</li>
</ul>

<h2 id="最後に">最後に</h2>

<p>本記事ではRubyプロジェクトのrubocop checkをreviewdogを使ってCircleCI上で動かす例を紹介しました。</p>

<p>公式READMEにはTravisCI上での動かし方であったり、GitHubの新機能・GitHub Checks形式での動かし方も記載されておりますので、興味があるかたは公式READMEをご参照ください。</p>

<h2 id="参考資料">参考資料</h2>

<ul>
  <li><a href="https://github.com/haya14busa/reviewdog">haya14busa/reviewdog</a></li>
  <li><a href="http://haya14busa.com/reviewdog/">reviewdog を飼ってコードレビューや開発を改善しませんか - haya14busa</a></li>
  <li><a href="https://qiita.com/azu/items/c563da0b5455a1b1dca2">reviewdogを使ってtextlintの結果をPull Requestに書き込む方法 - Qiita</a></li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="review" /><category term="rubocop" /><category term="github" /><category term="circleci" /><category term="ci" /><summary type="html"><![CDATA[rubocopの自動レビューをreviewdogを使ってやってみたのでその知見です。 Auto-RuboCop on CircleCI powered by reviewdog 僕の作っているプロジェクトでrubocop自動レビューをCircleCI上で設定してみました。そのプルリクエストを見てもらうのが一番早いと思いますので、下記リンクより差分を確認してください。基本的には公式READMEのCircleCIセットアップ手順通りですが、まずは下記のようにreviewdogのバイナリをcurl経由で落とします。reviewdogにコメントさせるためにはコメントできる権限を持ったGitHub Tokenが必要になります。下記手順でGitHub Tokenを取得してください。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/rubocop_x_reviewdog.jpg" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/rubocop_x_reviewdog.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">『Team Geek』読んだ ~HRT(謙虚/尊敬/信頼)の精神を知り会社でサバイブしていく方法~</title><link href="https://blog.toshimaru.net/team-geek/" rel="alternate" type="text/html" title="『Team Geek』読んだ ~HRT(謙虚/尊敬/信頼)の精神を知り会社でサバイブしていく方法~" /><published>2018-10-26T00:00:00+09:00</published><updated>2019-07-03T00:00:00+09:00</updated><id>https://blog.toshimaru.net/team-geek</id><content type="html" xml:base="https://blog.toshimaru.net/team-geek/"><![CDATA[<p>かの有名な<strong>HRTの精神の原典</strong>になっている本ということで読んでみた。</p>

<p><a href="https://www.amazon.co.jp/Team-Geek-%E2%80%95Google%E3%81%AE%E3%82%AE%E3%83%BC%E3%82%AF%E3%81%9F%E3%81%A1%E3%81%AF%E3%81%84%E3%81%8B%E3%81%AB%E3%81%97%E3%81%A6%E3%83%81%E3%83%BC%E3%83%A0%E3%82%92%E4%BD%9C%E3%82%8B%E3%81%AE%E3%81%8B-Brian-Fitzpatrick/dp/4873116309/ref=as_li_ss_il?ie=UTF8&amp;qid=1540485309&amp;sr=8-1&amp;keywords=team+geek&amp;linkCode=li3&amp;tag=toshimaru-22&amp;linkId=40736310d52f5cf2ad4d58ee4b35f4e3&amp;language=ja_JP" target="_blank"><img border="0" src="//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;ASIN=4873116309&amp;Format=_SL250_&amp;ID=AsinImage&amp;MarketPlace=JP&amp;ServiceVersion=20070822&amp;WS=1&amp;tag=toshimaru-22&amp;language=ja_JP" /></a><img src="https://ir-jp.amazon-adsystem.com/e/ir?t=toshimaru-22&amp;language=ja_JP&amp;l=li3&amp;o=9&amp;a=4873116309" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<h2 id="内容紹介">内容紹介</h2>

<p>読む前の印象としてはHRT精神ということでどんなエモい内容が書かれているんだろう…と期待していたのだがとんでもない、めちゃくちゃ実践的で（誤解を恐れずに言うと）、狡猾な内容が書かれていた。</p>

<p>本書では「人間は複雑でありバグの塊」という身も蓋もない前提事項を明確にした上で、「ではそんなバグバグでダメな人間とどう向き合っていけばよいか」を具体的に記載している。</p>

<p>また本書の面白い点は、会社内でうまく立ち回るためにときに社内政治・ソーシャルエンジニアリングさえも行う必要があると説かれている点だ。こういった活動はおよそソフトウェアエンジニアとは程遠いスキルのように思われるが、本書ではしっかりと言及され社内でどううまく立ち回っていけばよいか説明されている。</p>

<h2 id="hrt">HRT</h2>

<p>HRTとは謙虚（<strong>Humility</strong>）、尊敬（<strong>Respect</strong>）、信頼（<strong>Trust</strong>）のそれぞれの頭文字三文字をとった言葉だ。読み方は「ハート(heart)」というらしい。それぞれの用語を解説する。</p>

<h3 id="謙虚humility">謙虚（Humility）</h3>

<p><strong>世界の中心は君ではない</strong>。君は全知全能ではないし、絶対に正しいわけでもない。常に自分を改善しよう。</p>

<h3 id="尊敬respect">尊敬（Respect）</h3>

<p><strong>一緒に働く人のことを心から思いやろう</strong>。相手を一人の人間として扱い、その能力や功績を高く評価しよう。</p>

<h3 id="信頼trust">信頼（Trust）</h3>

<p><strong>自分以外の人は有能であり、正しいことをすると信じよう</strong>。そうすれば仕事を自分以外の誰かに任せることができる（ただし無能な人には任せるのは難しい）。</p>

<h3 id="あらゆる人間関係の衝突はhrtの欠如によるもの">あらゆる人間関係の衝突はHRTの欠如によるもの</h3>

<p>そして本書では下記のように言い切っている。</p>

<blockquote>
  <p>あらゆる人間関係の衝突は、謙虚・尊敬・信頼の欠如によるものだ</p>
</blockquote>

<p>つまり人間関係が悪化している場合、それはあなたもしくは誰かが「謙虚ではない・尊敬の念を持っていない・信頼していない」ことから生じていると考えてよい。</p>

<h2 id="コードレビューとhrt">コードレビューとHRT</h2>

<p>私見だが特にエンジニアのコードレビューの場面においてこのHRTの精神は大事にすべきだと考えている。</p>

<p>GitHubなどのコードレビューツールの台頭によりコードレビューが圧倒的にしやすくなった反面、文章によるコードレビューは容易に人の心を傷つける。具体的にはコードに対する批判を人に対する批判（人格否定）だと受け取ったり、文章だと感情が伝わりづらく何気ないレビューコメントが「怒ってそう」「高圧的で怖い」などと受け取られたり…。</p>

<p>コードレビュー時には上述したようなすれ違いが起きないように、なるべく気をつけてHRTな振る舞いをするようにしたい。僕がレビューのときに気をつけていることとしては下記のことだ。</p>

<ul>
  <li>絵文字を使う😃
    <ul>
      <li>絵文字を駆使して感情を伝える。フレンドリーさを演出する</li>
      <li>その結果感情の誤読は減り、コミュニケーションはより活発になる</li>
    </ul>
  </li>
  <li>断定口調は使わない
    <ul>
      <li>「〜のほうが良い」「〜はダメ」という断定は自分が間違っている可能性を否定しているので <strong>謙虚さ</strong> に欠ける</li>
      <li>「〜のほうが良いと思っているのですがどうでしょうか」などと相手の反論の余地を残してやるべき</li>
      <li>なにか断定したいのであれば少なくともレビュイーが納得できるに足る理由を上げるべき</li>
    </ul>
  </li>
  <li>命令ではなく提案
    <ul>
      <li>「〜に変更してください」という命令は相手のコードを <strong>尊敬</strong> していないし <strong>信頼</strong> していないように聞こえる</li>
      <li>命令でなく「〜と書いてみるのはいかがでしょう？」という提案に形式を変えてみるとよい</li>
      <li>断定同様にきちんと理由も述べる</li>
    </ul>
  </li>
  <li>強い言葉を使わない（弱くみえるぞ？）
    <ul>
      <li>「クソコード」などの強い言葉は使わない。相手への <strong>尊敬</strong> が全くないのでNG</li>
      <li>強い言葉を使いたくなるような場面だとコードレビューでのすれ違いが起きる可能性が高いので口頭でカバーするのが吉</li>
    </ul>
  </li>
</ul>

<h2 id="有害な人間と付き合う">有害な人間と付き合う</h2>

<p>第四章のトピックは <strong>有害な人に対処する</strong> だ。本章では「チームの文化を破壊するアウトサイダーから身を守る方法」について説明される。</p>

<h3 id="有害な人への対策">有害な人への対策</h3>

<p>下記のような手段でチームの文化を強固にしておけば、有害な人の有害な振る舞いを受け入れにくくなる。</p>

<ul>
  <li><strong>ミッション・ステートメント</strong> の作成
    <ul>
      <li>チームの目標を明確にする</li>
    </ul>
  </li>
  <li>メールで議論するときの <strong>マナー</strong> を決める
    <ul>
      <li>OSSでいう<a href="https://gihyo.jp/admin/clip/01/linux_dt/201809/19">Code of Conduct</a>的なもの</li>
    </ul>
  </li>
  <li>すべての <strong>履歴を文書化</strong>
    <ul>
      <li>新参者が履歴を追えるように</li>
    </ul>
  </li>
  <li>バグ修正・テスト・リリースについて <strong>明確なポリシー・手続き</strong> を策定</li>
  <li><strong>合意ベースの決定</strong> を信頼する
    <ul>
      <li>あわせて合意できなかったときの衝突解消のプロセスも定義する</li>
    </ul>
  </li>
</ul>

<h3 id="有害な人のパターン">有害な人のパターン</h3>

<p>有害な人のパターンとしては下記のパターンが存在する。</p>

<ul>
  <li>他人の時間を尊重しない人
    <ul>
      <li>プロジェクトの文書、READMEを読めばわかることを何度も質問して邪魔する</li>
    </ul>
  </li>
  <li>エゴが強い人
    <ul>
      <li>合意を受け入れられない人・異なる視点の意見に耳を傾けない人・妥協できない人</li>
    </ul>
  </li>
  <li>何かを要求する人
    <ul>
      <li>ソフトウェアに対して不満はいうが、貢献する気のない人の可能性がある</li>
    </ul>
  </li>
  <li>未熟なコミュニケーションをする人
    <ul>
      <li>草を生やしまくったり(<code class="language-plaintext highlighter-rouge">w</code>を多用すること)、大文字や記号を多用する</li>
    </ul>
  </li>
  <li>パラノイアな人
    <ul>
      <li>被害妄想を持ち、陰謀論を唱えるような人</li>
    </ul>
  </li>
  <li>完璧主義な人
    <ul>
      <li>ソフトウェアの設計に時間をかけすぎる人</li>
      <li>チームの進捗を停滞させてしまう</li>
    </ul>
  </li>
</ul>

<h3 id="有害な人を追い出す">有害な人を追い出す</h3>

<p>本書では最終的に<strong>有害な人は追い出してよい</strong>と述べている。もちろん最初からではなくきちんとコミュニケーションをとった上でそれでも問題が解消されないようであれば、最後の手段としての＜追い出し＞だ。</p>

<h2 id="社内政治ソーシャルエンジニアリング">社内政治、ソーシャルエンジニアリング</h2>

<p>5章は組織的操作の技法がトピックであり、「仕事を効率的に進めるための小手先のテクニックが必要」だと述べられている。小手先のテクニックとはつまり <strong>社内政治、ソーシャルエンジニアリング</strong> のことである。</p>

<p>社内政治という言葉はエンジニアの対極にある慣習のように思えるし、あなたがエンジニアであれば「社内政治なんてとんでもない！」と思うかもしれない。しかしときにそういう手段も必要だとハッキリ説いているのが本書の面白いところと言える。</p>

<h3 id="自分の価値を高める">自分の価値を高める</h3>

<p>自分の価値を高める振る舞いとして下記のような振る舞いが紹介されている。</p>

<ul>
  <li>自分の責任範囲を広げる
    <ul>
      <li>マネージャーの作業負担軽減になる</li>
      <li>自分自身の能力を示すことができる</li>
    </ul>
  </li>
  <li>リスクをとる
    <ul>
      <li>すばやく失敗してすばやく学習する</li>
      <li>失敗したら何が起きたかを文書化して再発防止策に努める</li>
    </ul>
  </li>
  <li>大人らしく振る舞う
    <ul>
      <li>マネージャーから子供扱いを受けないために</li>
    </ul>
  </li>
  <li>質問する
    <ul>
      <li>納得できないことがあれば根拠について質問したり議論する</li>
    </ul>
  </li>
  <li>マネージャーはエスパーではない
    <ul>
      <li>自分が何をしているかをマネージャーに報告する</li>
      <li>マイクロマネジメントの回避策にもなる</li>
    </ul>
  </li>
</ul>

<h3 id="自分が居心地のいい場所を作る">自分が居心地のいい場所を作る</h3>

<p>平たくいうと「<strong>組織がクソなこともある。組織に期待せず自分でよい組織を作るという意識を持て</strong>」ということが書いてある。</p>

<blockquote>
  <p>会社にはルールがある。曲げてもいいものもあれば、ぶち壊していいものある。組織のなかで振る舞うべきことばかりに集中していると、不満や失望を感じるだけだ。組織はそういうものだと認めよう。組織を動かして自分の仕事に利用できる仕組みを見つけよう。自分が居心地のいい場所を作り出すのである。</p>
</blockquote>

<h3 id="自分を売り込む">自分を売り込む</h3>

<p>自分を売り込むという行為もまたエンジニアらしからぬ行為のようにも思えるが時には必要だ。つまり<strong>うまくやっていることを上司やチームの外部にいる人たちに知らせる</strong>ということだ。</p>

<p>それを演出するために＜できるだけ約束を小さくして、届けるものは大きくする＞という手法が紹介されている。大きな約束をしてしまうとその締切を守れなかったときや、機能を落としたときの信用損失が大きくなってしまうからだ。</p>

<p>またエンジニアはプロダクトのローンチにエネルギーを注ぐべきだとも説かれている。なぜならプロダクトローンチというイベントが何かを成し遂げたことを伝える一番わかりやすいイベントだからだ。リファクタリングをもっとやりたいと考えるかもしれないがそれだけではダメで、そこに半分以上時間を割いたりしたら何も評価されないし最悪プロジェクト中止さえありえる。</p>

<h3 id="逃げるという選択肢">逃げるという選択肢</h3>

<p>「すべてやっているけど改善されないしうまくいかない」そんな状況に陥ったとしたら<strong>さっさと逃げてしまう</strong>ことが得策だと言う。</p>

<blockquote>
  <p>システムを変更できなければいくらエネルギーを注いでもムダだ。そこから逃げ出すことにエネルギーを注ごう</p>
</blockquote>

<p>ある程度やって無理なものは無理、ダメなものはダメ、さっさと逃げる！と割り切っている点も本書の潔くて良い点である。</p>

<h2 id="チームはパンのようなもの">チームはパンのようなもの</h2>

<p>本書ではチームはパンであるという比喩が使われる。</p>

<blockquote>
  <p>チームの文化はサワードウパンのようなものだ。スターター（創業者）がパン生地（新来者）に菌（文化）を植え付ける。イースト菌と乳酸菌（チームメンバー）が発酵（成長）すると、おいしいパン（チーム）のできあがりだ。</p>
</blockquote>

<p><strong>強い文化を持つチームを作る必要がある</strong>。さもないと新来者が持ち込む文化に負けてしまう。チームが文化を大切にできなければ、チームのアイデンティティや仕事の誇りを失ってしまう。</p>

<p>この話は日本風の喩えでいうと＜腐ったみかん＞の話に通ずるものがある。一つ腐ったみかんがあると他のみかんも腐ってしまうという事象である。そうならないために腐ったみかんを紛れ込ませない、あるいは多少腐ってしてもそれが伝播しないような強いみかん（チーム）である必要がある。</p>

<p>強い文化を作るには時間・労力がかかる。会社においては応募者がカルチャーフィットするかを面接のプロセスにおいてチームのメンバーが評価・判断し決める。採用を妥協してはいけない。</p>

<h2 id="マネジメントについて">マネジメントについて</h2>

<p>本書はマネージャーのためのマネジメント本ではなく、なんとなくリーダーになってしまったエンジニアのための本だと位置付けられている。</p>

<h3 id="マネージャーになるべき">マネージャーになるべき！？</h3>

<p>本書では「エンジニアはマネージャーになるべきだ」と主張しているのは興味深い。</p>

<p>一般的に言ってエンジニアはマネージャーになりたがらない。一番の理由はコードを書く時間が少なくなるからである。そして無能なマネージャーの下に就いたことのあるエンジニアもまたマネージャーになることを拒む。しかし本書では下記のように説く。</p>

<blockquote>
  <p>マネージャーになるべき大きな理由がある。まずは自分自身をスケールできるからだ。コードを書くのが得意だとしても、一人で書けるコード量には限界がある。自分がリーダーになって、優秀なエンジニアのチームにコードを書いてもらえば、どれだけのコード量になるかを想像してみてほしい！</p>
</blockquote>

<h3 id="サーバントリーダーの役割">サーバントリーダーの役割</h3>

<p>マネージャーになるのであれば <strong>サーバントリーダーになるべき</strong> だという。つまり執事や召使いのようにチームに奉仕するのだ。サーバントリーダーのやるべきことの例は下記だ。</p>

<ul>
  <li>HRTの雰囲気を作り出す</li>
  <li>エンジニアでは対処できない社内の障害物を除去</li>
  <li>チームの合意形成を支援</li>
  <li>問題解決を支援する
    <ul>
      <li>アドバイスを求めてきたらリーダー自身が問題解決してはダメ、あくまでもサポートのみ</li>
    </ul>
  </li>
  <li>マイクロマネジメントをしない</li>
  <li>夜遅くなったときに差し入れ</li>
  <li>チームが順調に進めるように穴を埋める
    <ul>
      <li>ときには自らの手を汚す</li>
    </ul>
  </li>
  <li>技術的な側面とチームの人間関係を管理する（後者が難しい！）
    <ul>
      <li>技術畑出身のリーダーは後者を無視しがちだがそれはNG、きちんとチームの人間的側面に目を向ける</li>
      <li>みんなのお友達になるのもNG、あくまでも仕事の関係を保つ</li>
    </ul>
  </li>
</ul>

<h3 id="リーダーはパーフェクトではない">リーダーはパーフェクトではない</h3>

<p>リーダーはパーフェクトでなければならないという強迫観念があるかもしれないが、それを本書は否定する。</p>

<blockquote>
  <p>リーダーはなんでも正しくやって、すべてを把握して、あらゆる質問に答える責任があると思っている。すべてを正しくやる必要はないし、あらゆる質問に答える必要もないし、そんなことをしていたら逆にチームの信頼を失ってしまう。</p>
</blockquote>

<p><strong>質問を歓迎してチームからのフィードバックと批判をオープンに受け止めよう。そして何かを失敗したときは心から謝罪しよう。</strong></p>

<p>またリーダーが適切な答えを知っている必要はない。適切な答えを持っている人を知っていて、その人を紹介できさえすればよいのだ。多くの場合、適切な答えを知るより、適切な人を知るほうが価値がある。</p>

<p>参考資料 (Podcast): <a href="https://anchor.fm/em-fm/episodes/ep2--Engineering-Manager-e2bq4j">Engineering Managerをスーパーマンだと思わないで by EM . FM #EMFM • A podcast on Anchor</a></p>

<h3 id="ネガティブフィードバックを正しく伝える">（ネガティブ）フィードバックを正しく伝える</h3>

<p>正直になるのもリーダーをやる上で重要だ。</p>

<p>1on1などの場面において共有できないことをメンバーから質問されたら「知っているけど伝えられない」と答えれば良い。自分がわからないことを聞かれたら素直に「わからない」といえばいい。</p>

<p>ネガティブ・フィードバックを伝えるのは難しい。フィードバックや批判を伝えるときはメッセージが正しく相手に伝わっているかが重要だ。しかし直截的な伝え方だと相手に受け入れてもらえない場合があるので、きちんと適切な言い方を考えてから伝えよう。</p>

<p>一方でチームメンバーの欠点ばかりを気にしていいところを十分にフィードバックできていないケースも気をつけよう。素晴らしいところは積極的に知らせてあげるべきだ。</p>

<h3 id="リーダーの行動指針">リーダーの行動指針</h3>

<p>その他にもリーダーが取るべき行動指針として下記のものが紹介されている。</p>

<ul>
  <li>チームの幸せを追い求める</li>
  <li>委譲せよ、ただし手は汚せ
    <ul>
      <li>たとえ自分がやったほうが早くてもチームメンバーに任せる</li>
    </ul>
  </li>
  <li>自分自身を置き換えるくらいの優秀な人を採用する
    <ul>
      <li>チームメンバーに代わりをしてほしいのであれば自分より優秀な人を採用する</li>
    </ul>
  </li>
  <li>事を荒立てるときを知る
    <ul>
      <li>状況は自然とは良くはならない、きちんと指摘する</li>
    </ul>
  </li>
  <li>カオス（不確実性）からチームを守る
    <ul>
      <li>リーダーになるとメンバーの頃には見えなかったカオスが見える。メンバーをそのカオスから守ろう</li>
    </ul>
  </li>
  <li>チームを空中援護する
    <ul>
      <li>会社の上空（上層部）で何が起きているかをチームに知らせる</li>
      <li>できるだけ多くの情報をチームに共有すべきだが、チームに無関係の組織の話はする必要がない</li>
    </ul>
  </li>
  <li>どのエンジニアが何を必要としているかを把握してそれを与える
    <ul>
      <li>エンジニアが何を欲しているかは一人ひとり異なる</li>
    </ul>
  </li>
</ul>

<h2 id="まとめ">まとめ</h2>

<p>HRT（謙虚・尊敬・信頼）の精神を知るためにまずは手にとって読むべき本が本書である。</p>

<p>HRTの精神に加えて、本書には「有害な人に対処する方法」「社内でうまく立ち回る方法」など<strong>会社で＜サバイブ＞していくための極めて実践的な内容</strong>が書かれていた。HRTだけでなくそういったスキルもときに必要であり重要であるということを認識するのに、本書はすべてのエンジニアにオススメの一冊に仕上がっている。</p>

<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=toshimaru-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=4873116309&amp;linkId=0aff3222ba2c6d1926da0019e2d110b9"></iframe>]]></content><author><name>Toshimaru</name></author><category term="読書" /><category term="management" /><category term="review" /><summary type="html"><![CDATA[かの有名なHRTの精神の原典になっている本ということで読んでみた。読む前の印象としてはHRT精神ということでどんなエモい内容が書かれているんだろう…と期待していたのだがとんでもない、めちゃくちゃ実践的で（誤解を恐れずに言うと）狡猾な内容が書かれていた。 本書では「人間は複雑でありバグの塊」という身も蓋もない前提事項を明確にした上で、「ではそんなバグバグでダメな人間とどう向き合っていけばよいか」を具体的に記載している。 また本書の面白い点は会社内でうまく立ち回るためときに社内政治・ソーシャルエンジニアリングを行う必要があると説かれている点だ。こういった活動はおよそソフトウェアエンジニアとは程遠いスキルのように思われるが、本書ではしっかり言及され社内でどううまく立ち回っていけばよいかが説明されている 。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/teamgeek.jpg" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/teamgeek.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>