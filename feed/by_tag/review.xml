<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://blog.toshimaru.net/feed/by_tag/review.xml" rel="self" type="application/atom+xml" /><link href="https://blog.toshimaru.net/" rel="alternate" type="text/html" /><updated>2020-10-25T21:19:08+09:00</updated><id>https://blog.toshimaru.net/feed/by_tag/review.xml</id><title type="html">Hack Your Design!</title><subtitle>toshimaruの技術系なブログ</subtitle><author><name>Toshimaru</name></author><entry><title type="html">reviewdogを使ってGitHub Actions上でRuboCop自動レビューを動かす</title><link href="https://blog.toshimaru.net/reviewdog-rubocop-github-actions/" rel="alternate" type="text/html" title="reviewdogを使ってGitHub Actions上でRuboCop自動レビューを動かす" /><published>2020-05-31T00:00:00+09:00</published><updated>2020-06-08T00:00:00+09:00</updated><id>https://blog.toshimaru.net/reviewdog-rubocop-github-actions</id><content type="html" xml:base="https://blog.toshimaru.net/reviewdog-rubocop-github-actions/">&lt;p&gt;過去に&lt;a href=&quot;/reviewdog-rubocop/&quot;&gt;reviewdogを使ってCircleCI上でrubocop自動レビューを動かす記事&lt;/a&gt;を書きました。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;Blogged. | reviewdogを使ってCI上でRuboCop自動レビューを動かす - Hack Your Design! &lt;a href=&quot;https://t.co/8vdNUEIisX&quot;&gt;https://t.co/8vdNUEIisX&lt;/a&gt;&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/1064661783594491904?ref_src=twsrc%5Etfw&quot;&gt;November 19, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;本記事はそれの&lt;a href=&quot;https://github.com/features/actions&quot;&gt;GitHub Actions&lt;/a&gt;バージョンになります。&lt;/p&gt;

&lt;h2 id=&quot;なぜgithub-actionなのか&quot;&gt;なぜGitHub Actionなのか？&lt;/h2&gt;

&lt;p&gt;以前に書いた記事のようにCircleCIでも問題はないものの、GitHub ActionsはデフォルトでPull Requestにコメント可能な &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GITHUB_TOKEN&lt;/code&gt; を吐くことが可能で、そのへんのtoken周りの煩雑な設定が不要という点でCircleCIよりアドバンテージがあると言えます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://help.github.com/en/actions/configuring-and-managing-workflows/authenticating-with-the-github_token&quot;&gt;Authenticating with the GITHUB_TOKEN - GitHub Help&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;GitHubが公式機能として出していることもあり、GitHubとのIntegrationはGitHub Actionsのほうが優れている印象があります。&lt;/p&gt;

&lt;h2 id=&quot;基本のrubocop設定&quot;&gt;基本のrubocop設定&lt;/h2&gt;

&lt;p&gt;GitHub Actionsで動かす基本となるrubocop設定は下記の通りです。&lt;/p&gt;

&lt;p&gt;※ 実際はbundlerのキャッシュの設定などが必要ですが今回は設定していません&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# .github/workflows/rubocop.yml&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;RuboCop&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;pull_request&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;rubocop&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/checkout@v2&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/setup-ruby@v1&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;ruby-version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2.6&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;gem install bundler&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;bundle install&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Run rubocop&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bundle exec rubocop&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上述の設定をベースにreviewdogを使った自動レビューの設定を追加していきます。&lt;/p&gt;

&lt;h2 id=&quot;reviewdogによる自動レビューを追加&quot;&gt;reviewdogによる自動レビューを追加&lt;/h2&gt;

&lt;p&gt;追加するのは下記の2ステップです。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Setup reviewdog: reviewdog のバイナリをインストール&lt;/li&gt;
  &lt;li&gt;Run rubocop with reviewdog: rubocop の指摘を reviewdog に渡してPRコメントを付けさせる&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;yamlファイルとしては下記になります。&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# .github/workflows/rubocop.yml&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;RuboCop&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;pull_request&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;rubocop&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/checkout@v2&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/setup-ruby@v1&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;ruby-version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2.6&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;gem install bundler&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;bundle install&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Setup reviewdog&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;mkdir -p $HOME/bin &amp;amp;&amp;amp; curl -sfL https://raw.githubusercontent.com/reviewdog/reviewdog/master/install.sh | sh -s -- -b $HOME/bin&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;echo ::add-path::$HOME/bin&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Run rubocop with reviewdog&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;REVIEWDOG_GITHUB_API_TOKEN&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bundle exec rubocop | reviewdog -reporter=github-pr-review -f=rubocop&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;レビューコメント&quot;&gt;レビューコメント&lt;/h2&gt;

&lt;p&gt;設定がうまくいっていれば、下記のように &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;github-actions&lt;/code&gt; からの自動レビューコメントが付きます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/rubocop-actions/rubocop-by-github-actions.png&quot; alt=&quot;comment by github-actions&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;実際に動かしてみたpull-request&quot;&gt;実際に動かしてみたPull Request&lt;/h2&gt;

&lt;p&gt;実際にこの構成で設定してみたPRは下記になります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/toshimaru/Test/pull/16&quot;&gt;rubocop x reviewdog x GitHub Actions by toshimaru · Pull Request #16 · toshimaru/Test&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;余談&quot;&gt;余談&lt;/h2&gt;

&lt;p&gt;本記事ではミニマルな設定を紹介しましたが、実行高速化のために実際は下記の設定もあわせてしたほうが良いでしょう。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;bundler cache の設定&lt;/li&gt;
  &lt;li&gt;rubocop cache の設定（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.cache/rubocop_cache&lt;/code&gt;）&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--parallel&lt;/code&gt; オプションの追加&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Toshimaru</name></author><category term="rubocop" /><category term="github" /><category term="ci" /><category term="review" /><summary type="html">過去にreviewdogを使ってCircleCI上でrubocop自動レビューを動かす記事を書きました。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/rubocop-actions/rubocop-actions.jpg" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/rubocop-actions/rubocop-actions.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">アンチパターンから学ぶHRTなコードレビュー</title><link href="https://blog.toshimaru.net/hrt-review/" rel="alternate" type="text/html" title="アンチパターンから学ぶHRTなコードレビュー" /><published>2019-08-12T00:00:00+09:00</published><updated>2019-08-12T00:00:00+09:00</updated><id>https://blog.toshimaru.net/hrt-review</id><content type="html" xml:base="https://blog.toshimaru.net/hrt-review/">&lt;p&gt;&lt;a href=&quot;/team-geek/&quot;&gt;『Team Geek』の書評でも書いた&lt;/a&gt;んだけど、コードレビューのときはHRTの精神を大事にしたい。&lt;/p&gt;

&lt;h2 id=&quot;what-is-hrt&quot;&gt;What is HRT?&lt;/h2&gt;

&lt;p&gt;HRTとは下記の３つの精神のことだ。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Humility&lt;/strong&gt;（謙虚）&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Respect&lt;/strong&gt;（尊敬）&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Trust&lt;/strong&gt;（信頼）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;HRTについて詳しくは弊ブログの下記記事を参照。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;心理的安全性の阻害はHRT精神の欠如によって起こる。常に仲間に対して謙虚、尊敬、信頼の念を持とうな。お兄さんとの約束だぞ！&lt;br /&gt;『Team Geek』読んだ ~HRTの精神を知り会社でサバイブしていく方法~ - Hack Your Design! &lt;a href=&quot;https://t.co/EHogf87DOd&quot;&gt;https://t.co/EHogf87DOd&lt;/a&gt;&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/1142027694709698561?ref_src=twsrc%5Etfw&quot;&gt;June 21, 2019&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;以下、アンチパターンなコードレビューのシーンを先輩（👿）と後輩（👼）でお送りする。&lt;/p&gt;

&lt;h2 id=&quot;アンチパターン1コメントが怖い&quot;&gt;アンチパターン1・コメントが怖い&lt;/h2&gt;

&lt;p&gt;⛔️&lt;strong&gt;アンチパターンなコードレビュー&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;👿「typoです。直してください」&lt;/p&gt;

  &lt;p&gt;👿「これはこう書くべきです（…以下コード提案…）」&lt;/p&gt;

  &lt;p&gt;👿「どうしてこのようなコードにしたんですか？」&lt;/p&gt;

  &lt;p&gt;👼「（えっ… 怒っているの？ 怖い…）」&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;説明&quot;&gt;説明&lt;/h3&gt;

&lt;p&gt;コードレビューじゃなくとも、テキスト・コミュニケーションであれば手段を問わず発生しうる問題。&lt;strong&gt;文字だけのコミュニケーションは、発言の背後にあるコンテキストや感情が汲み取りにくい&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;上記の例だと背後にある感情が「typoじぇねぇか💢 直せ😠」なのか「typoみつけちゃった👀 指摘して直してもらおう😃」なのかがわからないので、先輩・後輩という関係性を前提とした場合、後輩からは先輩が怒っていると思われていても仕方ない状況と言える。&lt;/p&gt;

&lt;p&gt;先輩の他の指摘に関しても同様に、「こう書くべき💢」なのか「個人的にこう書くべきだと思っているんだけどなぁ…🤔」なのかわからないし、「どうしてこんなひどいコード書いた？💢」なのか「このコードの意図が知りたいなぁ、どうしてこう書いたんだろう？🤔」なのかがわからない。&lt;/p&gt;

&lt;h3 id=&quot;解決策&quot;&gt;解決策&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;絵文字を使う😃
    &lt;ul&gt;
      &lt;li&gt;絵文字で感情を表現して、発言の背後にある感情の誤読を減らす&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;コードレビュー・ラベルを使う
    &lt;ul&gt;
      &lt;li&gt;コメントの前に&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[nits]&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[imo]&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[ask]&lt;/code&gt;などのラベルをつける
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[nits]&lt;/code&gt; 些細な指摘であることを伝える&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[imo]&lt;/code&gt; 個人的な意見であることを伝える&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[ask]&lt;/code&gt; 質問事項、確認事項を訊く&lt;/li&gt;
          &lt;li&gt;参考: &lt;a href=&quot;https://employment.en-japan.com/engineerhub/entry/2018/01/24/110000&quot;&gt;悪いコードを憎んで人を憎まず！ プルリク送付前に心がけたいコードレビューのコミュニケーション術&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;断定口調・命令口調ではなく提案口調を使う
    &lt;ul&gt;
      &lt;li&gt;「〜すべき」「〜してください」などの高圧的な断定・命令口調ではなく、「〜どうでしょう？」などの提案口調を使う&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;質問の背景を明確にする
    &lt;ul&gt;
      &lt;li&gt;質問をするということは質問をするに至った背景が何かあるはずなので、それを一緒に提示する&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;口頭で指摘する&lt;/li&gt;
  &lt;li&gt;上述の&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[nits]&lt;/code&gt;な指摘で自動化できる点は自動化する
    &lt;ul&gt;
      &lt;li&gt;Rubyにおける&lt;a href=&quot;https://github.com/rubocop-hq/rubocop&quot;&gt;rubocop&lt;/a&gt;、JSにおける&lt;a href=&quot;https://github.com/eslint/eslint&quot;&gt;ESLint&lt;/a&gt;などは自動化可能なのでCIで自動化する&lt;/li&gt;
      &lt;li&gt;人間がいちいち指摘するよりも時間的コスト・心理的コストがレビュワー、レビュイー双方にとってずっと低い&lt;/li&gt;
      &lt;li&gt;ツールとしては&lt;a href=&quot;https://github.com/reviewdog/reviewdog&quot;&gt;reviewdog&lt;/a&gt;や&lt;a href=&quot;https://sider.review&quot;&gt;sider&lt;/a&gt;など&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;✅&lt;strong&gt;改善後&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;👿「[nits]typo❗️😄」&lt;/p&gt;

  &lt;p&gt;👿「[imo]これはこう書くべきだと思ったのですが、どうでしょう❓😺（…以下コード提案…）」&lt;/p&gt;

  &lt;p&gt;👿「[ask]モデルにあっても良い処理なように感じましたが、どうしてここに処理を書いたんでしょう？」&lt;/p&gt;

  &lt;p&gt;👿「[ask]xxx関数を使えばもうちょっとシンプルに書ける気がしますが、どうしてこう書いたんでしょう？」&lt;/p&gt;

  &lt;p&gt;🤖(bots) 「Trailing whitespace detected.」&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;あるいは口頭で:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;👿「さっき上げたコードでちょっと気になるところがあるから聞いてもいいですか？ （コードを指差しして）この部分のコードの意図が汲み取れなかったんですけど、どうしてこんなコードにしたんでしょう？」&lt;/p&gt;

  &lt;p&gt;👼「あー、そこは〇〇〇で、△△△だからそう書いたんですよね。（…以下説明…）」&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;アンチパターン2理由がない&quot;&gt;アンチパターン2・理由がない&lt;/h2&gt;

&lt;p&gt;⛔️&lt;strong&gt;アンチパターンなコードレビュー&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;👿「これは残念なコードですので、直してください」&lt;/p&gt;

  &lt;p&gt;👿「この書き方をしたらダメです」&lt;/p&gt;

  &lt;p&gt;👼「はい…（えぇぇ！？ 何がダメなんだろう…？）」&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;説明-1&quot;&gt;説明&lt;/h3&gt;

&lt;p&gt;コードレビューコメントに指示はあるが、理由がないケース。&lt;/p&gt;

&lt;p&gt;上記のケースだと「なぜ残念なコードと言えるのか？」というポイントが欠如している。コードに対する価値観が完全に合致していれば、「残念なコード」でレビュイーに伝わるが、大抵の場合はそうではないので理由がないと伝わらないケースが多い。特にレビュイーがジュニアレベルであればコード良し悪しの分別がつかないのでなおさら伝わらない。&lt;/p&gt;

&lt;h3 id=&quot;解決策-1&quot;&gt;解決策&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;レビュイーが納得できるに足る理由を示す
    &lt;ul&gt;
      &lt;li&gt;なぜ残念なのか？ なぜダメなのか？ 必ずWhyを示す&lt;/li&gt;
      &lt;li&gt;「個人的にこっちのほうが好きだから」「なんとなく」などは納得できる理由ではないのでアウト 👉 上述の&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[imo]&lt;/code&gt;提案行き&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;✅&lt;strong&gt;改善後&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;👿「これはマジックナンバーになっているので、定数に切り出すように直してください😉」&lt;/p&gt;

  &lt;p&gt;👿「この書き方はXSS脆弱性がある書き方だからダメです🙅」&lt;/p&gt;

  &lt;p&gt;👿「[imo]こっちのほうがスッキリしていて個人的に好きなのですがいかがでしょう？（…以下コード提案…）」&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;アンチパターン3誹謗中傷&quot;&gt;アンチパターン3・誹謗中傷&lt;/h2&gt;

&lt;p&gt;⛔️&lt;strong&gt;アンチパターンなコードレビュー&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;👿「これはクソコードですね」&lt;/p&gt;

  &lt;p&gt;👼「ごめんなさい（一生懸命書いたのに…（泣））」&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;説明-2&quot;&gt;説明&lt;/h3&gt;

&lt;p&gt;コードに対する誹謗中傷。これを乱用すると現場が殺伐とする。&lt;/p&gt;

&lt;h3 id=&quot;解決策-2&quot;&gt;解決策&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;「クソコード」などのコードの誹謗中傷となるような言い回しは使わない
    &lt;ul&gt;
      &lt;li&gt;「あまり強い言葉を遣うなよ。弱く見えるぞ。」&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;口頭でコミュニケーションする
    &lt;ul&gt;
      &lt;li&gt;クソコードのような強い言葉を使いたくなるような場面は感情が昂ぶっているときであり、テキスト・コミュニケーションだとすれ違いが起きる可能性が高い。クソコードと思い至るまでの理由を膝を突き合わせてきちんと説明する&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;✅&lt;strong&gt;改善後&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;👿「これは今後メンテしていくのがとても辛いコードになりそうです。なぜなら〇〇だし、△△ともなり、××だからです。」&lt;/p&gt;

  &lt;p&gt;👼「なるほど〜〜〜！（私クソコードを書いてたかもしれない…）」&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;アンチパターン４大量コメント&quot;&gt;アンチパターン４・大量コメント&lt;/h2&gt;

&lt;p&gt;⛔️&lt;strong&gt;アンチパターンなコードレビュー&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;👿「〇〇〇〇」&lt;/p&gt;

  &lt;p&gt;👿「△△△△」&lt;/p&gt;

  &lt;p&gt;👿「××××」&lt;/p&gt;

  &lt;p&gt;（以下大量のレビューコメント）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;説明-3&quot;&gt;説明&lt;/h3&gt;

&lt;p&gt;一連のコード変更に対して大量のレビューコメントが付く事象のこと。&lt;/p&gt;

&lt;p&gt;シニアエンジニアがジュニアエンジニアのコードをレビューするときなど、レビュワー・レビュイー間のスキル・知識・経験に大きな差があるときに陥りやすい。大量のコメントを付ける/付けられることになるので、レビュワーにとってもレビュイーにとっても心的労力が高い。&lt;/p&gt;

&lt;p&gt;また１つ１つのコメントがどれだけ丁寧だとしても、その数が多くなるとレビュイーに無力感を味あわせてしまうことになり心理的ストレスに繋がる可能性がある。&lt;/p&gt;

&lt;h3 id=&quot;解決策-3&quot;&gt;解決策&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;コードの差分を小さくするように分割する
    &lt;ul&gt;
      &lt;li&gt;コメントが多く付くのはそもそもコードの差分が大きいからなので差分を小さくしてレビュー対象コードを少なくする&lt;/li&gt;
      &lt;li&gt;GitHub であれば Pull Request を可能な限り分割し１つ１つを小さい差分に保つ&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;コードレビューの代わりにペアプログラミングをする
    &lt;ul&gt;
      &lt;li&gt;コードレビューが大変ならコードレビューをしない。ペアプロでその場で一緒に解決させる&lt;/li&gt;
      &lt;li&gt;モブプログラミングでもOK&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;研修の実施および内容見直し
    &lt;ul&gt;
      &lt;li&gt;スキルに大きな差があることが原因なので、その差を埋めるための研修を実施&lt;/li&gt;
      &lt;li&gt;もし新入社員向けに研修がないのであれば、新入社員を対象に技術研修を新たに計画すべきかもしれない。既にあるのだとすれば研修内容の見直しが必要かもしれない&lt;/li&gt;
      &lt;li&gt;中途であればオンボーディング・プロセスの見直しが必要かもしれない&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;✅&lt;strong&gt;改善後&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;（ナビゲーター👿/ドライバー👼がペアプログラミング中）&lt;/p&gt;

  &lt;p&gt;👿「ここのコードは 〇〇〇 できれいに書けるんじゃないかな」&lt;/p&gt;

  &lt;p&gt;👼「なるほど、やってみます。（コードを修正する）」&lt;/p&gt;

  &lt;p&gt;👿「次に 〇〇〇 によって ××× が要らなくなったから直せそう」&lt;/p&gt;

  &lt;p&gt;👼「あ、たしかに。やってみます（コードを修正する）」&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;アンチパターン５長大な議論&quot;&gt;アンチパターン５・長大な議論&lt;/h2&gt;

&lt;p&gt;⛔️&lt;strong&gt;アンチパターンなコードレビュー&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;👿「ここの設計、私としては 〇〇〇 だと思うんです」&lt;/p&gt;

  &lt;p&gt;👨「僕はそうは思いません。△△△ にしたほうが良いと思うんです」&lt;/p&gt;

  &lt;p&gt;👩「私は 〇〇〇 案と △△△ 案を組み合わせた ××× でも良いかと」&lt;/p&gt;

  &lt;p&gt;（以下、👿, 👨, 👩 の議論が延々と続く）&lt;/p&gt;

  &lt;p&gt;👼「（あわわわわわ、、、どうすれば…）」&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;説明-4&quot;&gt;説明&lt;/h3&gt;

&lt;p&gt;１つのコードレビューに端を発して長大な議論をスタートさせること。これが始まると一つのコメントに対してのスレッドがどんどん伸びていくことになる。&lt;/p&gt;

&lt;p&gt;設計などの大枠なトピックだと、長大な議論になりやすい。&lt;/p&gt;

&lt;h3 id=&quot;解決策-4&quot;&gt;解決策&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;話し合いで解決させる
    &lt;ul&gt;
      &lt;li&gt;テキストで延々と話すより、わーっとみんなで集まって話し合うとすぐに決まるケースが多かったりする&lt;/li&gt;
      &lt;li&gt;話し合った結果をテキストとして残しておく&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;✅&lt;strong&gt;改善後&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;👿「ここの設計、私としては 〇〇〇 だと思うんです」&lt;/p&gt;

  &lt;p&gt;👨「僕はそうは思いません。△△△ にしたほうが良いと思うんです」&lt;/p&gt;

  &lt;p&gt;👩「私は 〇〇〇 案と △△△ 案を組み合わせた ××× でも良いかと」&lt;/p&gt;

  &lt;p&gt;👿「では話し合って決めましょう！」&lt;/p&gt;

  &lt;p&gt;（集まって話し合い）&lt;/p&gt;

  &lt;p&gt;👿 👨 👩「議論した結果、△△△ が良いとなったので △△△ な方針でいきましょう」&lt;/p&gt;

  &lt;p&gt;👼「ラジャー!」&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;なぜhrtなレビューが必要なのか&quot;&gt;なぜHRTなレビューが必要なのか？&lt;/h2&gt;

&lt;p&gt;なぜHRTなコードレビューを心がける必要があるのか？　答えは&lt;strong&gt;チームの心理的安全性を確保するため&lt;/strong&gt;だ。&lt;/p&gt;

&lt;h3 id=&quot;全ては心理的安全性のため&quot;&gt;全ては心理的安全性のため&lt;/h3&gt;

&lt;p&gt;最近では共通認識になりつつあるので改めて言う必要はないかもしれないが、&lt;strong&gt;ハイパフォーマンスなチームにとって心理的安全性は極めて重要&lt;/strong&gt;だ。それはGoogleの調査によって証明されている。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Google のリサーチチームが発見した、チームの効果性が高いチームに固有の 5 つの力学のうち、圧倒的に重要なのが心理的安全性です。リサーチ結果によると、心理的安全性の高いチームのメンバーは、Google からの離職率が低く、他のチームメンバーが発案した多様なアイデアをうまく利用することができ、収益性が高く、「効果的に働く」とマネージャーから評価される機会が 2 倍多い、という特徴がありました。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;via. &lt;a href=&quot;https://rework.withgoogle.com/jp/guides/understanding-team-effectiveness/steps/foster-psychological-safety/&quot;&gt;Google re:Work - ガイド: 「効果的なチームとは何か」を知る&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/hrt/psychological-safety.png&quot; alt=&quot;psychological safety&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ja.wikipedia.org/wiki/モヒカン族_(ネット用語)&quot;&gt;モヒカン族&lt;/a&gt;の方々は下記のように考えるかもしれない。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;「何を言ったってそれはコードに対する批判であって書いた人への批判ではない。何を言ってもええやろ」&lt;/li&gt;
  &lt;li&gt;「間違ったことは言っていない。言い方はどうだってええやろ」&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;気持ちはわからなくはないが、残念ながら我々は人間である。人間であるということは感情があるということ。自分が頑張って書いたコードを「クソコード」などというリスペクトの無い言い方で批判されて平常心でいられるだろうか？　「〜するべき」「〜しろ」などと高圧的なコメントを受けてレビュイーは気持ちよく受け止められるだろうか？　そこに違和感があった場合、遠慮なく異を唱えることができるだろうか？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;「心理的安全性を気にしすぎて何も言えない」のではなく、お互いが年齢・ジェンダー・人種の区別なくフラットな関係性で何でも言い合えるようにするためのHRTであり、そのための心理的安全性である&lt;/strong&gt;。そこは勘違いしてはいけない。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;チーム中にある個人の関係において、「様々な形で課題や問題についての提起がされる」ということに他なりません。（…中略…）つまるところ、心理的安全性が高いとは、「些細な問題であっても提起される」「多く問題に対して自己主張がなされる」という観測可能なチームの状態を意味しています。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;via &lt;a href=&quot;https://qiita.com/hirokidaichi/items/5d8c4294083d85654a04&quot;&gt;心理的安全性ガイドライン（あるいは権威勾配に関する一考察）&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;参考情報&quot;&gt;参考情報&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://rework.withgoogle.com/jp/guides/understanding-team-effectiveness/steps/introduction/&quot;&gt;Google re:Work - ガイド: 「効果的なチームとは何か」を知る&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://qiita.com/hirokidaichi/items/5d8c4294083d85654a04&quot;&gt;心理的安全性ガイドライン（あるいは権威勾配に関する一考察） - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Toshimaru</name></author><category term="review" /><summary type="html">『Team Geek』の書評でも書いたんだけど、コードレビューのときはHRTの精神を大事にしたい。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/hrt/hrt-review.jpg" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/hrt/hrt-review.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">reviewdogを使ってCI上でRuboCop自動レビューを動かす</title><link href="https://blog.toshimaru.net/reviewdog-rubocop/" rel="alternate" type="text/html" title="reviewdogを使ってCI上でRuboCop自動レビューを動かす" /><published>2018-11-19T00:00:00+09:00</published><updated>2020-06-08T00:00:00+09:00</updated><id>https://blog.toshimaru.net/reviewdog-rubocop</id><content type="html" xml:base="https://blog.toshimaru.net/reviewdog-rubocop/">&lt;p&gt;&lt;a href=&quot;https://github.com/rubocop-hq/rubocop&quot;&gt;rubocop&lt;/a&gt;の自動レビューを&lt;a href=&quot;https://github.com/haya14busa/reviewdog&quot;&gt;reviewdog&lt;/a&gt;を使ってやってみたのでその知見です。&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#追記&quot; id=&quot;markdown-toc-追記&quot;&gt;追記&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#auto-rubocop-on-circleci-powered-by-reviewdog&quot; id=&quot;markdown-toc-auto-rubocop-on-circleci-powered-by-reviewdog&quot;&gt;Auto-RuboCop on CircleCI powered by reviewdog&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1-configymlの設定&quot; id=&quot;markdown-toc-1-configymlの設定&quot;&gt;1. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config.yml&lt;/code&gt;の設定&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2コメントできるtokenを取得--設定&quot; id=&quot;markdown-toc-2コメントできるtokenを取得--設定&quot;&gt;2.コメントできるTokenを取得 &amp;amp; 設定&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#3-rubucopの結果をreviewdogで通知&quot; id=&quot;markdown-toc-3-rubucopの結果をreviewdogで通知&quot;&gt;3. rubucopの結果をreviewdogで通知&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#完成yamlイメージ&quot; id=&quot;markdown-toc-完成yamlイメージ&quot;&gt;完成yamlイメージ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#なぜreviewdogなのか&quot; id=&quot;markdown-toc-なぜreviewdogなのか&quot;&gt;なぜreviewdogなのか&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#最後に&quot; id=&quot;markdown-toc-最後に&quot;&gt;最後に&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#参考資料&quot; id=&quot;markdown-toc-参考資料&quot;&gt;参考資料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;追記&quot;&gt;追記&lt;/h2&gt;

&lt;p&gt;本記事の GitHub Actions 版を書きました。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;blogged. | reviewdogを使ってGitHub Actions上でRuboCop自動レビューを動かす - Hack Your Design! &lt;a href=&quot;https://t.co/4u11iBjm6G&quot;&gt;https://t.co/4u11iBjm6G&lt;/a&gt;&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/1267121968307814401?ref_src=twsrc%5Etfw&quot;&gt;May 31, 2020&lt;/a&gt;&lt;/blockquote&gt;

&lt;h2 id=&quot;auto-rubocop-on-circleci-powered-by-reviewdog&quot;&gt;Auto-RuboCop on CircleCI powered by reviewdog&lt;/h2&gt;

&lt;p&gt;僕の作っているプロジェクトでrubocop自動レビューをCircleCI上で設定してみました。そのプルリクエストを見てもらうのが一番早いと思いますので、下記リンクより差分を確認してください。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/toshimaru/RailsTwitterClone/pull/254&quot;&gt;https://github.com/toshimaru/RailsTwitterClone/pull/254&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;1-configymlの設定&quot;&gt;1. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config.yml&lt;/code&gt;の設定&lt;/h3&gt;

&lt;p&gt;基本的には&lt;a href=&quot;https://github.com/haya14busa/reviewdog#circle-ci&quot;&gt;公式READMEのCircleCIセットアップ手順&lt;/a&gt;通りですが、まずは下記のようにreviewdogのバイナリを&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl&lt;/code&gt;経由で落とします。&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# 環境変数でダウンロードするreviewdogのバージョンを指定&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;REVIEWDOG_VERSION&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0.9.11&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# reviewdogをcurlでダウンロード&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Install reviewdog&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;curl -fSL https://github.com/haya14busa/reviewdog/releases/download/$REVIEWDOG_VERSION/reviewdog_linux_amd64 -o reviewdog &amp;amp;&amp;amp; chmod +x ./reviewdog&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;2コメントできるtokenを取得--設定&quot;&gt;2.コメントできるTokenを取得 &amp;amp; 設定&lt;/h3&gt;

&lt;p&gt;reviewdogにコメントさせるためにはコメントできる権限を持ったGitHub Tokenが必要になります。下記手順でGitHub Tokenを取得してください。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/settings/tokens&quot;&gt;アクセストークンの取得ページ&lt;/a&gt;にいく&lt;/li&gt;
  &lt;li&gt;下記の権限を設定してTokenを発行
    &lt;ul&gt;
      &lt;li&gt;Privateレポジトリの設定: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;repo&lt;/code&gt;をチェック&lt;/li&gt;
      &lt;li&gt;Publicレポジトリの設定: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;public_repo&lt;/code&gt;をチェック&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これでTokenが発行できましたので、次にそのTokenの設定です。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CircleCIの環境変数の設定画面を開く&lt;/li&gt;
  &lt;li&gt;下記の環境変数を設定
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;REVIEWDOG_GITHUB_API_TOKEN&lt;/code&gt;の値に前手順で取得したTokenを設定&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これにてreviewdogにコメントできる権限が付与されました。&lt;/p&gt;

&lt;h3 id=&quot;3-rubucopの結果をreviewdogで通知&quot;&gt;3. rubucopの結果をreviewdogで通知&lt;/h3&gt;

&lt;p&gt;あとはいつも通りのrubocopのコマンドをパイプしてreviewdogに渡してあげればOK。その際のオプションは &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-f=rubocop&lt;/code&gt;（rubocopフォーマット指定）, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-reporter=github-pr-review&lt;/code&gt;（GitHub PRレビューコメント形式の指定） の２つを指定します。&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bundle exec rubocop | ./reviewdog -f=rubocop -reporter=github-pr-review&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;完成yamlイメージ&quot;&gt;完成yamlイメージ&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.circleci/config.yml&lt;/code&gt;の完成イメージは下記です（完全なyamlファイル&lt;a href=&quot;https://github.com/toshimaru/RailsTwitterClone/pull/254/files&quot;&gt;当該Pull Request&lt;/a&gt;より確認してください）。なおCircleCIはversion2.1を使用していることに注意してください（現時点の最新バージョン）。&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2.1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;executors&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;working_directory&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;~/app&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;docker&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;circleci/ruby:2.5-node-browsers&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;RAILS_ENV&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;REVIEWDOG_VERSION&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0.9.11&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;rubocop&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;executor&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;default&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;checkout&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bundle_install&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Install reviewdog&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;curl -fSL https://github.com/haya14busa/reviewdog/releases/download/$REVIEWDOG_VERSION/reviewdog_linux_amd64 -o reviewdog &amp;amp;&amp;amp; chmod +x ./reviewdog&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bundle exec rubocop | ./reviewdog -f=rubocop -reporter=github-pr-review&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;workflows&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;...省略...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;なぜreviewdogなのか&quot;&gt;なぜreviewdogなのか&lt;/h2&gt;

&lt;p&gt;ruboop自動レビューのための既にあるツールとしては、&lt;a href=&quot;https://github.com/packsaddle/ruby-saddler&quot;&gt;Saddler&lt;/a&gt;や&lt;a href=&quot;https://github.com/prontolabs/pronto&quot;&gt;pronto&lt;/a&gt;などがありますが、なぜそれらを使わずにreviewdogを採用したのかというと下記の理由からです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Goのシングルバイナリポン置き（curlワンコマンド）でSetupがめちゃくちゃ楽&lt;/li&gt;
  &lt;li&gt;Language Agnostic （Ruby以外もGo, PHP, Pythonなど他言語で使える）&lt;/li&gt;
  &lt;li&gt;Go実装でパフォーマンスが良い&lt;/li&gt;
  &lt;li&gt;Activeにメンテされている&lt;/li&gt;
  &lt;li&gt;READMEドキュメントが充実している&lt;/li&gt;
  &lt;li&gt;日本人が作っている！（おまけ理由&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;最後に&quot;&gt;最後に&lt;/h2&gt;

&lt;p&gt;本記事ではRubyプロジェクトのrubocop checkをreviewdogを使ってCircleCI上で動かす例を紹介しました。&lt;/p&gt;

&lt;p&gt;公式READMEにはTravisCI上での動かし方であったり、GitHubの新機能・GitHub Checks形式での動かし方も記載されておりますので、興味があるかたは公式READMEをご参照ください。&lt;/p&gt;

&lt;h2 id=&quot;参考資料&quot;&gt;参考資料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/haya14busa/reviewdog&quot;&gt;haya14busa/reviewdog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://haya14busa.com/reviewdog/&quot;&gt;reviewdog を飼ってコードレビューや開発を改善しませんか - haya14busa&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://qiita.com/azu/items/c563da0b5455a1b1dca2&quot;&gt;reviewdogを使ってtextlintの結果をPull Requestに書き込む方法 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Toshimaru</name></author><category term="review" /><category term="rubocop" /><category term="github" /><category term="circleci" /><category term="ci" /><summary type="html">rubocopの自動レビューをreviewdogを使ってやってみたのでその知見です。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/rubocop_x_reviewdog.jpg" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/rubocop_x_reviewdog.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">『Team Geek』読んだ ~HRT(謙虚/尊敬/信頼)の精神を知り会社でサバイブしていく方法~</title><link href="https://blog.toshimaru.net/team-geek/" rel="alternate" type="text/html" title="『Team Geek』読んだ ~HRT(謙虚/尊敬/信頼)の精神を知り会社でサバイブしていく方法~" /><published>2018-10-26T00:00:00+09:00</published><updated>2019-07-03T00:00:00+09:00</updated><id>https://blog.toshimaru.net/team-geek</id><content type="html" xml:base="https://blog.toshimaru.net/team-geek/">&lt;p&gt;かの有名な&lt;strong&gt;HRTの精神の原典&lt;/strong&gt;になっている本ということで読んでみた。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.amazon.co.jp/Team-Geek-%E2%80%95Google%E3%81%AE%E3%82%AE%E3%83%BC%E3%82%AF%E3%81%9F%E3%81%A1%E3%81%AF%E3%81%84%E3%81%8B%E3%81%AB%E3%81%97%E3%81%A6%E3%83%81%E3%83%BC%E3%83%A0%E3%82%92%E4%BD%9C%E3%82%8B%E3%81%AE%E3%81%8B-Brian-Fitzpatrick/dp/4873116309/ref=as_li_ss_il?ie=UTF8&amp;amp;qid=1540485309&amp;amp;sr=8-1&amp;amp;keywords=team+geek&amp;amp;linkCode=li3&amp;amp;tag=toshimaru-22&amp;amp;linkId=40736310d52f5cf2ad4d58ee4b35f4e3&amp;amp;language=ja_JP&quot; target=&quot;_blank&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;ASIN=4873116309&amp;amp;Format=_SL250_&amp;amp;ID=AsinImage&amp;amp;MarketPlace=JP&amp;amp;ServiceVersion=20070822&amp;amp;WS=1&amp;amp;tag=toshimaru-22&amp;amp;language=ja_JP&quot; /&gt;&lt;/a&gt;&lt;img src=&quot;https://ir-jp.amazon-adsystem.com/e/ir?t=toshimaru-22&amp;amp;language=ja_JP&amp;amp;l=li3&amp;amp;o=9&amp;amp;a=4873116309&quot; width=&quot;1&quot; height=&quot;1&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;border:none !important; margin:0px !important;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;内容紹介&quot;&gt;内容紹介&lt;/h2&gt;

&lt;p&gt;読む前の印象としてはHRT精神ということでどんなエモい内容が書かれているんだろう…と期待していたのだがとんでもない、めちゃくちゃ実践的で（誤解を恐れずに言うと）、狡猾な内容が書かれていた。&lt;/p&gt;

&lt;p&gt;本書では「人間は複雑でありバグの塊」という身も蓋もない前提事項を明確にした上で、「ではそんなバグバグでダメな人間とどう向き合っていけばよいか」を具体的に記載している。&lt;/p&gt;

&lt;p&gt;また本書の面白い点は、会社内でうまく立ち回るためにときに社内政治・ソーシャルエンジニアリングさえも行う必要があると説かれている点だ。こういった活動はおよそソフトウェアエンジニアとは程遠いスキルのように思われるが、本書ではしっかりと言及され社内でどううまく立ち回っていけばよいか説明されている。&lt;/p&gt;

&lt;h2 id=&quot;hrt&quot;&gt;HRT&lt;/h2&gt;

&lt;p&gt;HRTとは謙虚（&lt;strong&gt;Humility&lt;/strong&gt;）、尊敬（&lt;strong&gt;Respect&lt;/strong&gt;）、信頼（&lt;strong&gt;Trust&lt;/strong&gt;）のそれぞれの頭文字三文字をとった言葉だ。読み方は「ハート(heart)」というらしい。それぞれの用語を解説する。&lt;/p&gt;

&lt;h3 id=&quot;謙虚humility&quot;&gt;謙虚（Humility）&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;世界の中心は君ではない&lt;/strong&gt;。君は全知全能ではないし、絶対に正しいわけでもない。常に自分を改善しよう。&lt;/p&gt;

&lt;h3 id=&quot;尊敬respect&quot;&gt;尊敬（Respect）&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;一緒に働く人のことを心から思いやろう&lt;/strong&gt;。相手を一人の人間として扱い、その能力や功績を高く評価しよう。&lt;/p&gt;

&lt;h3 id=&quot;信頼trust&quot;&gt;信頼（Trust）&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;自分以外の人は有能であり、正しいことをすると信じよう&lt;/strong&gt;。そうすれば仕事を自分以外の誰かに任せることができる（ただし無能な人には任せるのは難しい）。&lt;/p&gt;

&lt;h3 id=&quot;あらゆる人間関係の衝突はhrtの欠如によるもの&quot;&gt;あらゆる人間関係の衝突はHRTの欠如によるもの&lt;/h3&gt;

&lt;p&gt;そして本書では下記のように言い切っている。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;あらゆる人間関係の衝突は、謙虚・尊敬・信頼の欠如によるものだ&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;つまり人間関係が悪化している場合、それはあなたもしくは誰かが「謙虚ではない・尊敬の念を持っていない・信頼していない」ことから生じていると考えてよい。&lt;/p&gt;

&lt;h2 id=&quot;コードレビューとhrt&quot;&gt;コードレビューとHRT&lt;/h2&gt;

&lt;p&gt;私見だが特にエンジニアのコードレビューの場面においてこのHRTの精神は大事にすべきだと考えている。&lt;/p&gt;

&lt;p&gt;GitHubなどのコードレビューツールの台頭によりコードレビューが圧倒的にしやすくなった反面、文章によるコードレビューは容易に人の心を傷つける。具体的にはコードに対する批判を人に対する批判（人格否定）だと受け取ったり、文章だと感情が伝わりづらく何気ないレビューコメントが「怒ってそう」「高圧的で怖い」などと受け取られたり…。&lt;/p&gt;

&lt;p&gt;コードレビュー時には上述したようなすれ違いが起きないように、なるべく気をつけてHRTな振る舞いをするようにしたい。僕がレビューのときに気をつけていることとしては下記のことだ。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;絵文字を使う😃
    &lt;ul&gt;
      &lt;li&gt;絵文字を駆使して感情を伝える。フレンドリーさを演出する&lt;/li&gt;
      &lt;li&gt;その結果感情の誤読は減り、コミュニケーションはより活発になる&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;断定口調は使わない
    &lt;ul&gt;
      &lt;li&gt;「〜のほうが良い」「〜はダメ」という断定は自分が間違っている可能性を否定しているので &lt;strong&gt;謙虚さ&lt;/strong&gt; に欠ける&lt;/li&gt;
      &lt;li&gt;「〜のほうが良いと思っているのですがどうでしょうか」などと相手の反論の余地を残してやるべき&lt;/li&gt;
      &lt;li&gt;なにか断定したいのであれば少なくともレビュイーが納得できるに足る理由を上げるべき&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;命令ではなく提案
    &lt;ul&gt;
      &lt;li&gt;「〜に変更してください」という命令は相手のコードを &lt;strong&gt;尊敬&lt;/strong&gt; していないし &lt;strong&gt;信頼&lt;/strong&gt; していないように聞こえる&lt;/li&gt;
      &lt;li&gt;命令でなく「〜と書いてみるのはいかがでしょう？」という提案に形式を変えてみるとよい&lt;/li&gt;
      &lt;li&gt;断定同様にきちんと理由も述べる&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;強い言葉を使わない（弱くみえるぞ？）
    &lt;ul&gt;
      &lt;li&gt;「クソコード」などの強い言葉は使わない。相手への &lt;strong&gt;尊敬&lt;/strong&gt; が全くないのでNG&lt;/li&gt;
      &lt;li&gt;強い言葉を使いたくなるような場面だとコードレビューでのすれ違いが起きる可能性が高いので口頭でカバーするのが吉&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;有害な人間と付き合う&quot;&gt;有害な人間と付き合う&lt;/h2&gt;

&lt;p&gt;第四章のトピックは &lt;strong&gt;有害な人に対処する&lt;/strong&gt; だ。本章では「チームの文化を破壊するアウトサイダーから身を守る方法」について説明される。&lt;/p&gt;

&lt;h3 id=&quot;有害な人への対策&quot;&gt;有害な人への対策&lt;/h3&gt;

&lt;p&gt;下記のような手段でチームの文化を強固にしておけば、有害な人の有害な振る舞いを受け入れにくくなる。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;ミッション・ステートメント&lt;/strong&gt; の作成
    &lt;ul&gt;
      &lt;li&gt;チームの目標を明確にする&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;メールで議論するときの &lt;strong&gt;マナー&lt;/strong&gt; を決める
    &lt;ul&gt;
      &lt;li&gt;OSSでいう&lt;a href=&quot;https://gihyo.jp/admin/clip/01/linux_dt/201809/19&quot;&gt;Code of Conduct&lt;/a&gt;的なもの&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;すべての &lt;strong&gt;履歴を文書化&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;新参者が履歴を追えるように&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;バグ修正・テスト・リリースについて &lt;strong&gt;明確なポリシー・手続き&lt;/strong&gt; を策定&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;合意ベースの決定&lt;/strong&gt; を信頼する
    &lt;ul&gt;
      &lt;li&gt;あわせて合意できなかったときの衝突解消のプロセスも定義する&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;有害な人のパターン&quot;&gt;有害な人のパターン&lt;/h3&gt;

&lt;p&gt;有害な人のパターンとしては下記のパターンが存在する。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;他人の時間を尊重しない人
    &lt;ul&gt;
      &lt;li&gt;プロジェクトの文書、READMEを読めばわかることを何度も質問して邪魔する&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;エゴが強い人
    &lt;ul&gt;
      &lt;li&gt;合意を受け入れられない人・異なる視点の意見に耳を傾けない人・妥協できない人&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;何かを要求する人
    &lt;ul&gt;
      &lt;li&gt;ソフトウェアに対して不満はいうが、貢献する気のない人の可能性がある&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;未熟なコミュニケーションをする人
    &lt;ul&gt;
      &lt;li&gt;草を生やしまくったり(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;w&lt;/code&gt;を多用すること)、大文字や記号を多用する&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;パラノイアな人
    &lt;ul&gt;
      &lt;li&gt;被害妄想を持ち、陰謀論を唱えるような人&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;完璧主義な人
    &lt;ul&gt;
      &lt;li&gt;ソフトウェアの設計に時間をかけすぎる人&lt;/li&gt;
      &lt;li&gt;チームの進捗を停滞させてしまう&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;有害な人を追い出す&quot;&gt;有害な人を追い出す&lt;/h3&gt;

&lt;p&gt;本書では最終的に&lt;strong&gt;有害な人は追い出してよい&lt;/strong&gt;と述べている。もちろん最初からではなくきちんとコミュニケーションをとった上でそれでも問題が解消されないようであれば、最後の手段としての＜追い出し＞だ。&lt;/p&gt;

&lt;h2 id=&quot;社内政治ソーシャルエンジニアリング&quot;&gt;社内政治、ソーシャルエンジニアリング&lt;/h2&gt;

&lt;p&gt;5章は組織的操作の技法がトピックであり、「仕事を効率的に進めるための小手先のテクニックが必要」だと述べられている。小手先のテクニックとはつまり &lt;strong&gt;社内政治、ソーシャルエンジニアリング&lt;/strong&gt; のことである。&lt;/p&gt;

&lt;p&gt;社内政治という言葉はエンジニアの対極にある慣習のように思えるし、あなたがエンジニアであれば「社内政治なんてとんでもない！」と思うかもしれない。しかしときにそういう手段も必要だとハッキリ説いているのが本書の面白いところと言える。&lt;/p&gt;

&lt;h3 id=&quot;自分の価値を高める&quot;&gt;自分の価値を高める&lt;/h3&gt;

&lt;p&gt;自分の価値を高める振る舞いとして下記のような振る舞いが紹介されている。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;自分の責任範囲を広げる
    &lt;ul&gt;
      &lt;li&gt;マネージャーの作業負担軽減になる&lt;/li&gt;
      &lt;li&gt;自分自身の能力を示すことができる&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;リスクをとる
    &lt;ul&gt;
      &lt;li&gt;すばやく失敗してすばやく学習する&lt;/li&gt;
      &lt;li&gt;失敗したら何が起きたかを文書化して再発防止策に努める&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;大人らしく振る舞う
    &lt;ul&gt;
      &lt;li&gt;マネージャーから子供扱いを受けないために&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;質問する
    &lt;ul&gt;
      &lt;li&gt;納得できないことがあれば根拠について質問したり議論する&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;マネージャーはエスパーではない
    &lt;ul&gt;
      &lt;li&gt;自分が何をしているかをマネージャーに報告する&lt;/li&gt;
      &lt;li&gt;マイクロマネジメントの回避策にもなる&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;自分が居心地のいい場所を作る&quot;&gt;自分が居心地のいい場所を作る&lt;/h3&gt;

&lt;p&gt;平たくいうと「&lt;strong&gt;組織がクソなこともある。組織に期待せず自分でよい組織を作るという意識を持て&lt;/strong&gt;」ということが書いてある。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;会社にはルールがある。曲げてもいいものもあれば、ぶち壊していいものある。組織のなかで振る舞うべきことばかりに集中していると、不満や失望を感じるだけだ。組織はそういうものだと認めよう。組織を動かして自分の仕事に利用できる仕組みを見つけよう。自分が居心地のいい場所を作り出すのである。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;自分を売り込む&quot;&gt;自分を売り込む&lt;/h3&gt;

&lt;p&gt;自分を売り込むという行為もまたエンジニアらしからぬ行為のようにも思えるが時には必要だ。つまり&lt;strong&gt;うまくやっていることを上司やチームの外部にいる人たちに知らせる&lt;/strong&gt;ということだ。&lt;/p&gt;

&lt;p&gt;それを演出するために＜できるだけ約束を小さくして、届けるものは大きくする＞という手法が紹介されている。大きな約束をしてしまうとその締切を守れなかったときや、機能を落としたときの信用損失が大きくなってしまうからだ。&lt;/p&gt;

&lt;p&gt;またエンジニアはプロダクトのローンチにエネルギーを注ぐべきだとも説かれている。なぜならプロダクトローンチというイベントが何かを成し遂げたことを伝える一番わかりやすいイベントだからだ。リファクタリングをもっとやりたいと考えるかもしれないがそれだけではダメで、そこに半分以上時間を割いたりしたら何も評価されないし最悪プロジェクト中止さえありえる。&lt;/p&gt;

&lt;h3 id=&quot;逃げるという選択肢&quot;&gt;逃げるという選択肢&lt;/h3&gt;

&lt;p&gt;「すべてやっているけど改善されないしうまくいかない」そんな状況に陥ったとしたら&lt;strong&gt;さっさと逃げてしまう&lt;/strong&gt;ことが得策だと言う。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;システムを変更できなければいくらエネルギーを注いでもムダだ。そこから逃げ出すことにエネルギーを注ごう&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ある程度やって無理なものは無理、ダメなものはダメ、さっさと逃げる！と割り切っている点も本書の潔くて良い点である。&lt;/p&gt;

&lt;h2 id=&quot;チームはパンのようなもの&quot;&gt;チームはパンのようなもの&lt;/h2&gt;

&lt;p&gt;本書ではチームはパンであるという比喩が使われる。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;チームの文化はサワードウパンのようなものだ。スターター（創業者）がパン生地（新来者）に菌（文化）を植え付ける。イースト菌と乳酸菌（チームメンバー）が発酵（成長）すると、おいしいパン（チーム）のできあがりだ。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;強い文化を持つチームを作る必要がある&lt;/strong&gt;。さもないと新来者が持ち込む文化に負けてしまう。チームが文化を大切にできなければ、チームのアイデンティティや仕事の誇りを失ってしまう。&lt;/p&gt;

&lt;p&gt;この話は日本風の喩えでいうと＜腐ったみかん＞の話に通ずるものがある。一つ腐ったみかんがあると他のみかんも腐ってしまうという事象である。そうならないために腐ったみかんを紛れ込ませない、あるいは多少腐ってしてもそれが伝播しないような強いみかん（チーム）である必要がある。&lt;/p&gt;

&lt;p&gt;強い文化を作るには時間・労力がかかる。会社においては応募者がカルチャーフィットするかを面接のプロセスにおいてチームのメンバーが評価・判断し決める。採用を妥協してはいけない。&lt;/p&gt;

&lt;h2 id=&quot;マネジメントについて&quot;&gt;マネジメントについて&lt;/h2&gt;

&lt;p&gt;本書はマネージャーのためのマネジメント本ではなく、なんとなくリーダーになってしまったエンジニアのための本だと位置付けられている。&lt;/p&gt;

&lt;h3 id=&quot;マネージャーになるべき&quot;&gt;マネージャーになるべき！？&lt;/h3&gt;

&lt;p&gt;本書では「エンジニアはマネージャーになるべきだ」と主張しているのは興味深い。&lt;/p&gt;

&lt;p&gt;一般的に言ってエンジニアはマネージャーになりたがらない。一番の理由はコードを書く時間が少なくなるからである。そして無能なマネージャーの下に就いたことのあるエンジニアもまたマネージャーになることを拒む。しかし本書では下記のように説く。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;マネージャーになるべき大きな理由がある。まずは自分自身をスケールできるからだ。コードを書くのが得意だとしても、一人で書けるコード量には限界がある。自分がリーダーになって、優秀なエンジニアのチームにコードを書いてもらえば、どれだけのコード量になるかを想像してみてほしい！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;サーバントリーダーの役割&quot;&gt;サーバントリーダーの役割&lt;/h3&gt;

&lt;p&gt;マネージャーになるのであれば &lt;strong&gt;サーバントリーダーになるべき&lt;/strong&gt; だという。つまり執事や召使いのようにチームに奉仕するのだ。サーバントリーダーのやるべきことの例は下記だ。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HRTの雰囲気を作り出す&lt;/li&gt;
  &lt;li&gt;エンジニアでは対処できない社内の障害物を除去&lt;/li&gt;
  &lt;li&gt;チームの合意形成を支援&lt;/li&gt;
  &lt;li&gt;問題解決を支援する
    &lt;ul&gt;
      &lt;li&gt;アドバイスを求めてきたらリーダー自身が問題解決してはダメ、あくまでもサポートのみ&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;マイクロマネジメントをしない&lt;/li&gt;
  &lt;li&gt;夜遅くなったときに差し入れ&lt;/li&gt;
  &lt;li&gt;チームが順調に進めるように穴を埋める
    &lt;ul&gt;
      &lt;li&gt;ときには自らの手を汚す&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;技術的な側面とチームの人間関係を管理する（後者が難しい！）
    &lt;ul&gt;
      &lt;li&gt;技術畑出身のリーダーは後者を無視しがちだがそれはNG、きちんとチームの人間的側面に目を向ける&lt;/li&gt;
      &lt;li&gt;みんなのお友達になるのもNG、あくまでも仕事の関係を保つ&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;リーダーはパーフェクトではない&quot;&gt;リーダーはパーフェクトではない&lt;/h3&gt;

&lt;p&gt;リーダーはパーフェクトでなければならないという強迫観念があるかもしれないが、それを本書は否定する。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;リーダーはなんでも正しくやって、すべてを把握して、あらゆる質問に答える責任があると思っている。すべてを正しくやる必要はないし、あらゆる質問に答える必要もないし、そんなことをしていたら逆にチームの信頼を失ってしまう。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;質問を歓迎してチームからのフィードバックと批判をオープンに受け止めよう。そして何かを失敗したときは心から謝罪しよう。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;またリーダーが適切な答えを知っている必要はない。適切な答えを持っている人を知っていて、その人を紹介できさえすればよいのだ。多くの場合、適切な答えを知るより、適切な人を知るほうが価値がある。&lt;/p&gt;

&lt;p&gt;参考資料 (Podcast): &lt;a href=&quot;https://anchor.fm/em-fm/episodes/ep2--Engineering-Manager-e2bq4j&quot;&gt;Engineering Managerをスーパーマンだと思わないで by EM . FM #EMFM • A podcast on Anchor&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;ネガティブフィードバックを正しく伝える&quot;&gt;（ネガティブ）フィードバックを正しく伝える&lt;/h3&gt;

&lt;p&gt;正直になるのもリーダーをやる上で重要だ。&lt;/p&gt;

&lt;p&gt;1on1などの場面において共有できないことをメンバーから質問されたら「知っているけど伝えられない」と答えれば良い。自分がわからないことを聞かれたら素直に「わからない」といえばいい。&lt;/p&gt;

&lt;p&gt;ネガティブ・フィードバックを伝えるのは難しい。フィードバックや批判を伝えるときはメッセージが正しく相手に伝わっているかが重要だ。しかし直截的な伝え方だと相手に受け入れてもらえない場合があるので、きちんと適切な言い方を考えてから伝えよう。&lt;/p&gt;

&lt;p&gt;一方でチームメンバーの欠点ばかりを気にしていいところを十分にフィードバックできていないケースも気をつけよう。素晴らしいところは積極的に知らせてあげるべきだ。&lt;/p&gt;

&lt;h3 id=&quot;リーダーの行動指針&quot;&gt;リーダーの行動指針&lt;/h3&gt;

&lt;p&gt;その他にもリーダーが取るべき行動指針として下記のものが紹介されている。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;チームの幸せを追い求める&lt;/li&gt;
  &lt;li&gt;委譲せよ、ただし手は汚せ
    &lt;ul&gt;
      &lt;li&gt;たとえ自分がやったほうが早くてもチームメンバーに任せる&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;自分自身を置き換えるくらいの優秀な人を採用する
    &lt;ul&gt;
      &lt;li&gt;チームメンバーに代わりをしてほしいのであれば自分より優秀な人を採用する&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;事を荒立てるときを知る
    &lt;ul&gt;
      &lt;li&gt;状況は自然とは良くはならない、きちんと指摘する&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;カオス（不確実性）からチームを守る
    &lt;ul&gt;
      &lt;li&gt;リーダーになるとメンバーの頃には見えなかったカオスが見える。メンバーをそのカオスから守ろう&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;チームを空中援護する
    &lt;ul&gt;
      &lt;li&gt;会社の上空（上層部）で何が起きているかをチームに知らせる&lt;/li&gt;
      &lt;li&gt;できるだけ多くの情報をチームに共有すべきだが、チームに無関係の組織の話はする必要がない&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;どのエンジニアが何を必要としているかを把握してそれを与える
    &lt;ul&gt;
      &lt;li&gt;エンジニアが何を欲しているかは一人ひとり異なる&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;HRT（謙虚・尊敬・信頼）の精神を知るためにまずは手にとって読むべき本が本書である。&lt;/p&gt;

&lt;p&gt;HRTの精神に加えて、本書には「有害な人に対処する方法」「社内でうまく立ち回る方法」など&lt;strong&gt;会社で＜サバイブ＞していくための極めて実践的な内容&lt;/strong&gt;が書かれていた。HRTだけでなくそういったスキルもときに必要であり重要であるということを認識するのに、本書はすべてのエンジニアにオススメの一冊に仕上がっている。&lt;/p&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=toshimaru-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=4873116309&amp;amp;linkId=0aff3222ba2c6d1926da0019e2d110b9&quot;&gt;&lt;/iframe&gt;</content><author><name>Toshimaru</name></author><category term="読書" /><category term="management" /><category term="review" /><summary type="html">かの有名なHRTの精神の原典になっている本ということで読んでみた。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/teamgeek.jpg" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/teamgeek.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>