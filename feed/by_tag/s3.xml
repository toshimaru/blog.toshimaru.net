<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://blog.toshimaru.net/feed/by_tag/s3.xml" rel="self" type="application/atom+xml" /><link href="https://blog.toshimaru.net/" rel="alternate" type="text/html" /><updated>2021-03-16T08:57:00+09:00</updated><id>https://blog.toshimaru.net/feed/by_tag/s3.xml</id><title type="html">Hack Your Design!</title><subtitle>toshimaruの技術系なブログ</subtitle><author><name>Toshimaru</name></author><entry><title type="html">AWS S3 + CloudFront のCORS設定手順</title><link href="https://blog.toshimaru.net/s3-cloudfront-cors-setting/" rel="alternate" type="text/html" title="AWS S3 + CloudFront のCORS設定手順" /><published>2016-08-22T00:00:00+09:00</published><updated>2016-08-22T00:00:00+09:00</updated><id>https://blog.toshimaru.net/s3-cloudfront-cors-setting</id><content type="html" xml:base="https://blog.toshimaru.net/s3-cloudfront-cors-setting/">&lt;p&gt;（画像は&lt;a href=&quot;http://aws.clouddesignpattern.org/index.php/CDP:Cache_Distribution%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3&quot;&gt;AWS-CloudDesignPattern&lt;/a&gt;から引用）&lt;/p&gt;

&lt;h2 id=&quot;フォントファイルの豆腐化問題&quot;&gt;フォントファイルの豆腐化問題&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://fontawesome.io/&quot;&gt;Font Awesome&lt;/a&gt;のようなフォントファイルを外部ホスト（例えばS3など）から読み込もうとする場合、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Access-Control-Allow-Origin&lt;/code&gt;のヘッダでAllowされていないOriginからのリクエストの場合、いわゆるフォントの豆腐現象が起きます。これは&lt;a href=&quot;https://developer.mozilla.org/ja/docs/Web/HTTP/HTTP_access_control&quot;&gt;CORS(Cross-Origin Resource Sharing)&lt;/a&gt;
の設定が正しくなされていないためです。今回はAWSのS3+CloudFrontの構成でフォントファイルを配信したいので、S3およびCloudFrontのCORS設定手順および確認方法について説明します。&lt;/p&gt;

&lt;h2 id=&quot;s3の設定&quot;&gt;S3の設定&lt;/h2&gt;

&lt;p&gt;CORSの設定はS3のバケットのプロパティ設定から行えます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/cors/s3.png&quot; alt=&quot;s3 bucket property&quot; /&gt;&lt;/p&gt;

&lt;p&gt;XMLをサンプルとして下記のように設定できます。&lt;/p&gt;

&lt;h3 id=&quot;cors-configuration&quot;&gt;CORS Configuration&lt;/h3&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;CORSConfiguration&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://s3.amazonaws.com/doc/2006-03-01/&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;CORSRule&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;AllowedOrigin&amp;gt;&lt;/span&gt;http://sample.jp&lt;span class=&quot;nt&quot;&gt;&amp;lt;/AllowedOrigin&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;AllowedOrigin&amp;gt;&lt;/span&gt;https://sample.jp&lt;span class=&quot;nt&quot;&gt;&amp;lt;/AllowedOrigin&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;AllowedMethod&amp;gt;&lt;/span&gt;HEAD&lt;span class=&quot;nt&quot;&gt;&amp;lt;/AllowedMethod&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;AllowedMethod&amp;gt;&lt;/span&gt;GET&lt;span class=&quot;nt&quot;&gt;&amp;lt;/AllowedMethod&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;MaxAgeSeconds&amp;gt;&lt;/span&gt;3600&lt;span class=&quot;nt&quot;&gt;&amp;lt;/MaxAgeSeconds&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;ExposeHeader&amp;gt;&lt;/span&gt;ETag&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ExposeHeader&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;AllowedHeader&amp;gt;&lt;/span&gt;*&lt;span class=&quot;nt&quot;&gt;&amp;lt;/AllowedHeader&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/CORSRule&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/CORSConfiguration&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AllowedOrigin&lt;/code&gt;で許可したいOriginのURLを設定、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AllowedMethod&lt;/code&gt;で許可したいHTTPリクエストメソッドを指定します。それぞれ複数並べることで複数の値を設定することが可能となっています。&lt;/p&gt;

&lt;h3 id=&quot;確認手順&quot;&gt;確認手順&lt;/h3&gt;

&lt;p&gt;正しく設定されているかを確認するために下記のように&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl&lt;/code&gt;コマンドを使って検証してみましょう。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -X GET -I -H &quot;Origin: http://sample.jp&quot; https://s3-ap-northeast-1.amazonaws.com/bucket/path
HTTP/1.1 200 OK
x-amz-id-2: xxx
x-amz-request-id: xxx
Date: xxx
Access-Control-Allow-Origin: http://sample.jp
Access-Control-Allow-Methods: GET
Access-Control-Expose-Headers: ETag
Access-Control-Max-Age: 3600
Access-Control-Allow-Credentials: true
Vary: Origin, Access-Control-Request-Headers, Access-Control-Request-Method
Last-Modified: xxx
ETag: &quot;xxx&quot;
Accept-Ranges: bytes
Content-Type: application/json
Content-Length: 14356
Server: AmazonS3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Access-Control-Allow-Origin: http://sample.jp&lt;/code&gt; のレスポンスがヘッダが返ってきており、正しく AllowOrigin されていることが確認できました。&lt;/p&gt;

&lt;h2 id=&quot;cloudfront&quot;&gt;CloudFront&lt;/h2&gt;

&lt;p&gt;実運用の際はS3から配信ではなく、CloudFrontと組み合わせて利用するケースが多いかと思います。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://docs.aws.amazon.com/ja_jp/AmazonCloudFront/latest/DeveloperGuide/MigrateS3ToCloudFront.html&quot;&gt;Amazon S3 での CloudFront  の設定&lt;/a&gt;が済んでいることを前提として進めていいきます。&lt;/p&gt;

&lt;h3 id=&quot;cloudfrontの-cors-設定&quot;&gt;CloudFrontの CORS 設定&lt;/h3&gt;

&lt;p&gt;CORSの設定のためには、対象クラウドフロント設定から Behaviors を選択しデフォルトパスパターンの設定を変更する必要があります。OriginヘッダーがS3まで通る必要があるので&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Origin&lt;/code&gt;ヘッダーを Whitelist Headers に加えてやります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/cors/cloudfront.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;確認手順-1&quot;&gt;確認手順&lt;/h3&gt;

&lt;p&gt;S3と同じく、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl&lt;/code&gt;で確認してみます。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -X GET -I -H &quot;Origin: http://sample.jp&quot;  https://xxx.cloudfront.net/bucket/path
HTTP/1.1 200 OK
Content-Type: binary/octet-stream
Content-Length: 123
Connection: keep-alive
Date: xxx
Access-Control-Allow-Origin: http://sample.jp
Access-Control-Allow-Methods: GET
Access-Control-Expose-Headers: ETag
Access-Control-Max-Age: 3600
Access-Control-Allow-Credentials: true
Last-Modified: xxx
ETag: &quot;xxx&quot;
Accept-Ranges: bytes
Server: AmazonS3
Vary: Origin
Age: 9
X-Cache: Hit from cloudfront
Via: 1.1 xxxx.cloudfront.net (CloudFront)
X-Amz-Cf-Id: xxx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;S3と同じく&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Access-Control-Allow-Origin&lt;/code&gt;ヘッダが設定されていることを確認できました。めでたしめでたし。&lt;/p&gt;

&lt;h3 id=&quot;設定にあたっての注意事項&quot;&gt;設定にあたっての注意事項&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;不正な設定状態のままリクエストをすると、設定を変えたのにもかかわらず、CloudFrontにその不正な状態が残ったままになることがあるっぽい
    &lt;ul&gt;
      &lt;li&gt;その場合は &lt;a href=&quot;http://docs.aws.amazon.com/ja_jp/AmazonCloudFront/latest/DeveloperGuide/Invalidation.html&quot;&gt;Invalidation&lt;/a&gt;を行い、キャッシュをCloudFrontから消してみると解決するかも&lt;/li&gt;
      &lt;li&gt;Invalidation や設定変更反映はけっこう時間かかるので注意（試行錯誤のスピード落ちるのでもっと速くしてほしいところ…）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;del&gt;現時点ではCloudFrontは HTTP/2 未対応&lt;/del&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;del&gt;2017年くらいには対応してきそうな予感がある（あくまで個人的予想）&lt;/del&gt;&lt;/li&gt;
      &lt;li&gt;:new: 2016年９月にCloudFrontがHTTP/2に対応しました &lt;a href=&quot;https://aws.amazon.com/blogs/aws/new-http2-support-for-cloudfront/&quot;&gt;New – HTTP/2 Support for Amazon CloudFront | AWS Blog&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ブラウザからアクセスされるOriginヘッダは&lt;strong&gt;末尾スラッシュ無し&lt;/strong&gt;である点に注意&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/ja_jp/AmazonS3/latest/dev/cors.html&quot;&gt;Cross-Origin Resource Sharing (CORS) - Amazon Simple Storage Service&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.aws.amazon.com/ja_jp/AmazonCloudFront/latest/DeveloperGuide/header-caching.html#header-caching-web-cors&quot;&gt;リクエストヘッダーに基づいてオブジェクトをキャッシュするように CloudFront を設定する - Amazon CloudFront&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Toshimaru</name></author><category term="aws" /><category term="s3" /><summary type="html">（画像はAWS-CloudDesignPatternから引用）</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/cors/cache-distribution.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/cors/cache-distribution.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">GZip形式のS3上のファイルをRubyのIO.pipeでストリーム読み出し</title><link href="https://blog.toshimaru.net/ruby-pipe-s3/" rel="alternate" type="text/html" title="GZip形式のS3上のファイルをRubyのIO.pipeでストリーム読み出し" /><published>2015-01-04T00:00:00+09:00</published><updated>2015-01-04T00:00:00+09:00</updated><id>https://blog.toshimaru.net/ruby-pipe-s3</id><content type="html" xml:base="https://blog.toshimaru.net/ruby-pipe-s3/">&lt;h2 id=&quot;やりたいこと&quot;&gt;やりたいこと&lt;/h2&gt;

&lt;p&gt;S3からgzip形式のファイルをストリーミングダウンロードしてそれを読み出す。&lt;/p&gt;

&lt;h2 id=&quot;s3からのダウンロード&quot;&gt;S3からのダウンロード&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://docs.aws.amazon.com/AWSRubySDK/latest/AWS/S3/S3Object.html&quot;&gt;公式ドキュメント&lt;/a&gt;によるとこうする。&lt;/p&gt;

&lt;p&gt;If you want to stream an object from S3, you can pass a block to #read.&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;output&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;wb&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;large_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chunk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;gzipを読む&quot;&gt;gzipを読む&lt;/h2&gt;

&lt;p&gt;gzipの読み出しのサンプルコードはこんな感じ。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;hoge.gz&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Zlib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;GzipReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;close&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;via. &lt;a href=&quot;http://apidock.com/ruby/Zlib/GzipReader&quot;&gt;http://apidock.com/ruby/Zlib/GzipReader&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;pipeでつなぐ&quot;&gt;pipeでつなぐ&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IO.pipe&lt;/code&gt;を使ってつなぐとこう。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pipe&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;write_io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;write_io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;binmode&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;AWS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;S3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;S3Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chunk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;write_io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;write_io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;close&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;gz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Zlib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;GzipReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;gets&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# do something with line ...&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;注意点としては以下。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;gzip形式なので&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;write_io.binmode&lt;/code&gt;でバイナリモードにすること&lt;/li&gt;
  &lt;li&gt;Thread内で何かエラーが起こったときに&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gets&lt;/code&gt;が待ち状態で止まっちゃうので&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;close&lt;/code&gt;なりなんなり適切な処理をしてやること&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;参考&quot;&gt;参考&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/24016548/how-do-i-get-zlib-to-uncompress-from-s3-stream-in-ruby&quot;&gt;How do I get Zlib to uncompress from S3 stream in Ruby?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://takuya-1st.hatenablog.jp/entry/20120205/1328470521&quot;&gt;RubyはIO.pipeを使えば、パイプを作ることが出来る&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Toshimaru</name></author><category term="ruby" /><category term="aws" /><category term="s3" /><summary type="html">やりたいこと</summary></entry><entry><title type="html">WindowsコマンドでAmazon S3上にバックアップする</title><link href="https://blog.toshimaru.net/windows-s3-sync/" rel="alternate" type="text/html" title="WindowsコマンドでAmazon S3上にバックアップする" /><published>2013-04-19T00:00:00+09:00</published><updated>2013-04-19T00:00:00+09:00</updated><id>https://blog.toshimaru.net/windows-s3-sync</id><content type="html" xml:base="https://blog.toshimaru.net/windows-s3-sync/">&lt;p&gt;Windows PCを処分するにあたり、音楽、写真、動画などのデータ郡をamazon S3に置き管理することにしました。S3のGUIツールはコレといった定番がないようで（あったら教えてください）、挙動にもやや不安が残る感じでした。よって今回はコマンドラインツールを使ってローカルとS3をsync、同期することにしました。&lt;/p&gt;

&lt;p&gt;使ったツールは&lt;a href=&quot;http://www.dragondisk.com/&quot;&gt;Dragon Disk&lt;/a&gt;。トップにパッケージの写真があってやや有料の匂いがするが、無料なのでご安心を。&lt;/p&gt;

&lt;h2 id=&quot;手順&quot;&gt;手順&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.dragondisk.com/download-amazon-s3-client-google-cloud-storage-client.html&quot;&gt;ダウンロードページ&lt;/a&gt;からコマンドラインツールをダウンロード&lt;/li&gt;
  &lt;li&gt;展開してその中に&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dgsync.bat&lt;/code&gt;ファイルを作成し、下記のようなバッチファイルを作成してください。
&lt;script src=&quot;https://gist.github.com/toshimaru/5415149.js&quot;&gt;&lt;/script&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DGTOOLS_ACCESS_KEY&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DGTOOLS_SECRET_KEY&lt;/code&gt;を適宜編集。&lt;/li&gt;
      &lt;li&gt;ファイルの削除も同期をとりたい場合は&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--dont-delete&lt;/code&gt;オプションを外してください。&lt;/li&gt;
      &lt;li&gt;S3上のフォルダはあらかじめ作成しておく。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;２で作成したバッチを実行する。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以上です。amazon S3を使って安全、安価にデータを保管しましょう！&lt;/p&gt;

&lt;h3 id=&quot;追記&quot;&gt;追記&lt;/h3&gt;

&lt;p&gt;S3のヘビーな利用はそんなに「安価」って程ではない…(´・ω・｀)&lt;/p&gt;

&lt;h3 id=&quot;参考&quot;&gt;参考&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://www.tdn.co.jp/techblog/201206/52/&quot;&gt;Amazon S3のクライアント「DragonDisk」に付属の「dgsync」が便利な件&lt;/a&gt;&lt;/p&gt;</content><author><name>Toshimaru</name></author><category term="aws" /><category term="s3" /><summary type="html">Windows PCを処分するにあたり、音楽、写真、動画などのデータ郡をamazon S3に置き管理することにしました。S3のGUIツールはコレといった定番がないようで（あったら教えてください）、挙動にもやや不安が残る感じでした。よって今回はコマンドラインツールを使ってローカルとS3をsync、同期することにしました。</summary></entry></feed>