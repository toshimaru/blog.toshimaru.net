<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://blog.toshimaru.net/feed/by_tag/s3.xml" rel="self" type="application/atom+xml" /><link href="https://blog.toshimaru.net/" rel="alternate" type="text/html" /><updated>2022-07-22T14:29:02+09:00</updated><id>https://blog.toshimaru.net/feed/by_tag/s3.xml</id><title type="html">Hack Your Design!</title><subtitle>toshimaruの技術系なブログ</subtitle><author><name>Toshimaru</name></author><entry><title type="html">AWS S3 + CloudFront のCORS設定手順</title><link href="https://blog.toshimaru.net/s3-cloudfront-cors-setting/" rel="alternate" type="text/html" title="AWS S3 + CloudFront のCORS設定手順" /><published>2016-08-22T00:00:00+09:00</published><updated>2016-08-22T00:00:00+09:00</updated><id>https://blog.toshimaru.net/s3-cloudfront-cors-setting</id><content type="html" xml:base="https://blog.toshimaru.net/s3-cloudfront-cors-setting/"><![CDATA[<p>（画像は<a href="http://aws.clouddesignpattern.org/index.php/CDP:Cache_Distribution%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3">AWS-CloudDesignPattern</a>から引用）</p>

<h2 id="フォントファイルの豆腐化問題">フォントファイルの豆腐化問題</h2>

<p><a href="http://fontawesome.io/">Font Awesome</a>のようなフォントファイルを外部ホスト（例えばS3など）から読み込もうとする場合、<code class="language-plaintext highlighter-rouge">Access-Control-Allow-Origin</code>のヘッダでAllowされていないOriginからのリクエストの場合、いわゆるフォントの豆腐現象が起きます。これは<a href="https://developer.mozilla.org/ja/docs/Web/HTTP/HTTP_access_control">CORS(Cross-Origin Resource Sharing)</a>
の設定が正しくなされていないためです。今回はAWSのS3+CloudFrontの構成でフォントファイルを配信したいので、S3およびCloudFrontのCORS設定手順および確認方法について説明します。</p>

<h2 id="s3の設定">S3の設定</h2>

<p>CORSの設定はS3のバケットのプロパティ設定から行えます。</p>

<p><img src="/images/posts/cors/s3.png" alt="s3 bucket property" /></p>

<p>XMLをサンプルとして下記のように設定できます。</p>

<h3 id="cors-configuration">CORS Configuration</h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="nt">&lt;CORSConfiguration</span> <span class="na">xmlns=</span><span class="s">"http://s3.amazonaws.com/doc/2006-03-01/"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;CORSRule&gt;</span>
        <span class="nt">&lt;AllowedOrigin&gt;</span>http://sample.jp<span class="nt">&lt;/AllowedOrigin&gt;</span>
        <span class="nt">&lt;AllowedOrigin&gt;</span>https://sample.jp<span class="nt">&lt;/AllowedOrigin&gt;</span>
        <span class="nt">&lt;AllowedMethod&gt;</span>HEAD<span class="nt">&lt;/AllowedMethod&gt;</span>
        <span class="nt">&lt;AllowedMethod&gt;</span>GET<span class="nt">&lt;/AllowedMethod&gt;</span>
        <span class="nt">&lt;MaxAgeSeconds&gt;</span>3600<span class="nt">&lt;/MaxAgeSeconds&gt;</span>
        <span class="nt">&lt;ExposeHeader&gt;</span>ETag<span class="nt">&lt;/ExposeHeader&gt;</span>
        <span class="nt">&lt;AllowedHeader&gt;</span>*<span class="nt">&lt;/AllowedHeader&gt;</span>
    <span class="nt">&lt;/CORSRule&gt;</span>
<span class="nt">&lt;/CORSConfiguration&gt;</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">AllowedOrigin</code>で許可したいOriginのURLを設定、<code class="language-plaintext highlighter-rouge">AllowedMethod</code>で許可したいHTTPリクエストメソッドを指定します。それぞれ複数並べることで複数の値を設定することが可能となっています。</p>

<h3 id="確認手順">確認手順</h3>

<p>正しく設定されているかを確認するために下記のように<code class="language-plaintext highlighter-rouge">curl</code>コマンドを使って検証してみましょう。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ curl -X GET -I -H "Origin: http://sample.jp" https://s3-ap-northeast-1.amazonaws.com/bucket/path
HTTP/1.1 200 OK
x-amz-id-2: xxx
x-amz-request-id: xxx
Date: xxx
Access-Control-Allow-Origin: http://sample.jp
Access-Control-Allow-Methods: GET
Access-Control-Expose-Headers: ETag
Access-Control-Max-Age: 3600
Access-Control-Allow-Credentials: true
Vary: Origin, Access-Control-Request-Headers, Access-Control-Request-Method
Last-Modified: xxx
ETag: "xxx"
Accept-Ranges: bytes
Content-Type: application/json
Content-Length: 14356
Server: AmazonS3
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">Access-Control-Allow-Origin: http://sample.jp</code> のレスポンスがヘッダが返ってきており、正しく AllowOrigin されていることが確認できました。</p>

<h2 id="cloudfront">CloudFront</h2>

<p>実運用の際はS3から配信ではなく、CloudFrontと組み合わせて利用するケースが多いかと思います。</p>

<p><a href="http://docs.aws.amazon.com/ja_jp/AmazonCloudFront/latest/DeveloperGuide/MigrateS3ToCloudFront.html">Amazon S3 での CloudFront  の設定</a>が済んでいることを前提として進めていいきます。</p>

<h3 id="cloudfrontの-cors-設定">CloudFrontの CORS 設定</h3>

<p>CORSの設定のためには、対象クラウドフロント設定から Behaviors を選択しデフォルトパスパターンの設定を変更する必要があります。OriginヘッダーがS3まで通る必要があるので<code class="language-plaintext highlighter-rouge">Origin</code>ヘッダーを Whitelist Headers に加えてやります。</p>

<p><img src="/images/posts/cors/cloudfront.png" alt="" /></p>

<h3 id="確認手順-1">確認手順</h3>

<p>S3と同じく、<code class="language-plaintext highlighter-rouge">curl</code>で確認してみます。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ curl -X GET -I -H "Origin: http://sample.jp"  https://xxx.cloudfront.net/bucket/path
HTTP/1.1 200 OK
Content-Type: binary/octet-stream
Content-Length: 123
Connection: keep-alive
Date: xxx
Access-Control-Allow-Origin: http://sample.jp
Access-Control-Allow-Methods: GET
Access-Control-Expose-Headers: ETag
Access-Control-Max-Age: 3600
Access-Control-Allow-Credentials: true
Last-Modified: xxx
ETag: "xxx"
Accept-Ranges: bytes
Server: AmazonS3
Vary: Origin
Age: 9
X-Cache: Hit from cloudfront
Via: 1.1 xxxx.cloudfront.net (CloudFront)
X-Amz-Cf-Id: xxx
</code></pre></div></div>

<p>S3と同じく<code class="language-plaintext highlighter-rouge">Access-Control-Allow-Origin</code>ヘッダが設定されていることを確認できました。めでたしめでたし。</p>

<h3 id="設定にあたっての注意事項">設定にあたっての注意事項</h3>

<ul>
  <li>不正な設定状態のままリクエストをすると、設定を変えたのにもかかわらず、CloudFrontにその不正な状態が残ったままになることがあるっぽい
    <ul>
      <li>その場合は <a href="http://docs.aws.amazon.com/ja_jp/AmazonCloudFront/latest/DeveloperGuide/Invalidation.html">Invalidation</a>を行い、キャッシュをCloudFrontから消してみると解決するかも</li>
      <li>Invalidation や設定変更反映はけっこう時間かかるので注意（試行錯誤のスピード落ちるのでもっと速くしてほしいところ…）</li>
    </ul>
  </li>
  <li><del>現時点ではCloudFrontは HTTP/2 未対応</del>
    <ul>
      <li><del>2017年くらいには対応してきそうな予感がある（あくまで個人的予想）</del></li>
      <li>:new: 2016年９月にCloudFrontがHTTP/2に対応しました <a href="https://aws.amazon.com/blogs/aws/new-http2-support-for-cloudfront/">New – HTTP/2 Support for Amazon CloudFront | AWS Blog</a></li>
    </ul>
  </li>
  <li>ブラウザからアクセスされるOriginヘッダは<strong>末尾スラッシュ無し</strong>である点に注意</li>
</ul>

<h2 id="参考">参考</h2>

<ul>
  <li><a href="https://docs.aws.amazon.com/ja_jp/AmazonS3/latest/dev/cors.html">Cross-Origin Resource Sharing (CORS) - Amazon Simple Storage Service</a></li>
  <li><a href="http://docs.aws.amazon.com/ja_jp/AmazonCloudFront/latest/DeveloperGuide/header-caching.html#header-caching-web-cors">リクエストヘッダーに基づいてオブジェクトをキャッシュするように CloudFront を設定する - Amazon CloudFront</a></li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="aws" /><category term="s3" /><summary type="html"><![CDATA[Font Awesomeのようなフォントファイルを外部ホスト（例えばS3など）から読み込もうとする場合、Access-Control-Allow-OriginのヘッダでAllowされていないOriginからのリクエストの場合いわゆるフォントの豆腐現象が起きる。これはCORS(Cross-Origin Resource Sharing) の設定が正しくなされていないためだ。今回はAWSのS3+CloudFrontの構成でフォントファイルを配信したいので、S3およびCloudFrontのCORS設定手順および確認方法について説明する。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/cors/cache-distribution.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/cors/cache-distribution.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">GZip形式のS3上のファイルをRubyのIO.pipeでストリーム読み出し</title><link href="https://blog.toshimaru.net/ruby-pipe-s3/" rel="alternate" type="text/html" title="GZip形式のS3上のファイルをRubyのIO.pipeでストリーム読み出し" /><published>2015-01-04T00:00:00+09:00</published><updated>2015-01-04T00:00:00+09:00</updated><id>https://blog.toshimaru.net/ruby-pipe-s3</id><content type="html" xml:base="https://blog.toshimaru.net/ruby-pipe-s3/"><![CDATA[<h2 id="やりたいこと">やりたいこと</h2>

<p>S3からgzip形式のファイルをストリーミングダウンロードしてそれを読み出す。</p>

<h2 id="s3からのダウンロード">S3からのダウンロード</h2>

<p><a href="http://docs.aws.amazon.com/AWSRubySDK/latest/AWS/S3/S3Object.html">公式ドキュメント</a>によるとこうする。</p>

<p>If you want to stream an object from S3, you can pass a block to #read.</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">File</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="s1">'output'</span><span class="p">,</span> <span class="s1">'wb'</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span>
  <span class="n">large_object</span><span class="p">.</span><span class="nf">read</span> <span class="k">do</span> <span class="o">|</span><span class="n">chunk</span><span class="o">|</span>
    <span class="n">file</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">chunk</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<h2 id="gzipを読む">gzipを読む</h2>

<p>gzipの読み出しのサンプルコードはこんな感じ。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">File</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="s1">'hoge.gz'</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
  <span class="n">gz</span> <span class="o">=</span> <span class="no">Zlib</span><span class="o">::</span><span class="no">GzipReader</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
  <span class="nb">print</span> <span class="n">gz</span><span class="p">.</span><span class="nf">read</span>
  <span class="n">gz</span><span class="p">.</span><span class="nf">close</span>
<span class="k">end</span>
</code></pre></div></div>

<p>via. <a href="http://apidock.com/ruby/Zlib/GzipReader">http://apidock.com/ruby/Zlib/GzipReader</a></p>

<h2 id="pipeでつなぐ">pipeでつなぐ</h2>

<p><code class="language-plaintext highlighter-rouge">IO.pipe</code>を使ってつなぐとこう。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">IO</span><span class="p">.</span><span class="nf">pipe</span> <span class="k">do</span> <span class="o">|</span><span class="n">read_io</span><span class="p">,</span> <span class="n">write_io</span><span class="o">|</span>
  <span class="n">write_io</span><span class="p">.</span><span class="nf">binmode</span>
  <span class="n">thread</span> <span class="o">=</span> <span class="no">Thread</span><span class="p">.</span><span class="nf">new</span> <span class="k">do</span>
    <span class="k">begin</span>
      <span class="no">AWS</span><span class="o">::</span><span class="no">S3</span><span class="o">::</span><span class="no">S3Object</span><span class="p">.</span><span class="nf">read</span> <span class="k">do</span> <span class="o">|</span><span class="n">chunk</span><span class="o">|</span>
        <span class="n">write_io</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">chunk</span><span class="p">)</span>
      <span class="k">end</span>
    <span class="k">rescue</span>
      <span class="n">write_io</span><span class="p">.</span><span class="nf">close</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="n">gz</span> <span class="o">=</span> <span class="no">Zlib</span><span class="o">::</span><span class="no">GzipReader</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">read_io</span><span class="p">)</span>
  <span class="k">while</span> <span class="n">line</span> <span class="o">=</span> <span class="n">gz</span><span class="p">.</span><span class="nf">gets</span>
    <span class="c1"># do something with line ...</span>
    <span class="nb">puts</span> <span class="n">line</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>注意点としては以下。</p>

<ol>
  <li>gzip形式なので<code class="language-plaintext highlighter-rouge">write_io.binmode</code>でバイナリモードにすること</li>
  <li>Thread内で何かエラーが起こったときに<code class="language-plaintext highlighter-rouge">gets</code>が待ち状態で止まっちゃうので<code class="language-plaintext highlighter-rouge">close</code>なりなんなり適切な処理をしてやること</li>
</ol>

<h3 id="参考">参考</h3>

<ul>
  <li><a href="http://stackoverflow.com/questions/24016548/how-do-i-get-zlib-to-uncompress-from-s3-stream-in-ruby">How do I get Zlib to uncompress from S3 stream in Ruby?</a></li>
  <li><a href="http://takuya-1st.hatenablog.jp/entry/20120205/1328470521">RubyはIO.pipeを使えば、パイプを作ることが出来る</a></li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="ruby" /><category term="aws" /><category term="s3" /><summary type="html"><![CDATA[S3からgzip形式のファイルをストリーミングダウンロードしてそれをRubyで読み出す。IO.pipeを使えば可能です。]]></summary></entry><entry><title type="html">WindowsコマンドでAmazon S3上にバックアップする</title><link href="https://blog.toshimaru.net/windows-s3-sync/" rel="alternate" type="text/html" title="WindowsコマンドでAmazon S3上にバックアップする" /><published>2013-04-19T00:00:00+09:00</published><updated>2013-04-19T00:00:00+09:00</updated><id>https://blog.toshimaru.net/windows-s3-sync</id><content type="html" xml:base="https://blog.toshimaru.net/windows-s3-sync/"><![CDATA[<p>Windows PCを処分するにあたり、音楽、写真、動画などのデータ郡をamazon S3に置き管理することにしました。S3のGUIツールはコレといった定番がないようで（あったら教えてください）、挙動にもやや不安が残る感じでした。よって今回はコマンドラインツールを使ってローカルとS3をsync、同期することにしました。</p>

<p>使ったツールは<a href="http://www.dragondisk.com/">Dragon Disk</a>。トップにパッケージの写真があってやや有料の匂いがするが、無料なのでご安心を。</p>

<h2 id="手順">手順</h2>

<ol>
  <li><a href="http://www.dragondisk.com/download-amazon-s3-client-google-cloud-storage-client.html">ダウンロードページ</a>からコマンドラインツールをダウンロード</li>
  <li>展開してその中に<code class="language-plaintext highlighter-rouge">dgsync.bat</code>ファイルを作成し、下記のようなバッチファイルを作成してください。
<script src="https://gist.github.com/toshimaru/5415149.js"></script>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">DGTOOLS_ACCESS_KEY</code>、<code class="language-plaintext highlighter-rouge">DGTOOLS_SECRET_KEY</code>を適宜編集。</li>
      <li>ファイルの削除も同期をとりたい場合は<code class="language-plaintext highlighter-rouge">--dont-delete</code>オプションを外してください。</li>
      <li>S3上のフォルダはあらかじめ作成しておく。</li>
    </ul>
  </li>
  <li>２で作成したバッチを実行する。</li>
</ol>

<p>以上です。amazon S3を使って安全、安価にデータを保管しましょう！</p>

<h3 id="追記">追記</h3>

<p>S3のヘビーな利用はそんなに「安価」って程ではない…(´・ω・｀)</p>

<h3 id="参考">参考</h3>

<p><a href="http://www.tdn.co.jp/techblog/201206/52/">Amazon S3のクライアント「DragonDisk」に付属の「dgsync」が便利な件</a></p>]]></content><author><name>Toshimaru</name></author><category term="aws" /><category term="s3" /><summary type="html"><![CDATA[Windows PCを処分するにあたり、音楽、写真、動画などのデータ郡をamazon S3に置き管理することにしました。S3のGUIツールはコレといった定番がないようで（あったら教えてください）、挙動にもやや不安が残る感じでした。よって今回はDragon Diskコマンドラインツールを使ってローカルとS3をsync、同期することにしました。]]></summary></entry></feed>