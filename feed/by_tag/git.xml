<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="https://blog.toshimaru.net/feed/by_tag/git.xml" rel="self" type="application/atom+xml" /><link href="https://blog.toshimaru.net/" rel="alternate" type="text/html" /><updated>2022-11-05T23:59:22+09:00</updated><id>https://blog.toshimaru.net/feed/by_tag/git.xml</id><title type="html">Hack Your Design!</title><subtitle>toshimaruの技術系なブログ</subtitle><author><name>Toshimaru</name></author><entry><title type="html">git switch養成ギプス 〜git checkoutからの卒業〜</title><link href="https://blog.toshimaru.net/git-switch-restore/" rel="alternate" type="text/html" title="git switch養成ギプス 〜git checkoutからの卒業〜" /><published>2020-12-09T00:00:00+09:00</published><updated>2021-03-18T00:00:00+09:00</updated><id>https://blog.toshimaru.net/git-switch-restore</id><content type="html" xml:base="https://blog.toshimaru.net/git-switch-restore/"><![CDATA[<p>本記事は<a href="https://qiita.com/advent-calendar/2020/git">Git Advent Calendar 2020</a> 9日目の記事です。</p>

<p>git 2.23 にて <code class="language-plaintext highlighter-rouge">git switch</code>, <code class="language-plaintext highlighter-rouge">git restore</code> というコマンドが導入されたことはみなさん既にご存知のことかと思います。</p>

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">One of our favorite open source projects has a big update... Git 2.23 is here!<br /><br />Read all about the latest release and new features ✨<a href="https://t.co/fpQICF8Onc">https://t.co/fpQICF8Onc</a></p>&mdash; GitHub (@github) <a href="https://twitter.com/github/status/1162474366380269568?ref_src=twsrc%5Etfw">August 16, 2019</a></blockquote>

<p>雑に要約すると「<strong><code class="language-plaintext highlighter-rouge">git checkout</code>に機能もたせすぎてわかりにくくなっちゃったから、<code class="language-plaintext highlighter-rouge">git switch</code>, <code class="language-plaintext highlighter-rouge">git restore</code>でわかりやすくしたよ！</strong>」ってことだと思います。</p>

<p>一方、まだ<code class="language-plaintext highlighter-rouge">git switch</code>に移行しきれていないという人も多くいるのではないかと思います。実際、私の周囲でも今も<code class="language-plaintext highlighter-rouge">git checkout</code>を使い続けている人をちらほら見るので、本記事では<code class="language-plaintext highlighter-rouge">git switch</code>に移行していくためのコツを書いてみます。</p>

<h2 id="結論">結論</h2>

<p><strong><code class="language-plaintext highlighter-rouge">switch</code> のaliasを設定しろ、そして<code class="language-plaintext highlighter-rouge">checkout</code>のaliasを捨てろ</strong></p>

<h2 id="git-checkout-only時代">git checkout only時代</h2>

<p><code class="language-plaintext highlighter-rouge">checkout</code>というコマンドは長ったらしいのでaliasを設定して運用していたのではないでしょうか。</p>

<p>僕の場合、下記のようにaliasを設定しました。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># ~/.gitconfig
[alias]
  co = checkout
</code></pre></div></div>

<p>ただこれだと <code class="language-plaintext highlighter-rouge">git checkout</code>をそのまま便利に使い続けてしまうので、思い切ってこいつを削除してしまうと良いかと思います。</p>

<p>もしくは下記のようにメッセージ出すとかでもOK。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># ~/.gitconfig
[alias]
  co = !echo "Use git switch/restore instead!"
</code></pre></div></div>

<h2 id="git-switch時代">git switch時代</h2>

<p><code class="language-plaintext highlighter-rouge">git switch</code>を使いやすくするために下記のようなaliasを設定します。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># ~/.gitconfig
[alias]
  sw = switch
  swc = switch -c
</code></pre></div></div>

<p>こうすることで checkout コマンドが下記のように生まれ変わります。</p>

<h3 id="main-branch-へ切り替え">main branch へ切り替え</h3>

<p>before:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>git checkout main
</code></pre></div></div>

<p>after:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>git switch main
</code></pre></div></div>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">#</span><span class="w"> </span>sw <span class="o">=</span> switch を設定している場合
<span class="gp">$</span><span class="w"> </span>git sw main
</code></pre></div></div>

<h3 id="main-branch-から-hoge-branch-作成">main branch から hoge branch 作成</h3>

<p>before:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">git checkout -b hoge main
</span></code></pre></div></div>

<p>after:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>git switch <span class="nt">-c</span> hoge main
</code></pre></div></div>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">#</span><span class="w"> </span>sw <span class="o">=</span> switch <span class="nt">-c</span>
<span class="go">g swc hoge main
</span></code></pre></div></div>

<h2 id="余談">余談</h2>

<p><code class="language-plaintext highlighter-rouge">git restore</code>に対する良いaliasは今のところ見つかっていません。</p>

<p><code class="language-plaintext highlighter-rouge">git reset</code>とalias的に名前空間かぶつかるので、自分の中でしっくりくる命名できていないんですよね。何かいいアイディアのお持ちの方は教えてください。</p>]]></content><author><name>Toshimaru</name></author><category term="git" /><summary type="html"><![CDATA[git 2.23 にて git switch, git restore というコマンドが導入されたことはみなさん既にご存知のことかと思います。一方、まだgit switchに移行しきれていないという人も多くいるのではないかと思います。実際、私の周囲でも今もgit checkoutを使い続けている人をちらほら見るので、本記事ではgit switchに移行していくためのコツを書いてみます。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/git-switch.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/git-switch.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">gitのログから特定の文字列を含むコミットを発掘する</title><link href="https://blog.toshimaru.net/git-log-p-s/" rel="alternate" type="text/html" title="gitのログから特定の文字列を含むコミットを発掘する" /><published>2013-12-02T00:00:00+09:00</published><updated>2021-11-08T00:00:00+09:00</updated><id>https://blog.toshimaru.net/git-log-p-s</id><content type="html" xml:base="https://blog.toshimaru.net/git-log-p-s/"><![CDATA[<p>「このコード書いたのは誰だ？」ってのは <code class="language-plaintext highlighter-rouge">git blame</code> からの <code class="language-plaintext highlighter-rouge">git show</code> で :ok: ですが、多くのコミットを重ねている場合、<code class="language-plaintext highlighter-rouge">git blame</code>では「元々誰がどういう意図でこのコードを足したのか？」ってとこまでは追いにくかったりします。</p>

<p>そんなときは下記のgitコマンドを使えばOK.</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>git log <span class="nt">-p</span> <span class="nt">-S</span> <span class="s1">'function shitty_function'</span>
</code></pre></div></div>

<p>これで<code class="language-plaintext highlighter-rouge">function shitty_function</code>という文字列にヒットした差分があるgitのcommit が最初から今にいたるまで一覧できます。</p>

<p>もし最初のコミットを発掘したいのであれば、コミットログ一覧の最下部にいけば発掘可能です。</p>

<h2 id="参考">参考</h2>

<ul>
  <li><a href="https://blog.eiel.info/blog/2013/06/04/git-log-s/">このコード書いた誰だよ! そんな時の git log -S でもしてみよう | そんなこと覚えてない</a></li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="git" /><summary type="html"><![CDATA[「このコード書いたのは誰だ？」ってのは git blame からの git show でOKですが、多くのコミットを重ねている場合、git blameでは「元々誰がどういう意図でこのコードを足したのか？」ってとこまでは追えなかったりします。 そんなときは下記のgitコマンドを使えばOK.]]></summary></entry><entry><title type="html">GitHub + hubコマンドで快適な GitHub ライフを営む</title><link href="https://blog.toshimaru.net/github-and-hub/" rel="alternate" type="text/html" title="GitHub + hubコマンドで快適な GitHub ライフを営む" /><published>2013-11-28T00:00:00+09:00</published><updated>2021-03-01T00:00:00+09:00</updated><id>https://blog.toshimaru.net/github-and-hub</id><content type="html" xml:base="https://blog.toshimaru.net/github-and-hub/"><![CDATA[<p><code class="language-plaintext highlighter-rouge">github</code>で開発を進めている場合、<a href="https://github.com/github/hub">hubコマンド</a>の利用が素敵な感じです。</p>

<h2 id="インストール">インストール</h2>

<p>Macを使っていると<code class="language-plaintext highlighter-rouge">brew</code>使って<code class="language-plaintext highlighter-rouge">hub</code>コマンドが一発で入ります。</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>brew <span class="nb">install </span>hub
</code></pre></div></div>

<h2 id="gitのエイリアスをhubコマンドで拡張">gitのエイリアスをhubコマンドで拡張</h2>

<p>ただこのままだとhubコマンドはgitコマンドと分離しており少し不便なので、gitコマンドをhubコマンドで置き換えてやりましょう。もちろん既存のgitコマンドに悪影響を与えるようなことはありません。やり方は下記の１行を<code class="language-plaintext highlighter-rouge">.zshrc</code>なり<code class="language-plaintext highlighter-rouge">.bashrc</code>に追記すればOK.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">eval</span> <span class="s2">"</span><span class="si">$(</span>hub <span class="nb">alias</span> <span class="nt">-s</span><span class="si">)</span><span class="s2">"</span>
</code></pre></div></div>

<h2 id="githubからのcloneが楽になる">GitHubからのcloneが楽になる</h2>

<p>hubコマンドの導入によりGithubからのcloneが楽になります。下記のように<code class="language-plaintext highlighter-rouge">{user}/{repo}</code>でcloneできます。</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>git clone toshimaru/dotfiles
</code></pre></div></div>

<h2 id="github上の当該レポジトリのページを開く">GitHub上の当該レポジトリのページを開く</h2>

<p>自分の場合、GithubにpushしたあとにGithubのGUI上でDiffであったり諸々の状態を確認したいことがよくあります。<code class="language-plaintext highlighter-rouge">hub</code>コマンドであれば一発でいけます。</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>git browse
</code></pre></div></div>

<p>規定のブラウザで当該レポジトリのGithubページが開きます。</p>

<h2 id="その他">その他</h2>

<p>他にもpull-requestをコマンドから簡単に送れるようになったり嬉しいことがたくさんあります。詳しくは<a href="http://hub.github.com/">公式hubページ</a>を見てください。</p>]]></content><author><name>Toshimaru</name></author><category term="git" /><category term="github" /><summary type="html"><![CDATA[githubで開発を進めている場合、hubコマンドの利用が素敵な感じです。]]></summary></entry><entry><title type="html">Gitのrevertの-m(mainline)オプションについて</title><link href="https://blog.toshimaru.net/git-revert-mainline/" rel="alternate" type="text/html" title="Gitのrevertの-m(mainline)オプションについて" /><published>2013-10-16T00:00:00+09:00</published><updated>2013-10-16T00:00:00+09:00</updated><id>https://blog.toshimaru.net/git-revert-mainline</id><content type="html" xml:base="https://blog.toshimaru.net/git-revert-mainline/"><![CDATA[<p><code class="language-plaintext highlighter-rouge">git revert</code>しているとこんなエラーに出くわしました。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git revert xxxxx
error: Commit xxxxx is a merge but no -m option was given.
fatal: revert failed
</code></pre></div></div>

<p>「コミットxxxxxはマージだけど、<code class="language-plaintext highlighter-rouge">-m</code>が指定されていないよ！」ってことなんですがどういうことでしょう？</p>

<p>普通に考えてみると当然のことで、マージコミットですから<code class="language-plaintext highlighter-rouge">revert</code>といったときにどのブランチ状態に戻るかを指定しなければrevertできないよということです。つまり下記のようなヒストリーがあったときに、</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>*   1459267 - Merge pull request #4 from branch3
|\
| * 344fd52 - (branch3) Add sentence
| * 2b30235 - add file
* | dbc65f4 - add revert commit2
* | f0b0a91 - add revert commit 1
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">&lt;1459267&gt;</code>のマージをrevertした場合に、<code class="language-plaintext highlighter-rouge">&lt;344fd52&gt;</code>か<code class="language-plaintext highlighter-rouge">&lt;dbc65f4&gt;</code>かどっちに戻すかがわかんないっちゅうことです。</p>

<p>このmainlineは1から始まり「1がマージされた側のブランチ」「2がマージする側のブランチ」になるようなので多くの場合、前者に戻したいと思うので1を指定しとけばよいということになります。結果としては下記のコマンド。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git revert -m 1 1459267
</code></pre></div></div>

<p>以上でした。</p>

<h3 id="参考">参考</h3>
<ul>
  <li><a href="http://d.hatena.ne.jp/koba04/20121122/1353512656">gitのmerge-commitをrevertする</a></li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="git" /><summary type="html"><![CDATA[git revertのmainlineオプションについて考えてみました]]></summary></entry><entry><title type="html">【git】直前の数個のコミットの歴史を著作者とともに修正する</title><link href="https://blog.toshimaru.net/git-with-author/" rel="alternate" type="text/html" title="【git】直前の数個のコミットの歴史を著作者とともに修正する" /><published>2012-11-29T00:00:00+09:00</published><updated>2012-11-29T00:00:00+09:00</updated><id>https://blog.toshimaru.net/git-with-author</id><content type="html" xml:base="https://blog.toshimaru.net/git-with-author/"><![CDATA[<p>たとえばこんなケース。</p>
<p><img src="/images/2012/11/terminal.png"></p>
<p>のびた君の努力の成果である直前の３つのコミットをジャイアンのコミットとして歴史を改変してみましょう。rebaseにて実現できます。</p>
<div class="CodeRay">
  <div class="code"><pre>$ git rebase -i HEAD~3</pre></div>
</div>

<p>こんな画面が出てきますので、</p>
<p><img src="/images/2012/11/terminal1.png"></p>
<p>pickをeditにします。</p>
<p><img src="/images/2012/11/terminal2.png"></p>
<p>こんなメッセージ。</p>
<div class="CodeRay">
  <div class="code"><pre>Stopped at e4269d9... modify file1.
You can amend the commit now, with
    git commit --amend
Once you are satisfied with your changes, run
    git rebase --continue</pre></div>
</div>

<p>HEADは3つ前になってます。 （ここで使っている <a href="http://blog.toshimaru.net/git-log-graph">"git lga" コマンドはこちらを参考</a>）</p>
<div class="CodeRay">
  <div class="code"><pre>$ git lga
* 5a0edde - (master) add nobita-text. (20 minutes ago) &lt;nobita&gt;
* 4a73401 - modify file2. (20 minutes ago) &lt;nobita&gt;
* e4269d9 - (HEAD) modify file1. (20 minutes ago) &lt;nobita&gt;</pre></div>
</div>

<p>１．amendオプションつけて、authorもジャイアンに改変します。</p>
<div class="CodeRay">
  <div class="code"><pre>git commit --amend --author=&quot;jaian &lt;jaian@doraemon.com&gt;&quot;</pre></div>
</div>

<p>２．コミット後、rebase continueします。</p>
<div class="CodeRay">
  <div class="code"><pre>git rebase --continue</pre></div>
</div>

<p>１，２を繰り返します。</p>
<p>結果、のび太君の努力の歴史はジャイアンによって改変されました。</p>
<div class="CodeRay">
  <div class="code"><pre>$ git lga
* 304d0c7 - (HEAD, master) add nobita-text. (16 seconds ago) &lt;jaian&gt;
* 66b5984 - modify file2. (34 seconds ago) &lt;jaian&gt;
* a0a26e2 - modify file1. (2 minutes ago) &lt;jaian&gt;</pre></div>
</div>

<p>大成功☆(・&omega;&lt;)</p>
<h3>参考</h3>
<p><a href="http://git-scm.com/book/en/Git-Tools-Rewriting-History">6.4 Git Tools - Rewriting History</a></p>]]></content><author><name>Toshimaru</name></author><category term="git" /><summary type="html"><![CDATA[たとえばこんなケース。 のびた君の努力の成果である直前の３つのコミットをジャイアンのコミットとして歴史を改変してみましょう。rebaseにて実現できます。 $ git rebase -i HEAD~3]]></summary></entry><entry><title type="html">【git】error There was a problem with the editor ‘vi’.</title><link href="https://blog.toshimaru.net/macgiterror-there-was-a-problem-with-the-edit/" rel="alternate" type="text/html" title="【git】error There was a problem with the editor ‘vi’." /><published>2012-11-28T00:00:00+09:00</published><updated>2012-11-28T00:00:00+09:00</updated><id>https://blog.toshimaru.net/macgiterror-there-was-a-problem-with-the-edit</id><content type="html" xml:base="https://blog.toshimaru.net/macgiterror-there-was-a-problem-with-the-edit/"><![CDATA[<h2 id="problem">Problem</h2>

<p>MacのVimにてコミットメッセージを書いて<code class="language-plaintext highlighter-rouge">wq</code>するとこんなエラーが出た。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git commit
error: There was a problem with the editor 'vi'.
Please supply the message using either -m or -F option.
</code></pre></div></div>

<h2 id="solution">Solution</h2>

<p>明示的に使用するエディタをvimの絶対パスを設定してあげればOK.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git config --global core.editor /usr/bin/vim
</code></pre></div></div>

<h2 id="参考">参考</h2>

<p><a href="http://tooky.co.uk/2010/04/08/there-was-a-problem-with-the-editor-vi-git-on-mac-os-x.html"> Fixing "There was a problem with the editor 'vi'" for Git on Mac OS X Snow Leopard</a></p>]]></content><author><name>Toshimaru</name></author><category term="git" /><summary type="html"><![CDATA[MacのVimにてコミットメッセージを書いて"wq"するとこんなエラーが出た。error There was a problem with the editor 'vi'.]]></summary></entry><entry><title type="html">Git のコミットメッセージの書き方</title><link href="https://blog.toshimaru.net/git-29764/" rel="alternate" type="text/html" title="Git のコミットメッセージの書き方" /><published>2012-10-15T00:00:00+09:00</published><updated>2012-10-15T00:00:00+09:00</updated><id>https://blog.toshimaru.net/git-29764</id><content type="html" xml:base="https://blog.toshimaru.net/git-29764/"><![CDATA[<p>書き方というよりも、お作法というべきでしょうか。だいたい下記のURLの通りですが備忘録として残しておく。</p>
<p><a href="http://keijinsonyaban.blogspot.jp/2011/01/git.html">【翻訳】Gitのコミットメッセージに関する注意点</a></p>
<p>引用します。</p>
<div class="CodeRay">
  <div class="code"><pre>Short (50 chars or less) summary of changes

More detailed explanatory text, if necessary.  Wrap it to about 72
characters or so.  In some contexts, the first line is treated as the
subject of an email and the rest of the text as the body.  The blank
line separating the summary from the body is critical (unless you omit
the body entirely); tools like rebase can get confused if you run the
two together.

Write your commit message in the present tense: &quot;Fix bug&quot; and not &quot;Fixed
bug.&quot;  This convention matches up with commit messages generated by
commands like git merge and git revert.

Further paragraphs come after blank lines.

- Bullet points are okay, too

- Typically a hyphen or asterisk is used for the bullet, preceded by a
  single space, with blank lines in between, but conventions vary here

- Use a hanging indent</pre></div>
</div>

<div class="CodeRay">
  <div class="code"><pre>変更に対する短い（50文字以下の）要約

もし必要なら、より詳しい説明を述べる。約72文字ほどで折り返すようにせよ。
ある文脈では、最初の行はE-Mailの件名になり、残りのテキストが本文になる。
空行で本文と要約を分離するのは絶対に必要だ（本文を省略していない限り）。
もしも二つを繋げてしまうと、rebaseのようなツールが混乱する可能性がある。

現在時制でコミットメッセージを書くこと。&quot;Fixed bug&quot;ではなく&quot;Fix bug&quot;だ。
この慣習は git merge や git revert のようなコマンドが生成したコミット
メッセージと調和する。

さらなる段落があれば空行の後に続けられる。

- 箇条書きも問題ない

- 箇条書きにはハイフンかアスタリスクが使われ、一つスペースを空けてから
  書き始め、合間には空行が入るのが通常だが、この部分の慣習は多種多様だ

- ぶら下げインデント(一行目だけ飛び出して後はインデントする)を使うこと</pre></div>
</div>

<p>ポイントをまとめるとこう。</p>
<ul>
<li><strong>１行目はコミットの要約を記述。 </strong>
<ul>
<li><strong>要約は50文字くらいに収めること。</strong></li>
</ul>
</li>
<li><strong>メッセージの詳細は三行目以降に記述。2行目は空行にすること。</strong></li>
<li><strong>時制は現在時制。過去形は使わない。</strong></li>
<li><strong>詳細は箇条書きでも文章でもOK。</strong></li>
<li><strong>72文字で折り返すように記述。</strong></li>
</ul>
<p>みんな（自分も含む）が読みやすいコミットメッセージを！！！</p>]]></content><author><name>Toshimaru</name></author><category term="git" /><summary type="html"><![CDATA[書き方というよりも、お作法というべきでしょうか。だいたい下記のURLの通りですが備忘録として残しておく。 【翻訳】Gitのコミットメッセージに関する注意点 引用します。 Short (50 chars or less) summary of changes]]></summary></entry><entry><title type="html">初pull request がマージされました！</title><link href="https://blog.toshimaru.net/pull-request/" rel="alternate" type="text/html" title="初pull request がマージされました！" /><published>2012-09-16T00:00:00+09:00</published><updated>2012-09-16T00:00:00+09:00</updated><id>https://blog.toshimaru.net/pull-request</id><content type="html" xml:base="https://blog.toshimaru.net/pull-request/"><![CDATA[<p>githubを初めて一年ちょい（本格的に始めたのは３ヶ月前）、初めてのpull requestがマージされましたー。内容はしょっぼいバグ修正ですが嬉しいもんです。</p>

<p>ただmasterからpull requestを送ってしまいました...orz</p>
<blockquote>
<p>絶対にmasterブランチで作業してはいけません。また、masterブランチからpull requestを送るのもいけません。必ずpull requestのための別ブランチから送るようにしましょう。</p>
<p><a href="http://d.hatena.ne.jp/hnw/20110528">GitHubへpull requestする際のベストプラクティス</a></p>
</blockquote>
<p>いちおうpull requestのお作法もあるみたいですね。次回は別ブランチから送るようにします。</p>]]></content><author><name>Toshimaru</name></author><category term="git" /><category term="github" /><summary type="html"><![CDATA[githubを初めて一年ちょい（本格的に始めたのは３ヶ月前）、初めてのpull requestがマージされましたー。内容はしょっぼいバグ修正ですが嬉しいもんです。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/2012/09/pullreq.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/2012/09/pullreq.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">gitで自分の今日のコミットログを見る</title><link href="https://blog.toshimaru.net/git/" rel="alternate" type="text/html" title="gitで自分の今日のコミットログを見る" /><published>2012-09-11T00:00:00+09:00</published><updated>2012-09-11T00:00:00+09:00</updated><id>https://blog.toshimaru.net/git</id><content type="html" xml:base="https://blog.toshimaru.net/git/"><![CDATA[<p>一発コマンドネタ。 一日の振り返りに。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git log --after=2012-xx-xx --author="your_name"
</code></pre></div></div>

<p>afterの日付は今日の日付（今週にしたければ月曜日の日付を）、authorには自分の名前を指定（人の見たければその人の名前を）。</p>

<h2 id="追記20131115">追記（2013/11/15）</h2>

<p><a href="https://coderwall.com/p/7jbwww">git today</a>というエイリアスが素敵だと思ったのでこちらを今後採用したいと思います。<code class="language-plaintext highlighter-rouge">git today</code>のエイリアスは下記のように登録してください。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git config --global alias.today "log --since=midnight --author='$(git config user.name)' --oneline"
</code></pre></div></div>

<h3 id="参考">参考</h3>
<ul>
<li><a href="http://webtech-walker.com/archive/2010/03/04034601.html">git log</a></li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="git" /><summary type="html"><![CDATA[一発コマンドネタ。 一日の振り返りにgitで自分の今日のコミットログを見てみましょう。]]></summary></entry><entry><title type="html">githubにgit pushした変更の取り消し</title><link href="https://blog.toshimaru.net/git-pushgithub/" rel="alternate" type="text/html" title="githubにgit pushした変更の取り消し" /><published>2012-09-10T00:00:00+09:00</published><updated>2012-09-10T00:00:00+09:00</updated><id>https://blog.toshimaru.net/git-pushgithub</id><content type="html" xml:base="https://blog.toshimaru.net/git-pushgithub/"><![CDATA[<p>「間違ったコミットをリモートにpushしちゃった！取り消したい！」ってときの操作。上イメージのようにgithubに誤ったpushをした場合を想定して解説してみます。</p>
<p>下記コマンド打つ。</p>
<div>
  <div class="code"><pre>$ git rebase -i HEAD~2</pre></div>
</div>

<p><code>HEAD~2</code>は「直前の２つのコミットを修正対象とする」という意味になります。３つ前のコミットを取り消したい場合は<code>HEAD~3</code>としてください。するとこんな画面が出てくる。</p>
<p><img src="/images/2012/09/gitterminal.png"></p>
<p>取り消したいコミットを削除して保存します。この場合、２行目のコミットが誤りなので２行目を削除して保存します。うまくいくとこんなメッセージ。</p>
<div>
  <div class="code"><pre>Successfully rebased and updated refs/heads/master.</pre></div>
</div>

<p>これで準備はOK。でも、その状態で普通にプッシュするとこんなエラーで受け付けてくれない。</p>
<div>
  <div class="code"><pre>$ git push
 ! [rejected]        master -&gt; master (non-fast-forward)
error: failed to push some refs to 'xxxx&quot;</pre></div>
</div>

<p>これは一度リモートにpushした変更を書き換えようとしているためにrejectされています。今回の場合、この変更は意図したものなので<code>-f</code>オプションを付けて強制的にpushします。</p>
<div>
  <div class="code"><pre>$ g push -f
+ 4f82199...2778ead master -&gt; master (forced update)</pre></div>
</div>

<p>以上になります。</p>

<h3>ローカルの変更を残したい場合...</h3>
<p>上手順を行うと、リモートの変更も失われますしローカル上の変更も失われます。ローカル上のコミットを残して、githubのpushを取り消したいときは下記のコマンド。</p>

<div>
  <div class="code"><pre>$ git push -f origin HEAD^:master
 + 91700fc...2778ead HEAD^ -&gt; master (forced update)</pre></div>
</div>

<p>上記の場合、<code>HEAD^</code>（最新の状態から１つ前の状態）へと強制pushしているので、最新コミットの１つがgithubから失われます。</p>

<h3>参考</h3>
<ul>
<li><a href="http://d.hatena.ne.jp/n7shi/20100204/1265382280">githubにpushしたcommitの取り消し</a></li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="git" /><category term="github" /><summary type="html"><![CDATA[「間違ったコミットをリモートにpushしちゃった！取り消したい！」ってときの操作。上イメージのようにgithubに誤ったpushをした場合を想定して解説してみます。 下記コマンド打つ。 $ git rebase -i HEAD~2]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/2012/09/gitlog.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/2012/09/gitlog.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>