<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://blog.toshimaru.net/feed/by_tag/oss.xml" rel="self" type="application/atom+xml" /><link href="https://blog.toshimaru.net/" rel="alternate" type="text/html" /><updated>2023-04-30T22:46:04+09:00</updated><id>https://blog.toshimaru.net/feed/by_tag/oss.xml</id><title type="html">Hack Your Design!</title><subtitle>toshimaruの技術系なブログ</subtitle><author><name>Toshimaru</name></author><entry><title type="html">Gemfile.lock 内の特定バージョンgemをインストールする bgem コマンド作った</title><link href="https://blog.toshimaru.net/rubygems-bundled-gems/" rel="alternate" type="text/html" title="Gemfile.lock 内の特定バージョンgemをインストールする bgem コマンド作った" /><published>2021-02-28T00:00:00+09:00</published><updated>2021-02-28T00:00:00+09:00</updated><id>https://blog.toshimaru.net/rubygems-bundled-gems</id><content type="html" xml:base="https://blog.toshimaru.net/rubygems-bundled-gems/"><![CDATA[<p><code class="language-plaintext highlighter-rouge">Gemfile.lock</code>に記述された特定バージョンのgemを簡単にインストールできる bgem コマンドを作った。</p>

<p>（gem名としては <a href="https://github.com/rubygems/rubygems">rubygems/rubygems</a> にインスパイアされて <code class="language-plaintext highlighter-rouge">bundled_gems</code> とした）</p>

<p><a href="https://github.com/toshimaru/bundled_gems">toshimaru/bundled_gems: Install gem specified in Gemfile.lock without bundle install.</a></p>

<h2 id="モチベーション">モチベーション</h2>

<p>もともとは、GitHub Actionに <a href="https://docs.github.com/en/actions/guides/caching-dependencies-to-speed-up-workflows">cache機能</a>が来る前に作ったもの。</p>

<p>GitHub Action でCIしていた場合、cache機能がないと毎回 <code class="language-plaintext highlighter-rouge">bundle install</code>走らせる必要があり、巨大プロジェクトだとそこがCIにおけるコストになっていた。</p>

<p>また CI で rubocop だけを走らせている、みたいな場合、全てのライブラリのインストールは必要なく、rubocopと一部のライブラリさえあれば十分で、それ以外のライブラリのインストールはいわば無駄なインストールとなっている。</p>

<p>「だったら必要なライブラリだけインストールしてCI走らせりゃいいじゃん」というのが今回のgemの着想。</p>

<h2 id="使い方">使い方</h2>

<h3 id="インストール">インストール</h3>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>gem <span class="nb">install </span>bundled_gems
</code></pre></div></div>

<p>これで <code class="language-plaintext highlighter-rouge">bgem</code> コマンドが利用可能になる。</p>

<h3 id="gemfilelock-内のgemのインストール">Gemfile.lock 内のgemのインストール</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ bgem install gem_name
</code></pre></div></div>

<p>こうすることで <code class="language-plaintext highlighter-rouge">Gemfile.lock</code>内に記載されている <code class="language-plaintext highlighter-rouge">gem_name</code> のバージョンを読み取ってそれをインストールしてくれる（内部的には <code class="language-plaintext highlighter-rouge">gem install gem_name:version</code> を走らせている）。</p>

<p>例としては、<code class="language-plaintext highlighter-rouge">bgem install rubocop</code>とした場合、<code class="language-plaintext highlighter-rouge">Gemfile.lock</code>に記載されているバージョンの <code class="language-plaintext highlighter-rouge">rubocop</code> をインストールする。</p>

<h2 id="課題">課題</h2>

<ul>
  <li>installするgemの子となる依存gemのバージョンまでは解決してくれない点
    <ul>
      <li>このへん実装しようと思っていたら、先にGitHub公式の <a href="https://github.com/actions/cache">actions/cache</a>が来てしまった次第。。。</li>
    </ul>
  </li>
</ul>

<h2 id="special-thanks">Special Thanks</h2>

<p><code class="language-plaintext highlighter-rouge">Gemfile.lock</code> のパースに関しては、<a href="https://github.com/ledsun">@ledsun</a> さんにサンプルをいただきました<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>。ありがとうございました。</p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><a href="https://github.com/ledsun/orgen">ledsun/orgen</a> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Toshimaru</name></author><category term="ruby" /><category term="gem" /><category term="oss" /><summary type="html"><![CDATA[Gemfile.lockに記述された特定バージョンのgemを簡単にインストールできる bgem コマンドを作った。 toshimaru/bundled_gems: Install gem specified in Gemfile.lock without bundle install.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/bgem.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/bgem.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Syntax HighlightされるcatコマンドをGoで作った</title><link href="https://blog.toshimaru.net/go-nyan-cat/" rel="alternate" type="text/html" title="Syntax HighlightされるcatコマンドをGoで作った" /><published>2019-08-15T00:00:00+09:00</published><updated>2019-08-15T00:00:00+09:00</updated><id>https://blog.toshimaru.net/go-nyan-cat</id><content type="html" xml:base="https://blog.toshimaru.net/go-nyan-cat/"><![CDATA[<p>Goの習作としてSyntax Highlight可能な<code class="language-plaintext highlighter-rouge">cat</code>コマンドを作った。</p>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">夏休みの工作で作ったやつ。Go 製の Syntax Highlight な cat コマンド. | toshimaru/nyan: Colored `cat` command. <a href="https://t.co/lu1CL4YdDi">https://t.co/lu1CL4YdDi</a></p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/1161656766100230144?ref_src=twsrc%5Etfw">August 14, 2019</a></blockquote>

<h2 id="モチベーション">モチベーション</h2>

<p>全く同じコンセプトのツールとして<a href="https://github.com/jingweno/ccat">ccat</a>があるのだが、デフォルトのハイライト色が黒背景のターミナルだと見づらいという問題があった。</p>

<p>更に強力な<code class="language-plaintext highlighter-rouge">cat</code>コマンドとしてRust製の<a href="https://github.com/sharkdp/bat">bat</a>があるのだが、これを<code class="language-plaintext highlighter-rouge">ccat</code>とともに併用していて配色がとても美しい感じに仕上がっていたので「よし、じゃあGoで配色がいい感じのやつ作ってみるか」と思い立って作成開始したやつ。</p>

<p>ちなみに<code class="language-plaintext highlighter-rouge">ccat</code>との実装の違いでいうと、<code class="language-plaintext highlighter-rouge">ccat</code>はsynatax highlightに<a href="https://github.com/sourcegraph/syntaxhighlight">sourcegraph/syntaxhighlight</a>を使っていて、今回作った<code class="language-plaintext highlighter-rouge">nyan</code>は<a href="https://github.com/alecthomas/chroma">alecthomas/chroma</a>を使っている。</p>

<h2 id="使ったgoライブラリサービスなど">使ったGoライブラリ・サービスなど</h2>

<h3 id="goライブラリ">Goライブラリ</h3>

<ul>
  <li>パッケージ管理: <a href="https://blog.golang.org/using-go-modules">go modules</a></li>
  <li>CLIライブラリ: <a href="https://github.com/spf13/cobra">cobra</a></li>
  <li>Syntax Highlightライブラリ: <a href="https://github.com/alecthomas/chroma">chroma</a></li>
  <li>リリース管理: <a href="https://github.com/goreleaser/goreleaser">goreleaser</a>
    <ul>
      <li>homebrew tapへのリリースも自動でやってくれている: <a href="https://github.com/toshimaru/homebrew-nyan">homebrew-nyan</a></li>
    </ul>
  </li>
  <li>テストライブラリ: <a href="https://github.com/stretchr/testify">testify</a>/assert</li>
</ul>

<h3 id="サービス">サービス</h3>

<ul>
  <li>CI: <a href="https://travis-ci.com">TravisCI</a></li>
  <li>Code Coverage: <a href="https://codeclimate.com">Code Climate</a></li>
</ul>

<h2 id="今後の展望">今後の展望</h2>

<ul>
  <li>今回CIはTravisで動かしたけど先日リリースされた<a href="https://github.blog/2019-08-08-github-actions-now-supports-ci-cd/">GitHub Actons(v2)</a>が使えるようになったら乗り換えたい</li>
  <li>行番号表示などの機能拡張も今後やっていきたい</li>
</ul>

<h2 id="goでツール書いてみた感想">Goでツール書いてみた感想</h2>

<ul>
  <li>パッケージ管理の機能が言語としてサポートされたのは嬉しい（Go 1.11〜）</li>
  <li>プログラムのコンパイル、実行、テストなどすべてが早いので開発体験がとても良い</li>
  <li>普段はRubyを使うことが多いが、書き味の良さではGoはRubyに負けるかもだけど、Goは堅牢で高速なアプリケーションを書くのに良い</li>
  <li>Goコミュニティは日本でもとても活発だし、ライブラリのエコシステムも整っているのが素晴らしい</li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="go" /><category term="oss" /><summary type="html"><![CDATA[Goの習作としてSyntax Highlight可能な`cat`コマンドを作った。モチベーション 全く同じコンセプトのツールとしてccatがあるのだが、デフォルトのハイライト色が黒背景のターミナルだと見づらいという問題があった。 更に強力なcatコマンドとしてRust製のbatがあるのだが、これをccatとともに併用していて配色がとても美しい感じに仕上がっていたので「よし、じゃあGoで配色がいい感じのやつ作ってみるか」と思い立って作成開始したやつ。 ちなみにccatとの実装の違いでいうと、ccatはsynatax highlightにsourcegraph/syntaxhighlightを使っていて、今回作ったnyanはalecthomas/chromaを使っている。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://user-images.githubusercontent.com/803398/63024853-00b18b80-bee3-11e9-853a-eea7e790a575.png" /><media:content medium="image" url="https://user-images.githubusercontent.com/803398/63024853-00b18b80-bee3-11e9-853a-eea7e790a575.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">はじめてのCircleCI Orbsを公開した</title><link href="https://blog.toshimaru.net/my-first-circleci-orbs/" rel="alternate" type="text/html" title="はじめてのCircleCI Orbsを公開した" /><published>2018-12-02T00:00:00+09:00</published><updated>2018-12-02T00:00:00+09:00</updated><id>https://blog.toshimaru.net/my-first-circleci-orbs</id><content type="html" xml:base="https://blog.toshimaru.net/my-first-circleci-orbs/"><![CDATA[<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">I published my first CircleCI Orb! » CircleCI Orb Registry - toshimaru/bundle-install <a href="https://t.co/Ikd11JmEFd">https://t.co/Ikd11JmEFd</a></p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/1068431295804465152?ref_src=twsrc%5Etfw">November 30, 2018</a></blockquote>

<p>はじめてのCircleCI Orbsを公開した。そのメモ。</p>

<h2 id="circleci-orbsとは">CircleCI Orbsとは</h2>

<p>2018年11月に正式公開されたCircleCI Orbs。</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">本日Orbsをリリースしました🥳OrbsはWorkflow以来のメジャーアップデートです。OrbsはCircleCIの設定をパッケージ化する仕組みで、誰でも自分のOrbsを公開できます。これはCI/CDサービスとしては初の試みで、今後はユーザーやパートナーを巻き込んでCircleCIのエコシステムを構築することができます。</p>&mdash; CircleCI Japan (@CircleCIJapan) <a href="https://twitter.com/CircleCIJapan/status/1060285769124696064?ref_src=twsrc%5Etfw">November 7, 2018</a></blockquote>

<p>要はいろんなレポジトリで使っている共通のCircleCIの設定を共通化できる仕組みのこと。</p>

<h2 id="作ってみた">作ってみた</h2>

<p>僕もいろんなRuby on Railsプロジェクトでよく使うコマンド、<code class="language-plaintext highlighter-rouge">bundle install</code>をCircleCI Orbsを使って共通化してみることにしてみました。</p>

<ul>
  <li>結果できたのがこちら: <a href="https://circleci.com/orbs/registry/orb/toshimaru/bundle-install">CircleCI Orb Registry - toshimaru/bundle-install</a></li>
  <li>GitHubソースコードはこちら: <a href="https://github.com/toshimaru/bundle-install">toshimaru/bundle-install</a></li>
</ul>

<h2 id="作り方">作り方</h2>

<h3 id="install-circleci-command">Install circleci command</h3>

<p>まずはcircleciコマンドを入手。MacOSの場合下記のようにbrewで入れることができます。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew install circleci
</code></pre></div></div>

<h3 id="namespace-作成">namespace 作成</h3>

<p>namespaceを取得します。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ circleci namespace create toshimaru github toshimaru
</code></pre></div></div>

<h3 id="orb-作成">Orb 作成</h3>

<p>namespace以下のorb名を作成します。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ circleci orb create toshimaru/bundle-install
Orb toshimaru/bundle-install created.
Please note that any versions you publish of this orb are world-readable.

You can now register versions of toshimaru/bundle-install using circleci orb publish.
</code></pre></div></div>

<h3 id="publish-circleci-orb">Publish CircleCI Orb</h3>

<p>作成した<code class="language-plaintext highlighter-rouge">orb.yml</code>を公開します。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ circleci orb publish src/orb.yml toshimaru/bundle-install@0.0.1
Orb toshimaru/bundle-install@0.0.1 was published.
Please note that this is an open orb and is world-readable.
</code></pre></div></div>

<h2 id="作成したorbを使う">作成したOrbを使う</h2>

<p>次に作成したOrbを使う側、呼び出す側の設定です。</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">orbs</span><span class="pi">:</span>
  <span class="na">bundle-install</span><span class="pi">:</span> <span class="s">toshimaru/bundle-install@0.1.0</span>
<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">build</span><span class="pi">:</span>
    <span class="na">docker</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">image</span><span class="pi">:</span> <span class="s">circleci/ruby</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">checkout</span>
      <span class="pi">-</span> <span class="s">bundle-install/bundle-install</span>
      <span class="c1"># - bundle exec rspec</span>
</code></pre></div></div>

<p>実際に下記のPRでOrbの変更例が見れますのでご参照ください。</p>

<p><a href="https://github.com/toshimaru/RailsTwitterClone/pull/264/files">Introduce CircleCI Orbs by toshimaru · Pull Request #264</a></p>

<h2 id="参考にした記事">参考にした記事</h2>

<ul>
  <li>全体的にこちらの手順を参考にさせていただきました。 <a href="https://blog.tsub.me/post/introducing-to-circleci-orbs/">CircleCI Orbs 入門 | tsub’s blog</a></li>
  <li>ファイルの構成などこちらを参考にさせていただきました。https://github.com/sue445/circleci-ruby-orbs</li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="circleci" /><category term="oss" /><summary type="html"><![CDATA[はじめてのCircleCI Orbsを公開した。そのメモ。2018年11月に正式公開されたCircleCI Orbs。本日Orbsをリリースしました。OrbsはWorkflow以来のメジャーアップデートです。OrbsはCircleCIの設定をパッケージ化する仕組みで、誰でも自分のOrbsを公開できます。これはCI/CDサービスとしては初の試みで、今後はユーザーやパートナーを巻き込んでCircleCIのエコシステムを構築することができます。要はいろんなレポジトリで使っている共通のCircleCIの設定を共通化できる仕組みのこと。僕もいろんなRuby on Railsプロジェクトでよく使うコマンド、bundle installをCircleCI Orbsを使って共通化してみることにしてみました。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/circleci-orb.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/circleci-orb.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">はじめてのVS Code Extension、Hybrid Next Plusテーマを公開しました</title><link href="https://blog.toshimaru.net/vscoce-hybrid-next-plus/" rel="alternate" type="text/html" title="はじめてのVS Code Extension、Hybrid Next Plusテーマを公開しました" /><published>2018-07-31T00:00:00+09:00</published><updated>2018-07-31T00:00:00+09:00</updated><id>https://blog.toshimaru.net/vscoce-hybrid-next-plus</id><content type="html" xml:base="https://blog.toshimaru.net/vscoce-hybrid-next-plus/"><![CDATA[<p>はじめてのVS code Extensionとしてybrid Next Plusというテーマを公開してみた。</p>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">初めてのVSCode ExtensionとしてThemeを作ってみた（Beta Version）| Hybrid Next Plus - Visual Studio Marketplace <a href="https://t.co/d8xWeLHQ51">https://t.co/d8xWeLHQ51</a></p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/1021918426426531840?ref_src=twsrc%5Etfw">July 25, 2018</a></blockquote>

<h2 id="きっかけ">きっかけ</h2>

<ul>
  <li>もともとVSCodeのデフォルトのテーマがいまいち好きになれなかった</li>
  <li>Vimで<a href="https://github.com/w0ng/vim-hybrid">hybrid</a>、Atomで<a href="https://github.com/kaicataldo/hybrid-next-syntax">hybrid next</a>というテーマを気に入っていたのでそのテーマをVSCodeでも使おうと思った</li>
  <li>公開されている<a href="https://github.com/wyze/vscode-hybrid-next/">vscode-hybrid-next</a>を使おうと思ったが、少々気に食わない設定があった</li>
  <li>同レポジトリにPRしようかと思ったがテーマのあて方が<a href="https://www.sublimetext.com/docs/3/color_schemes_tmtheme.html">tmTheme</a>形式だったため小回りが効かない感じになってた</li>
  <li>自分でテーマを作った <a href="https://github.com/toshimaru/hybrid-next-plus">hybrid-next-plus</a></li>
</ul>

<h2 id="参考テーマ">参考テーマ</h2>

<p>背景やサイドバーの設定は、<a href="https://atom.io/themes/one-dark-ui">Atom One Dark</a>を参考にした。</p>

<p><img src="https://i.github-camo.com/af4a063b48fb691fb25e664ca8e0680a31f6f1e4/68747470733a2f2f636c6f75642e67697468756275736572636f6e74656e742e636f6d2f6173736574732f3337383032332f32363234363831382f30383235356237362d336364362d313165372d396636642d3661653365313661383961392e706e67" alt="atom one dark" /></p>

<p>:point_up: <strong>【図】Atom One Dark(公式READMEより引用)</strong></p>

<p>シンタックスハイライトのカラーは、<a href="https://github.com/w0ng/vim-hybrid">hybrid</a>、<a href="https://github.com/kaicataldo/hybrid-next-syntax">hybrid next</a>, <a href="https://github.com/wyze/vscode-hybrid-next/">vscode-hybrid-next</a>を参考にしつつ一番しっくりくる色のあて方を選択した。</p>

<p><img src="https://raw.githubusercontent.com/kaicataldo/hybrid-next-syntax/master/screenshots/hybrid-next-screenshot-1.png" alt="hybrid next" /></p>

<p>:point_up: <strong>【図】Atom Hybrid Next(公式READMEより引用)</strong></p>

<h2 id="最後に">最後に</h2>

<p>一応Markdown, Ruby, JSONファイルあたりはいい感じにSyntaxハイライトあたっていることを確認していますが、他の拡張子で不完全なところがあるかもなので何かありましたらPR/Issue報告お願いします 🙏</p>

<p>手前味噌にはなるけどなかなかいいテーマに仕上がっていると思いますのでよかったら使ってみてください。</p>

<h2 id="追記">追記</h2>

<p><a href="/how-to-publish-vscode-extension/">VS Code Extensionの公開手順</a>を書きました。</p>]]></content><author><name>Toshimaru</name></author><category term="vscode" /><category term="oss" /><summary type="html"><![CDATA[はじめてのVS code Extensionとしてybrid Next Plusというテーマを公開してみた。 きっかけ もともとVSCodeのデフォルトのテーマがいまいち好きになれなかった Vimでhybrid、Atomでhybrid nextというテーマを気に入っていたのでそのテーマをVSCodeでも使おうと思った 公開されているvscode-hybrid-nextを使おうと思ったが、少々気に食わない設定があった 同レポジトリにPRしようかと思ったがテーマのあて方がtmTheme形式だったため小回りが効かない感じになってた 自分でテーマを作った hybrid-next-plus]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/vscode/hybrid.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/vscode/hybrid.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">RuboCopチームにgemの名前を譲った話</title><link href="https://blog.toshimaru.net/rubocop-rails-config/" rel="alternate" type="text/html" title="RuboCopチームにgemの名前を譲った話" /><published>2018-07-17T00:00:00+09:00</published><updated>2018-07-17T00:00:00+09:00</updated><id>https://blog.toshimaru.net/rubocop-rails-config</id><content type="html" xml:base="https://blog.toshimaru.net/rubocop-rails-config/"><![CDATA[<p>かねてより僕が開発していた<a href="https://github.com/toshimaru/rubocop-rails">rubocop-rails</a>というgemをRuboCop公式チームの要望により譲った。</p>

<p>僕がこのgemを作った経緯とかは下記の記事の通り。</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">つくったやつ | Railsと同じRuboCopの設定が利用できるrubocop-rails gemを作った - Hack Your Design! <a href="https://t.co/szG0eLPetS">https://t.co/szG0eLPetS</a></p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/958123075572195331?ref_src=twsrc%5Etfw">January 29, 2018</a></blockquote>

<h2 id="きっかけ">きっかけ</h2>

<p>名前を譲ることになったきっかけは下記のIssue。</p>

<p><a href="https://github.com/rubocop-hq/rubocop/issues/5976">Extract Rails Cops in a separate · Issue #5976 · rubocop-hq/rubocop</a></p>

<p>より正確にいうとこのIssueの前に<a href="https://rubykaigi.org/2018/">RubyKaigi 2018</a>の懇親会でRuboCop作者から僕へ間接的に打診があり、上記のIssueに至る。</p>

<p>RuboCopチームの要望を要約すると「RuboCop公式にRailsの拡張を作りたい。gem名はrubocop-railsとしたい。名前を頂戴！」と感じ。僕の想いとしては「RuboCop公式チームとして使いたい名前ということであればどうぞどうぞ。わかりやすい名前を付けることはRubyコミュニティ全体の利益にもなるだろうしね！」という感じ。</p>

<h2 id="譲るにあたりやったこと">譲るにあたりやったこと</h2>

<p>下記のようなIssueを作成して進めていった。</p>

<p><a href="https://github.com/toshimaru/rubocop-rails/issues/31">[IMPORTANT ANNOUNCEMENT] Transfer rubocop-rails gem to RuboCop Team · Issue #31 · toshimaru/rubocop-rails</a></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">rubocop-rails</code> に代わる新しいgemを作成: <a href="https://github.com/toshimaru/rubocop-rails_config">rubocop-rails_config</a></li>
  <li><code class="language-plaintext highlighter-rouge">rubocop-rails</code> の新しいversionを切って、post_install_messageでRenameの旨を周知</li>
  <li><code class="language-plaintext highlighter-rouge">rubocop-rails_config</code> のほうに簡単にUpdateできるようなUpdate Generator Taskを用意</li>
  <li><code class="language-plaintext highlighter-rouge">rubocop-rails</code> というgemに新しいOwnerを付与</li>
  <li><code class="language-plaintext highlighter-rouge">rubocop-rails</code> のRename前の古いバージョンをrubygemsから削除</li>
</ul>

<p>一番最後の <strong>古いバージョンをrubygemsから削除</strong> はIssueでもやり取りしている通り、既存のビルドを壊すことになるので正直苦渋の決断であった。だけれどもRuboCopがdevelopment依存のgemであること、全く違うgemになったら既存のgemユーザーを驚かせてしまうこと、これらを総合的に考えた結果、古いバージョンを消してでもgemのRename周知を優先させようと思い至った。これに関しては正直正解はないと思う。</p>

<h2 id="rubocopコミッターのkoicさんが発表してくださいました">RuboCopコミッターのkoicさんが発表してくださいました</h2>

<p>本件に関してはRuboCopコミッターの<a href="https://twitter.com/koic">@koic</a>さんも先日の<a href="https://techplay.jp/event/679666">Rails Developers Meetup 2018 Day 3 Extreme</a>にて発表して頂いたようです。:innocent:</p>

<script async="" class="speakerdeck-embed" data-slide="57" data-id="612849c52252464d8a63fc97f90c6091" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>

<p>発表エントリ: <a href="http://koic.hatenablog.com/entry/railsdm-2018-day3-extreme">Rails Developers Meetup 2018 Day 3 Extreme に登壇した - koicの日記</a></p>

<p>エピソードのご紹介ありがとうございました。:pray:</p>

<h2 id="参考資料">参考資料</h2>

<p>なお、gemを消す方法に関しては下記を参考にさせてもらった。</p>

<p><a href="http://blog.s21g.com/articles/1755">公開した gem を削除する方法 - ヽ( ・∀・)ノくまくまー - s21g</a></p>]]></content><author><name>Toshimaru</name></author><category term="rails" /><category term="rubocop" /><category term="oss" /><summary type="html"><![CDATA[かねてより僕が開発していたubocop-railsというgemをRuboCop公式チームの要望により譲った。 僕がこのgemを作った経緯とかは下記の記事の通り。名前を譲ることになったきっかけは下記のIssue。 Extract Rails Cops in a separate より正確にいうとこのIssueの前にRubyKaigi 2018の懇親会でRuboCop作者から僕へ間接的に打診があり、上記のIssueに至る。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/rubocop-rail.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/rubocop-rail.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Railsと同じRuboCopの設定が利用できるrubocop-rails gemを作った</title><link href="https://blog.toshimaru.net/rubocop-rails/" rel="alternate" type="text/html" title="Railsと同じRuboCopの設定が利用できるrubocop-rails gemを作った" /><published>2018-01-30T00:00:00+09:00</published><updated>2020-11-23T00:00:00+09:00</updated><id>https://blog.toshimaru.net/rubocop-rails</id><content type="html" xml:base="https://blog.toshimaru.net/rubocop-rails/"><![CDATA[<p>【追記】本記事で紹介しているgem, <code class="language-plaintext highlighter-rouge">rubocop-rails</code>は公式RuboCopチームの要望により、<a href="https://github.com/toshimaru/rubocop-rails_config">rubocop-rails_config</a>というgemにRenameされました。</p>

<p>本gemご利用の方は下記の<code class="language-plaintext highlighter-rouge">rubocop-rails_config</code>のご利用をお願いします。</p>

<p><a href="https://github.com/toshimaru/rubocop-rails_config">toshimaru/rubocop-rails_config</a></p>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">Blogged. RuboCopチームにgemの名前を譲った話 - Hack Your Design! <a href="https://t.co/vumSGBK3UN">https://t.co/vumSGBK3UN</a></p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/1019011276561833985?ref_src=twsrc%5Etfw">July 17, 2018</a></blockquote>

<hr />

<p>Railsとほとんど同じRuboCopの設定が利用できる<a href="https://github.com/toshimaru/rubocop-rails">rubocop-rails</a>というgemを作りましたので紹介します。</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">Railsのrubocopと同じ設定を簡単に適用できるgemを作ったよ<br />toshimaru/rubocop-rails: Code style checking for Ruby on Rails project <a href="https://t.co/DnTRKtJc9j">https://t.co/DnTRKtJc9j</a></p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/819931180304715776?ref_src=twsrc%5Etfw">January 13, 2017</a></blockquote>

<h2 id="モチベーション">モチベーション</h2>

<p>Rubyの静的コード解析の定番といえば<a href="https://github.com/bbatsov/rubocop">RuboCop</a>ですよね。ですがRuboCopの設定ファイル<code class="language-plaintext highlighter-rouge">rubocop.yml</code>の設定作業って結構大変じゃないですか？</p>

<p>RuboCopはデフォルトだと結構うるさすぎることが多いのでプロジェクト・チームに応じて何かしら設定はカスタマイズすると思います。しかし１つ１つ設定項目毎にチームのコンセンサスを取るのは非常にダルい。チームの一人が持ち込んだ＜俺の考える最強のRuboCop設定＞に従うという手もありますが「誰がお前の作った設定に従うか！」という気持ちも無くはない。</p>

<p>「何かしらRuboCop設定のレールが欲しいよね〜 :railway_car:」というところで閃き:bulb:、「だったらrailsチームの用意した公式<code class="language-plaintext highlighter-rouge">rubocop.yml</code>を使えばいいじゃない」ということで冒頭のRailsとほぼ同じ設定を持った<a href="https://github.com/toshimaru/rubocop-rails">rubocop-rails</a> gemを作りました。</p>

<h2 id="使い方">使い方</h2>

<p>使い方は <code class="language-plaintext highlighter-rouge">rubocop-rails</code> をinstallした後に、下記の設定を記述した <code class="language-plaintext highlighter-rouge">rubocop.yml</code> を用意する。</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">inherit_gem</span><span class="pi">:</span>
  <span class="na">rubocop-rails</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">config/rails.yml</span>
</code></pre></div></div>

<p>オーバーライドしたい設定、追加したい設定があれば、適宜同じ<code class="language-plaintext highlighter-rouge">rubocop.yml</code>内に設定を追加していく。</p>

<h2 id="実際使ってみてどうか">実際使ってみてどうか</h2>

<p>実際使ってみるとうるさすぎず、しかしコードスタイルとしてきっちり統一させたいところは統一されており、使い心地はなかなか悪くないです。</p>

<p>また副次効果として、普段からこのgemの設定に慣れておくと、Rails本体にコントリビュートするときにRailsのrubocop設定違反にならないコードを書けて便利。 :innocent:</p>

<h2 id="こんなrubocop設定もあるよ">こんなRuboCop設定もあるよ</h2>

<p>他の＜いい感じ＞に設定されたRuboCop設定も紹介します。</p>

<ul>
  <li>GitHubの場合: <a href="https://github.com/github/rubocop-github">github/rubocop-github</a></li>
  <li>Siderの場合: <a href="https://github.com/sider/meowcop">sider/meowcop</a></li>
</ul>

<p>これらの設定はきちんとチーム・会社でディスカッションされた上で作られたものだと思いますので、こちらもあわせて導入を検討してみてもいいかもしれません。</p>]]></content><author><name>Toshimaru</name></author><category term="rails" /><category term="rubocop" /><category term="oss" /><category term="gem" /><summary type="html"><![CDATA[Railsとほとんど同じRuboCopの設定が利用できるrubocop-railsというgemを作りましたので紹介します。 【追記】本記事で紹介しているgem, rubocop-railsは公式RuboCopチームの要望により、rubocop-rails_configというgemにRenameされました。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/rubocop-rail.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/rubocop-rail.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Railsでデバイス判定するrack-simple_user_agentというgemを作った</title><link href="https://blog.toshimaru.net/gem-rack-simple-user-agent/" rel="alternate" type="text/html" title="Railsでデバイス判定するrack-simple_user_agentというgemを作った" /><published>2016-10-02T00:00:00+09:00</published><updated>2016-10-02T00:00:00+09:00</updated><id>https://blog.toshimaru.net/gem-rack-simple-user-agent</id><content type="html" xml:base="https://blog.toshimaru.net/gem-rack-simple-user-agent/"><![CDATA[<p><a href="https://github.com/toshimaru/rack-simple_user_agent">rack-simple_user_agent</a>というgemを作った。</p>

<h2 id="なぜ作ったか">なぜ作ったか</h2>

<p>同じコンセプトのgemとしては、<a href="https://github.com/k0kubun">k0kubun</a>さんの<a href="https://github.com/k0kubun/rack-user_agent">rack-user_agent</a>がある。詳細については下記のブログエントリに詳しい。</p>

<p><a href="http://k0kubun.hatenablog.com/entry/2014/11/21/041949">Railsでデバイスの判定をするのに便利なgemを作った - k0kubun’s blog</a></p>

<p>ではなぜ新たに別のgemを作ったのかというと、rack-user_agentは内部で判定ロジックとして<a href="https://github.com/woothee/woothee">woothee</a>を使っているのだが、wootheeだとやりたいことに対してややヘビーな感じがしたのと、wootheeの判定ロジックでは僕がやりたい判定が完全には出来なかったからだ。</p>

<h3 id="tablet-判定したい">tablet 判定したい</h3>

<p>昨今のWebアプリケーションにおいてViewを分けたいとなったときは大体 smartphone, tablet, pc の３つのビューに分けたいのではないだろうか。もしくはsmartphone, pc の２つのビューに分け、tabletはどちらか１つのビューに属するという形にするのではないか。</p>

<p>wootheeの場合、残念ながらcategoryとしてtabletは用意されていない。実際にwootheeを使ってiPadを判定した場合、カテゴリはsmartphoneと判定されてしまう。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Woothee</span><span class="p">.</span><span class="nf">parse</span> <span class="s2">"Mozilla/5.0 (iPad; CPU OS 9_0_1 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Version/9.0 Mobile/13A404 Safari/601.1"</span>
<span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:name</span><span class="o">=&gt;</span><span class="s2">"Safari"</span><span class="p">,</span> <span class="ss">:category</span><span class="o">=&gt;</span><span class="ss">:smartphone</span><span class="p">,</span> <span class="ss">:os</span><span class="o">=&gt;</span><span class="s2">"iPad"</span><span class="p">,</span> <span class="ss">:os_version</span><span class="o">=&gt;</span><span class="s2">"9.0.1"</span><span class="p">,</span> <span class="ss">:version</span><span class="o">=&gt;</span><span class="s2">"9.0"</span><span class="p">,</span> <span class="ss">:vendor</span><span class="o">=&gt;</span><span class="s2">"Apple"</span><span class="p">}</span>
</code></pre></div></div>

<p>この判定だとsmartphoneとtabletのビューを分けたいといったときにやや不便だ。またtabletビューをpcビューと一緒にする場合にも困ってしまう。</p>

<h3 id="無条件にbot判定されたくない">無条件にbot判定されたくない</h3>

<p>また無条件にcrawlerと判定されてしまうのも困ってしまうケースがある。例えば<a href="https://www.google.com/webmasters/tools/mobile-friendly/">Mobile-Friendly Test</a>でサイトチェックをした場合にsmartphone用の画面が結果として表示されてほしいわけだけど、rack-user_agentを用いた場合、同クローラーが<code class="language-plaintext highlighter-rouge">crawler</code>と判定されてしまい、正しくsmartphoneビューが表示されなくなってしまう。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Woothee</span><span class="p">.</span><span class="nf">parse</span> <span class="s2">"​Mozilla/5.0 (Linux; Android 6.0.1; Nexus 5X Build/MMB29P) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.96 Mobile Safari/537.36 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)"</span>
<span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:name</span><span class="o">=&gt;</span><span class="s2">"Googlebot"</span><span class="p">,</span> <span class="ss">:category</span><span class="o">=&gt;</span><span class="ss">:crawler</span><span class="p">,</span> <span class="ss">:os</span><span class="o">=&gt;</span><span class="s2">"UNKNOWN"</span><span class="p">,</span> <span class="ss">:os_version</span><span class="o">=&gt;</span><span class="s2">"UNKNOWN"</span><span class="p">,</span> <span class="ss">:version</span><span class="o">=&gt;</span><span class="s2">"UNKNOWN"</span><span class="p">,</span> <span class="ss">:vendor</span><span class="o">=&gt;</span><span class="s2">"UNKNOWN"</span><span class="p">}</span>
</code></pre></div></div>

<h2 id="rack-simple_user_agentというソリューション">rack-simple_user_agentというソリューション</h2>

<p>これらを解決することが冒頭のgemを作ったモチベーションになっている。ロジックとしては、単純にrequest UA stingに特定のデバイス特有の文字列が含まれているかどうかをチェック・判定するだけのバカ判定機だ。なのでこのgemは <strong>stupidly simple UA detector</strong> と称することにした。</p>

<h2 id="rack-simple_user_agentで可能な判定">rack-simple_user_agentで可能な判定</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">request.from_smartphone?</code>
    <ul>
      <li>iPhone, Android, Windows Phone の判定</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">request.from_tablet?</code>
    <ul>
      <li>iPad, Android Tablet の判定</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">request.from_smartdevice?</code>
    <ul>
      <li>上記のsmartphone, tabletを含む判定</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">from_googlebot?</code>
    <ul>
      <li>googlebot かどうかの判定</li>
    </ul>
  </li>
</ul>

<p>2016年にもなってさすがにフィーチャーフォンはもうケアしない。だが現代において普通に使われているデバイスであれば対応したいと考えているので、判定漏れているよとかこの判定も追加してよみたいなのがあれば、Pull request is welcome.</p>

<h2 id="まとめ">まとめ</h2>

<p><a href="https://github.com/toshimaru/rack-simple_user_agent">rack-simple_user_agent</a>はtabletの判定をロジック内に含ませることができ、便利。あとシンプルな文字列の判定だけなのでデバイスの判定ロジックにおいて大きなパフォーマンス劣化もしない。</p>]]></content><author><name>Toshimaru</name></author><category term="rails" /><category term="oss" /><category term="gem" /><summary type="html"><![CDATA[rack-simple_user_agent というgemを作った。 同じコンセプトのgemとしては、k0kubunさんのrack-user_agentがある。ではなぜ新たに別のgemを作ったのかというと、rack-user_agentは内部で判定ロジックとしてwootheeを使っているのだが、wootheeだとやりたいことに対してややヘビーな感じがしたのと、wootheeの判定ロジックでは僕がやりたい判定が完全には出来なかったからだ。]]></summary></entry><entry><title type="html">docomo雑談対話APIでリプライ返すhubotプラグイン作った</title><link href="https://blog.toshimaru.net/hubot-docomo-chatter/" rel="alternate" type="text/html" title="docomo雑談対話APIでリプライ返すhubotプラグイン作った" /><published>2015-08-30T00:00:00+09:00</published><updated>2015-08-30T00:00:00+09:00</updated><id>https://blog.toshimaru.net/hubot-docomo-chatter</id><content type="html" xml:base="https://blog.toshimaru.net/hubot-docomo-chatter/"><![CDATA[<p>五番煎じくらいになりますが、docomo雑談対話APIを使ってリプライを返すhubotプラグインを作りました。</p>

<p><a href="https://github.com/toshimaru/hubot-docomochatter">toshimaru/hubot-docomochatter</a></p>

<ul>
  <li><a href="https://github.com/toshimaru/docomochatter">toshimaru/docomochatter</a>というシンプルなAPIクライアントをまず作り、それを利用するかたちでプラグインを作った</li>
  <li>既に定義された<code class="language-plaintext highlighter-rouge">hubot ping</code>などのコマンドに対しては返答しないようにし、マッチするコマンドが他にない場合にプラグインが反応するようにした。 このへんのやり方についてはこちらを参照した: <a href="http://qiita.com/hiconyan/items/baf6ac56129a26d8ac0c">Hubotで「どのコマンドにも一致しない」ときの処理 - Qiita</a></li>
  <li>ルーム毎（SlackでいうところのChannel）にcontextを保存するようにした</li>
  <li><code class="language-plaintext highlighter-rouge">DOCOMO_API_KEY</code>という環境変数使ってAPIアクセスする</li>
</ul>

<h3 id="参考">参考</h3>

<ul>
  <li><a href="https://dev.smt.docomo.ne.jp/?p=docs.api.page&amp;api_name=dialogue&amp;p_name=api_reference">雑談対話 | docomo Developer support | NTTドコモ</a></li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="hubot" /><category term="npm" /><category term="oss" /><summary type="html"><![CDATA[五番煎じくらいになりますが、docomo雑談対話APIを使ってリプライを返すhubotプラグインを作りました。]]></summary></entry><entry><title type="html">天下一bot武闘会でクソbotたちを発表してきました</title><link href="https://blog.toshimaru.net/tenkaichi-bot/" rel="alternate" type="text/html" title="天下一bot武闘会でクソbotたちを発表してきました" /><published>2015-04-25T00:00:00+09:00</published><updated>2015-04-25T00:00:00+09:00</updated><id>https://blog.toshimaru.net/tenkaichi-bot</id><content type="html" xml:base="https://blog.toshimaru.net/tenkaichi-bot/"><![CDATA[<p>先日<a href="http://connpass.com/event/12689/">天下一bot武闘会</a>で僕が作った :shit: botたちを発表してきました。</p>

<script async="" class="speakerdeck-embed" data-id="d050418ad57e4a67821c7e1ec7d5a73a" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script>

<h2 id="つくった-shit-bots">つくった :shit: bots</h2>
<ol>
  <li><a href="https://github.com/toshimaru/hubot-shinchoku-dou">hubot-shinchoku-dou</a></li>
  <li><a href="https://github.com/toshimaru/hubot-hibi-no-kokoro">hubot-hibi-no-kokoro</a></li>
  <li><a href="https://github.com/toshimaru/hubot-hanakin">hubot-hanakin</a></li>
  <li><a href="https://github.com/toshimaru/hubot-hikakin">hubot-hikakin</a></li>
</ol>

<p>ほんとにしょーもないクソbotたちですが、発表することにより彼らを:shit:世界から救えた気がして満足しています。:angel:</p>

<p>スライド作成に使ったアプリは<a href="http://www.decksetapp.com/">Deckset</a>ってやつです。現時点でMac専用アプリ、デザインのカスタマイズも非力ですがなんといってもmarkdown書けばそれっぽいスライドが仕上がるのがとても良い。今後も使っていきたいアプリである。</p>

<h2 id="参考">参考</h2>
<ul>
  <li><a href="https://twitter.com/search?f=realtime&amp;q=%23tenkabot&amp;src=typd">#tenkabot - Twitter Search</a></li>
  <li><a href="https://github.com/moqada/hubot-shinchoku">moqada/hubot-shinchoku</a></li>
  <li><a href="http://r7kamura.hatenablog.com/entry/2015/04/18/011129">天下一bot武闘会で発表しました - ✘╹◡╹✘</a></li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="hubot" /><category term="presentation" /><category term="oss" /><summary type="html"><![CDATA[先日天下一bot武闘会で僕が作ったクソbotたちを発表してきました。]]></summary></entry></feed>