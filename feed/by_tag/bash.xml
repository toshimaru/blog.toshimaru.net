<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://blog.toshimaru.net/feed/by_tag/bash.xml" rel="self" type="application/atom+xml" /><link href="https://blog.toshimaru.net/" rel="alternate" type="text/html" /><updated>2022-05-23T01:30:20+09:00</updated><id>https://blog.toshimaru.net/feed/by_tag/bash.xml</id><title type="html">Hack Your Design!</title><subtitle>toshimaruの技術系なブログ</subtitle><author><name>Toshimaru</name></author><entry><title type="html">標準出力、標準エラー出力のリダイレクト方法まとめ</title><link href="https://blog.toshimaru.net/bash-stdout-and-stderr/" rel="alternate" type="text/html" title="標準出力、標準エラー出力のリダイレクト方法まとめ" /><published>2019-11-02T00:00:00+09:00</published><updated>2019-11-02T00:00:00+09:00</updated><id>https://blog.toshimaru.net/bash-stdout-and-stderr</id><content type="html" xml:base="https://blog.toshimaru.net/bash-stdout-and-stderr/"><![CDATA[<p>標準出力、標準エラー出力のリダイレクトの方法を実際のコマンド実行結果とあわせてまとめてみます。</p>

<h2 id="標準入力-標準出力-標準エラー出力とは">標準入力, 標準出力, 標準エラー出力とは？</h2>

<table>
  <thead>
    <tr>
      <th>種類</th>
      <th>説明</th>
      <th>ファイルディスクリプタ</th>
      <th>省略形</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>標準入力</strong></td>
      <td>デフォルトの入力データストリーム。<br />例えばコマンドのパイプラインなど。ターミナル上ではユーザーのキーボード入力のこと。</td>
      <td>0</td>
      <td><code class="language-plaintext highlighter-rouge">stdin</code></td>
    </tr>
    <tr>
      <td><strong>標準出力</strong></td>
      <td>デフォルトの出力データストリーム。<br />ターミナル上ではユーザーの画面に表示される。</td>
      <td>1</td>
      <td><code class="language-plaintext highlighter-rouge">stdout</code></td>
    </tr>
    <tr>
      <td><strong>標準エラー出力</strong></td>
      <td>デフォルトのエラーに関連する出力データストリーム。<br />ターミナル上ではユーザーの画面に表示される。</td>
      <td>2</td>
      <td><code class="language-plaintext highlighter-rouge">stderr</code></td>
    </tr>
  </tbody>
</table>

<p>（出典: <a href="https://www.computerhope.com/jargon/f/file-descriptor.htm">What is a File Descriptor? - Stdin, stdout, and stderr</a> より翻訳）</p>

<p>それぞれのファイルディスクリプタは下記のように <code class="language-plaintext highlighter-rouge">/dev/stderr</code>, <code class="language-plaintext highlighter-rouge">/dev/stdin</code>, <code class="language-plaintext highlighter-rouge">/dev/stdout</code> からも確認することができます</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">ls</span> <span class="nt">-l</span> /dev/std<span class="o">{</span><span class="k">in</span>,out,err<span class="o">}</span>
<span class="gp">lr-xr-xr-x  1 root  wheel  0 Sep 12 08:46 /dev/stderr -&gt;</span><span class="w"> </span>fd/2
<span class="gp">lr-xr-xr-x  1 root  wheel  0 Sep 12 08:46 /dev/stdin -&gt;</span><span class="w"> </span>fd/0
<span class="gp">lr-xr-xr-x  1 root  wheel  0 Sep 12 08:46 /dev/stdout -&gt;</span><span class="w"> </span>fd/1
</code></pre></div></div>

<h2 id="標準出力-標準エラー出力するシェルスクリプト">標準出力, 標準エラー出力するシェルスクリプト</h2>

<p>今回使用するベースとなるシェルスクリプトは下記になります。</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">cat </span>stdout-stderr.sh
<span class="gp">#</span><span class="o">!</span>/bin/sh
<span class="go">echo "stdout"
</span><span class="gp">echo "stderr" &gt;</span>&amp;2
</code></pre></div></div>

<ul>
  <li>stdout という文字列を標準出力</li>
  <li>stderr という文字列を標準エラー出力</li>
</ul>

<p>このようなコードとなっております。</p>

<h3 id="rubyバージョン">Rubyバージョン</h3>

<p>ちなみに今回のシェルスクリプトをRubyで表現すると下記のようになります。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env ruby</span>
<span class="nb">puts</span> <span class="s2">"stdout"</span>
<span class="nb">warn</span> <span class="s2">"stderr"</span>
</code></pre></div></div>

<h2 id="リダイレクト無し実行時">リダイレクト無し実行時</h2>

<p>まずは何もリダイレクトの設定をしないで実行してみます。</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>./stdout-stderr.sh
<span class="go">stdout
stderr
</span></code></pre></div></div>

<ul>
  <li>標準出力、エラー出力ともに画面に表示される</li>
</ul>

<h2 id="標準出力リダイレクト有り実行時">標準出力リダイレクト有り実行時</h2>

<p>次はリダイレクトを設定して実行してみましょう。</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>./stdout-stderr.sh <span class="o">&gt;</span> stdout.txt
<span class="go">stderr

</span><span class="gp">$</span><span class="w"> </span><span class="nb">cat </span>stdout.txt
<span class="go">stdout
</span></code></pre></div></div>

<ul>
  <li>リダイレクト無し実行時と比較して、画面に表示される結果から stdout が出力されなくなった</li>
  <li>画面に表示されなくなった代わりに、リダイレクト先の <code class="language-plaintext highlighter-rouge">stdout.txt</code> に stdout が出力されている</li>
</ul>

<p>また上コマンドでは省略されていますが、リダイレクトのデフォルトは標準出力のファイルディスクリプタ「1」なので、<code class="language-plaintext highlighter-rouge">&gt;</code> の部分は <code class="language-plaintext highlighter-rouge">1&gt;</code> と書くこともできます。</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>./stdout-stderr.sh <span class="o">&gt;</span> stdout.txt
<span class="gp">#</span><span class="w"> </span>下記のようにも書くことできる
<span class="gp">$</span><span class="w"> </span>./stdout-stderr.sh 1&gt; stdout.txt
</code></pre></div></div>

<h2 id="エラー出力リダイレクト有り実行時">エラー出力リダイレクト有り実行時</h2>

<p>次はエラー出力だけリダイレクトするようにしてみましょう。</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>./stdout-stderr.sh 2&gt; stderr.txt
<span class="go">stdout

</span><span class="gp">$</span><span class="w"> </span><span class="nb">cat </span>stderr.txt
<span class="go">stderr
</span></code></pre></div></div>

<ul>
  <li>リダイレクト無し実行時と比較して、画面に表示される結果から stderr が出力されなくなった</li>
  <li>画面に表示されなくなった代わりに、リダイレクト先の <code class="language-plaintext highlighter-rouge">stderr.txt</code> に stderr が出力されている</li>
</ul>

<h2 id="エラー出力を標準出力としてリダイレクト実行時">エラー出力を標準出力としてリダイレクト実行時</h2>

<p>続いてエラー出力を標準出力としてまとめて出力するようにリダイレクトしてみます。</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>./stdout-stderr.sh &amp;&gt; stdout-stderr.txt
<span class="go">
</span><span class="gp">$</span><span class="w"> </span><span class="nb">cat </span>stdout-stderr.txt
<span class="go">stdout
stderr
</span></code></pre></div></div>

<ul>
  <li>リダイレクト実行時の画面表示は何もされない</li>
  <li>リダイレクト先のファイル <code class="language-plaintext highlighter-rouge">stdout-stderr.txt</code> には stdout と stderr ともに出力されている</li>
</ul>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>./stdout-stderr.sh &amp;&gt; stdout-stderr.txt
<span class="gp">#</span><span class="w"> </span>下記のようにも書くことできる
<span class="gp">$</span><span class="w"> </span>./stdout-stderr.sh <span class="o">&gt;</span>&amp; stdout-stderr.txt
<span class="gp">$</span><span class="w"> </span>./stdout-stderr.sh <span class="o">&gt;</span> stdout-stderr.txt 2&gt;&amp;1
<span class="gp">$</span><span class="w"> </span>./stdout-stderr.sh 1&gt; stdout-stderr.txt 2&gt;&amp;1
</code></pre></div></div>

<h2 id="標準出力エラー出力を別々にリダイレクト実行時">標準出力＆エラー出力を別々にリダイレクト実行時</h2>

<p>標準出力と標準エラー出力をそれぞれ別にリダイレクトするようにしてみます。</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>./stdout-stderr.sh 1&gt; stdout.txt 2&gt; stderr.txt
<span class="go">
</span><span class="gp">$</span><span class="w"> </span><span class="nb">cat </span>stdout.txt
<span class="go">stdout

</span><span class="gp">$</span><span class="w"> </span><span class="nb">cat </span>stderr.txt
<span class="go">stderr
</span></code></pre></div></div>

<ul>
  <li>標準出力である stdout は <code class="language-plaintext highlighter-rouge">stdout.txt</code> に出力される</li>
  <li>標準エラー出力である stderr は <code class="language-plaintext highlighter-rouge">stderr.txt</code> に出力される</li>
</ul>

<h2 id="出力をリダイレクトで捨てる">出力をリダイレクトで捨てる</h2>

<p><code class="language-plaintext highlighter-rouge">/dev/null</code>にリダイレクトすれば出力内容を捨てることができます。</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>./stdout-stderr.sh &amp;&gt; /dev/null
</code></pre></div></div>

<h2 id="参考">参考</h2>

<ul>
  <li><a href="https://qiita.com/laikuaut/items/e1cc312ffc7ec2c872fc">bash: 標準出力、標準エラー出力をファイル、画面それぞれに出力する方法 - Qiita</a></li>
  <li><a href="https://www.computerhope.com/jargon/f/file-descriptor.htm">What is a File Descriptor?</a></li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="shell" /><category term="bash" /><summary type="html"><![CDATA[標準出力、標準エラー出力のリダイレクトの方法を実際のコマンド実行結果とあわせてまとめてみます。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/stdout.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/stdout.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">RubyとGoとBashで並行処理のパフォーマンス比較をしてみた</title><link href="https://blog.toshimaru.net/ruby-vs-go/" rel="alternate" type="text/html" title="RubyとGoとBashで並行処理のパフォーマンス比較をしてみた" /><published>2015-03-05T00:00:00+09:00</published><updated>2019-11-24T00:00:00+09:00</updated><id>https://blog.toshimaru.net/ruby-vs-go</id><content type="html" xml:base="https://blog.toshimaru.net/ruby-vs-go/"><![CDATA[<p>Rubyで書いたコードをGoで書き直したらどれくらい早くなるかを検証したくてやってみた。ついでにBashでもどうなるかも比較した。</p>

<p>画像ファイルをダウンロードするだけの単純な処理での比較。複雑な処理になるとまた結果は全然違ってくると思います。あしからず。</p>

<h2 id="比較する処理内容">比較する処理内容</h2>

<p>100個の画像をダウンロードするコードをサンプルにやってみた。</p>

<h2 id="rubyの場合">Rubyの場合</h2>

<p>Ruby 2.6 で検証。</p>

<h3 id="直列ダウンロード">直列ダウンロード</h3>

<p>まずは何も考えず順番に１つ１つダウンロードするRubyコード。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># no_thread.rb</span>
<span class="nb">require</span> <span class="s1">'open-uri'</span>

<span class="p">(</span><span class="mi">1</span><span class="o">..</span><span class="mi">100</span><span class="p">).</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
  <span class="nb">open</span><span class="p">(</span><span class="s2">"./images/</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">.png"</span><span class="p">,</span> <span class="s1">'wb'</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
    <span class="n">f</span><span class="p">.</span><span class="nf">write</span> <span class="nb">open</span><span class="p">(</span><span class="s2">"https://dummyimage.com/600x400"</span><span class="p">).</span><span class="nf">read</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">time </span>ruby no_thread.rb
<span class="go">ruby no_thread.rb  1.85s user 0.28s system 1% cpu 2:05.11 total
</span></code></pre></div></div>

<ul>
  <li>実行時間: 約2分。遅い</li>
  <li>CPU: 1％。CPUはほとんど使い切れていないことがわかる</li>
</ul>

<h3 id="threadで並行ダウンロード">Threadで並行ダウンロード</h3>

<p>Threadを使って並行に処理してみる。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># thread.rb</span>
<span class="nb">require</span> <span class="s1">'open-uri'</span>

<span class="n">threads</span> <span class="o">=</span> <span class="p">[]</span>
<span class="p">(</span><span class="mi">1</span><span class="o">..</span><span class="mi">100</span><span class="p">).</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
  <span class="n">threads</span> <span class="o">&lt;&lt;</span> <span class="no">Thread</span><span class="p">.</span><span class="nf">new</span> <span class="k">do</span>
    <span class="nb">open</span><span class="p">(</span><span class="s2">"./images/</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">.png"</span><span class="p">,</span> <span class="s1">'wb'</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
      <span class="n">f</span><span class="p">.</span><span class="nf">write</span> <span class="nb">open</span><span class="p">(</span><span class="s2">"https://dummyimage.com/600x400"</span><span class="p">).</span><span class="nf">read</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
<span class="n">threads</span><span class="p">.</span><span class="nf">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:join</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">time </span>ruby thread.rb
<span class="go">ruby thread.rb  1.64s user 0.28s system 71% cpu 2.670 total
</span></code></pre></div></div>

<ul>
  <li>実行時間: 2.6秒。劇的な改善</li>
  <li>CPU: 70％。うまくCPUも使えている</li>
</ul>

<h2 id="goの場合">Goの場合</h2>

<p>Goで書き直してみる。Goのバージョンは1.13を使用。</p>

<p><a href="http://qiita.com/keisukeP/items/f4d680eb9e8f93263fa9">こちらのコード</a>を参考に書いてみた。</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// go.go</span>
<span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="p">(</span>
	<span class="s">"fmt"</span>
	<span class="s">"io"</span>
	<span class="s">"net/http"</span>
	<span class="s">"os"</span>
	<span class="s">"sync"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="k">var</span> <span class="n">wg</span> <span class="n">sync</span><span class="o">.</span><span class="n">WaitGroup</span>
	<span class="k">var</span> <span class="n">url</span> <span class="kt">string</span> <span class="o">=</span> <span class="s">"https://dummyimage.com/600x400"</span>

	<span class="k">for</span> <span class="n">i</span> <span class="o">:=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="m">100</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="n">file</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">os</span><span class="o">.</span><span class="n">Create</span><span class="p">(</span><span class="n">fmt</span><span class="o">.</span><span class="n">Sprintf</span><span class="p">(</span><span class="s">"images/%d.png"</span><span class="p">,</span> <span class="n">i</span><span class="p">))</span>
		<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
			<span class="nb">panic</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
		<span class="p">}</span>

		<span class="n">wg</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="m">1</span><span class="p">)</span>
		<span class="k">go</span> <span class="k">func</span><span class="p">()</span> <span class="p">{</span>
			<span class="n">response</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">http</span><span class="o">.</span><span class="n">Get</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
			<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
				<span class="nb">panic</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
			<span class="p">}</span>
			<span class="k">defer</span> <span class="n">response</span><span class="o">.</span><span class="n">Body</span><span class="o">.</span><span class="n">Close</span><span class="p">()</span>
			<span class="k">defer</span> <span class="n">file</span><span class="o">.</span><span class="n">Close</span><span class="p">()</span>
			<span class="n">io</span><span class="o">.</span><span class="n">Copy</span><span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="n">response</span><span class="o">.</span><span class="n">Body</span><span class="p">)</span>
			<span class="n">wg</span><span class="o">.</span><span class="n">Done</span><span class="p">()</span>
		<span class="p">}()</span>
	<span class="p">}</span>

	<span class="n">wg</span><span class="o">.</span><span class="n">Wait</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="go-runで実行">Go runで実行</h3>

<p>コンパイルせずに<code class="language-plaintext highlighter-rouge">go run</code>で実行してみる。</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">time </span>go run go.go
<span class="go">go run go.go  0.79s user 0.37s system 25% cpu 4.532 total
</span></code></pre></div></div>

<ul>
  <li>実行時間: 約4.5秒</li>
  <li>CPU: 25％</li>
</ul>

<h3 id="build済みバイナリで実行">build済みバイナリで実行</h3>

<p>buildして実行する。</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>go build go.go
<span class="gp">$</span><span class="w"> </span><span class="nb">time</span> ./go
<span class="go">./go  0.23s user 0.12s system 11% cpu 3.111 total
</span></code></pre></div></div>

<ul>
  <li>実行時間: 約3秒。RubyのThreadコードより少し遅かった</li>
  <li>CPU: 約10％。速度のわりにCPU消費が著しく低い！</li>
</ul>

<h2 id="bashの場合">Bashの場合</h2>

<p>Bash（シェルスクリプト）の場合も試してみる。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># bash.bash</span>
<span class="k">for </span>i <span class="k">in</span> <span class="sb">`</span><span class="nb">seq </span>1 100<span class="sb">`</span><span class="p">;</span> <span class="k">do
  </span>wget <span class="nt">--background</span> <span class="nt">--quiet</span> <span class="s2">"https://dummyimage.com/600x400"</span> <span class="nt">-O</span> images/<span class="nv">$i</span>.png <span class="o">&gt;</span> /dev/null
<span class="k">done</span>
</code></pre></div></div>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">time</span> ./bash.bash
<span class="go">./bash.bash  0.25s user 0.30s system 43% cpu 1.241 total
</span></code></pre></div></div>

<ul>
  <li>実行時間: 約1.2秒。速い！</li>
  <li>CPU: 約40%</li>
</ul>

<h2 id="まとめ">まとめ</h2>

<p>単純な並行ダウンロードという処理において、実行速度だけでいうとRubyもThreadを使えばGoと同じ速度は出せるということがわかった。</p>

<p>一方でCPUコストに関してはビルド済みのGoバイナリのほうが圧倒的低く済むということが判明した。つまり複雑な計算処理においてはGoがRubyよりずっとアドバンテージがあるであろうことがわかった。</p>

<p>今回は単純な処理なのでRubyとGoの間で処理速度に大きな差は生まれなかったものの、比較するロジックが複雑化すればするほどRubyはGoに負けそうな予感がした。</p>]]></content><author><name>Toshimaru</name></author><category term="ruby" /><category term="go" /><category term="bash" /><summary type="html"><![CDATA[Rubyで書いたコードをGoで書き直したらどれくらい早くなるかを検証したくてやってみた。ついでにBashでもどうなるかも比較した。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/ruby-vs-go.jpg" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/ruby-vs-go.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">「たった一行でもっと高画質の画像を集める方法」のシェルスクリプトコード解説</title><link href="https://blog.toshimaru.net/sh3iz/" rel="alternate" type="text/html" title="「たった一行でもっと高画質の画像を集める方法」のシェルスクリプトコード解説" /><published>2012-12-24T00:00:00+09:00</published><updated>2019-11-02T00:00:00+09:00</updated><id>https://blog.toshimaru.net/sh3iz</id><content type="html" xml:base="https://blog.toshimaru.net/sh3iz/"><![CDATA[<p><a href="http://d.hatena.ne.jp/shi3z/20121217/1355695824">たった一行でもっと高画質の画像を集める方法</a>にあったシェルスクリプトのコード。</p>

<h2 id="ソース">ソース</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">matome_url</span><span class="o">=</span><span class="nv">$1</span>
<span class="nv">cnt</span><span class="o">=</span>0
<span class="k">for </span>j <span class="k">in</span> <span class="o">{</span>1..10<span class="o">}</span><span class="p">;</span> <span class="k">do
  for </span>i <span class="k">in</span> <span class="sb">`</span>curl <span class="nv">$matome_url</span><span class="se">\?</span><span class="nv">page</span><span class="o">=</span><span class="nv">$j</span> | <span class="nb">grep</span> <span class="s1">'_jWidgetData'</span> | <span class="nb">sed </span>s/<span class="se">\&amp;</span>quot<span class="se">\;</span>/<span class="se">\"</span>/g | <span class="nb">grep</span> <span class="nt">-o</span> <span class="s2">"url</span><span class="se">\"\:\"</span><span class="s2">[^</span><span class="se">\"</span><span class="s2">]*"</span> | <span class="nb">cut</span> <span class="nt">-d</span> <span class="se">\"</span> <span class="nt">-f</span> 3 <span class="sb">`</span><span class="p">;</span> <span class="k">do
    </span>curl <span class="nt">-o</span> <span class="nv">$2_$cnt</span>.jpg <span class="nv">$i</span>
    <span class="nv">cnt</span><span class="o">=</span><span class="sb">`</span><span class="nb">expr</span> <span class="nv">$cnt</span> + 1<span class="sb">`</span>
  <span class="k">done
done</span>
</code></pre></div></div>

<p>その中の１行、このコードの意味がよくわからなかったので調べてみた。</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>curl <span class="nv">$matome_url</span><span class="se">\?</span><span class="nv">page</span><span class="o">=</span><span class="nv">$j</span>| <span class="nb">grep</span> <span class="s1">'_jWidgetData'</span> | <span class="nb">sed </span>s/<span class="se">\&amp;</span>quot<span class="se">\;</span>/<span class="se">\"</span>/g | <span class="nb">grep</span> <span class="nt">-o</span> <span class="s2">"url</span><span class="se">\"\:\"</span><span class="s2">[^</span><span class="se">\"</span><span class="s2">]*"</span> | <span class="nb">cut</span> <span class="nt">-d</span> <span class="se">\"</span> <span class="nt">-f</span> 3
</code></pre></div></div>

<p>バラすと下記のようになる。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl https://matome.naver.jp/odai/2128076173257260401 | <span class="c"># curlでデータ取得</span>
<span class="nb">grep</span> <span class="s1">'_jWidgetData'</span> |                                   <span class="c"># _jWidgetData(画像URLが含まれている行)をgrep</span>
<span class="nb">sed </span>s/<span class="se">\&amp;</span>quot<span class="se">\;</span>/<span class="se">\"</span>/g |                                   <span class="c"># &amp;quot; を " に変換</span>
<span class="nb">grep</span> <span class="nt">-o</span> <span class="s2">"url</span><span class="se">\"\:\"</span><span class="s2">[^</span><span class="se">\"</span><span class="s2">]*"</span> |                             <span class="c"># url":"http:~ をgrepで抜き出す</span>
<span class="nb">cut</span> <span class="nt">-d</span> <span class="se">\"</span> <span class="nt">-f</span> 3                                          <span class="c"># ⇡をurl,:,http:~ の３つに分割してURLである３つめをcut!</span>
</code></pre></div></div>

<h3 id="出力結果">出力結果</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://imgcc.naver.jp/kaze/mission/USER/20121010/16/112376/0/800x1126x5e102d37fb7211123e76a10.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121009/16/112376/1/1134x1548x5a8f6dace3e8a811e2caeb.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121222/16/112376/1/1152x1643xa71b65cd2d7ccfbd9ab501.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121022/16/112376/3/1470x2048xf91af81cc31725554aa6a1.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121223/16/112376/0/800x1067xce40c56866a0c1349b12d40.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121223/16/112376/1/800x1067xda8507d549b33034789af92.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121222/16/112376/0/1120x1680xe367f4d20758df59051771.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121218/16/112376/3/800x1200xf0e163f978b6340999a3627.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121220/16/112376/2/800x1149x504004fca0a43ae177b6b94.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121220/16/112376/1/909x1346xbc20b11869f748acf5dfcb9.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121220/16/112376/0/1066x1600x961a7ad10008867d0b4dc4.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121218/16/112376/1/703x1024x9c2810c4630ee676e88581e.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121215/16/112376/0/1226x1671x7380daad05950ec9f27aa1.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121218/16/112376/5/900x1280x8feb008f284438ae077799f.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121219/16/112376/0/799x1200xa22a34c73b464cc8c008887.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121219/16/112376/1/1200x800x596d41a8093f6663d2f51d5.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121216/16/112376/1/1500x2150x03d096234d12754f302cae.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121216/16/112376/0/683x1024x85dc2bb2d1fb1168ee2815c.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121214/16/112376/2/530x800x764574c1e912f5a46846fe56.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121214/16/112376/3/1280x1900x1ce4cf74906fd926a96f41.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121214/16/112376/0/900x1200xaca3d3fec5d57eec05c514a.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121214/16/112376/8/531x800xc515ec8798a9a4032daca277.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121207/16/112376/24/1033x1550x7c9c3cd8928ab0fbf19548.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121202/16/112376/1/1033x1550x6e0dc201a49d96d93740d1.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121208/16/112376/1/1033x1550xf007fde2a5343d1a0a55d1.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121209/16/112376/7/854x1280xeabf817b9a607e419f2472f.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121209/16/112376/6/896x1280x08f71b1d54aa4bd5c2ef364.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121209/16/112376/5/1280x1682xd727f8325bec6c51d47212.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121209/16/112376/4/800x1067xcec4822757324881e9978c9.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121209/16/112376/3/1280x1920x0a1ca8283d2796132f14e3.jpg
</code></pre></div></div>

<p>この「◯◯で水着画像を集める」系のネタ元はPHPでしたが、シェルでもいけちゃうんですね。奥深い・・・</p>]]></content><author><name>Toshimaru</name></author><category term="linux" /><category term="shell" /><category term="bash" /><summary type="html"><![CDATA[たった一行でもっと高画質の画像を集める方法にあったシェルスクリプトのコード。]]></summary></entry></feed>