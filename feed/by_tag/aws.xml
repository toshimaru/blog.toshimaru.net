<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://blog.toshimaru.net/feed/by_tag/aws.xml" rel="self" type="application/atom+xml" /><link href="https://blog.toshimaru.net/" rel="alternate" type="text/html" /><updated>2021-03-07T09:15:30+09:00</updated><id>https://blog.toshimaru.net/feed/by_tag/aws.xml</id><title type="html">Hack Your Design!</title><subtitle>toshimaruの技術系なブログ</subtitle><author><name>Toshimaru</name></author><entry><title type="html">Roppongi.rb#2で「Infrastructure as (Ruby) Code の現状確認」を発表しました</title><link href="https://blog.toshimaru.net/infrastructure-as-ruby-code-2016/" rel="alternate" type="text/html" title="Roppongi.rb#2で「Infrastructure as (Ruby) Code の現状確認」を発表しました" /><published>2016-11-06T00:00:00+09:00</published><updated>2016-11-06T00:00:00+09:00</updated><id>https://blog.toshimaru.net/infrastructure-as-ruby-code-2016</id><content type="html" xml:base="https://blog.toshimaru.net/infrastructure-as-ruby-code-2016/">&lt;p&gt;第二回Roppongi.rbを&lt;a href=&quot;http://roppongirb.connpass.com/event/42633/&quot;&gt;「Infrastructure x Ruby」というテーマで開催&lt;/a&gt;した。&lt;/p&gt;

&lt;p&gt;僕はその中で「Infrastructure as (Ruby) Code の現状確認」という内容でオープニングLTとして発表したので、その内容をブログにもまとめておく（前回発表分の発表内容まとめはこちら: &lt;a href=&quot;http://blog.toshimaru.net/roppongirb-speeding-up-rails/&quot;&gt;Roppongi.rbで「Rails高速化戦略」を発表しました&lt;/a&gt;）。&lt;/p&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;786983b0a1f94d1ca1250aa48ce94ed0&quot; data-ratio=&quot;1.33333333333333&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;目的&quot;&gt;目的&lt;/h2&gt;

&lt;p&gt;発表の目的としては世に言われる &lt;strong&gt;Infrastructure as Code&lt;/strong&gt; の認識・理解を参加者であわせること。&lt;/p&gt;

&lt;h2 id=&quot;infrastructure-as-codeの意義&quot;&gt;Infrastructure as Codeの意義&lt;/h2&gt;

&lt;p&gt;大きく３つあると思っている。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;インフラ構築手順を秘伝のタレ化させない&lt;/li&gt;
  &lt;li&gt;手順をコードに落としてインフラへの変更をトラッキングする&lt;/li&gt;
  &lt;li&gt;手順を不変（immutable）にする&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;秘伝のタレ&quot;&gt;秘伝のタレ&lt;/h3&gt;

&lt;p&gt;秘伝のタレ。一体どういう意味だろうか。まるで秘伝のタレのように継ぎ足し継ぎ足し変更が入り代々受け継がれてきたサーバーを形容する表現が &lt;strong&gt;秘伝のタレ&lt;/strong&gt; だ。&lt;/p&gt;

&lt;p&gt;秘伝のタレが代々受け継がれている環境なんかでは、メンテナンスされているかどうかまるでわからない「サーバー構築手順書.xls」なんてモノがあったりする。そしてそれは大体において手順書通りにはうまくいかないのが常だ。&lt;/p&gt;

&lt;p&gt;インフラ担当者のアタマにしか入っていない隠し味なんかがあったりするとオワタ状態＼(^o^)／。その担当者が退職したりすると誰も現プロダクション環境は再現できません、という状況が出来上がる。&lt;/p&gt;

&lt;h3 id=&quot;コード化するということ&quot;&gt;コード化するということ&lt;/h3&gt;

&lt;p&gt;秘伝のタレ化を防ぐために、コード化という行為を行う。ではコード化されることで良い事とはなんだろうか。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;コード化される&lt;/li&gt;
  &lt;li&gt;➜ Gitでトラック可能になる&lt;/li&gt;
  &lt;li&gt;➜ Githubでプルリク可能になる&lt;/li&gt;
  &lt;li&gt;➜ Githubでレビュー可能になる&lt;/li&gt;
  &lt;li&gt;➜ :blush: = HAPPY!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このようにコード化されることでソフトウェア開発のグッドプラクティスであるGithub Workflowに乗ることができる。:surfer:&lt;/p&gt;

&lt;h2 id=&quot;immutable-infrastructure&quot;&gt;Immutable Infrastructure&lt;/h2&gt;

&lt;p&gt;次に手順を不変（Immutable）にするということについて。Immutableという言葉はインフラ的文脈ではImmutable Infrastructureという言葉が有名かと思う。&lt;/p&gt;

&lt;p&gt;Immutable Infrastructureについては、&lt;a href=&quot;http://rebuild.fm/25/&quot;&gt;rebuild.fmでnaoyaさんやmizzyさんがmiyagawaさんと話して&lt;/a&gt;いたり、&lt;a href=&quot;https://speakerdeck.com/naoya/immutable-infrastructure-number-jawsdays&quot;&gt;naoyaさんが発表していたり&lt;/a&gt;したあたりを契機に日本でも浸透した言葉だと思っている。&lt;/p&gt;

&lt;p&gt;出自はというとChad Fowler氏が書いた下記の記事。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://chadfowler.com/2013/06/23/immutable-deployments.html&quot;&gt;Trash Your Servers and Burn Your Code: Immutable Infrastructure and Disposable Components&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;immutable-infrastructure-のキーワード&quot;&gt;Immutable Infrastructure のキーワード&lt;/h3&gt;

&lt;p&gt;Immutable Infrastructureを僕なりに解釈すると、その言葉の本質は下記のキーワードで表せると思う。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Immutable （不変）&lt;/li&gt;
  &lt;li&gt;Disposable（使い捨て）&lt;/li&gt;
  &lt;li&gt;Reproducible （再現可能）&lt;/li&gt;
  &lt;li&gt;Idempotence（冪等性）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Immutable Infrastructureが登場した背景にはAWS, GCPを始めとするIaaSの登場が大きいと思っている。どういうことかというとIaaSでボタン１つでサーバーを上げて必要なくなったら捨てるダイナミックなサーバー、つまり &lt;strong&gt;Disposable&lt;/strong&gt; なサーバーが誕生したということが背景の１つにある。&lt;/p&gt;

&lt;p&gt;そして、オートスケーリングの恩恵を享受するためにはサーバー・プロビジョニング自動化作業が必要となる。スケール前提のサーバー群はいつ何時でも既存のサーバーと同じ状態のサーバーが立ち上がる必要がある&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;。つまり、構築手順を &lt;strong&gt;Immutable&lt;/strong&gt; にし &lt;strong&gt;Reproducible&lt;/strong&gt; なサーバー環境にする(= &lt;strong&gt;Idempotence&lt;/strong&gt; を担保する)ことが必要。&lt;/p&gt;

&lt;h2 id=&quot;構成管理ツールの歴史&quot;&gt;構成管理ツールの歴史&lt;/h2&gt;

&lt;p&gt;メジャーなプロビジョニングツール(構成管理ツール)の歴史を追ってみる。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;2005年 &lt;a href=&quot;https://docs.puppet.com/puppet/&quot;&gt;Puppet&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;2009年 &lt;a href=&quot;https://www.chef.io/chef/&quot;&gt;Chef&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;2012年 &lt;a href=&quot;https://www.ansible.com&quot;&gt;Ansible&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;2014年 &lt;a href=&quot;https://www.terraform.io&quot;&gt;Terraform&lt;/a&gt;, &lt;a href=&quot;https://github.com/itamae-kitchen/itamae&quot;&gt;Itamae&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;実装言語別分類&quot;&gt;実装言語別分類&lt;/h2&gt;

&lt;p&gt;実装言語別に分類してみる。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Ruby実装&lt;/th&gt;
      &lt;th&gt;Go実装&lt;/th&gt;
      &lt;th&gt;Python実装&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Puppet, Chef, Itamae, Serverkit&lt;/td&gt;
      &lt;td&gt;Terraform&lt;/td&gt;
      &lt;td&gt;Ansible&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;表現別分類&quot;&gt;表現別分類&lt;/h2&gt;

&lt;p&gt;インフラストラクチャをどうコードで表現しているかの表現体形で分類してみる。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;RubyによるDSL&lt;/th&gt;
      &lt;th&gt;HCLによるDSL&lt;/th&gt;
      &lt;th&gt;YAML&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Puppet, Chef, Itamae&lt;/td&gt;
      &lt;td&gt;Terraform&lt;/td&gt;
      &lt;td&gt;Ansible, Serverkit&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;why-yaml&quot;&gt;Why YAML?&lt;/h3&gt;

&lt;p&gt;なぜYAMLで表現するのか？ まずはXML/JSONより記述がラクという点がある。そしてYAMLは人間にとってよみやすい、かきやすい、わかりやすいという特徴がある。そしてRailsの設定ファイルなどで一般的に使われている記述フォーマットなので、学習コストが低いという点が利点である。&lt;/p&gt;

&lt;h3 id=&quot;why-hcl&quot;&gt;Why HCL?&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hashicorp/hcl&quot;&gt;HCL&lt;/a&gt; とは HashiCorp configuration language の略。HCLの&lt;a href=&quot;https://github.com/hashicorp/hcl#why&quot;&gt;READMEではHLCについてこう説明&lt;/a&gt;されている。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;:x: JSONダメ。なぜならコメントかけない。しんどい。&lt;/li&gt;
  &lt;li&gt;:x: YAMLもダメ。なぜなら初心者には記法むずかしい！&lt;/li&gt;
  &lt;li&gt;:x: Rubyとかもダメ。なぜなら自由度高すぎぃ！複雑すぎぃ！&lt;/li&gt;
  &lt;li&gt;:o: よろしい、ならば独自言語だ。ということで生まれたのが &lt;strong&gt;HCL&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;why-ruby&quot;&gt;Why Ruby?&lt;/h3&gt;

&lt;p&gt;なぜRubyを採用するか？ まずはDSLが書きやすいという点。そしてRSpecなどのRuby DSLに代表されるようにRuby DSLは宣言的な記述が可能である。宣言的ということはコードを読んだだけでそのコードの意図が伝わりやすいということだ。そしてDSLといってもRubyはRuby。RubyなのでRubyでできることは何でもできちゃうので、自由度が高い（これは悪い意味に作用することもあってやりすぎるとChefのレシピそのものが秘伝のタレ化する可能性があるので注意）。&lt;/p&gt;

&lt;h2 id=&quot;infrastructure-as-code-の概念整理&quot;&gt;Infrastructure as Code の概念整理&lt;/h2&gt;

&lt;p&gt;Infrastructure as Code の概念を整理してみたい。&lt;a href=&quot;http://mizzy.org/blog/2013/10/29/1/&quot;&gt;mizzyさんのブログでは&lt;/a&gt;、プロビジョニングのレイヤーを下記のように分けるような考え方が紹介されていた。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb2/provisioning-tools.png&quot; alt=&quot;provisioning layers&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;シンプルなプロビジョニングレイヤーの考え方&quot;&gt;シンプルなプロビジョニング・レイヤーの考え方&lt;/h2&gt;

&lt;p&gt;オーケストレーションなどというと抽象的なのとInfrastructure as Codeのスコープが広くなってしまうと思うので、シンプルにこんな風に考えてみるのはどうだろうか。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb2/infra-as-code-layers.png&quot; alt=&quot;infra-as-code-layers&quot; /&gt;&lt;/p&gt;

&lt;p&gt;上記の考え方で先の構成管理ツールを分類するとこんな感じだ。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb2/provisioning-categorize.png&quot; alt=&quot;provisioning categorize&quot; /&gt;&lt;/p&gt;

&lt;p&gt;しかしこれで本当に全てはコード化されるか、というとそうではない。サーバーのプロビジョニングでコード化されるのはAWSサービス群のほんの一部、EC2のみだ。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb2/aws-services.png&quot; alt=&quot;AWS services&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;infrastructure-as-code-のカバー範囲&quot;&gt;Infrastructure as Code のカバー範囲&lt;/h2&gt;

&lt;p&gt;IaaSは仮想サーバ以外にもさまざまなサービスを提供している。AWSの例でいうと、ELB, RDS, VPC, S3, CloudFront, IAM, SecurityGroup などなど。&lt;/p&gt;

&lt;p&gt;それらに対するオペレーションをAWS Management ConsoleなどのGUIでやるべきだろうか？&lt;/p&gt;

&lt;h3 id=&quot;gui-configuration-is-hard&quot;&gt;GUI Configuration is hard…&lt;/h3&gt;

&lt;p&gt;さきほどのImmutable Infrastructureの文脈でいうと、GUIによる操作はImmutableではない。なぜならGUIは変わるかもしれないし、GUI操作は明確な言語化できないほどにファジーだからだ。では重要な設定をそのGUI任せにしていいのだろうか？&lt;/p&gt;

&lt;p&gt;Route53やSecurityGroupなどオペレーションミスで一歩間違うと大障害になりかねない。これらのGUIの設定をimmutableにはできないだろうか。じゃあimmutableなインターフェースであるAPIを叩けばいいじゃない。というところで、&lt;strong&gt;Configuration as Code&lt;/strong&gt; という言葉が出て来る。&lt;/p&gt;

&lt;p&gt;この考え方を使えばInfrastructure as Codeの概念をさらに良い感じに敷衍できるのではないかと僕は考えた。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb2/configuratino-as-code.png&quot; alt=&quot;Configuration as Code*&quot; /&gt;&lt;/p&gt;

&lt;p&gt;こう考えるとIaaSの各種サービス群もコード化の対象として捉えることができる。&lt;/p&gt;

&lt;h2 id=&quot;全てがコードになる例&quot;&gt;全てがコードになる例&lt;/h2&gt;

&lt;h3 id=&quot;route53-configuration&quot;&gt;Route53 Configuration&lt;/h3&gt;

&lt;p&gt;Route53のコード化例。こんな感じにRuby DSLになる&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;hosted_zone&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;example.com.&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;rrset&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;example.com.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;A&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ttl&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;resource_records&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;127.0.0.2&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;powered by &lt;a href=&quot;https://github.com/winebarrel/roadworker&quot;&gt;roadworker&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;aws_route53_record&quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;www&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;zone_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;${aws_route53_zone.primary.zone_id}&quot;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;www.example.com&quot;&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;ttl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;300&quot;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;records&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${aws_eip.lb.public_ip}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;powered by &lt;a href=&quot;https://www.terraform.io/docs/providers/aws/r/route.html&quot;&gt;AWS: aws_route - Terraform by HashiCorp&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;cloudwatch-alarm&quot;&gt;CloudWatch Alarm&lt;/h3&gt;

&lt;p&gt;CloudWatchのAlarmだってDSLになる。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;alarm&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;alarm1&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;AWS/EC2&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;metric_name&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;CPUUtilization&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;dimensions&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;InstanceId&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;i-XXXXXXXX&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;period&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;statistic&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:average&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;threshold&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;gt;=&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;50.0&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;evaluation_periods&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;actions_enabled&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;alarm_actions&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ok_actions&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;insufficient_data_actions&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;arn:aws:sns:us-east-1:123456789012:my_topic&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;powered by &lt;a href=&quot;https://github.com/winebarrel/radiosonde&quot;&gt;radiosonde&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;datadog-alert-configuration&quot;&gt;Datadog Alert Configuration&lt;/h3&gt;

&lt;p&gt;さらにコード化される対象はIaaSだけではない。Datadogという監視のアラート設定もコード化される。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;monitor&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Check load avg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;metric alert&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;avg(last_5m):avg:ddstat.load_avg.1m{host:i-XXXXXXXX} &amp;gt; 1&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;@winebarrel@example.net&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;locked&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;new_host_delay&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;notify_no_data&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;no_data_timeframe&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;notify_audit&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;silenced&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({})&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;powered by &lt;a href=&quot;https://github.com/winebarrel/barkdog&quot;&gt;barkdog&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;github-member-management&quot;&gt;Github Member Management&lt;/h3&gt;

&lt;p&gt;Githubのメンバー管理だってTerraformでできちゃうんだぜ。&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;github_membership&quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;membership_for_some_user&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;SomeUser&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;member&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;github_repository&quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;example&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;example&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;My awesome codebase&quot;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;github_repository_collaborator&quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;a_repo_collaborator&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;our-cool-repo&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;SomeUser&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;permission&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;admin&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;powered by &lt;a href=&quot;https://www.terraform.io/docs/providers/github/&quot;&gt;Provider: GitHub - Terraform by HashiCorp&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;全てがプルリクになる&quot;&gt;全てがプルリクになる&lt;/h2&gt;

&lt;p&gt;冒頭に述べたように、コード化されるということはGithubに乗せてプルリクエストを出せるということだ。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb2/pull-request.png&quot; alt=&quot;Pull Request&quot; /&gt;&lt;/p&gt;

&lt;p&gt;こんなふうにプルリクになっているとレビューも簡単。&lt;/p&gt;

&lt;h2 id=&quot;コード化するメリット&quot;&gt;コード化するメリット&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;レビューによるチェック体制により、より安全なConfigurationオペレーションを実現できる&lt;/li&gt;
  &lt;li&gt;CIサービスと連携させてテスト・CDの自動化も可能となる&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;コード化することによりGithubワークフロー（プルリク→レビュー→マージ）に乗ることができてハッピー :smile:&lt;/li&gt;
  &lt;li&gt;Infrastructure as Code = Server Configuration as Code + Service Configuration as Code ➜ サーバーだけではなく、サービスそれ自体もコード化されていく。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;感想&quot;&gt;感想&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;今回の発表はKeynoteでスライド作ったけど、Keynoteはレイアウトとかテーマの設定が自由にできてDecksetよりはデザイン凝ろうと思ったときに便利。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/ryotarai/itamae-infra-as-code-xian-zhuang-que-ren-hui&quot;&gt;Itamae - Infra as Code 現状確認会&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://rebuild.fm/25/&quot;&gt;Rebuild: 25: Immutable Infrastructure&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/naoya/infrastructure-as-code&quot;&gt;Infrastructure as Code // Speaker Deck&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://mizzy.org/blog/2016/04/22/1/&quot;&gt;Infrastructure as Code 再考&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://chadfowler.com/2013/06/23/immutable-deployments.html&quot;&gt;Trash Your Servers and Burn Your Code: Immutable Infrastructure and Disposable Components&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://martinfowler.com/bliki/InfrastructureAsCode.html&quot;&gt;InfrastructureAsCode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;特定のサーバーにデータに依存してしまわないように、データ的にはステートレスなサーバー構成が前提となる &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Toshimaru</name></author><category term="ruby" /><category term="roppongirb" /><category term="aws" /><category term="presentation" /><summary type="html">第二回Roppongi.rbを「Infrastructure x Ruby」というテーマで開催した。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/roppongirb2/og.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/roppongirb2/og.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">AWS S3 + CloudFront のCORS設定手順</title><link href="https://blog.toshimaru.net/s3-cloudfront-cors-setting/" rel="alternate" type="text/html" title="AWS S3 + CloudFront のCORS設定手順" /><published>2016-08-22T00:00:00+09:00</published><updated>2016-08-22T00:00:00+09:00</updated><id>https://blog.toshimaru.net/s3-cloudfront-cors-setting</id><content type="html" xml:base="https://blog.toshimaru.net/s3-cloudfront-cors-setting/">&lt;p&gt;（画像は&lt;a href=&quot;http://aws.clouddesignpattern.org/index.php/CDP:Cache_Distribution%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3&quot;&gt;AWS-CloudDesignPattern&lt;/a&gt;から引用）&lt;/p&gt;

&lt;h2 id=&quot;フォントファイルの豆腐化問題&quot;&gt;フォントファイルの豆腐化問題&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://fontawesome.io/&quot;&gt;Font Awesome&lt;/a&gt;のようなフォントファイルを外部ホスト（例えばS3など）から読み込もうとする場合、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Access-Control-Allow-Origin&lt;/code&gt;のヘッダでAllowされていないOriginからのリクエストの場合、いわゆるフォントの豆腐現象が起きます。これは&lt;a href=&quot;https://developer.mozilla.org/ja/docs/Web/HTTP/HTTP_access_control&quot;&gt;CORS(Cross-Origin Resource Sharing)&lt;/a&gt;
の設定が正しくなされていないためです。今回はAWSのS3+CloudFrontの構成でフォントファイルを配信したいので、S3およびCloudFrontのCORS設定手順および確認方法について説明します。&lt;/p&gt;

&lt;h2 id=&quot;s3の設定&quot;&gt;S3の設定&lt;/h2&gt;

&lt;p&gt;CORSの設定はS3のバケットのプロパティ設定から行えます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/cors/s3.png&quot; alt=&quot;s3 bucket property&quot; /&gt;&lt;/p&gt;

&lt;p&gt;XMLをサンプルとして下記のように設定できます。&lt;/p&gt;

&lt;h3 id=&quot;cors-configuration&quot;&gt;CORS Configuration&lt;/h3&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;CORSConfiguration&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://s3.amazonaws.com/doc/2006-03-01/&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;CORSRule&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;AllowedOrigin&amp;gt;&lt;/span&gt;http://sample.jp&lt;span class=&quot;nt&quot;&gt;&amp;lt;/AllowedOrigin&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;AllowedOrigin&amp;gt;&lt;/span&gt;https://sample.jp&lt;span class=&quot;nt&quot;&gt;&amp;lt;/AllowedOrigin&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;AllowedMethod&amp;gt;&lt;/span&gt;HEAD&lt;span class=&quot;nt&quot;&gt;&amp;lt;/AllowedMethod&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;AllowedMethod&amp;gt;&lt;/span&gt;GET&lt;span class=&quot;nt&quot;&gt;&amp;lt;/AllowedMethod&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;MaxAgeSeconds&amp;gt;&lt;/span&gt;3600&lt;span class=&quot;nt&quot;&gt;&amp;lt;/MaxAgeSeconds&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;ExposeHeader&amp;gt;&lt;/span&gt;ETag&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ExposeHeader&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;AllowedHeader&amp;gt;&lt;/span&gt;*&lt;span class=&quot;nt&quot;&gt;&amp;lt;/AllowedHeader&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/CORSRule&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/CORSConfiguration&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AllowedOrigin&lt;/code&gt;で許可したいOriginのURLを設定、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AllowedMethod&lt;/code&gt;で許可したいHTTPリクエストメソッドを指定します。それぞれ複数並べることで複数の値を設定することが可能となっています。&lt;/p&gt;

&lt;h3 id=&quot;確認手順&quot;&gt;確認手順&lt;/h3&gt;

&lt;p&gt;正しく設定されているかを確認するために下記のように&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl&lt;/code&gt;コマンドを使って検証してみましょう。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -X GET -I -H &quot;Origin: http://sample.jp&quot; https://s3-ap-northeast-1.amazonaws.com/bucket/path
HTTP/1.1 200 OK
x-amz-id-2: xxx
x-amz-request-id: xxx
Date: xxx
Access-Control-Allow-Origin: http://sample.jp
Access-Control-Allow-Methods: GET
Access-Control-Expose-Headers: ETag
Access-Control-Max-Age: 3600
Access-Control-Allow-Credentials: true
Vary: Origin, Access-Control-Request-Headers, Access-Control-Request-Method
Last-Modified: xxx
ETag: &quot;xxx&quot;
Accept-Ranges: bytes
Content-Type: application/json
Content-Length: 14356
Server: AmazonS3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Access-Control-Allow-Origin: http://sample.jp&lt;/code&gt; のレスポンスがヘッダが返ってきており、正しく AllowOrigin されていることが確認できました。&lt;/p&gt;

&lt;h2 id=&quot;cloudfront&quot;&gt;CloudFront&lt;/h2&gt;

&lt;p&gt;実運用の際はS3から配信ではなく、CloudFrontと組み合わせて利用するケースが多いかと思います。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://docs.aws.amazon.com/ja_jp/AmazonCloudFront/latest/DeveloperGuide/MigrateS3ToCloudFront.html&quot;&gt;Amazon S3 での CloudFront  の設定&lt;/a&gt;が済んでいることを前提として進めていいきます。&lt;/p&gt;

&lt;h3 id=&quot;cloudfrontの-cors-設定&quot;&gt;CloudFrontの CORS 設定&lt;/h3&gt;

&lt;p&gt;CORSの設定のためには、対象クラウドフロント設定から Behaviors を選択しデフォルトパスパターンの設定を変更する必要があります。OriginヘッダーがS3まで通る必要があるので&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Origin&lt;/code&gt;ヘッダーを Whitelist Headers に加えてやります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/cors/cloudfront.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;確認手順-1&quot;&gt;確認手順&lt;/h3&gt;

&lt;p&gt;S3と同じく、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl&lt;/code&gt;で確認してみます。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -X GET -I -H &quot;Origin: http://sample.jp&quot;  https://xxx.cloudfront.net/bucket/path
HTTP/1.1 200 OK
Content-Type: binary/octet-stream
Content-Length: 123
Connection: keep-alive
Date: xxx
Access-Control-Allow-Origin: http://sample.jp
Access-Control-Allow-Methods: GET
Access-Control-Expose-Headers: ETag
Access-Control-Max-Age: 3600
Access-Control-Allow-Credentials: true
Last-Modified: xxx
ETag: &quot;xxx&quot;
Accept-Ranges: bytes
Server: AmazonS3
Vary: Origin
Age: 9
X-Cache: Hit from cloudfront
Via: 1.1 xxxx.cloudfront.net (CloudFront)
X-Amz-Cf-Id: xxx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;S3と同じく&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Access-Control-Allow-Origin&lt;/code&gt;ヘッダが設定されていることを確認できました。めでたしめでたし。&lt;/p&gt;

&lt;h3 id=&quot;設定にあたっての注意事項&quot;&gt;設定にあたっての注意事項&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;不正な設定状態のままリクエストをすると、設定を変えたのにもかかわらず、CloudFrontにその不正な状態が残ったままになることがあるっぽい
    &lt;ul&gt;
      &lt;li&gt;その場合は &lt;a href=&quot;http://docs.aws.amazon.com/ja_jp/AmazonCloudFront/latest/DeveloperGuide/Invalidation.html&quot;&gt;Invalidation&lt;/a&gt;を行い、キャッシュをCloudFrontから消してみると解決するかも&lt;/li&gt;
      &lt;li&gt;Invalidation や設定変更反映はけっこう時間かかるので注意（試行錯誤のスピード落ちるのでもっと速くしてほしいところ…）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;del&gt;現時点ではCloudFrontは HTTP/2 未対応&lt;/del&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;del&gt;2017年くらいには対応してきそうな予感がある（あくまで個人的予想）&lt;/del&gt;&lt;/li&gt;
      &lt;li&gt;:new: 2016年９月にCloudFrontがHTTP/2に対応しました &lt;a href=&quot;https://aws.amazon.com/blogs/aws/new-http2-support-for-cloudfront/&quot;&gt;New – HTTP/2 Support for Amazon CloudFront | AWS Blog&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ブラウザからアクセスされるOriginヘッダは&lt;strong&gt;末尾スラッシュ無し&lt;/strong&gt;である点に注意&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/ja_jp/AmazonS3/latest/dev/cors.html&quot;&gt;Cross-Origin Resource Sharing (CORS) - Amazon Simple Storage Service&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.aws.amazon.com/ja_jp/AmazonCloudFront/latest/DeveloperGuide/header-caching.html#header-caching-web-cors&quot;&gt;リクエストヘッダーに基づいてオブジェクトをキャッシュするように CloudFront を設定する - Amazon CloudFront&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Toshimaru</name></author><category term="aws" /><category term="s3" /><summary type="html">（画像はAWS-CloudDesignPatternから引用）</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/cors/cache-distribution.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/cors/cache-distribution.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">AWS Summit Tokyo 2015で発表してきました</title><link href="https://blog.toshimaru.net/aws-summit-tokyo-2015/" rel="alternate" type="text/html" title="AWS Summit Tokyo 2015で発表してきました" /><published>2015-06-05T00:00:00+09:00</published><updated>2015-06-05T00:00:00+09:00</updated><id>https://blog.toshimaru.net/aws-summit-tokyo-2015</id><content type="html" xml:base="https://blog.toshimaru.net/aws-summit-tokyo-2015/">&lt;p&gt;&lt;a href=&quot;http://www.awssummit.tokyo/&quot;&gt;AWS Summit Tokyo 2015&lt;/a&gt;でGunosyのモバイルプッシュ通知基盤について発表してきました。下記が当日の発表スライドになります。&lt;/p&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;9d7bd2a0fda94826b67f162e2fd3bdbd&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/toshimaru/900mo-daunrodoapuri-gunosy-wozhi-eruda-gui-mo-mobairuputusiyutong-zhi-ji-pan-1&quot;&gt;900万ダウンロードアプリ『Gunosy』を支える大規模モバイルプッシュ通知基盤 // Speaker Deck&lt;/a&gt;&lt;sup id=&quot;fnref:longurl&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:longurl&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;発表を追えて&quot;&gt;発表を追えて&lt;/h2&gt;

&lt;p&gt;今回これほどの大舞台で30分以上（与えられた時間は40分）話すのは始めての機会でしたので、緊張しましたが悪いものではなく心地のよい緊張感でした。正直、私の発表の裏が&lt;a href=&quot;https://speakerdeck.com/mirakui/developer-productivity-in-cookpad&quot;&gt;Cookpadさんの発表&lt;/a&gt;だったのでそんなに人は集まらないのかなーと想定していましたが、嬉しい事に約70-80名くらいの方々に聴講していただけました。（圧倒的感謝！）&lt;/p&gt;

&lt;p&gt;40分という比較的長い枠でしたが時間にせかされることなくじっくり話せて大体35分強で発表を終えることができました。今回のように40分くらいの発表の場合、（スライドのスタイルにもよりますが）大体スライド枚数50~60枚程度が調度良いように感じました。あと、早く終わりすぎたり、時間オーバーしてしまうリスクを減らすためにも事前に最低一回発表を通しておいて時間をしっかり見積もっておくことは重要だと感じました。&lt;/p&gt;

&lt;p&gt;余談になりますが、当日のTwitterタイムラインを見てるとカメラの音・フラッシュがうるさいという声が多く出てました。私の発表でもそうしたのですが、事前に資料をWEBにアップロードして講演最初にWEBに既にアップロード済みな旨を伝えるとよいと思いました。&lt;/p&gt;

&lt;h2 id=&quot;スライド中の参考リンク&quot;&gt;スライド中の参考リンク&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://monstar-lab.com/column/140911_01&quot;&gt;【Android】GCMのregistrationIdの一意性 - Monstar Lab, Inc.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://dev.classmethod.jp/cloud/aws/sns-mobile-token/&quot;&gt;Amazon SNS のモバイルトークン管理についてのベストプラクティス ｜ Developers.IO&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.slideshare.net/conmame/sns-mobile-push&quot;&gt;気軽なSNS Mobile Push の話&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://qiita.com/ykf/items/4978a9ccf0dd1cc6a19b&quot;&gt;iOS8アップデートでアプリへのプッシュ通知でハマる点 - Qiita&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.slideshare.net/shimy_net/amazon-sns-mobile-push&quot;&gt;Amazon SNS Mobile Push を使ってみる&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.google.com/android/reference/com/google/android/gms/iid/InstanceID&quot;&gt;InstanceID - Google APIs for Android - Google Developers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;その他のリンク&quot;&gt;その他のリンク&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://dev.classmethod.jp/cloud/aws/awssummit-tokyo-2015-dev-05/&quot;&gt;[レポート][Dev-05:Mobile] 900万ダウンロードアプリ『Gunosy』を支える大規模モバイルプッシュ通知基盤 #AWSSummit ｜ Developers.IO&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/hashtag/AWSSummit?src=hash&quot;&gt;Tweets about #AWSSummit hashtag on Twitter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:longurl&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;speakerdeckのURLが非常に汚いですが公開した後に&lt;a href=&quot;http://sotarok.hatenablog.com/entry/2014/10/11/133123&quot;&gt;URLを制御できる&lt;/a&gt;ことを教えてもらいました。URLを変更して元URLが404になるのも不便かと思いますので、今回はこの汚いURLでお許しください。 &lt;a href=&quot;#fnref:longurl&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Toshimaru</name></author><category term="aws" /><category term="presentation" /><summary type="html">AWS Summit Tokyo 2015でGunosyのモバイルプッシュ通知基盤について発表してきました。下記が当日の発表スライドになります。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/aws_summit_tokyo_2015.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/aws_summit_tokyo_2015.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">GZip形式のS3上のファイルをRubyのIO.pipeでストリーム読み出し</title><link href="https://blog.toshimaru.net/ruby-pipe-s3/" rel="alternate" type="text/html" title="GZip形式のS3上のファイルをRubyのIO.pipeでストリーム読み出し" /><published>2015-01-04T00:00:00+09:00</published><updated>2015-01-04T00:00:00+09:00</updated><id>https://blog.toshimaru.net/ruby-pipe-s3</id><content type="html" xml:base="https://blog.toshimaru.net/ruby-pipe-s3/">&lt;h2 id=&quot;やりたいこと&quot;&gt;やりたいこと&lt;/h2&gt;

&lt;p&gt;S3からgzip形式のファイルをストリーミングダウンロードしてそれを読み出す。&lt;/p&gt;

&lt;h2 id=&quot;s3からのダウンロード&quot;&gt;S3からのダウンロード&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://docs.aws.amazon.com/AWSRubySDK/latest/AWS/S3/S3Object.html&quot;&gt;公式ドキュメント&lt;/a&gt;によるとこうする。&lt;/p&gt;

&lt;p&gt;If you want to stream an object from S3, you can pass a block to #read.&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;output&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;wb&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;large_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chunk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;gzipを読む&quot;&gt;gzipを読む&lt;/h2&gt;

&lt;p&gt;gzipの読み出しのサンプルコードはこんな感じ。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;hoge.gz&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Zlib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;GzipReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;close&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;via. &lt;a href=&quot;http://apidock.com/ruby/Zlib/GzipReader&quot;&gt;http://apidock.com/ruby/Zlib/GzipReader&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;pipeでつなぐ&quot;&gt;pipeでつなぐ&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IO.pipe&lt;/code&gt;を使ってつなぐとこう。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pipe&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;write_io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;write_io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;binmode&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;AWS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;S3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;S3Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chunk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;write_io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;write_io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;close&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;gz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Zlib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;GzipReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;gets&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# do something with line ...&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;注意点としては以下。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;gzip形式なので&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;write_io.binmode&lt;/code&gt;でバイナリモードにすること&lt;/li&gt;
  &lt;li&gt;Thread内で何かエラーが起こったときに&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gets&lt;/code&gt;が待ち状態で止まっちゃうので&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;close&lt;/code&gt;なりなんなり適切な処理をしてやること&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;参考&quot;&gt;参考&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/24016548/how-do-i-get-zlib-to-uncompress-from-s3-stream-in-ruby&quot;&gt;How do I get Zlib to uncompress from S3 stream in Ruby?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://takuya-1st.hatenablog.jp/entry/20120205/1328470521&quot;&gt;RubyはIO.pipeを使えば、パイプを作ることが出来る&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Toshimaru</name></author><category term="ruby" /><category term="aws" /><category term="s3" /><summary type="html">やりたいこと</summary></entry><entry><title type="html">Amazon OpsWorksでRailsアプリを簡単Chefプロビジョニング</title><link href="https://blog.toshimaru.net/opsworks-rails/" rel="alternate" type="text/html" title="Amazon OpsWorksでRailsアプリを簡単Chefプロビジョニング" /><published>2014-12-21T00:00:00+09:00</published><updated>2014-12-21T00:00:00+09:00</updated><id>https://blog.toshimaru.net/opsworks-rails</id><content type="html" xml:base="https://blog.toshimaru.net/opsworks-rails/">&lt;p&gt;本記事は&lt;a href=&quot;http://qiita.com/advent-calendar/2014/chef&quot;&gt;Chef Advent Calendar 2014&lt;/a&gt;の21日目の記事です。&lt;/p&gt;

&lt;h2 id=&quot;opsworksとは&quot;&gt;OpsWorksとは？&lt;/h2&gt;
&lt;p&gt;公式サイトの説明は下記です。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;設定管理サービスである AWS OpsWorks を使用すると、ユーザーは Chef を使用して、あらゆる種類およびサイズのアプリケーションを簡単に設定および運用できます。パッケージのインストール、ソフトウェア設定およびストレージなどのリソースを含む、各コンポーネントのアプリケーションのアーキテクチャおよび仕様を定義できます。&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://aws.amazon.com/jp/opsworks/&quot;&gt;AWS OpsWorks&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ポイントは以下の通り。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Chefでサーバーをプロビジョニング・デプロイできる&lt;/li&gt;
  &lt;li&gt;スタック ＞ レイヤー ＞ App という概念でシステムを構成&lt;/li&gt;
  &lt;li&gt;インスタンスをタイムベース or ロードベースでスケールアウトできる&lt;/li&gt;
  &lt;li&gt;OpsWorksで使われているレシピは&lt;a href=&quot;https://github.com/aws/opsworks-cookbooks&quot;&gt;Githubで公開&lt;/a&gt;されており実行コードが追える&lt;/li&gt;
  &lt;li&gt;OpsWorksの用意したレシピに加えて自らのCustom Chefレシピを追加することも可能&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/opsworks/stack.png&quot; alt=&quot;stack image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;【↑図】OpsWorksのStack &amp;amp; Layerの関係&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;料金&quot;&gt;料金&lt;/h2&gt;
&lt;p&gt;OpsWorksの使用自体にかかる料金は &lt;strong&gt;0円&lt;/strong&gt; です。OpsWorks上で使用したAWSリソースの料金（ロードバランサ、EC2インスタンス、RDS等）のみがかかってきます。&lt;/p&gt;

&lt;h2 id=&quot;railsをopsworksにデプロイしてみよう&quot;&gt;RailsをOpsWorksにデプロイしてみよう&lt;/h2&gt;
&lt;p&gt;OpsWorksはとくにRailsアプリケーションとの相性が良く、今回はRails4.2のアプリケーションをOpsWorksにデプロイしてみようと思います。&lt;/p&gt;

&lt;p&gt;今回デプロイするRailsアプリケーションのコードの最終形は下記になります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/toshimaru/opsworks-rails&quot;&gt;https://github.com/toshimaru/opsworks-rails&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;デプロイ手順&quot;&gt;デプロイ手順&lt;/h2&gt;

&lt;h3 id=&quot;スタックの追加&quot;&gt;スタックの追加&lt;/h3&gt;

&lt;p&gt;まずはAWS ConsoleからOpsWorksにいきAdd Stackしましょう。RegionとかVPCとかIAMとかは適宜設定してね。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/opsworks/add_stack.png&quot; alt=&quot;add stack&quot; /&gt;&lt;/p&gt;

&lt;p&gt;こんなのがStackのトップ画面。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/opsworks/top.png&quot; alt=&quot;stack top&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;レイヤーの定義&quot;&gt;レイヤーの定義&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/opsworks/layer.png&quot; alt=&quot;layer&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Layer TypeはRails App、Ruby versionは2.1、nginx+unicornを選択する&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/opsworks/add_layer.png&quot; alt=&quot;add layer&quot; /&gt;&lt;/p&gt;

&lt;p&gt;追加されました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/opsworks/layer_done.png&quot; alt=&quot;layer done&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;レシピ&quot;&gt;レシピ&lt;/h3&gt;

&lt;p&gt;RecipesでOpsWorksにどんなレシピが設定されているかがわかります。レシピ名がGithubへのリンクになっており、どんなレシピが書かれているかを確認できます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/opsworks/recipes.png&quot; alt=&quot;recipes&quot; /&gt;&lt;/p&gt;

&lt;p&gt;今回はこのままでOK.&lt;/p&gt;

&lt;h3 id=&quot;インスタンスの追加&quot;&gt;インスタンスの追加&lt;/h3&gt;

&lt;p&gt;では次にAppインスタンスを追加。t1.microインスタンスで。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/opsworks/add_instance.png&quot; alt=&quot;add instance&quot; /&gt;&lt;/p&gt;

&lt;p&gt;AddInstanceするとステータスがStoppedなのでstartで起動します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/opsworks/instance_stopped.png&quot; alt=&quot;instance stop&quot; /&gt;&lt;/p&gt;

&lt;p&gt;10分くらいでセットアップが完了します。Statusがonlineでグリーンになれば準備OK.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/opsworks/instance_online.png&quot; alt=&quot;online&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;appの設定&quot;&gt;Appの設定&lt;/h3&gt;

&lt;p&gt;次にデプロイするAppの設定を追加していきます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/opsworks/apps.png&quot; alt=&quot;setting app&quot; /&gt;&lt;/p&gt;

&lt;p&gt;こんな感じでAppを設定。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Type: Ruby on Rails&lt;/li&gt;
  &lt;li&gt;DataSource: 今回は特にないのでNone&lt;/li&gt;
  &lt;li&gt;Applicationソース: GithubからデプロイしたいGithubのレポジトリURLを指定&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/opsworks/add_apps.png&quot; alt=&quot;add app&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SECRET_KEY_BASE&lt;/code&gt;(Rails4.2の&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;secrets.yml&lt;/code&gt;で必要になる)もあわせてセットしましょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/opsworks/add_envvar.png&quot; alt=&quot;env var&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Deployments で Deploy Appしてみよう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/opsworks/deploy_app.png&quot; alt=&quot;deploy app&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Appは先ほど設定したApp、CommandはDeployを指定してDeploy App!（マイグレーションが必要であればここでMigration ON）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/opsworks/deploy_app2.png&quot; alt=&quot;deploy app 2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;SuccessすればOK.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/opsworks/deploy_app3.png&quot; alt=&quot;deploy finished&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;幾つかのハマりポイント&quot;&gt;幾つかのハマりポイント&lt;/h2&gt;

&lt;h3 id=&quot;gemfile&quot;&gt;Gemfile&lt;/h3&gt;

&lt;p&gt;下記のGemが必要になるのでコメントアウトされていることを確認すること。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem &apos;therubyracer&apos;, platforms: :ruby
gem &apos;unicorn&apos;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;databaseyml&quot;&gt;database.yml&lt;/h3&gt;

&lt;p&gt;RDSを設定していれば自動的に設定されるのですが、今回の場合設定していないので別途手で&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;database.yml&lt;/code&gt;を作りました。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@rails-app1 current]# cat config/database.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;&amp;amp;default&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;adapter&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sqlite3&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;pool&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5000&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;production&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;*default&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;db/production.sqlite3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;cssが適応されていない問題&quot;&gt;CSSが適応されていない問題&lt;/h3&gt;

&lt;p&gt;「アレ、なんかCSSが効いていないっぽい！？」&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/opsworks/before_css.png&quot; alt=&quot;css&quot; /&gt;&lt;/p&gt;

&lt;p&gt;これは&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;asset:precompile&lt;/code&gt;が走っていないため。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;rake asset:precompile というタスクを実行する必要がありますが、OpsWorksのRailsアプリケーションのデフォルトのデプロイ処理ではこのタスクを実行してくれません。&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://interu.hatenablog.com/entry/2013/08/01/214258&quot;&gt;OpsWorksでRailsをデプロイする際にasset:precompileを実施する方法&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;下記を&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;deploy/before_migrate.rb&lt;/code&gt;に設定する。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Chef&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Running deploy/before_migrate.rb&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:deploy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:rails_opsworks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:rails_env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;current_release&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;release_path&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;rake assets:precompile&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cwd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_release&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bundle exec rake assets:precompile&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;RAILS_ENV&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これでデプロイ。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/opsworks/after_css.png&quot; alt=&quot;css 2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;OK.&lt;/p&gt;

&lt;h3 id=&quot;デプロイディレクトリ&quot;&gt;デプロイ・ディレクトリ&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/srv/www/rails_opsworks/current&lt;/code&gt;に最新の状態がデプロイされます。&lt;/p&gt;

&lt;h3 id=&quot;ログディレクトリ&quot;&gt;ログ・ディレクトリ&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/var/lib/aws/opsworks/chef&lt;/code&gt; Chefのログ、OpsWorksの設定JSONが格納されています。&lt;/p&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;さてOpsWorksでのデプロイ手順を紹介してきましたが一体何が嬉しいのでしょうか。個人的なメリットは以下です。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;インスタンスが Disposable（廃棄可能）・Reproducible（再現可能） である
    &lt;ul&gt;
      &lt;li&gt;いわゆる immutable infrastructure&lt;/li&gt;
      &lt;li&gt;= サーバーをいつでも潰して全く同じ環境を再現できる！&lt;/li&gt;
      &lt;li&gt;「サーバーを増やしたい！」 → Add Instanceをポチるだけ&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/capistrano/capistrano&quot;&gt;Capistrano&lt;/a&gt;などのデプロイツールのコードをゴチャゴチャ書く必要がなく、デプロイタスクはOpsWorks &amp;amp; Chefに一任できる&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;さいごに&quot;&gt;さいごに&lt;/h2&gt;

&lt;p&gt;Chef Advent CalendarといいながらChefよりもOpsWorks中心の内容になってしまいましたが、冒頭に書いたようにOpsWorksの用意しているレシピに加えて自らのCustom Chefレシピを定義することが可能です。現実的な運用を考えるとOpsWorksのレシピだけでプロビジョニング・デプロイレシピを完結させることは難しいと思うので、&lt;strong&gt;OpsWorksレシピ+Custom Chefレシピ&lt;/strong&gt; の２つを組み合わせて運用していくのが現実的かと思います。&lt;/p&gt;

&lt;h2 id=&quot;link-参考&quot;&gt;:link: 参考&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://ruby.awsblog.com/post/Tx7FQMT084INCR/Deploying-Ruby-on-Rails-Applications-to-AWS-OpsWorks&quot;&gt;Deploying Ruby on Rails Applications to AWS OpsWorks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Toshimaru</name></author><category term="chef" /><category term="opsworks" /><category term="rails" /><category term="aws" /><summary type="html">本記事はChef Advent Calendar 2014の21日目の記事です。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/opsworks/eyecatch.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/opsworks/eyecatch.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">WindowsコマンドでAmazon S3上にバックアップする</title><link href="https://blog.toshimaru.net/windows-s3-sync/" rel="alternate" type="text/html" title="WindowsコマンドでAmazon S3上にバックアップする" /><published>2013-04-19T00:00:00+09:00</published><updated>2013-04-19T00:00:00+09:00</updated><id>https://blog.toshimaru.net/windows-s3-sync</id><content type="html" xml:base="https://blog.toshimaru.net/windows-s3-sync/">&lt;p&gt;Windows PCを処分するにあたり、音楽、写真、動画などのデータ郡をamazon S3に置き管理することにしました。S3のGUIツールはコレといった定番がないようで（あったら教えてください）、挙動にもやや不安が残る感じでした。よって今回はコマンドラインツールを使ってローカルとS3をsync、同期することにしました。&lt;/p&gt;

&lt;p&gt;使ったツールは&lt;a href=&quot;http://www.dragondisk.com/&quot;&gt;Dragon Disk&lt;/a&gt;。トップにパッケージの写真があってやや有料の匂いがするが、無料なのでご安心を。&lt;/p&gt;

&lt;h2 id=&quot;手順&quot;&gt;手順&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.dragondisk.com/download-amazon-s3-client-google-cloud-storage-client.html&quot;&gt;ダウンロードページ&lt;/a&gt;からコマンドラインツールをダウンロード&lt;/li&gt;
  &lt;li&gt;展開してその中に&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dgsync.bat&lt;/code&gt;ファイルを作成し、下記のようなバッチファイルを作成してください。
&lt;script src=&quot;https://gist.github.com/toshimaru/5415149.js&quot;&gt;&lt;/script&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DGTOOLS_ACCESS_KEY&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DGTOOLS_SECRET_KEY&lt;/code&gt;を適宜編集。&lt;/li&gt;
      &lt;li&gt;ファイルの削除も同期をとりたい場合は&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--dont-delete&lt;/code&gt;オプションを外してください。&lt;/li&gt;
      &lt;li&gt;S3上のフォルダはあらかじめ作成しておく。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;２で作成したバッチを実行する。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以上です。amazon S3を使って安全、安価にデータを保管しましょう！&lt;/p&gt;

&lt;h3 id=&quot;追記&quot;&gt;追記&lt;/h3&gt;

&lt;p&gt;S3のヘビーな利用はそんなに「安価」って程ではない…(´・ω・｀)&lt;/p&gt;

&lt;h3 id=&quot;参考&quot;&gt;参考&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://www.tdn.co.jp/techblog/201206/52/&quot;&gt;Amazon S3のクライアント「DragonDisk」に付属の「dgsync」が便利な件&lt;/a&gt;&lt;/p&gt;</content><author><name>Toshimaru</name></author><category term="aws" /><category term="s3" /><summary type="html">Windows PCを処分するにあたり、音楽、写真、動画などのデータ郡をamazon S3に置き管理することにしました。S3のGUIツールはコレといった定番がないようで（あったら教えてください）、挙動にもやや不安が残る感じでした。よって今回はコマンドラインツールを使ってローカルとS3をsync、同期することにしました。</summary></entry></feed>