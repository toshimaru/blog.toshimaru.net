<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://blog.toshimaru.net/feed/by_tag/aws.xml" rel="self" type="application/atom+xml" /><link href="https://blog.toshimaru.net/" rel="alternate" type="text/html" /><updated>2024-02-06T13:03:33+09:00</updated><id>https://blog.toshimaru.net/feed/by_tag/aws.xml</id><title type="html">Hack Your Design!</title><subtitle>toshimaruの技術系なブログ</subtitle><author><name>Toshimaru</name></author><entry><title type="html">Roppongi.rb#2で「Infrastructure as (Ruby) Code の現状確認」を発表しました</title><link href="https://blog.toshimaru.net/infrastructure-as-ruby-code-2016/" rel="alternate" type="text/html" title="Roppongi.rb#2で「Infrastructure as (Ruby) Code の現状確認」を発表しました" /><published>2016-11-06T00:00:00+09:00</published><updated>2016-11-06T00:00:00+09:00</updated><id>https://blog.toshimaru.net/infrastructure-as-ruby-code-2016</id><content type="html" xml:base="https://blog.toshimaru.net/infrastructure-as-ruby-code-2016/"><![CDATA[<p>第二回Roppongi.rbを<a href="http://roppongirb.connpass.com/event/42633/">「Infrastructure x Ruby」というテーマで開催</a>した。</p>

<p>僕はその中で「Infrastructure as (Ruby) Code の現状確認」という内容でオープニングLTとして発表したので、その内容をブログにもまとめておく（前回発表分の発表内容まとめはこちら: <a href="http://blog.toshimaru.net/roppongirb-speeding-up-rails/">Roppongi.rbで「Rails高速化戦略」を発表しました</a>）。</p>

<script async="" class="speakerdeck-embed" data-id="786983b0a1f94d1ca1250aa48ce94ed0" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>

<h2 id="目的">目的</h2>

<p>発表の目的としては世に言われる <strong>Infrastructure as Code</strong> の認識・理解を参加者であわせること。</p>

<h2 id="infrastructure-as-codeの意義">Infrastructure as Codeの意義</h2>

<p>大きく３つあると思っている。</p>

<ol>
  <li>インフラ構築手順を秘伝のタレ化させない</li>
  <li>手順をコードに落としてインフラへの変更をトラッキングする</li>
  <li>手順を不変（immutable）にする</li>
</ol>

<h3 id="秘伝のタレ">秘伝のタレ</h3>

<p>秘伝のタレ。一体どういう意味だろうか。まるで秘伝のタレのように継ぎ足し継ぎ足し変更が入り代々受け継がれてきたサーバーを形容する表現が <strong>秘伝のタレ</strong> だ。</p>

<p>秘伝のタレが代々受け継がれている環境なんかでは、メンテナンスされているかどうかまるでわからない「サーバー構築手順書.xls」なんてモノがあったりする。そしてそれは大体において手順書通りにはうまくいかないのが常だ。</p>

<p>インフラ担当者のアタマにしか入っていない隠し味なんかがあったりするとオワタ状態＼(^o^)／。その担当者が退職したりすると誰も現プロダクション環境は再現できません、という状況が出来上がる。</p>

<h3 id="コード化するということ">コード化するということ</h3>

<p>秘伝のタレ化を防ぐために、コード化という行為を行う。ではコード化されることで良い事とはなんだろうか。</p>

<ul>
  <li>コード化される</li>
  <li>➜ Gitでトラック可能になる</li>
  <li>➜ Githubでプルリク可能になる</li>
  <li>➜ Githubでレビュー可能になる</li>
  <li>➜ :blush: = HAPPY!</li>
</ul>

<p>このようにコード化されることでソフトウェア開発のグッドプラクティスであるGithub Workflowに乗ることができる。:surfer:</p>

<h2 id="immutable-infrastructure">Immutable Infrastructure</h2>

<p>次に手順を不変（Immutable）にするということについて。Immutableという言葉はインフラ的文脈ではImmutable Infrastructureという言葉が有名かと思う。</p>

<p>Immutable Infrastructureについては、<a href="http://rebuild.fm/25/">rebuild.fmでnaoyaさんやmizzyさんがmiyagawaさんと話して</a>いたり、<a href="https://speakerdeck.com/naoya/immutable-infrastructure-number-jawsdays">naoyaさんが発表していたり</a>したあたりを契機に日本でも浸透した言葉だと思っている。</p>

<p>出自はというとChad Fowler氏が書いた下記の記事。</p>

<p><a href="http://chadfowler.com/2013/06/23/immutable-deployments.html">Trash Your Servers and Burn Your Code: Immutable Infrastructure and Disposable Components</a></p>

<h3 id="immutable-infrastructure-のキーワード">Immutable Infrastructure のキーワード</h3>

<p>Immutable Infrastructureを僕なりに解釈すると、その言葉の本質は下記のキーワードで表せると思う。</p>

<ul>
  <li>Immutable （不変）</li>
  <li>Disposable（使い捨て）</li>
  <li>Reproducible （再現可能）</li>
  <li>Idempotence（冪等性）</li>
</ul>

<p>Immutable Infrastructureが登場した背景にはAWS, GCPを始めとするIaaSの登場が大きいと思っている。どういうことかというとIaaSでボタン１つでサーバーを上げて必要なくなったら捨てるダイナミックなサーバー、つまり <strong>Disposable</strong> なサーバーが誕生したということが背景の１つにある。</p>

<p>そして、オートスケーリングの恩恵を享受するためにはサーバー・プロビジョニング自動化作業が必要となる。スケール前提のサーバー群はいつ何時でも既存のサーバーと同じ状態のサーバーが立ち上がる必要がある<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>。つまり、構築手順を <strong>Immutable</strong> にし <strong>Reproducible</strong> なサーバー環境にする(= <strong>Idempotence</strong> を担保する)ことが必要。</p>

<h2 id="構成管理ツールの歴史">構成管理ツールの歴史</h2>

<p>メジャーなプロビジョニングツール(構成管理ツール)の歴史を追ってみる。</p>

<ul>
  <li>2005年 <a href="https://docs.puppet.com/puppet/">Puppet</a></li>
  <li>2009年 <a href="https://www.chef.io/chef/">Chef</a></li>
  <li>2012年 <a href="https://www.ansible.com">Ansible</a></li>
  <li>2014年 <a href="https://www.terraform.io">Terraform</a>, <a href="https://github.com/itamae-kitchen/itamae">Itamae</a></li>
</ul>

<h2 id="実装言語別分類">実装言語別分類</h2>

<p>実装言語別に分類してみる。</p>

<table>
  <thead>
    <tr>
      <th>Ruby実装</th>
      <th>Go実装</th>
      <th>Python実装</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Puppet, Chef, Itamae, Serverkit</td>
      <td>Terraform</td>
      <td>Ansible</td>
    </tr>
  </tbody>
</table>

<h2 id="表現別分類">表現別分類</h2>

<p>インフラストラクチャをどうコードで表現しているかの表現体形で分類してみる。</p>

<table>
  <thead>
    <tr>
      <th>RubyによるDSL</th>
      <th>HCLによるDSL</th>
      <th>YAML</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Puppet, Chef, Itamae</td>
      <td>Terraform</td>
      <td>Ansible, Serverkit</td>
    </tr>
  </tbody>
</table>

<h3 id="why-yaml">Why YAML?</h3>

<p>なぜYAMLで表現するのか？ まずはXML/JSONより記述がラクという点がある。そしてYAMLは人間にとってよみやすい、かきやすい、わかりやすいという特徴がある。そしてRailsの設定ファイルなどで一般的に使われている記述フォーマットなので、学習コストが低いという点が利点である。</p>

<h3 id="why-hcl">Why HCL?</h3>

<p><a href="https://github.com/hashicorp/hcl">HCL</a> とは HashiCorp configuration language の略。HCLの<a href="https://github.com/hashicorp/hcl#why">READMEではHLCについてこう説明</a>されている。</p>

<ul>
  <li>:x: JSONダメ。なぜならコメントかけない。しんどい。</li>
  <li>:x: YAMLもダメ。なぜなら初心者には記法むずかしい！</li>
  <li>:x: Rubyとかもダメ。なぜなら自由度高すぎぃ！複雑すぎぃ！</li>
  <li>:o: よろしい、ならば独自言語だ。ということで生まれたのが <strong>HCL</strong></li>
</ul>

<h3 id="why-ruby">Why Ruby?</h3>

<p>なぜRubyを採用するか？ まずはDSLが書きやすいという点。そしてRSpecなどのRuby DSLに代表されるようにRuby DSLは宣言的な記述が可能である。宣言的ということはコードを読んだだけでそのコードの意図が伝わりやすいということだ。そしてDSLといってもRubyはRuby。RubyなのでRubyでできることは何でもできちゃうので、自由度が高い（これは悪い意味に作用することもあってやりすぎるとChefのレシピそのものが秘伝のタレ化する可能性があるので注意）。</p>

<h2 id="infrastructure-as-code-の概念整理">Infrastructure as Code の概念整理</h2>

<p>Infrastructure as Code の概念を整理してみたい。<a href="http://mizzy.org/blog/2013/10/29/1/">mizzyさんのブログでは</a>、プロビジョニングのレイヤーを下記のように分けるような考え方が紹介されていた。</p>

<p><img src="/images/posts/roppongirb2/provisioning-tools.png" alt="provisioning layers" /></p>

<h2 id="シンプルなプロビジョニングレイヤーの考え方">シンプルなプロビジョニング・レイヤーの考え方</h2>

<p>オーケストレーションなどというと抽象的なのとInfrastructure as Codeのスコープが広くなってしまうと思うので、シンプルにこんな風に考えてみるのはどうだろうか。</p>

<p><img src="/images/posts/roppongirb2/infra-as-code-layers.png" alt="infra-as-code-layers" /></p>

<p>上記の考え方で先の構成管理ツールを分類するとこんな感じだ。</p>

<p><img src="/images/posts/roppongirb2/provisioning-categorize.png" alt="provisioning categorize" /></p>

<p>しかしこれで本当に全てはコード化されるか、というとそうではない。サーバーのプロビジョニングでコード化されるのはAWSサービス群のほんの一部、EC2のみだ。</p>

<p><img src="/images/posts/roppongirb2/aws-services.png" alt="AWS services" /></p>

<h2 id="infrastructure-as-code-のカバー範囲">Infrastructure as Code のカバー範囲</h2>

<p>IaaSは仮想サーバ以外にもさまざまなサービスを提供している。AWSの例でいうと、ELB, RDS, VPC, S3, CloudFront, IAM, SecurityGroup などなど。</p>

<p>それらに対するオペレーションをAWS Management ConsoleなどのGUIでやるべきだろうか？</p>

<h3 id="gui-configuration-is-hard">GUI Configuration is hard…</h3>

<p>さきほどのImmutable Infrastructureの文脈でいうと、GUIによる操作はImmutableではない。なぜならGUIは変わるかもしれないし、GUI操作は明確な言語化できないほどにファジーだからだ。では重要な設定をそのGUI任せにしていいのだろうか？</p>

<p>Route53やSecurityGroupなどオペレーションミスで一歩間違うと大障害になりかねない。これらのGUIの設定をimmutableにはできないだろうか。じゃあimmutableなインターフェースであるAPIを叩けばいいじゃない。というところで、<strong>Configuration as Code</strong> という言葉が出て来る。</p>

<p>この考え方を使えばInfrastructure as Codeの概念をさらに良い感じに敷衍できるのではないかと僕は考えた。</p>

<p><img src="/images/posts/roppongirb2/configuratino-as-code.png" alt="Configuration as Code*" /></p>

<p>こう考えるとIaaSの各種サービス群もコード化の対象として捉えることができる。</p>

<h2 id="全てがコードになる例">全てがコードになる例</h2>

<h3 id="route53-configuration">Route53 Configuration</h3>

<p>Route53のコード化例。こんな感じにRuby DSLになる</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">hosted_zone</span> <span class="s2">"example.com."</span> <span class="k">do</span>
  <span class="n">rrset</span> <span class="s2">"example.com."</span><span class="p">,</span> <span class="s2">"A"</span> <span class="k">do</span>
    <span class="n">ttl</span> <span class="mi">300</span>
    <span class="n">resource_records</span><span class="p">(</span>
      <span class="s2">"127.0.0.1"</span><span class="p">,</span>
      <span class="s2">"127.0.0.2"</span>
    <span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>powered by <a href="https://github.com/winebarrel/roadworker">roadworker</a></p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">resource</span> <span class="s">"aws_route53_record"</span> <span class="s">"www"</span> <span class="p">{</span>
 <span class="n">zone_id</span> <span class="o">=</span> <span class="s">"${aws_route53_zone.primary.zone_id}"</span>
 <span class="n">name</span> <span class="o">=</span> <span class="s">"www.example.com"</span>
 <span class="k">type</span> <span class="o">=</span> <span class="s">"A"</span>
 <span class="n">ttl</span> <span class="o">=</span> <span class="s">"300"</span>
 <span class="n">records</span> <span class="o">=</span> <span class="p">[</span><span class="s">"${aws_eip.lb.public_ip}"</span><span class="p">]</span>
<span class="p">}</span>
</code></pre></div></div>

<p>powered by <a href="https://www.terraform.io/docs/providers/aws/r/route.html">AWS: aws_route - Terraform by HashiCorp</a></p>

<h3 id="cloudwatch-alarm">CloudWatch Alarm</h3>

<p>CloudWatchのAlarmだってDSLになる。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">alarm</span> <span class="s2">"alarm1"</span> <span class="k">do</span>
  <span class="n">namespace</span> <span class="s2">"AWS/EC2"</span>
  <span class="n">metric_name</span> <span class="s2">"CPUUtilization"</span>
  <span class="n">dimensions</span> <span class="s2">"InstanceId"</span><span class="o">=&gt;</span><span class="s2">"i-XXXXXXXX"</span>
  <span class="n">period</span> <span class="mi">300</span>
  <span class="n">statistic</span> <span class="ss">:average</span>
  <span class="n">threshold</span> <span class="s2">"&gt;="</span><span class="p">,</span> <span class="mf">50.0</span>
  <span class="n">evaluation_periods</span> <span class="mi">1</span>
  <span class="n">actions_enabled</span> <span class="kp">true</span>
  <span class="n">alarm_actions</span> <span class="p">[]</span>
  <span class="n">ok_actions</span> <span class="p">[]</span>
  <span class="n">insufficient_data_actions</span> <span class="p">[</span><span class="s2">"arn:aws:sns:us-east-1:123456789012:my_topic"</span><span class="p">]</span>
<span class="k">end</span>
</code></pre></div></div>

<p>powered by <a href="https://github.com/winebarrel/radiosonde">radiosonde</a></p>

<h3 id="datadog-alert-configuration">Datadog Alert Configuration</h3>

<p>さらにコード化される対象はIaaSだけではない。Datadogという監視のアラート設定もコード化される。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">monitor</span> <span class="s2">"Check load avg"</span><span class="p">,</span> <span class="ss">:type</span><span class="o">=&gt;</span><span class="s2">"metric alert"</span> <span class="k">do</span>
  <span class="n">query</span> <span class="s2">"avg(last_5m):avg:ddstat.load_avg.1m{host:i-XXXXXXXX} &gt; 1"</span>
  <span class="n">message</span> <span class="s2">"@winebarrel@example.net"</span>
  <span class="n">options</span> <span class="k">do</span>
    <span class="n">locked</span> <span class="kp">false</span>
    <span class="n">new_host_delay</span> <span class="mi">300</span>
    <span class="n">notify_no_data</span> <span class="kp">true</span>
    <span class="n">no_data_timeframe</span> <span class="mi">2</span>
    <span class="n">notify_audit</span> <span class="kp">true</span>
    <span class="n">silenced</span><span class="p">({})</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>powered by <a href="https://github.com/winebarrel/barkdog">barkdog</a></p>

<h3 id="github-member-management">Github Member Management</h3>

<p>Githubのメンバー管理だってTerraformでできちゃうんだぜ。</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">resource</span> <span class="s">"github_membership"</span> <span class="s">"membership_for_some_user"</span> <span class="p">{</span>
    <span class="n">username</span> <span class="o">=</span> <span class="s">"SomeUser"</span>
    <span class="n">role</span> <span class="o">=</span> <span class="s">"member"</span>
<span class="p">}</span>

<span class="n">resource</span> <span class="s">"github_repository"</span> <span class="s">"example"</span> <span class="p">{</span>
  <span class="n">name</span>        <span class="o">=</span> <span class="s">"example"</span>
  <span class="n">description</span> <span class="o">=</span> <span class="s">"My awesome codebase"</span>

  <span class="n">private</span> <span class="o">=</span> <span class="no">true</span>
<span class="p">}</span>

<span class="n">resource</span> <span class="s">"github_repository_collaborator"</span> <span class="s">"a_repo_collaborator"</span> <span class="p">{</span>
    <span class="n">repository</span> <span class="o">=</span> <span class="s">"our-cool-repo"</span>
    <span class="n">username</span> <span class="o">=</span> <span class="s">"SomeUser"</span>
    <span class="n">permission</span> <span class="o">=</span> <span class="s">"admin"</span>
<span class="p">}</span>
</code></pre></div></div>

<p>powered by <a href="https://www.terraform.io/docs/providers/github/">Provider: GitHub - Terraform by HashiCorp</a></p>

<h2 id="全てがプルリクになる">全てがプルリクになる</h2>

<p>冒頭に述べたように、コード化されるということはGithubに乗せてプルリクエストを出せるということだ。</p>

<p><img src="/images/posts/roppongirb2/pull-request.png" alt="Pull Request" /></p>

<p>こんなふうにプルリクになっているとレビューも簡単。</p>

<h2 id="コード化するメリット">コード化するメリット</h2>

<ul>
  <li>レビューによるチェック体制により、より安全なConfigurationオペレーションを実現できる</li>
  <li>CIサービスと連携させてテスト・CDの自動化も可能となる</li>
</ul>

<h2 id="まとめ">まとめ</h2>

<ul>
  <li>コード化することによりGithubワークフロー（プルリク→レビュー→マージ）に乗ることができてハッピー :smile:</li>
  <li>Infrastructure as Code = Server Configuration as Code + Service Configuration as Code ➜ サーバーだけではなく、サービスそれ自体もコード化されていく。</li>
</ul>

<h2 id="感想">感想</h2>

<ul>
  <li>今回の発表はKeynoteでスライド作ったけど、Keynoteはレイアウトとかテーマの設定が自由にできてDecksetよりはデザイン凝ろうと思ったときに便利。</li>
</ul>

<h2 id="参考">参考</h2>

<ul>
  <li><a href="https://speakerdeck.com/ryotarai/itamae-infra-as-code-xian-zhuang-que-ren-hui">Itamae - Infra as Code 現状確認会</a></li>
  <li><a href="http://rebuild.fm/25/">Rebuild: 25: Immutable Infrastructure</a></li>
  <li><a href="https://speakerdeck.com/naoya/infrastructure-as-code">Infrastructure as Code // Speaker Deck</a></li>
  <li><a href="http://mizzy.org/blog/2016/04/22/1/">Infrastructure as Code 再考</a></li>
  <li><a href="http://chadfowler.com/2013/06/23/immutable-deployments.html">Trash Your Servers and Burn Your Code: Immutable Infrastructure and Disposable Components</a></li>
  <li><a href="http://martinfowler.com/bliki/InfrastructureAsCode.html">InfrastructureAsCode</a></li>
</ul>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>特定のサーバーにデータに依存してしまわないように、データ的にはステートレスなサーバー構成が前提となる <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Toshimaru</name></author><category term="ruby" /><category term="roppongirb" /><category term="aws" /><category term="presentation" /><summary type="html"><![CDATA[第二回Roppongi.rbを「Infrastructure x Ruby」というテーマで開催した。 僕はその中で「Infrastructure as (Ruby) Code の現状確認」という内容で発表したので、その内容をブログにもまとめておく。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/roppongirb2/og.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/roppongirb2/og.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">AWS S3 + CloudFront のCORS設定手順</title><link href="https://blog.toshimaru.net/s3-cloudfront-cors-setting/" rel="alternate" type="text/html" title="AWS S3 + CloudFront のCORS設定手順" /><published>2016-08-22T00:00:00+09:00</published><updated>2016-08-22T00:00:00+09:00</updated><id>https://blog.toshimaru.net/s3-cloudfront-cors-setting</id><content type="html" xml:base="https://blog.toshimaru.net/s3-cloudfront-cors-setting/"><![CDATA[<p>（画像は<a href="http://aws.clouddesignpattern.org/index.php/CDP:Cache_Distribution%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3">AWS-CloudDesignPattern</a>から引用）</p>

<h2 id="フォントファイルの豆腐化問題">フォントファイルの豆腐化問題</h2>

<p><a href="http://fontawesome.io/">Font Awesome</a>のようなフォントファイルを外部ホスト（例えばS3など）から読み込もうとする場合、<code class="language-plaintext highlighter-rouge">Access-Control-Allow-Origin</code>のヘッダでAllowされていないOriginからのリクエストの場合、いわゆるフォントの豆腐現象が起きます。これは<a href="https://developer.mozilla.org/ja/docs/Web/HTTP/HTTP_access_control">CORS(Cross-Origin Resource Sharing)</a>
の設定が正しくなされていないためです。今回はAWSのS3+CloudFrontの構成でフォントファイルを配信したいので、S3およびCloudFrontのCORS設定手順および確認方法について説明します。</p>

<h2 id="s3の設定">S3の設定</h2>

<p>CORSの設定はS3のバケットのプロパティ設定から行えます。</p>

<p><img src="/images/posts/cors/s3.png" alt="s3 bucket property" /></p>

<p>XMLをサンプルとして下記のように設定できます。</p>

<h3 id="cors-configuration">CORS Configuration</h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="nt">&lt;CORSConfiguration</span> <span class="na">xmlns=</span><span class="s">"http://s3.amazonaws.com/doc/2006-03-01/"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;CORSRule&gt;</span>
        <span class="nt">&lt;AllowedOrigin&gt;</span>http://sample.jp<span class="nt">&lt;/AllowedOrigin&gt;</span>
        <span class="nt">&lt;AllowedOrigin&gt;</span>https://sample.jp<span class="nt">&lt;/AllowedOrigin&gt;</span>
        <span class="nt">&lt;AllowedMethod&gt;</span>HEAD<span class="nt">&lt;/AllowedMethod&gt;</span>
        <span class="nt">&lt;AllowedMethod&gt;</span>GET<span class="nt">&lt;/AllowedMethod&gt;</span>
        <span class="nt">&lt;MaxAgeSeconds&gt;</span>3600<span class="nt">&lt;/MaxAgeSeconds&gt;</span>
        <span class="nt">&lt;ExposeHeader&gt;</span>ETag<span class="nt">&lt;/ExposeHeader&gt;</span>
        <span class="nt">&lt;AllowedHeader&gt;</span>*<span class="nt">&lt;/AllowedHeader&gt;</span>
    <span class="nt">&lt;/CORSRule&gt;</span>
<span class="nt">&lt;/CORSConfiguration&gt;</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">AllowedOrigin</code>で許可したいOriginのURLを設定、<code class="language-plaintext highlighter-rouge">AllowedMethod</code>で許可したいHTTPリクエストメソッドを指定します。それぞれ複数並べることで複数の値を設定することが可能となっています。</p>

<h3 id="確認手順">確認手順</h3>

<p>正しく設定されているかを確認するために下記のように<code class="language-plaintext highlighter-rouge">curl</code>コマンドを使って検証してみましょう。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ curl -X GET -I -H "Origin: http://sample.jp" https://s3-ap-northeast-1.amazonaws.com/bucket/path
HTTP/1.1 200 OK
x-amz-id-2: xxx
x-amz-request-id: xxx
Date: xxx
Access-Control-Allow-Origin: http://sample.jp
Access-Control-Allow-Methods: GET
Access-Control-Expose-Headers: ETag
Access-Control-Max-Age: 3600
Access-Control-Allow-Credentials: true
Vary: Origin, Access-Control-Request-Headers, Access-Control-Request-Method
Last-Modified: xxx
ETag: "xxx"
Accept-Ranges: bytes
Content-Type: application/json
Content-Length: 14356
Server: AmazonS3
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">Access-Control-Allow-Origin: http://sample.jp</code> のレスポンスがヘッダが返ってきており、正しく AllowOrigin されていることが確認できました。</p>

<h2 id="cloudfront">CloudFront</h2>

<p>実運用の際はS3から配信ではなく、CloudFrontと組み合わせて利用するケースが多いかと思います。</p>

<p><a href="http://docs.aws.amazon.com/ja_jp/AmazonCloudFront/latest/DeveloperGuide/MigrateS3ToCloudFront.html">Amazon S3 での CloudFront  の設定</a>が済んでいることを前提として進めていいきます。</p>

<h3 id="cloudfrontの-cors-設定">CloudFrontの CORS 設定</h3>

<p>CORSの設定のためには、対象クラウドフロント設定から Behaviors を選択しデフォルトパスパターンの設定を変更する必要があります。OriginヘッダーがS3まで通る必要があるので<code class="language-plaintext highlighter-rouge">Origin</code>ヘッダーを Whitelist Headers に加えてやります。</p>

<p><img src="/images/posts/cors/cloudfront.png" alt="" /></p>

<h3 id="確認手順-1">確認手順</h3>

<p>S3と同じく、<code class="language-plaintext highlighter-rouge">curl</code>で確認してみます。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ curl -X GET -I -H "Origin: http://sample.jp"  https://xxx.cloudfront.net/bucket/path
HTTP/1.1 200 OK
Content-Type: binary/octet-stream
Content-Length: 123
Connection: keep-alive
Date: xxx
Access-Control-Allow-Origin: http://sample.jp
Access-Control-Allow-Methods: GET
Access-Control-Expose-Headers: ETag
Access-Control-Max-Age: 3600
Access-Control-Allow-Credentials: true
Last-Modified: xxx
ETag: "xxx"
Accept-Ranges: bytes
Server: AmazonS3
Vary: Origin
Age: 9
X-Cache: Hit from cloudfront
Via: 1.1 xxxx.cloudfront.net (CloudFront)
X-Amz-Cf-Id: xxx
</code></pre></div></div>

<p>S3と同じく<code class="language-plaintext highlighter-rouge">Access-Control-Allow-Origin</code>ヘッダが設定されていることを確認できました。めでたしめでたし。</p>

<h3 id="設定にあたっての注意事項">設定にあたっての注意事項</h3>

<ul>
  <li>不正な設定状態のままリクエストをすると、設定を変えたのにもかかわらず、CloudFrontにその不正な状態が残ったままになることがあるっぽい
    <ul>
      <li>その場合は <a href="http://docs.aws.amazon.com/ja_jp/AmazonCloudFront/latest/DeveloperGuide/Invalidation.html">Invalidation</a>を行い、キャッシュをCloudFrontから消してみると解決するかも</li>
      <li>Invalidation や設定変更反映はけっこう時間かかるので注意（試行錯誤のスピード落ちるのでもっと速くしてほしいところ…）</li>
    </ul>
  </li>
  <li><del>現時点ではCloudFrontは HTTP/2 未対応</del>
    <ul>
      <li><del>2017年くらいには対応してきそうな予感がある（あくまで個人的予想）</del></li>
      <li>:new: 2016年９月にCloudFrontがHTTP/2に対応しました <a href="https://aws.amazon.com/blogs/aws/new-http2-support-for-cloudfront/">New – HTTP/2 Support for Amazon CloudFront | AWS Blog</a></li>
    </ul>
  </li>
  <li>ブラウザからアクセスされるOriginヘッダは<strong>末尾スラッシュ無し</strong>である点に注意</li>
</ul>

<h2 id="参考">参考</h2>

<ul>
  <li><a href="https://docs.aws.amazon.com/ja_jp/AmazonS3/latest/dev/cors.html">Cross-Origin Resource Sharing (CORS) - Amazon Simple Storage Service</a></li>
  <li><a href="http://docs.aws.amazon.com/ja_jp/AmazonCloudFront/latest/DeveloperGuide/header-caching.html#header-caching-web-cors">リクエストヘッダーに基づいてオブジェクトをキャッシュするように CloudFront を設定する - Amazon CloudFront</a></li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="aws" /><category term="s3" /><summary type="html"><![CDATA[Font Awesomeのようなフォントファイルを外部ホスト（例えばS3など）から読み込もうとする場合、Access-Control-Allow-OriginのヘッダでAllowされていないOriginからのリクエストの場合いわゆるフォントの豆腐現象が起きる。これはCORS(Cross-Origin Resource Sharing) の設定が正しくなされていないためだ。今回はAWSのS3+CloudFrontの構成でフォントファイルを配信したいので、S3およびCloudFrontのCORS設定手順および確認方法について説明する。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/cors/cache-distribution.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/cors/cache-distribution.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">AWS Summit Tokyo 2015で発表してきました</title><link href="https://blog.toshimaru.net/aws-summit-tokyo-2015/" rel="alternate" type="text/html" title="AWS Summit Tokyo 2015で発表してきました" /><published>2015-06-05T00:00:00+09:00</published><updated>2015-06-05T00:00:00+09:00</updated><id>https://blog.toshimaru.net/aws-summit-tokyo-2015</id><content type="html" xml:base="https://blog.toshimaru.net/aws-summit-tokyo-2015/"><![CDATA[<p><a href="http://www.awssummit.tokyo/">AWS Summit Tokyo 2015</a>でGunosyのモバイルプッシュ通知基盤について発表してきました。下記が当日の発表スライドになります。</p>

<script async="" class="speakerdeck-embed" data-id="9d7bd2a0fda94826b67f162e2fd3bdbd" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script>

<ul>
  <li><a href="https://speakerdeck.com/toshimaru/900mo-daunrodoapuri-gunosy-wozhi-eruda-gui-mo-mobairuputusiyutong-zhi-ji-pan-1">900万ダウンロードアプリ『Gunosy』を支える大規模モバイルプッシュ通知基盤 // Speaker Deck</a><sup id="fnref:longurl" role="doc-noteref"><a href="#fn:longurl" class="footnote" rel="footnote">1</a></sup></li>
</ul>

<h2 id="発表を追えて">発表を追えて</h2>

<p>今回これほどの大舞台で30分以上（与えられた時間は40分）話すのは始めての機会でしたので、緊張しましたが悪いものではなく心地のよい緊張感でした。正直、私の発表の裏が<a href="https://speakerdeck.com/mirakui/developer-productivity-in-cookpad">Cookpadさんの発表</a>だったのでそんなに人は集まらないのかなーと想定していましたが、嬉しい事に約70-80名くらいの方々に聴講していただけました。（圧倒的感謝！）</p>

<p>40分という比較的長い枠でしたが時間にせかされることなくじっくり話せて大体35分強で発表を終えることができました。今回のように40分くらいの発表の場合、（スライドのスタイルにもよりますが）大体スライド枚数50~60枚程度が調度良いように感じました。あと、早く終わりすぎたり、時間オーバーしてしまうリスクを減らすためにも事前に最低一回発表を通しておいて時間をしっかり見積もっておくことは重要だと感じました。</p>

<p>余談になりますが、当日のTwitterタイムラインを見てるとカメラの音・フラッシュがうるさいという声が多く出てました。私の発表でもそうしたのですが、事前に資料をWEBにアップロードして講演最初にWEBに既にアップロード済みな旨を伝えるとよいと思いました。</p>

<h2 id="スライド中の参考リンク">スライド中の参考リンク</h2>
<ul>
  <li><a href="http://monstar-lab.com/column/140911_01">【Android】GCMのregistrationIdの一意性 - Monstar Lab, Inc.</a></li>
  <li><a href="http://dev.classmethod.jp/cloud/aws/sns-mobile-token/">Amazon SNS のモバイルトークン管理についてのベストプラクティス ｜ Developers.IO</a></li>
  <li><a href="http://www.slideshare.net/conmame/sns-mobile-push">気軽なSNS Mobile Push の話</a></li>
  <li><a href="http://qiita.com/ykf/items/4978a9ccf0dd1cc6a19b">iOS8アップデートでアプリへのプッシュ通知でハマる点 - Qiita</a></li>
  <li><a href="http://www.slideshare.net/shimy_net/amazon-sns-mobile-push">Amazon SNS Mobile Push を使ってみる</a></li>
  <li><a href="https://developers.google.com/android/reference/com/google/android/gms/iid/InstanceID">InstanceID - Google APIs for Android - Google Developers</a></li>
</ul>

<h2 id="その他のリンク">その他のリンク</h2>
<ul>
  <li><a href="http://dev.classmethod.jp/cloud/aws/awssummit-tokyo-2015-dev-05/">[レポート][Dev-05:Mobile] 900万ダウンロードアプリ『Gunosy』を支える大規模モバイルプッシュ通知基盤 #AWSSummit ｜ Developers.IO</a></li>
  <li><a href="https://twitter.com/hashtag/AWSSummit?src=hash">Tweets about #AWSSummit hashtag on Twitter</a></li>
</ul>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:longurl" role="doc-endnote">
      <p>speakerdeckのURLが非常に汚いですが公開した後に<a href="http://sotarok.hatenablog.com/entry/2014/10/11/133123">URLを制御できる</a>ことを教えてもらいました。URLを変更して元URLが404になるのも不便かと思いますので、今回はこの汚いURLでお許しください。 <a href="#fnref:longurl" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Toshimaru</name></author><category term="aws" /><category term="presentation" /><summary type="html"><![CDATA[AWS Summit Tokyo 2015でGunosyのモバイルプッシュ通知基盤について発表してきました。下記が当日の発表スライドになります。900万ダウンロードアプリ『Gunosy』を支える大規模モバイルプッシュ通知基盤 // Speaker Deck]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/aws_summit_tokyo_2015.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/aws_summit_tokyo_2015.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">GZip形式のS3上のファイルをRubyのIO.pipeでストリーム読み出し</title><link href="https://blog.toshimaru.net/ruby-pipe-s3/" rel="alternate" type="text/html" title="GZip形式のS3上のファイルをRubyのIO.pipeでストリーム読み出し" /><published>2015-01-04T00:00:00+09:00</published><updated>2015-01-04T00:00:00+09:00</updated><id>https://blog.toshimaru.net/ruby-pipe-s3</id><content type="html" xml:base="https://blog.toshimaru.net/ruby-pipe-s3/"><![CDATA[<h2 id="やりたいこと">やりたいこと</h2>

<p>S3からgzip形式のファイルをストリーミングダウンロードしてそれを読み出す。</p>

<h2 id="s3からのダウンロード">S3からのダウンロード</h2>

<p><a href="http://docs.aws.amazon.com/AWSRubySDK/latest/AWS/S3/S3Object.html">公式ドキュメント</a>によるとこうする。</p>

<p>If you want to stream an object from S3, you can pass a block to #read.</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">File</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="s1">'output'</span><span class="p">,</span> <span class="s1">'wb'</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span>
  <span class="n">large_object</span><span class="p">.</span><span class="nf">read</span> <span class="k">do</span> <span class="o">|</span><span class="n">chunk</span><span class="o">|</span>
    <span class="n">file</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">chunk</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<h2 id="gzipを読む">gzipを読む</h2>

<p>gzipの読み出しのサンプルコードはこんな感じ。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">File</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="s1">'hoge.gz'</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
  <span class="n">gz</span> <span class="o">=</span> <span class="no">Zlib</span><span class="o">::</span><span class="no">GzipReader</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
  <span class="nb">print</span> <span class="n">gz</span><span class="p">.</span><span class="nf">read</span>
  <span class="n">gz</span><span class="p">.</span><span class="nf">close</span>
<span class="k">end</span>
</code></pre></div></div>

<p>via. <a href="http://apidock.com/ruby/Zlib/GzipReader">http://apidock.com/ruby/Zlib/GzipReader</a></p>

<h2 id="pipeでつなぐ">pipeでつなぐ</h2>

<p><code class="language-plaintext highlighter-rouge">IO.pipe</code>を使ってつなぐとこう。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">IO</span><span class="p">.</span><span class="nf">pipe</span> <span class="k">do</span> <span class="o">|</span><span class="n">read_io</span><span class="p">,</span> <span class="n">write_io</span><span class="o">|</span>
  <span class="n">write_io</span><span class="p">.</span><span class="nf">binmode</span>
  <span class="n">thread</span> <span class="o">=</span> <span class="no">Thread</span><span class="p">.</span><span class="nf">new</span> <span class="k">do</span>
    <span class="k">begin</span>
      <span class="no">AWS</span><span class="o">::</span><span class="no">S3</span><span class="o">::</span><span class="no">S3Object</span><span class="p">.</span><span class="nf">read</span> <span class="k">do</span> <span class="o">|</span><span class="n">chunk</span><span class="o">|</span>
        <span class="n">write_io</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">chunk</span><span class="p">)</span>
      <span class="k">end</span>
    <span class="k">rescue</span>
      <span class="n">write_io</span><span class="p">.</span><span class="nf">close</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="n">gz</span> <span class="o">=</span> <span class="no">Zlib</span><span class="o">::</span><span class="no">GzipReader</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">read_io</span><span class="p">)</span>
  <span class="k">while</span> <span class="n">line</span> <span class="o">=</span> <span class="n">gz</span><span class="p">.</span><span class="nf">gets</span>
    <span class="c1"># do something with line ...</span>
    <span class="nb">puts</span> <span class="n">line</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>注意点としては以下。</p>

<ol>
  <li>gzip形式なので<code class="language-plaintext highlighter-rouge">write_io.binmode</code>でバイナリモードにすること</li>
  <li>Thread内で何かエラーが起こったときに<code class="language-plaintext highlighter-rouge">gets</code>が待ち状態で止まっちゃうので<code class="language-plaintext highlighter-rouge">close</code>なりなんなり適切な処理をしてやること</li>
</ol>

<h3 id="参考">参考</h3>

<ul>
  <li><a href="http://stackoverflow.com/questions/24016548/how-do-i-get-zlib-to-uncompress-from-s3-stream-in-ruby">How do I get Zlib to uncompress from S3 stream in Ruby?</a></li>
  <li><a href="http://takuya-1st.hatenablog.jp/entry/20120205/1328470521">RubyはIO.pipeを使えば、パイプを作ることが出来る</a></li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="ruby" /><category term="aws" /><category term="s3" /><summary type="html"><![CDATA[S3からgzip形式のファイルをストリーミングダウンロードしてそれをRubyで読み出す。IO.pipeを使えば可能です。]]></summary></entry><entry><title type="html">Amazon OpsWorksでRailsアプリを簡単Chefプロビジョニング</title><link href="https://blog.toshimaru.net/opsworks-rails/" rel="alternate" type="text/html" title="Amazon OpsWorksでRailsアプリを簡単Chefプロビジョニング" /><published>2014-12-21T00:00:00+09:00</published><updated>2014-12-21T00:00:00+09:00</updated><id>https://blog.toshimaru.net/opsworks-rails</id><content type="html" xml:base="https://blog.toshimaru.net/opsworks-rails/"><![CDATA[<p>本記事は<a href="http://qiita.com/advent-calendar/2014/chef">Chef Advent Calendar 2014</a>の21日目の記事です。</p>

<h2 id="opsworksとは">OpsWorksとは？</h2>
<p>公式サイトの説明は下記です。</p>

<blockquote>
  <p>設定管理サービスである AWS OpsWorks を使用すると、ユーザーは Chef を使用して、あらゆる種類およびサイズのアプリケーションを簡単に設定および運用できます。パッケージのインストール、ソフトウェア設定およびストレージなどのリソースを含む、各コンポーネントのアプリケーションのアーキテクチャおよび仕様を定義できます。</p>

  <p><a href="http://aws.amazon.com/jp/opsworks/">AWS OpsWorks</a></p>
</blockquote>

<p>ポイントは以下の通り。</p>

<ul>
  <li>Chefでサーバーをプロビジョニング・デプロイできる</li>
  <li>スタック ＞ レイヤー ＞ App という概念でシステムを構成</li>
  <li>インスタンスをタイムベース or ロードベースでスケールアウトできる</li>
  <li>OpsWorksで使われているレシピは<a href="https://github.com/aws/opsworks-cookbooks">Githubで公開</a>されており実行コードが追える</li>
  <li>OpsWorksの用意したレシピに加えて自らのCustom Chefレシピを追加することも可能</li>
</ul>

<p><img src="/images/posts/opsworks/stack.png" alt="stack image" /></p>

<p><strong>【↑図】OpsWorksのStack &amp; Layerの関係</strong></p>

<h2 id="料金">料金</h2>
<p>OpsWorksの使用自体にかかる料金は <strong>0円</strong> です。OpsWorks上で使用したAWSリソースの料金（ロードバランサ、EC2インスタンス、RDS等）のみがかかってきます。</p>

<h2 id="railsをopsworksにデプロイしてみよう">RailsをOpsWorksにデプロイしてみよう</h2>
<p>OpsWorksはとくにRailsアプリケーションとの相性が良く、今回はRails4.2のアプリケーションをOpsWorksにデプロイしてみようと思います。</p>

<p>今回デプロイするRailsアプリケーションのコードの最終形は下記になります。</p>

<p><a href="https://github.com/toshimaru/opsworks-rails">https://github.com/toshimaru/opsworks-rails</a></p>

<h2 id="デプロイ手順">デプロイ手順</h2>

<h3 id="スタックの追加">スタックの追加</h3>

<p>まずはAWS ConsoleからOpsWorksにいきAdd Stackしましょう。RegionとかVPCとかIAMとかは適宜設定してね。</p>

<p><img src="/images/posts/opsworks/add_stack.png" alt="add stack" /></p>

<p>こんなのがStackのトップ画面。</p>

<p><img src="/images/posts/opsworks/top.png" alt="stack top" /></p>

<h3 id="レイヤーの定義">レイヤーの定義</h3>

<p><img src="/images/posts/opsworks/layer.png" alt="layer" /></p>

<p>Layer TypeはRails App、Ruby versionは2.1、nginx+unicornを選択する</p>

<p><img src="/images/posts/opsworks/add_layer.png" alt="add layer" /></p>

<p>追加されました。</p>

<p><img src="/images/posts/opsworks/layer_done.png" alt="layer done" /></p>

<h3 id="レシピ">レシピ</h3>

<p>RecipesでOpsWorksにどんなレシピが設定されているかがわかります。レシピ名がGithubへのリンクになっており、どんなレシピが書かれているかを確認できます。</p>

<p><img src="/images/posts/opsworks/recipes.png" alt="recipes" /></p>

<p>今回はこのままでOK.</p>

<h3 id="インスタンスの追加">インスタンスの追加</h3>

<p>では次にAppインスタンスを追加。t1.microインスタンスで。</p>

<p><img src="/images/posts/opsworks/add_instance.png" alt="add instance" /></p>

<p>AddInstanceするとステータスがStoppedなのでstartで起動します。</p>

<p><img src="/images/posts/opsworks/instance_stopped.png" alt="instance stop" /></p>

<p>10分くらいでセットアップが完了します。Statusがonlineでグリーンになれば準備OK.</p>

<p><img src="/images/posts/opsworks/instance_online.png" alt="online" /></p>

<h3 id="appの設定">Appの設定</h3>

<p>次にデプロイするAppの設定を追加していきます。</p>

<p><img src="/images/posts/opsworks/apps.png" alt="setting app" /></p>

<p>こんな感じでAppを設定。</p>

<ul>
  <li>Type: Ruby on Rails</li>
  <li>DataSource: 今回は特にないのでNone</li>
  <li>Applicationソース: GithubからデプロイしたいGithubのレポジトリURLを指定</li>
</ul>

<p><img src="/images/posts/opsworks/add_apps.png" alt="add app" /></p>

<p><code class="language-plaintext highlighter-rouge">SECRET_KEY_BASE</code>(Rails4.2の<code class="language-plaintext highlighter-rouge">secrets.yml</code>で必要になる)もあわせてセットしましょう。</p>

<p><img src="/images/posts/opsworks/add_envvar.png" alt="env var" /></p>

<p>Deployments で Deploy Appしてみよう。</p>

<p><img src="/images/posts/opsworks/deploy_app.png" alt="deploy app" /></p>

<p>Appは先ほど設定したApp、CommandはDeployを指定してDeploy App!（マイグレーションが必要であればここでMigration ON）</p>

<p><img src="/images/posts/opsworks/deploy_app2.png" alt="deploy app 2" /></p>

<p>SuccessすればOK.</p>

<p><img src="/images/posts/opsworks/deploy_app3.png" alt="deploy finished" /></p>

<h2 id="幾つかのハマりポイント">幾つかのハマりポイント</h2>

<h3 id="gemfile">Gemfile</h3>

<p>下記のGemが必要になるのでコメントアウトされていることを確認すること。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem 'therubyracer', platforms: :ruby
gem 'unicorn'
</code></pre></div></div>

<h3 id="databaseyml">database.yml</h3>

<p>RDSを設定していれば自動的に設定されるのですが、今回の場合設定していないので別途手で<code class="language-plaintext highlighter-rouge">database.yml</code>を作りました。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[root@rails-app1 current]# cat config/database.yml
</code></pre></div></div>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">default</span><span class="pi">:</span> <span class="nl">&amp;default</span>
  <span class="na">adapter</span><span class="pi">:</span> <span class="s">sqlite3</span>
  <span class="na">pool</span><span class="pi">:</span> <span class="m">5</span>
  <span class="na">timeout</span><span class="pi">:</span> <span class="m">5000</span>

<span class="na">production</span><span class="pi">:</span>
  <span class="na">&lt;&lt;</span><span class="pi">:</span> <span class="nv">*default</span>
  <span class="na">database</span><span class="pi">:</span> <span class="s">db/production.sqlite3</span>
</code></pre></div></div>

<h3 id="cssが適応されていない問題">CSSが適応されていない問題</h3>

<p>「アレ、なんかCSSが効いていないっぽい！？」</p>

<p><img src="/images/posts/opsworks/before_css.png" alt="css" /></p>

<p>これは<code class="language-plaintext highlighter-rouge">asset:precompile</code>が走っていないため。</p>

<blockquote>
  <p>rake asset:precompile というタスクを実行する必要がありますが、OpsWorksのRailsアプリケーションのデフォルトのデプロイ処理ではこのタスクを実行してくれません。</p>

  <p><a href="http://interu.hatenablog.com/entry/2013/08/01/214258">OpsWorksでRailsをデプロイする際にasset:precompileを実施する方法</a></p>
</blockquote>

<p>下記を<code class="language-plaintext highlighter-rouge">deploy/before_migrate.rb</code>に設定する。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Chef</span><span class="o">::</span><span class="no">Log</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="s2">"Running deploy/before_migrate.rb"</span><span class="p">)</span>
<span class="n">env</span> <span class="o">=</span> <span class="n">node</span><span class="p">[</span><span class="ss">:deploy</span><span class="p">][</span><span class="ss">:rails_opsworks</span><span class="p">][</span><span class="ss">:rails_env</span><span class="p">]</span>
<span class="n">current_release</span> <span class="o">=</span> <span class="n">release_path</span>

<span class="n">execute</span> <span class="s2">"rake assets:precompile"</span> <span class="k">do</span>
  <span class="n">cwd</span> <span class="n">current_release</span>
  <span class="n">command</span> <span class="s2">"bundle exec rake assets:precompile"</span>
  <span class="n">environment</span> <span class="s2">"RAILS_ENV"</span> <span class="o">=&gt;</span> <span class="n">env</span>
<span class="k">end</span>
</code></pre></div></div>

<p>これでデプロイ。</p>

<p><img src="/images/posts/opsworks/after_css.png" alt="css 2" /></p>

<p>OK.</p>

<h3 id="デプロイディレクトリ">デプロイ・ディレクトリ</h3>

<p><code class="language-plaintext highlighter-rouge">/srv/www/rails_opsworks/current</code>に最新の状態がデプロイされます。</p>

<h3 id="ログディレクトリ">ログ・ディレクトリ</h3>

<p><code class="language-plaintext highlighter-rouge">/var/lib/aws/opsworks/chef</code> Chefのログ、OpsWorksの設定JSONが格納されています。</p>

<h2 id="まとめ">まとめ</h2>

<p>さてOpsWorksでのデプロイ手順を紹介してきましたが一体何が嬉しいのでしょうか。個人的なメリットは以下です。</p>

<ul>
  <li>インスタンスが Disposable（廃棄可能）・Reproducible（再現可能） である
    <ul>
      <li>いわゆる immutable infrastructure</li>
      <li>= サーバーをいつでも潰して全く同じ環境を再現できる！</li>
      <li>「サーバーを増やしたい！」 → Add Instanceをポチるだけ</li>
    </ul>
  </li>
  <li><a href="https://github.com/capistrano/capistrano">Capistrano</a>などのデプロイツールのコードをゴチャゴチャ書く必要がなく、デプロイタスクはOpsWorks &amp; Chefに一任できる</li>
</ul>

<h2 id="さいごに">さいごに</h2>

<p>Chef Advent CalendarといいながらChefよりもOpsWorks中心の内容になってしまいましたが、冒頭に書いたようにOpsWorksの用意しているレシピに加えて自らのCustom Chefレシピを定義することが可能です。現実的な運用を考えるとOpsWorksのレシピだけでプロビジョニング・デプロイレシピを完結させることは難しいと思うので、<strong>OpsWorksレシピ+Custom Chefレシピ</strong> の２つを組み合わせて運用していくのが現実的かと思います。</p>

<h2 id="link-参考">:link: 参考</h2>

<ul>
  <li><a href="http://ruby.awsblog.com/post/Tx7FQMT084INCR/Deploying-Ruby-on-Rails-Applications-to-AWS-OpsWorks">Deploying Ruby on Rails Applications to AWS OpsWorks</a></li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="chef" /><category term="opsworks" /><category term="rails" /><category term="aws" /><summary type="html"><![CDATA[Rails4.2.0のアプリケーションをChefでプロビジョニングできるOpsWorksにデプロイしてみます。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/opsworks/eyecatch.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/opsworks/eyecatch.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">WindowsコマンドでAmazon S3上にバックアップする</title><link href="https://blog.toshimaru.net/windows-s3-sync/" rel="alternate" type="text/html" title="WindowsコマンドでAmazon S3上にバックアップする" /><published>2013-04-19T00:00:00+09:00</published><updated>2013-04-19T00:00:00+09:00</updated><id>https://blog.toshimaru.net/windows-s3-sync</id><content type="html" xml:base="https://blog.toshimaru.net/windows-s3-sync/"><![CDATA[<p>Windows PCを処分するにあたり、音楽、写真、動画などのデータ郡をamazon S3に置き管理することにしました。S3のGUIツールはコレといった定番がないようで（あったら教えてください）、挙動にもやや不安が残る感じでした。よって今回はコマンドラインツールを使ってローカルとS3をsync、同期することにしました。</p>

<p>使ったツールは<a href="http://www.dragondisk.com/">Dragon Disk</a>。トップにパッケージの写真があってやや有料の匂いがするが、無料なのでご安心を。</p>

<h2 id="手順">手順</h2>

<ol>
  <li><a href="http://www.dragondisk.com/download-amazon-s3-client-google-cloud-storage-client.html">ダウンロードページ</a>からコマンドラインツールをダウンロード</li>
  <li>展開してその中に<code class="language-plaintext highlighter-rouge">dgsync.bat</code>ファイルを作成し、下記のようなバッチファイルを作成してください。
<script src="https://gist.github.com/toshimaru/5415149.js"></script>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">DGTOOLS_ACCESS_KEY</code>、<code class="language-plaintext highlighter-rouge">DGTOOLS_SECRET_KEY</code>を適宜編集。</li>
      <li>ファイルの削除も同期をとりたい場合は<code class="language-plaintext highlighter-rouge">--dont-delete</code>オプションを外してください。</li>
      <li>S3上のフォルダはあらかじめ作成しておく。</li>
    </ul>
  </li>
  <li>２で作成したバッチを実行する。</li>
</ol>

<p>以上です。amazon S3を使って安全、安価にデータを保管しましょう！</p>

<h3 id="追記">追記</h3>

<p>S3のヘビーな利用はそんなに「安価」って程ではない…(´・ω・｀)</p>

<h3 id="参考">参考</h3>

<p><a href="http://www.tdn.co.jp/techblog/201206/52/">Amazon S3のクライアント「DragonDisk」に付属の「dgsync」が便利な件</a></p>]]></content><author><name>Toshimaru</name></author><category term="aws" /><category term="s3" /><summary type="html"><![CDATA[Windows PCを処分するにあたり、音楽、写真、動画などのデータ郡をamazon S3に置き管理することにしました。S3のGUIツールはコレといった定番がないようで（あったら教えてください）、挙動にもやや不安が残る感じでした。よって今回はDragon Diskコマンドラインツールを使ってローカルとS3をsync、同期することにしました。]]></summary></entry></feed>