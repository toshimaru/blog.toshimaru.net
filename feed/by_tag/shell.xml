<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.0">Jekyll</generator><link href="https://blog.toshimaru.net/feed/by_tag/shell.xml" rel="self" type="application/atom+xml" /><link href="https://blog.toshimaru.net/" rel="alternate" type="text/html" /><updated>2022-10-30T16:39:30+09:00</updated><id>https://blog.toshimaru.net/feed/by_tag/shell.xml</id><title type="html">Hack Your Design!</title><subtitle>toshimaruの技術系なブログ</subtitle><author><name>Toshimaru</name></author><entry><title type="html">標準出力、標準エラー出力のリダイレクト方法まとめ</title><link href="https://blog.toshimaru.net/bash-stdout-and-stderr/" rel="alternate" type="text/html" title="標準出力、標準エラー出力のリダイレクト方法まとめ" /><published>2019-11-02T00:00:00+09:00</published><updated>2019-11-02T00:00:00+09:00</updated><id>https://blog.toshimaru.net/bash-stdout-and-stderr</id><content type="html" xml:base="https://blog.toshimaru.net/bash-stdout-and-stderr/"><![CDATA[<p>標準出力、標準エラー出力のリダイレクトの方法を実際のコマンド実行結果とあわせてまとめてみます。</p>

<h2 id="標準入力-標準出力-標準エラー出力とは">標準入力, 標準出力, 標準エラー出力とは？</h2>

<table>
  <thead>
    <tr>
      <th>種類</th>
      <th>説明</th>
      <th>ファイルディスクリプタ</th>
      <th>省略形</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>標準入力</strong></td>
      <td>デフォルトの入力データストリーム。<br />例えばコマンドのパイプラインなど。ターミナル上ではユーザーのキーボード入力のこと。</td>
      <td>0</td>
      <td><code class="language-plaintext highlighter-rouge">stdin</code></td>
    </tr>
    <tr>
      <td><strong>標準出力</strong></td>
      <td>デフォルトの出力データストリーム。<br />ターミナル上ではユーザーの画面に表示される。</td>
      <td>1</td>
      <td><code class="language-plaintext highlighter-rouge">stdout</code></td>
    </tr>
    <tr>
      <td><strong>標準エラー出力</strong></td>
      <td>デフォルトのエラーに関連する出力データストリーム。<br />ターミナル上ではユーザーの画面に表示される。</td>
      <td>2</td>
      <td><code class="language-plaintext highlighter-rouge">stderr</code></td>
    </tr>
  </tbody>
</table>

<p>（出典: <a href="https://www.computerhope.com/jargon/f/file-descriptor.htm">What is a File Descriptor? - Stdin, stdout, and stderr</a> より翻訳）</p>

<p>それぞれのファイルディスクリプタは下記のように <code class="language-plaintext highlighter-rouge">/dev/stderr</code>, <code class="language-plaintext highlighter-rouge">/dev/stdin</code>, <code class="language-plaintext highlighter-rouge">/dev/stdout</code> からも確認することができます</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">ls</span> <span class="nt">-l</span> /dev/std<span class="o">{</span><span class="k">in</span>,out,err<span class="o">}</span>
<span class="gp">lr-xr-xr-x  1 root  wheel  0 Sep 12 08:46 /dev/stderr -&gt;</span><span class="w"> </span>fd/2
<span class="gp">lr-xr-xr-x  1 root  wheel  0 Sep 12 08:46 /dev/stdin -&gt;</span><span class="w"> </span>fd/0
<span class="gp">lr-xr-xr-x  1 root  wheel  0 Sep 12 08:46 /dev/stdout -&gt;</span><span class="w"> </span>fd/1
</code></pre></div></div>

<h2 id="標準出力-標準エラー出力するシェルスクリプト">標準出力, 標準エラー出力するシェルスクリプト</h2>

<p>今回使用するベースとなるシェルスクリプトは下記になります。</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">cat </span>stdout-stderr.sh
<span class="gp">#</span><span class="o">!</span>/bin/sh
<span class="go">echo "stdout"
</span><span class="gp">echo "stderr" &gt;</span>&amp;2
</code></pre></div></div>

<ul>
  <li>stdout という文字列を標準出力</li>
  <li>stderr という文字列を標準エラー出力</li>
</ul>

<p>このようなコードとなっております。</p>

<h3 id="rubyバージョン">Rubyバージョン</h3>

<p>ちなみに今回のシェルスクリプトをRubyで表現すると下記のようになります。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env ruby</span>
<span class="nb">puts</span> <span class="s2">"stdout"</span>
<span class="nb">warn</span> <span class="s2">"stderr"</span>
</code></pre></div></div>

<h2 id="リダイレクト無し実行時">リダイレクト無し実行時</h2>

<p>まずは何もリダイレクトの設定をしないで実行してみます。</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>./stdout-stderr.sh
<span class="go">stdout
stderr
</span></code></pre></div></div>

<ul>
  <li>標準出力、エラー出力ともに画面に表示される</li>
</ul>

<h2 id="標準出力リダイレクト有り実行時">標準出力リダイレクト有り実行時</h2>

<p>次はリダイレクトを設定して実行してみましょう。</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>./stdout-stderr.sh <span class="o">&gt;</span> stdout.txt
<span class="go">stderr

</span><span class="gp">$</span><span class="w"> </span><span class="nb">cat </span>stdout.txt
<span class="go">stdout
</span></code></pre></div></div>

<ul>
  <li>リダイレクト無し実行時と比較して、画面に表示される結果から stdout が出力されなくなった</li>
  <li>画面に表示されなくなった代わりに、リダイレクト先の <code class="language-plaintext highlighter-rouge">stdout.txt</code> に stdout が出力されている</li>
</ul>

<p>また上コマンドでは省略されていますが、リダイレクトのデフォルトは標準出力のファイルディスクリプタ「1」なので、<code class="language-plaintext highlighter-rouge">&gt;</code> の部分は <code class="language-plaintext highlighter-rouge">1&gt;</code> と書くこともできます。</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>./stdout-stderr.sh <span class="o">&gt;</span> stdout.txt
<span class="gp">#</span><span class="w"> </span>下記のようにも書くことできる
<span class="gp">$</span><span class="w"> </span>./stdout-stderr.sh 1&gt; stdout.txt
</code></pre></div></div>

<h2 id="エラー出力リダイレクト有り実行時">エラー出力リダイレクト有り実行時</h2>

<p>次はエラー出力だけリダイレクトするようにしてみましょう。</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>./stdout-stderr.sh 2&gt; stderr.txt
<span class="go">stdout

</span><span class="gp">$</span><span class="w"> </span><span class="nb">cat </span>stderr.txt
<span class="go">stderr
</span></code></pre></div></div>

<ul>
  <li>リダイレクト無し実行時と比較して、画面に表示される結果から stderr が出力されなくなった</li>
  <li>画面に表示されなくなった代わりに、リダイレクト先の <code class="language-plaintext highlighter-rouge">stderr.txt</code> に stderr が出力されている</li>
</ul>

<h2 id="エラー出力を標準出力としてリダイレクト実行時">エラー出力を標準出力としてリダイレクト実行時</h2>

<p>続いてエラー出力を標準出力としてまとめて出力するようにリダイレクトしてみます。</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>./stdout-stderr.sh &amp;&gt; stdout-stderr.txt
<span class="go">
</span><span class="gp">$</span><span class="w"> </span><span class="nb">cat </span>stdout-stderr.txt
<span class="go">stdout
stderr
</span></code></pre></div></div>

<ul>
  <li>リダイレクト実行時の画面表示は何もされない</li>
  <li>リダイレクト先のファイル <code class="language-plaintext highlighter-rouge">stdout-stderr.txt</code> には stdout と stderr ともに出力されている</li>
</ul>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>./stdout-stderr.sh &amp;&gt; stdout-stderr.txt
<span class="gp">#</span><span class="w"> </span>下記のようにも書くことできる
<span class="gp">$</span><span class="w"> </span>./stdout-stderr.sh <span class="o">&gt;</span>&amp; stdout-stderr.txt
<span class="gp">$</span><span class="w"> </span>./stdout-stderr.sh <span class="o">&gt;</span> stdout-stderr.txt 2&gt;&amp;1
<span class="gp">$</span><span class="w"> </span>./stdout-stderr.sh 1&gt; stdout-stderr.txt 2&gt;&amp;1
</code></pre></div></div>

<h2 id="標準出力エラー出力を別々にリダイレクト実行時">標準出力＆エラー出力を別々にリダイレクト実行時</h2>

<p>標準出力と標準エラー出力をそれぞれ別にリダイレクトするようにしてみます。</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>./stdout-stderr.sh 1&gt; stdout.txt 2&gt; stderr.txt
<span class="go">
</span><span class="gp">$</span><span class="w"> </span><span class="nb">cat </span>stdout.txt
<span class="go">stdout

</span><span class="gp">$</span><span class="w"> </span><span class="nb">cat </span>stderr.txt
<span class="go">stderr
</span></code></pre></div></div>

<ul>
  <li>標準出力である stdout は <code class="language-plaintext highlighter-rouge">stdout.txt</code> に出力される</li>
  <li>標準エラー出力である stderr は <code class="language-plaintext highlighter-rouge">stderr.txt</code> に出力される</li>
</ul>

<h2 id="出力をリダイレクトで捨てる">出力をリダイレクトで捨てる</h2>

<p><code class="language-plaintext highlighter-rouge">/dev/null</code>にリダイレクトすれば出力内容を捨てることができます。</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>./stdout-stderr.sh &amp;&gt; /dev/null
</code></pre></div></div>

<h2 id="参考">参考</h2>

<ul>
  <li><a href="https://qiita.com/laikuaut/items/e1cc312ffc7ec2c872fc">bash: 標準出力、標準エラー出力をファイル、画面それぞれに出力する方法 - Qiita</a></li>
  <li><a href="https://www.computerhope.com/jargon/f/file-descriptor.htm">What is a File Descriptor?</a></li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="shell" /><category term="bash" /><summary type="html"><![CDATA[標準出力、標準エラー出力のリダイレクトの方法を実際のコマンド実行結果とあわせてまとめてみます。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/stdout.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/stdout.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">コマンドラインで複数行を1行に連結する</title><link href="https://blog.toshimaru.net/join-lines-command/" rel="alternate" type="text/html" title="コマンドラインで複数行を1行に連結する" /><published>2015-09-30T00:00:00+09:00</published><updated>2019-11-02T00:00:00+09:00</updated><id>https://blog.toshimaru.net/join-lines-command</id><content type="html" xml:base="https://blog.toshimaru.net/join-lines-command/"><![CDATA[<p>やりたかったこととしては、コマンドラインで複数行の標準入力を受け取ってそれを１行にカンマ区切りにして出力すること。</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">cat </span>text
<span class="go">aaaa
bbbb
cccc
</span></code></pre></div></div>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">cat </span>text | <span class="nb">tr</span> <span class="s1">'\n'</span> <span class="s1">','</span>
<span class="go">aaaa,bbbb,cccc,%
</span></code></pre></div></div>

<p>こんな感じで <code class="language-plaintext highlighter-rouge">tr</code> を使って改行コードを置換してやればカンマ区切りで1行に連結できる。</p>

<h2 id="jsonをパースして連結する">JSONをパースして連結する</h2>

<p>もともとやりたかったのはこんな感じのこと。</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">echo</span> <span class="s1">'{ "employees":[{"firstName":"John", "lastName":"Doe"}, {"firstName":"Anna", "lastName":"Smith"}, {"firstName":"Peter","lastName":"Jones"} ] }'</span> | jq <span class="s1">'.employees[] .firstName'</span> | <span class="nb">tr</span> <span class="s1">'\n'</span> <span class="s1">','</span> | <span class="nb">awk</span> <span class="s1">'{ print "result = [" $1 "]" }'</span>
<span class="go">result = ["John","Anna","Peter",]
</span></code></pre></div></div>

<p>curlでJSONをHTTP GETしてそれを <code class="language-plaintext highlighter-rouge">jq</code> でパースして出たリストをカンマ区切りで出力する、みたいなやつ。</p>

<h2 id="参考">参考</h2>

<ul>
  <li><a href="http://stackoverflow.com/questions/2764051/how-to-join-multiple-lines-of-file-names-into-one-with-custom-delimiter">linux - How to join multiple lines of file names into one with custom delimiter? - Stack Overflow</a></li>
  <li><a href="http://tbpgr.hatenablog.com/entry/20120309/1331314857">tr | 標準入力の内容を置換、削除する - Tbpgr Blog</a></li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="shell" /><category term="api" /><summary type="html"><![CDATA[やりたかったことは、コマンドラインで複数行の標準入力を受け取ってそれを１行にカンマ区切りにして出力すること。]]></summary></entry><entry><title type="html">「たった一行でもっと高画質の画像を集める方法」のシェルスクリプトコード解説</title><link href="https://blog.toshimaru.net/sh3iz/" rel="alternate" type="text/html" title="「たった一行でもっと高画質の画像を集める方法」のシェルスクリプトコード解説" /><published>2012-12-24T00:00:00+09:00</published><updated>2019-11-02T00:00:00+09:00</updated><id>https://blog.toshimaru.net/sh3iz</id><content type="html" xml:base="https://blog.toshimaru.net/sh3iz/"><![CDATA[<p><a href="http://d.hatena.ne.jp/shi3z/20121217/1355695824">たった一行でもっと高画質の画像を集める方法</a>にあったシェルスクリプトのコード。</p>

<h2 id="ソース">ソース</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">matome_url</span><span class="o">=</span><span class="nv">$1</span>
<span class="nv">cnt</span><span class="o">=</span>0
<span class="k">for </span>j <span class="k">in</span> <span class="o">{</span>1..10<span class="o">}</span><span class="p">;</span> <span class="k">do
  for </span>i <span class="k">in</span> <span class="sb">`</span>curl <span class="nv">$matome_url</span><span class="se">\?</span><span class="nv">page</span><span class="o">=</span><span class="nv">$j</span> | <span class="nb">grep</span> <span class="s1">'_jWidgetData'</span> | <span class="nb">sed </span>s/<span class="se">\&amp;</span>quot<span class="se">\;</span>/<span class="se">\"</span>/g | <span class="nb">grep</span> <span class="nt">-o</span> <span class="s2">"url</span><span class="se">\"\:\"</span><span class="s2">[^</span><span class="se">\"</span><span class="s2">]*"</span> | <span class="nb">cut</span> <span class="nt">-d</span> <span class="se">\"</span> <span class="nt">-f</span> 3 <span class="sb">`</span><span class="p">;</span> <span class="k">do
    </span>curl <span class="nt">-o</span> <span class="nv">$2_$cnt</span>.jpg <span class="nv">$i</span>
    <span class="nv">cnt</span><span class="o">=</span><span class="sb">`</span><span class="nb">expr</span> <span class="nv">$cnt</span> + 1<span class="sb">`</span>
  <span class="k">done
done</span>
</code></pre></div></div>

<p>その中の１行、このコードの意味がよくわからなかったので調べてみた。</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>curl <span class="nv">$matome_url</span><span class="se">\?</span><span class="nv">page</span><span class="o">=</span><span class="nv">$j</span>| <span class="nb">grep</span> <span class="s1">'_jWidgetData'</span> | <span class="nb">sed </span>s/<span class="se">\&amp;</span>quot<span class="se">\;</span>/<span class="se">\"</span>/g | <span class="nb">grep</span> <span class="nt">-o</span> <span class="s2">"url</span><span class="se">\"\:\"</span><span class="s2">[^</span><span class="se">\"</span><span class="s2">]*"</span> | <span class="nb">cut</span> <span class="nt">-d</span> <span class="se">\"</span> <span class="nt">-f</span> 3
</code></pre></div></div>

<p>バラすと下記のようになる。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl https://matome.naver.jp/odai/2128076173257260401 | <span class="c"># curlでデータ取得</span>
<span class="nb">grep</span> <span class="s1">'_jWidgetData'</span> |                                   <span class="c"># _jWidgetData(画像URLが含まれている行)をgrep</span>
<span class="nb">sed </span>s/<span class="se">\&amp;</span>quot<span class="se">\;</span>/<span class="se">\"</span>/g |                                   <span class="c"># &amp;quot; を " に変換</span>
<span class="nb">grep</span> <span class="nt">-o</span> <span class="s2">"url</span><span class="se">\"\:\"</span><span class="s2">[^</span><span class="se">\"</span><span class="s2">]*"</span> |                             <span class="c"># url":"http:~ をgrepで抜き出す</span>
<span class="nb">cut</span> <span class="nt">-d</span> <span class="se">\"</span> <span class="nt">-f</span> 3                                          <span class="c"># ⇡をurl,:,http:~ の３つに分割してURLである３つめをcut!</span>
</code></pre></div></div>

<h3 id="出力結果">出力結果</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://imgcc.naver.jp/kaze/mission/USER/20121010/16/112376/0/800x1126x5e102d37fb7211123e76a10.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121009/16/112376/1/1134x1548x5a8f6dace3e8a811e2caeb.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121222/16/112376/1/1152x1643xa71b65cd2d7ccfbd9ab501.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121022/16/112376/3/1470x2048xf91af81cc31725554aa6a1.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121223/16/112376/0/800x1067xce40c56866a0c1349b12d40.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121223/16/112376/1/800x1067xda8507d549b33034789af92.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121222/16/112376/0/1120x1680xe367f4d20758df59051771.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121218/16/112376/3/800x1200xf0e163f978b6340999a3627.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121220/16/112376/2/800x1149x504004fca0a43ae177b6b94.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121220/16/112376/1/909x1346xbc20b11869f748acf5dfcb9.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121220/16/112376/0/1066x1600x961a7ad10008867d0b4dc4.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121218/16/112376/1/703x1024x9c2810c4630ee676e88581e.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121215/16/112376/0/1226x1671x7380daad05950ec9f27aa1.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121218/16/112376/5/900x1280x8feb008f284438ae077799f.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121219/16/112376/0/799x1200xa22a34c73b464cc8c008887.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121219/16/112376/1/1200x800x596d41a8093f6663d2f51d5.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121216/16/112376/1/1500x2150x03d096234d12754f302cae.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121216/16/112376/0/683x1024x85dc2bb2d1fb1168ee2815c.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121214/16/112376/2/530x800x764574c1e912f5a46846fe56.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121214/16/112376/3/1280x1900x1ce4cf74906fd926a96f41.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121214/16/112376/0/900x1200xaca3d3fec5d57eec05c514a.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121214/16/112376/8/531x800xc515ec8798a9a4032daca277.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121207/16/112376/24/1033x1550x7c9c3cd8928ab0fbf19548.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121202/16/112376/1/1033x1550x6e0dc201a49d96d93740d1.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121208/16/112376/1/1033x1550xf007fde2a5343d1a0a55d1.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121209/16/112376/7/854x1280xeabf817b9a607e419f2472f.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121209/16/112376/6/896x1280x08f71b1d54aa4bd5c2ef364.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121209/16/112376/5/1280x1682xd727f8325bec6c51d47212.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121209/16/112376/4/800x1067xcec4822757324881e9978c9.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121209/16/112376/3/1280x1920x0a1ca8283d2796132f14e3.jpg
</code></pre></div></div>

<p>この「◯◯で水着画像を集める」系のネタ元はPHPでしたが、シェルでもいけちゃうんですね。奥深い・・・</p>]]></content><author><name>Toshimaru</name></author><category term="linux" /><category term="shell" /><category term="bash" /><summary type="html"><![CDATA[たった一行でもっと高画質の画像を集める方法にあったシェルスクリプトのコード。]]></summary></entry><entry><title type="html">プロセス毎のメモリ使用量を調べるコマンド</title><link href="https://blog.toshimaru.net/linux/" rel="alternate" type="text/html" title="プロセス毎のメモリ使用量を調べるコマンド" /><published>2012-12-02T00:00:00+09:00</published><updated>2019-11-02T00:00:00+09:00</updated><id>https://blog.toshimaru.net/linux</id><content type="html" xml:base="https://blog.toshimaru.net/linux/"><![CDATA[<p>メモリを食いつぶしてたプロセスがいたのでそれを調べるときに利用したコマンド。</p>
<p>これでズラっとでます。</p>
<div>
  <pre>$ ps alx  | awk '{printf (&quot;%d\t%s\n&quot;, $8,$13)}'</pre>
</div>

<p>しかし、このコマンドの結果が見づらい。なので<strong>使用量の多い順にソートしてトップ10を出してみる</strong>と下記のようなコマンドになります。</p>

<div>
  <pre>$ ps alx  | awk '{printf (&quot;%d\t%s\n&quot;, $8,$13)}' | sort -nr | head -10</pre>
</div>

<h2>参考</h2>

<p><a href="http://at-aka.blogspot.jp/2006/07/linux.html">Linux でプロセスごとのメモリー使用量を調べる</a></p>]]></content><author><name>Toshimaru</name></author><category term="shell" /><category term="linux" /><summary type="html"><![CDATA[メモリを食いつぶしてたプロセスがいたのでそれを調べるときに利用したコマンド。 これでズラっとでます。 $ ps alx | awk '{printf (&quot;%d\t%s\n&quot;, $8,$13)}']]></summary></entry></feed>