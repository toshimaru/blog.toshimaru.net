<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://blog.toshimaru.net/feed/by_tag/chrome.xml" rel="self" type="application/atom+xml" /><link href="https://blog.toshimaru.net/" rel="alternate" type="text/html" /><updated>2022-05-19T13:37:03+09:00</updated><id>https://blog.toshimaru.net/feed/by_tag/chrome.xml</id><title type="html">Hack Your Design!</title><subtitle>toshimaruの技術系なブログ</subtitle><author><name>Toshimaru</name></author><entry><title type="html">Rails E2Eテストで poltergeist から Headless Chrome へと乗り換える</title><link href="https://blog.toshimaru.net/poltergeist-to-selenium-webdriver/" rel="alternate" type="text/html" title="Rails E2Eテストで poltergeist から Headless Chrome へと乗り換える" /><published>2018-08-04T00:00:00+09:00</published><updated>2019-09-17T00:00:00+09:00</updated><id>https://blog.toshimaru.net/poltergeist-to-selenium-webdriver</id><content type="html" xml:base="https://blog.toshimaru.net/poltergeist-to-selenium-webdriver/"><![CDATA[<p>RailsのCapybaraを使ったE2Eテスト(feature spec)をこの度、<a href="https://github.com/teampoltergeist/poltergeist">poltergeist</a>から<a href="https://chromium.googlesource.com/chromium/src/+/master/headless/README.md">Headless Chrome</a>に乗り換えてみたのでそのときのメモ。</p>

<h2 id="対応-pull-request">対応 Pull Request</h2>

<p>今回対応したPull Requestはこちら。</p>

<p><a href="https://github.com/toshimaru/RailsTwitterClone/pull/211">Use headless Chrome instead of PhantomJS(poltergeist) by toshimaru · Pull Request #211 · toshimaru/RailsTwitterClone · GitHub</a></p>

<p>思ったよりも差分はコンパクトにまとまりました。</p>

<h2 id="install-selenium-webdriver">Install selenium-webdriver</h2>

<p>まずは<code class="language-plaintext highlighter-rouge">poltergeist</code> gemの代わりに、<code class="language-plaintext highlighter-rouge">selenium-webdriver</code>をインストール。</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gd">-  gem "poltergeist"
</span><span class="gi">+  gem "selenium-webdriver"
</span></code></pre></div></div>

<h2 id="change-capybarajavascript_driver">Change Capybara.javascript_driver</h2>

<p>次に<code class="language-plaintext highlighter-rouge">Capybara.javascript_driver</code>を<code class="language-plaintext highlighter-rouge">:poltergeist</code>から<code class="language-plaintext highlighter-rouge">:selenium_chrome_headless</code>に変更します。</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gd">- require "capybara/poltergeist"
- Capybara.javascript_driver = :poltergeist
</span><span class="gi">+ require "selenium-webdriver"
+ Capybara.javascript_driver = :selenium_chrome_headless
</span></code></pre></div></div>

<p>ちなみに<code class="language-plaintext highlighter-rouge">:selenium_chrome_headless</code>の設定は下記の変更の中でcapybara内に取り込まれています。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Capybara</span><span class="p">.</span><span class="nf">register_driver</span> <span class="ss">:selenium_chrome_headless</span> <span class="k">do</span> <span class="o">|</span><span class="n">app</span><span class="o">|</span>
  <span class="n">browser_options</span> <span class="o">=</span> <span class="o">::</span><span class="no">Selenium</span><span class="o">::</span><span class="no">WebDriver</span><span class="o">::</span><span class="no">Chrome</span><span class="o">::</span><span class="no">Options</span><span class="p">.</span><span class="nf">new</span>
  <span class="n">browser_options</span><span class="p">.</span><span class="nf">args</span> <span class="o">&lt;&lt;</span> <span class="s1">'--headless'</span>
  <span class="n">browser_options</span><span class="p">.</span><span class="nf">args</span> <span class="o">&lt;&lt;</span> <span class="s1">'--disable-gpu'</span>
  <span class="no">Capybara</span><span class="o">::</span><span class="no">Selenium</span><span class="o">::</span><span class="no">Driver</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="ss">browser: :chrome</span><span class="p">,</span> <span class="ss">options: </span><span class="n">browser_options</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<p>via. <a href="https://github.com/teamcapybara/capybara/commit/0275eab42c610cd1ccde7947b051d0b00857b9ce">add default selenium chrome driver registrations · teamcapybara/capybara@0275eab · GitHub</a></p>

<h2 id="install-chromedriver">Install chromedriver</h2>

<h3 id="on-macos">On MacOS</h3>

<p><code class="language-plaintext highlighter-rouge">chromedriver</code> が必要になってくるが、Macの場合はbrewで入れちゃうのが一番ラクです。</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>brew cask <span class="nb">install </span>chromedriver
<span class="go">Updating Homebrew...
</span><span class="gp">==&gt;</span><span class="w"> </span>Auto-updated Homebrew!
<span class="go">Updated 1 tap (homebrew/cask).
No changes to formulae.

</span><span class="gp">==&gt;</span><span class="w"> </span>Satisfying dependencies
<span class="gp">==&gt;</span><span class="w"> </span>Downloading https://chromedriver.storage.googleapis.com/2.41/chromedriver_mac64.zip
<span class="gp">#</span><span class="c">####################################################################### 100.0%</span>
<span class="gp">==&gt;</span><span class="w"> </span>Verifying checksum <span class="k">for </span>Cask chromedriver
<span class="gp">==&gt;</span><span class="w"> </span>Installing Cask chromedriver
<span class="gp">==&gt;</span><span class="w"> </span>Extracting nested container chromedriver
<span class="gp">==&gt;</span><span class="w"> </span>Linking Binary <span class="s1">'chromedriver'</span> to <span class="s1">'/usr/local/bin/chromedriver'</span><span class="nb">.</span>
<span class="go">🍺  chromedriver was successfully installed!
</span></code></pre></div></div>

<p><strong>注意事項</strong></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">brew install chromedriver</code>ではinstallできないので注意（<code class="language-plaintext highlighter-rouge">brew cask</code>経由にすること）</li>
  <li><code class="language-plaintext highlighter-rouge">chromedriver-helper</code> gem が入っているとうまく動かない場合があるので注意</li>
</ul>

<h3 id="on-circleci">On CircleCI</h3>

<p>CircleCI上では、<code class="language-plaintext highlighter-rouge">ruby:x.x-node-browsers</code>のCircleCI公式Ruby Dokcer Imageを使っていればきちんと動作しました。</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="na">docker</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">image</span><span class="pi">:</span> <span class="s">circleci/ruby:2.5-node-browsers</span>
</code></pre></div></div>

<p>上記の設定の場合、Ruby2.5のnode-browsersバージョンをベースイメージとして使用しています。</p>

<h3 id="on-travisci">On TravisCI</h3>

<p>これが今回の対応で一番ハマった設定でした。いろいろ試しましたが下記のエラーがなかなか解決できませんでした。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Failures:

  1) Authentication authorization screenshot
     Failure/Error: before { visit signin_path }

     Selenium::WebDriver::Error::WebDriverError:
        Unable to find Mozilla geckodriver. Please download the server from https://github.com/mozilla/geckodriver/releases and place it somewhere on your PATH. More info at https://developer.mozilla.org/en-US/docs/Mozilla/QA/Marionette/WebDriver.
     # ./spec/features/authentication_pages_spec.rb:9:in `block (3 levels) in &lt;top (required)&gt;'
</code></pre></div></div>

<p><del>本当は<code class="language-plaintext highlighter-rouge">sudo: false</code>の設定で動かしたかったのですがそれだと上手くいかなかったので<code class="language-plaintext highlighter-rouge">sudo</code>で起動させて<code class="language-plaintext highlighter-rouge">chromium-chromedriver</code>をテスト前にInstallしてパスを通すという方法でテストを通しました。</del></p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">sudo</span><span class="pi">:</span> <span class="s">required</span>
<span class="na">language</span><span class="pi">:</span> <span class="s">ruby</span>
<span class="na">before_install</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">sudo apt-get install -y chromium-chromedriver</span>
  <span class="pi">-</span> <span class="s">ln -s /usr/lib/chromium-browser/chromedriver ~/bin/chromedriver</span>
</code></pre></div></div>

<p><del>(もう少しスマートなやり方をご存知の方は教えていただけると嬉しいです🙏)</del></p>

<p><strong>追記（2019年9月17日）</strong></p>

<p><code class="language-plaintext highlighter-rouge">sudo</code> 無しでも下記のような設定でいけました。</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">dist</span><span class="pi">:</span> <span class="s">bionic</span>
<span class="na">addons</span><span class="pi">:</span>
  <span class="na">chrome</span><span class="pi">:</span> <span class="s">stable</span>
  <span class="na">apt</span><span class="pi">:</span>
    <span class="na">packages</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">chromium-chromedriver</span>
</code></pre></div></div>

<p>参考Pull Request: <a href="https://github.com/toshimaru/RailsTwitterClone/pull/524/files">No sudo on TravisCI by toshimaru · Pull Request #524 · toshimaru/RailsTwitterClone</a></p>

<h2 id="参考リンク">参考リンク</h2>

<ul>
  <li><a href="https://ohbarye.hatenablog.jp/entry/2018/03/10/232300">PhantomJS + Poltergeist を Selenium + Headless Chrome で置き換える (1) Rails + Capybara による feature spec 編 - valid,invalid</a></li>
  <li><a href="https://tech.speee.jp/entry/2017/06/15/135636">RSpec の feature spec でヘッドレス Chrome を使う - Speee DEVELOPER BLOG</a></li>
  <li><a href="http://y-yagi.tumblr.com/post/166831012790/rails%E9%9B%91%E3%81%ABsystem-test%E3%81%A7headless-chrome%E3%82%92%E4%BD%BF%E3%81%86">[Rails]雑にSystem TestでHeadless Chromeを使う | 日々雑記</a></li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="rails" /><category term="rspec" /><category term="chrome" /><summary type="html"><![CDATA[RailsのCapybaraを使ったE2Eテスト(feature spec)をこの度、poltergeistからHeadless Chromeに乗り換えてみたのでそのときのメモ。 今回対応したPull Requestしてはこちら。 https://github.com/toshimaru/RailsTwitterClone/pull/211 思ったよりも差分はコンパクトにまとまった。まずはpoltergeist gemの代わりに、selenium-webdriverをインストール。次にCapybara.javascript_driverを:poltergeistから:selenium_chrome_headlessに変更。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/chromedriver.jpg" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/chromedriver.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Chromebookを使ってみた WEBだけ使えればいい人にはオススメ、開発マシンとしては難しい</title><link href="https://blog.toshimaru.net/chromebook-firstimpression/" rel="alternate" type="text/html" title="Chromebookを使ってみた WEBだけ使えればいい人にはオススメ、開発マシンとしては難しい" /><published>2014-03-09T00:00:00+09:00</published><updated>2014-03-09T00:00:00+09:00</updated><id>https://blog.toshimaru.net/chromebook-firstimpression</id><content type="html" xml:base="https://blog.toshimaru.net/chromebook-firstimpression/"><![CDATA[<p><a href="http://blog.livedoor.jp/itsoku/archives/37545648.html">ついに激安PCのChromeBookが日本上陸！東芝が来月にも発売へ</a></p>

<p>Chromebookが日本にも来るようですね。カナダにて一足先にChromebookを一週間ほど触ってみたので、その感想を書いてみようと思います。</p>

<h2 id="スペック">スペック</h2>

<p>購入したのはSamsungのChromebook. ３万円くらいでした。安い。</p>

<p><img src="/images/posts/chromebook/chromebook1.jpg" alt="chromebook pic 1" /></p>

<p>特徴はざっくりこんな感じ。</p>

<ul>
  <li>11.6 インチディスプレイ</li>
  <li>約1キログラム</li>
  <li>2GB メモリ</li>
  <li>16GB SSD</li>
  <li>Samsung Exynos 5 Dual Processor</li>
</ul>

<p>via. <a href="https://www.google.com/intl/ms/chrome/devices/samsung-chromebook.html#specs">Samsung Chromebook</a></p>

<p>重さも軽くノートのように持ち運べるので携帯性は優れてて良いかと。SSD容量が少ないのは「ファイルはローカルじゃなくWEBに置いてね」というChromeOSの思想から気にしちゃいけないところ。動作に関してはタブ何十枚も一度に開いたり動画を閲覧してたりするとモッサリするかなって感じだった。</p>

<p>何より驚いたのは起動の早さでした。本当に10秒くらいで起動するんですよ、これが。見てて気持ちよかった。</p>

<h2 id="chrome-osの思想">Chrome OSの思想</h2>

<p>ChromeOSは全ての作業がブラウザ/WEBで実行可能になりつつある昨今、生まれるべくして生まれたOSだと思う。僕らが日々パソコンの前に座って行う作業はウェブ上で可能な作業へとシフトしていっている。メールチェックはOutlookからGmailへと、ドキュメント作成はWord/ExcelからGoogleDocsへと、各種データはローカル保存からEvernote,DropBoxなどのクラウドストレージへと移行している。プログラミングですら<a href="https://c9.io/">Cloud9 IDE</a>などのサービスでウェブ上で可能になっている。</p>

<p>ChromeOSには従来のようなデスクトップやファイルといった発想はない。</p>

<blockquote>
  <p>Googleアカウントを利用してログインする。Google Chrome OSのユーザインタフェースは、基本的にGoogle Chromeだけが全面に出ている形で、デスクトップやファイルブラウザなどは無く、すべてのアプリケーションはウェブアプリケーションという形でGoogle Chromeにインストールされ、実行される。インストールしたアプリはGoogle Chromeにショートカットを作成してアクセスすることが出来る。</p>

  <p><a href="http://ja.wikipedia.org/wiki/Google_Chrome_OS">Google Chrome OS - Wikipedia</a></p>
</blockquote>

<p>起動するとこんな画面。一見他OSのデスクトップのようにファイルが置けたりするんじゃないの？って思うかもしれないけどそんなことはない。</p>

<p><img src="/images/posts/chromebook/chromebook2.jpg" alt="chromebook pic 2" /></p>

<p>基本的にアプリケーションはChrome上で動作するアプリケーションのみなので、下部にズラって並んでるのはChromeアプリのショートカットアイコン。クリックするとChromeが開きWEBアプリが起動する感じ。</p>

<h2 id="開発者マシンとして利用可能">開発者マシンとして利用可能？</h2>

<p>自分は開発者なので開発者マシンとして利用可能かも試してみた。</p>

<p>結論から言うと現時点では難しいという印象。</p>

<h3 id="developer-mode">Developer Mode</h3>

<p>Chromebookには<a href="http://www.chromium.org/chromium-os/chromiumos-design-docs/developer-mode">Developerモード</a>というのがあって、これをONにすることでシェル操作が可能になったりする。例えば自分のSamsung Chromebookであれば<a href="http://www.chromium.org/chromium-os/developer-information-for-chrome-os-devices/samsung-arm-chromebook#TOC-Developer-Mode">この手順</a>でDeveloperモードがONにできた。</p>

<h3 id="chrome上で動作する代替アプリケーション">Chrome上で動作する代替アプリケーション</h3>

<p>Chrome上で動作する開発者用のアプリケーションとしてはこんなのが紹介されてる。</p>

<ul>
  <li><a href="https://chrome.google.com/webstore/detail/secure-shell/pnhechapfaindjhompbnflcldabbghjo">Secure Shell</a> - ターミナル、SSHクライアント</li>
  <li><a href="https://chrome.google.com/webstore/detail/chrome-remote-desktop/gbchcmhmhahfdphkhkmpfmihenigjmpp">Chrome Remote Desktop</a> - リモートデスクトップ</li>
  <li><a href="https://chrome.google.com/webstore/detail/text/mmfbcljfglbokpmkimbfghdkjmjhdgbg">Text</a> - テキストエディタ</li>
  <li><a href="https://chrome.google.com/webstore/detail/beagle-term/gkdofhllgfohlddimiiildbgoggdpoea">Beagle Term</a> - ターミナルエミュレータ</li>
  <li><a href="https://chrome.google.com/webstore/detail/cloud9/nbdmccoknlfggadpfkmcpnamfnbkmkcp">Cloud9</a> - オンラインIDE</li>
  <li><a href="http://runnable.com/">Runnable</a> - クラウドベースIDE</li>
</ul>

<p>via. <a href="http://www.chromium.org/chromium-os/developing-apps-on-your-chromium-os-device">Developing apps on your Chromebook</a></p>

<p>どれも悪くはないけど痒いところには手が届かない感じ。</p>

<h3 id="その他">その他</h3>

<p>他にも<a href="http://jeremyckahn.github.io/blog/2013/02/09/setting-up-a-local-development-environment-in-chrome-os/">Setting Up a Local Development Environment in Chrome OS</a>や<a href="http://lifehacker.com/how-to-install-linux-on-a-chromebook-and-unlock-its-ful-509039343">How to Install Linux on a Chromebook and Unlock Its Full Potential</a>なんかを参考に<a href="https://github.com/dnschneid/crouton">crouton</a>を使ってみたりしたけど、まだまだ発展途中という印象だった。</p>

<h3 id="tips">Tips</h3>

<p><a href="http://www.chromestory.com/google-chromebook/">100 Tips for Your Google Chromebook</a></p>

<h2 id="まとめ">まとめ</h2>

<p>パソコンの普段の使い方が「Gmailでメールチェック」「YouTube/ニコ動などで動画視聴」「Twitter/Facebook閲覧」などWEBに閉じている方であれば、Chromebookはオススメできます。WindowsやMacよりも低価格ですし、悪い買い物ではないと思います。</p>

<p>ただ仕事での利用、ソフトウェア開発などの利用シーンにおいてはオススメできません。「Chrome縛り」でイケると思ってchromebook試用してみたが、僕は思ったより辛かった。</p>]]></content><author><name>Toshimaru</name></author><category term="chrome" /><summary type="html"><![CDATA[Chromebookが日本にも来るようですね。カナダにて一足先にChromebookを一週間ほど触ってみたので、その感想を書いてみようと思います。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/chromebook/chromebook2.jpg" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/chromebook/chromebook2.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">細かすぎて伝わらないChrome Developerツール・テクニック集</title><link href="https://blog.toshimaru.net/chrome-dev-tool/" rel="alternate" type="text/html" title="細かすぎて伝わらないChrome Developerツール・テクニック集" /><published>2013-12-20T00:00:00+09:00</published><updated>2019-08-08T00:00:00+09:00</updated><id>https://blog.toshimaru.net/chrome-dev-tool</id><content type="html" xml:base="https://blog.toshimaru.net/chrome-dev-tool/"><![CDATA[<p><a href="http://www.adventar.org/calendars/62">Frontrend Advent Calendar 2013</a>、20日目の記事でございます。フロントエンド関連の記事として細かすぎて伝わりにくいであろうChrome Developerツールの使い方を紹介してみたいと思います。</p>

<h2 id="consolelog以外にも便利なconsoleメソッドがある"><code class="language-plaintext highlighter-rouge">console.log</code>以外にも便利なconsoleメソッドがある！</h2>

<p><code class="language-plaintext highlighter-rouge">console.log()</code>とかは常識でしょうが、それ以外にも実はconsole系メソッドが多くあります。下記のような感じ。</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">console.error()</code>: コンソールにエラー出力</li>
  <li><code class="language-plaintext highlighter-rouge">console.warn()</code>: コンソールに警告出力</li>
  <li><code class="language-plaintext highlighter-rouge">console.assert()</code>: アサーション。第一引数がfalseだった場合に第二引数の文字列を出力。</li>
  <li><code class="language-plaintext highlighter-rouge">console.time()</code> &amp; <code class="language-plaintext highlighter-rouge">console.timeEnd()</code>: タイマー機能。前者でタイマースタート、後者でタイマーストップ。引数の文字列でタイマーIDを識別している。</li>
</ul>

<p>例えば下記のコード例では<code class="language-plaintext highlighter-rouge">console.time</code>を使って<code class="language-plaintext highlighter-rouge">getElementById</code>とjQueryのセレクターのパフォーマンスの違いを計測しています。結果はChromeConsoleを開いてResultを押してどうぞご自身の目で確認してみてください。</p>

<iframe width="100%" height="300" src="http://jsfiddle.net/toshimaru/tr8Vg/5/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p>ちなみに私の環境上での結果。</p>

<p><img src="/images/posts/chromedev/result.png" alt="assert" /></p>

<h3 id="consoleassert"><code class="language-plaintext highlighter-rouge">console.assert</code></h3>

<p>簡易的な<code class="language-plaintext highlighter-rouge">true</code>/<code class="language-plaintext highlighter-rouge">false</code>テストであれば<code class="language-plaintext highlighter-rouge">console.assert()</code>が使えます。例えばこんなコード。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>function returnTrue() { return false; }
console.assert(returnTrue(), 'Trueをreturnすべきだよ！')
</code></pre></div></div>

<p>こんな感じで表示されます。</p>

<p><img src="/images/posts/chromedev/assert.png" alt="assert" /></p>

<h2 id="cssマッピングでchromeからcss変更を直接反映">CSSマッピングでChromeからCSS変更を直接反映！</h2>

<p>CSSマッピングの機能を使うことでChrome上のCSS変更を直接反映することができます。簡単な手順はこうです。</p>

<ul>
  <li>ChromeDevツールの歯車アイコンで開くメニューからWorkspaceを追加</li>
  <li>マッピングしたいファイルを選択し、右クリックして <code class="language-plaintext highlighter-rouge">Map to File System Resource...</code>をクリックする。</li>
</ul>

<p><img src="/images/posts/chromedev/css-map.png" alt="css mapping" /></p>

<p>(Image from <a href="http://liginc.co.jp/web/tool/browser/38012">Web屋ならチェックしておきたい！作業効率が激変するChrome DevToolsの便利な使い方まとめ</a>)</p>

<p>これで準備OK！ Chrome上で直接ヴィジュアルを確認しながらいい具合に変更を加えてれば、ローカル上のファイルも変更されます。</p>

<h2 id="ソースマッピングにsassを使う">ソースマッピングにSASSを使う！</h2>

<p>CSSよりもやっぱり時代はLESS,SASSなどのCSSプリプロセッサーですよねー。ということで実はCSSマッピングにSASSも使えるんです。ただし下記の点に注意してください。</p>

<ul>
  <li><strong>Sass 3.3以上</strong>が必要</li>
  <li><strong>Chrome Canary</strong>を使う</li>
  <li><strong>chrome://flags</strong> にアクセスしてデベロッパーツールを有効にする</li>
</ul>

<p>↓Enable Developer Tools experimentsをONにする↓</p>

<p><img src="/images/posts/chromedev/dev-flag.png" alt="css mapping" /></p>

<p>詳しい手順は<a href="http://dev.classmethod.jp/etc/scss-source-maps-debug/">こちら（Chrome CanaryでSCSS(Sass)のデバックを試してみました。）</a>で確認してみてください。良きCSSライフを！</p>

<h2 id="androidをchromeでリモートデバック可能">AndroidをChromeでリモートデバック可能！</h2>

<p>下記動画でPaul Irish氏がリモートデバッギングを簡単に解説してくれてます。この動画でどんなことができるか簡単に把握することができます。</p>

<iframe width="560" height="315" src="//www.youtube.com/embed/Q7rEFEMpwe4" frameborder="0" allowfullscreen=""></iframe>

<p>実機をChromeDevツールでデバッグできるのはとても喜ばしいことです。注意点は下記。</p>

<ul>
  <li><a href="https://play.google.com/store/apps/details?id=com.chrome.beta">Chrome Beta</a>がAndroidに必要</li>
  <li>USBでAndroidと接続が必要</li>
  <li>アンドロイド上でDeveloperオプションを有効にする必要があります。ONにするためには設定からBuild Numberをゴニョゴニョする必要があります</li>
</ul>

<p>詳しい解説は<a href="https://developers.google.com/chrome-developer-tools/docs/remote-debugging">こちら（Remote Debugging Chrome on Android）</a>を参照。</p>

<h2 id="fpsを確認してヌルヌル動作を目指そう">FPSを確認してヌルヌル動作を目指そう！</h2>

<p>たとえば下記のかなりリッチなパララックスウェブサイト。ちょっと見てみてください。</p>

<p><a href="http://letsfreecongress.org/">Money wins Elections</a></p>

<p>パララックス効果はサイトをリッチに見せることができる最近良く使われるテクニックではありますが、一方ローエンドPCでの動作も気にしたいところです。上サイトをTimelineからレコーディングしてみます。</p>

<p><img src="/images/posts/chromedev/chrome-timeline.png" alt="timeline" /></p>

<p>上のグレイ線が30FPSのライン、下の線が60FPSのラインです。途中のぶわーって広がるエフェクトのところで30FPSまで落ちているのが確認できます。体感的にも少しガクついている感じです。ローエンドPCだともっとガクつくことでしょう。</p>

<p>（※本機能の使い方もPaul Irish氏が<a href="http://www.youtube.com/watch?v=bqfoYaKCYUI">Fluent 2013</a>の講演で紹介しています。）</p>

<h2 id="おわりに">おわりに</h2>

<p>ここで紹介した以外にもまだまだ便利な使い方がChromeDeveloperツールにはあります。自分もまだ全然把握できていません。もし「この機能が便利！」ってのがありましたら是非とも教えてくださいまし〜。</p>

<h2 id="参考">参考</h2>

<ul>
  <li><a href="http://www.igvita.com/slides/2012/devtools-tips-and-tricks/">Wait, DevTools could do THAT?</a></li>
  <li><a href="http://blog.asial.co.jp/1036">【Javascript】consoleオブジェクトが持つlog以外の便利メソッド18（前編）</a></li>
  <li><a href="https://developers.google.com/chrome-developer-tools/docs/console">Using the Console</a></li>
  <li><a href="http://liginc.co.jp/web/tool/browser/38012">Web屋ならチェックしておきたい！作業効率が激変するChrome DevToolsの便利な使い方まとめ</a></li>
  <li><a href="https://developers.google.com/chrome-developer-tools/docs/css-preprocessors#toc-requirements">Working with CSS Preprocessors</a></li>
  <li><a href="http://dev.classmethod.jp/etc/scss-source-maps-debug/">【Source Maps】Chrome CanaryでSCSS(Sass)のデバックを試してみました。</a></li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="chrome" /><summary type="html"><![CDATA[Frontrend Advent Calendar 2013、20日目の記事でございます。フロントエンド関連の記事として細かすぎて伝わりにくいであろうChrome Developerツールの使い方を紹介してみたいと思います。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/chromedev/chrome-dev.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/chromedev/chrome-dev.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">ChromeのDevToolでlocalStrageのデータをイジイジする</title><link href="https://blog.toshimaru.net/chrome-dev-tool-localstrage/" rel="alternate" type="text/html" title="ChromeのDevToolでlocalStrageのデータをイジイジする" /><published>2013-08-15T00:00:00+09:00</published><updated>2013-08-15T00:00:00+09:00</updated><id>https://blog.toshimaru.net/chrome-dev-tool-localstrage</id><content type="html" xml:base="https://blog.toshimaru.net/chrome-dev-tool-localstrage/"><![CDATA[<p>ChromeのDevToolでローカルストレージのデータをイジったことなかったけど、簡単にできたのでメモ。</p>

<p>例えばTODOデータをローカルストレージに保存している<a href="http://todomvc.com/architecture-examples/backbone/">TodoMVC</a>で上記のようにデータを作ってみる。</p>

<p>こんな感じで閲覧できる。</p>

<p><img src="/images/posts/localstrage/ls.png" alt="chrome-localstrage" /></p>

<p>ローカルストレージのデータを<code class="language-plaintext highlighter-rouge">TODO1</code>を<code class="language-plaintext highlighter-rouge">TODO123</code>に変更してみる。</p>

<p><img src="/images/posts/localstrage/ls2.png" alt="chrome-localstrage" /></p>

<p>ページをリロードしてみる。ローカルストレージからデータの初期化が行われるので、<code class="language-plaintext highlighter-rouge">TODO123</code>になっていることが確認できます。</p>

<p><img src="/images/posts/localstrage/ls3.png" alt="chrome-localstrage" /></p>]]></content><author><name>Toshimaru</name></author><category term="chrome" /><summary type="html"><![CDATA[ChromeのDevToolでローカルストレージのデータをイジったことなかったけど、簡単にできたのでメモ。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/localstrage/todo.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/localstrage/todo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>