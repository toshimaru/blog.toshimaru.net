<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://blog.toshimaru.net/feed/by_tag/css.xml" rel="self" type="application/atom+xml" /><link href="https://blog.toshimaru.net/" rel="alternate" type="text/html" /><updated>2022-05-19T13:37:03+09:00</updated><id>https://blog.toshimaru.net/feed/by_tag/css.xml</id><title type="html">Hack Your Design!</title><subtitle>toshimaruの技術系なブログ</subtitle><author><name>Toshimaru</name></author><entry><title type="html">CSS3アニメーションを使ってサイトをリッチに表現する</title><link href="https://blog.toshimaru.net/css-animation/" rel="alternate" type="text/html" title="CSS3アニメーションを使ってサイトをリッチに表現する" /><published>2013-12-11T00:00:00+09:00</published><updated>2018-08-18T00:00:00+09:00</updated><id>https://blog.toshimaru.net/css-animation</id><content type="html" xml:base="https://blog.toshimaru.net/css-animation/"><![CDATA[<style type="text/css">
@-webkit-keyframes anim {
    0%   { opacity: 0; }
    100% { opacity: 1; }
}
@keyframes anim　{
    0%   { opacity: 0; }
    100% { opacity: 1; }
}
.post-image  {
  -ms-animation: anim 2s infinite;
  -webkit-animation: anim 2s infinite;
  animation: anim 2s infinite;
}
</style>

<p><a href="http://www.adventar.org/calendars/57">CSS Property Advent Calendar 2013</a>の11日目の記事としてCSSアニメーションのプロパティを紹介をします。</p>

<h2 id="なぜcssアニメーションなのか">なぜCSSアニメーションなのか？</h2>

<p>さて本ブログでもタイトルやアイキャッチ画像のイメージの表示にちょっとしたCSS3アニメーションを採用しています。ほんのちょっとのCSSの記述なんですがサイトがイイ感じにリッチに見えてとても気に入ってます。</p>

<p>jQueryなんかでも<a href="https://api.jquery.com/animate/">.animate()</a>を使えばアニメーションができますね。ではなぜCSS3アニメーションなのか？　そこからエントリを始めてみたいと思います。</p>

<h3 id="パフォーマンス的観点-css-vs-jquery">パフォーマンス的観点 CSS vs jQuery</h3>

<p>DEV.OPERAにて<a href="https://dev.opera.com/articles/css3-vs-jquery-animations/">CSS3 vs jQueryアニメーションの比較</a>が行われています。ここではjQueryとCSS3によるアニメーションどちらが優れているかがレポートされており、最終的な勝者はCSS3だとして記事を結んでいます。本比較において使われているCSS3のアニメーションサンプルとjQueryのアニメーションサンプルを私のChrome(Canary)上でも比較してみました。</p>

<p>肉眼でもCSSアニメーションのほうが綺麗に見える気がします。DevTools上でも実際、Rendering、Paintイベントをフィルターしてみたところ、実際jQueryのほうがイベントの粒度が荒いことが見て取れます。</p>

<h3 id="1-cssによるアニメーション">1. CSSによるアニメーション</h3>

<p><img src="/images/posts/css-animate/1.png" alt="比較１" /></p>

<p><img src="/images/posts/css-animate/A.png" alt="比較A" /></p>

<p>イベントが安定して滑らかに流れています。メモリ効率も良い感じ。</p>

<h3 id="2-jqueryによるアニメーション">2. jQueryによるアニメーション</h3>

<p>一方、jQueryはどうでしょうか。</p>

<p><img src="/images/posts/css-animate/2.png" alt="比較２" /></p>

<p><img src="/images/posts/css-animate/B.png" alt="比較B" /></p>

<p>イベントの流れの傾斜がCSSより緩やかで、たまに上画像のようにもたつくことがあります。メモリ効率も山状に上がってよろしくない感じです。</p>

<p>上記の結果からCSSアニメーションを使って良いシーンであれば、<strong>パフォーマンス的にCSSはjQueryよりも優れている</strong> と言えます。</p>

<h2 id="ブラウザ対応状況">ブラウザ対応状況</h2>

<p>CSS3プロパティだとブラウザ対応状況が心配なところ。<a href="https://caniuse.com/#search=keyframes">サポート状況はこんな感じ</a>です。</p>

<p><img src="/images/posts/css-animate/browser.png" alt="対応状況" /></p>

<p>IEは10以降、それ以外のメインブラウザの最新版は対応済みですね。ベンダープレフィックスも<code class="language-plaintext highlighter-rouge">-webkit-</code>さえつければ大丈夫そうです。IE9以前を気にするかもしれませんが、<a href="https://www.adobe.com/jp/devnet/dreamweaver/articles/html5pack_css3_part6.html">グレースフル・デグラデーション</a>の考え方で＜装飾＞という意味においてはCSSアニメーションプロパティはどんどん使っていい機能かと思います。</p>

<h2 id="cssアニメーションの書き方">CSSアニメーションの書き方</h2>

<p>ではCSSアニメーションはどう書くか？　キーワードは<code class="language-plaintext highlighter-rouge">@keyframes</code>と<code class="language-plaintext highlighter-rouge">animation</code>の２つです。</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@keyframes</span> <span class="err">&lt;</span><span class="n">アニメーションの名前</span><span class="err">&gt;</span> <span class="p">{</span>
    <span class="err">0</span><span class="o">%</span> <span class="p">{</span> <span class="c">/* 定義 */</span> <span class="p">}</span>
    <span class="err">50</span><span class="o">%</span> <span class="p">{</span> <span class="c">/* 定義 */</span> <span class="p">}</span>
    <span class="err">100</span><span class="o">%</span> <span class="p">{</span> <span class="c">/* 定義 */</span> <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>こんな感じで0%から100%にかけて特定のタイミングでのアニメーションスタイル定義を書いていきます。次にそのアニメーション名を使った<code class="language-plaintext highlighter-rouge">animation</code>をクラス内に加えます。</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">.&lt;</span><span class="nt">class名</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="nl">animation</span><span class="p">:</span> <span class="err">&lt;</span><span class="n">アニメーションの名前</span><span class="err">&gt;</span> <span class="err">&lt;</span><span class="n">秒数</span><span class="err">&gt;</span><span class="n">s</span> <span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>あとはこのクラス名をDOM内のアニメーションしたい要素に加えればOKです。</p>

<p>では具体例。実際に本記事タイトル下でフェードインさせている画像のCSSを見てみましょう。</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@-webkit-keyframes</span> <span class="n">anim</span> <span class="p">{</span>
    <span class="err">0</span><span class="o">%</span>   <span class="p">{</span> <span class="nl">opacity</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span> <span class="p">}</span>
    <span class="err">100</span><span class="o">%</span> <span class="p">{</span> <span class="nl">opacity</span><span class="p">:</span> <span class="m">1</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span>
<span class="k">@keyframes</span> <span class="n">anim</span><span class="err">　</span><span class="p">{</span>
    <span class="err">0</span><span class="o">%</span>   <span class="p">{</span> <span class="nl">opacity</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span> <span class="p">}</span>
    <span class="err">100</span><span class="o">%</span> <span class="p">{</span> <span class="nl">opacity</span><span class="p">:</span> <span class="m">1</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span>
<span class="nc">.post-image</span>  <span class="p">{</span>
    <span class="nl">-ms-animation</span><span class="p">:</span> <span class="n">anim</span> <span class="m">2s</span> <span class="n">infinite</span><span class="p">;</span>
    <span class="nl">-webkit-animation</span><span class="p">:</span> <span class="n">anim</span> <span class="m">2s</span> <span class="n">infinite</span><span class="p">;</span>
    <span class="nl">animation</span><span class="p">:</span> <span class="n">anim</span> <span class="m">2s</span> <span class="n">infinite</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>透過度0から透明度1へのアニメーション（<code class="language-plaintext highlighter-rouge">anim</code>）を2秒（<code class="language-plaintext highlighter-rouge">2s</code>）毎にループ（<code class="language-plaintext highlighter-rouge">infinite</code>）させてます。このアニメーションは<code class="language-plaintext highlighter-rouge">post-image</code>クラスに適応されます。実際に使用の際は<code class="language-plaintext highlighter-rouge">-webkit-</code>プレフィックス付きの定義も必要なことに注意してください。</p>

<h2 id="どこからアニメーションの着想を得るか">どこからアニメーションの着想を得るか</h2>

<p>といっても「アニメーションのCSSスタイル定義するの面倒くさい」とか「自分のやりたい動きをどう書けばいいかわからない」という人も多いかと思います。そんな人は<a href="https://daneden.me/animate/">Animate.css</a>のページを見てみるとよいかと思います。</p>

<p>これらのアニメーションは全てCSSにて動いているのですが、使い回しの効きそうなCSSで表現できる典型的なアニメーションは大体網羅されていると思うので、ここからアニメーションスタイルをパクってくると良いかと思います（CSSのサイズを気にしないという方は<code class="language-plaintext highlighter-rouge">animate.css</code>をそのままサイトに持ってきてもいいですね）。</p>

<p>CSSコードは下記のコードから引っ張ってきてください。</p>

<p><a href="https://github.com/daneden/animate.css/blob/master/animate.css">animate.css/animate.css at master</a></p>

<h2 id="最後に">最後に</h2>

<p>皆さんもCSSアニメーションをサイトのちょっとしたところに取り入れてサイトをリッチにみせてみてはいかがでしょうか。</p>

<p>ただ１つ注意したいのが、基本的に人の目は動いているものに行きやすく、過度なアニメーションの使用、または派手すぎるアニメーションの動きはユーザー体験を著しく下げるので「使いすぎ注意」ということを忘れずに。</p>

<h2 id="参考">参考</h2>

<ul>
  <li><a href="https://developer.mozilla.org/ja/docs/Web/CSS/@keyframes">@keyframes - CSS / MDN</a></li>
  <li><a href="https://github.com/daneden/animate.css">daneden/animate.css - GitHub</a></li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="css" /><summary type="html"><![CDATA[CSS Property Advent Calendar 2013の11日目の記事としてCSSアニメーションのプロパティを紹介をします。 なぜCSS3アニメーションなのか？ さて本ブログでもタイトルやアイキャッチ画像のイメージの表示にちょっとしたCSS3アニメーションを採用しています。ほんのちょっとのCSSの記述なんですがサイトがイイ感じにリッチに見えてとても気に入ってます。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/css-animate/block.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/css-animate/block.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">CSS3でフリップアニメーションの実装</title><link href="https://blog.toshimaru.net/css-flip/" rel="alternate" type="text/html" title="CSS3でフリップアニメーションの実装" /><published>2013-10-05T00:00:00+09:00</published><updated>2013-10-05T00:00:00+09:00</updated><id>https://blog.toshimaru.net/css-flip</id><content type="html" xml:base="https://blog.toshimaru.net/css-flip/"><![CDATA[<p>CSSでフリップアニメーション実装してみます。</p>

<p><a href="http://toshimaru.net/demo/css-flip/" class="btn btn-primary">Demo</a></p>

<p>CSS/HTMLそれぞれのソースは以下のような感じです。</p>

<script src="https://gist.github.com/toshimaru/6402ad27da9f39554518.js"></script>

<h3 id="参考">参考</h3>

<ul>
  <li><a href="http://davidwalsh.name/css-flip">Create a CSS Flipping Animation</a></li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="css" /><summary type="html"><![CDATA[CSSによるフリップアニメーションの実装]]></summary></entry><entry><title type="html">Responsive Web Design 時代の画像スライダー</title><link href="https://blog.toshimaru.net/responsive-web-design/" rel="alternate" type="text/html" title="Responsive Web Design 時代の画像スライダー" /><published>2012-10-11T00:00:00+09:00</published><updated>2012-10-11T00:00:00+09:00</updated><id>https://blog.toshimaru.net/responsive-web-design</id><content type="html" xml:base="https://blog.toshimaru.net/responsive-web-design/"><![CDATA[<p>え？　"れすぽんしぶうぇぶでざいん"って何かって？</p>
<p>なかなか日本では聞きなれないような気がしなくもないですがこんな意味です。</p>
<blockquote>
<p>Responsive web design (often abbreviated to RWD) is an approach to web design in which a site is crafted to provide an optimal viewing experience&mdash;easy reading and navigation with a minimum of resizing, panning, and scrolling&mdash;across a wide range of devices (from desktop computer monitors to mobile phones).</p>
<p><a href="http://en.wikipedia.org/wiki/Responsive_web_design">Responsive web design (wikipedia)</a></p>
</blockquote>
<p>つまり、レスポンシブWEBデザインとは、デバイスの幅に応じてWebの見た目（レイアウトとかサイズとか）が最適化されるWebデザインの手法のことです。タブレット、スマホの台頭によってますます重要視されている手法ですね。</p>
<p>さて、本題。本日は画像スライダーのお話。</p>
<p>先日画像スライダーを実装する機会があったので「js slider」なんかでググって一番最初に出てくる<a href="http://www.slidesjs.com/">slidesjs</a>で画像スライダーを実装するわけです。でもスマホやタブレット見て分かる通り、全然それらのデバイスに最適化されてませんね。</p>
<p><img src="/images/2012/10/slider2.png"></p>
<p><a href="http://toshimaru.net/demo/slidesjs/">http://toshimaru.net/demo/slidesjs/</a></p>
<p>幅がデバイスに応じて変わったりもしないので、ちゃんと最適化されるような違う画像スライダーを探してみます。</p>
<p>んでたどり着いたのが<a href="http://flexslider.woothemes.com/">FlexSlider2</a>。ちゃんとPCでもタブレットでも最適化されて表示されますね。</p>
<p><img src="/images/2012/10/slider3.png"></p>
<p><img src="/images/2012/10/slider1.png"></p>
<p>スマホ、タブレット対応が必須な今、しっかりレスポンシブデザインを心がけてWEB制作をしていきたいところです。</p>
<h3>参考</h3>
<ul>
<li><a href="http://ascii.jp/elem/000/000/697/697463/">レスポンシブWebデザインとは</a> </li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="css" /><category term="design" /><category term="html" /><category term="javascript" /><summary type="html"><![CDATA[え？　"れすぽんしぶうぇぶでざいん"って何かって？ なかなか日本では聞きなれないような気がしなくもないですがこんな意味です。 Responsive web design (often abbreviated to RWD) is an approach to web design in which a site is crafted to provide an optimal viewing experience&mdash;easy reading and navigation with a minimum of resizing, panning, and scrolling&mdash;across a wide range of devices (from desktop computer monitors to mobile phones). Responsive web design (wikipedia) つまり、レスポンシブWEBデザインとは、デバイスの幅に応じてWebの見た目（レイアウトとかサイズとか）が最適化されるWebデザインの手法のことです。タブレット、スマホの台頭によってますます重要視されている手法ですね。 さて、本題。本日は画像スライダーのお話。 先日画像スライダーを実装する機会があったので「js slider」なんかでググって一番最初に出てくるslidesjsで画像スライダーを実装するわけです。でもスマホやタブレット見て分かる通り、全然それらのデバイスに最適化されてませんね。 http://toshimaru.net/demo/slidesjs/ 幅がデバイスに応じて変わったりもしないので、ちゃんと最適化されるような違う画像スライダーを探してみます。 んでたどり着いたのがFlexSlider2。ちゃんとPCでもタブレットでも最適化されて表示されますね。 スマホ、タブレット対応が必須な今、しっかりレスポンシブデザインを心がけてWEB制作をしていきたいところです。 参考 レスポンシブWebデザインとは]]></summary></entry><entry><title type="html">アスペクト比を計算するWebアプリを作成しました</title><link href="https://blog.toshimaru.net/web/" rel="alternate" type="text/html" title="アスペクト比を計算するWebアプリを作成しました" /><published>2012-10-01T00:00:00+09:00</published><updated>2018-01-24T00:00:00+09:00</updated><id>https://blog.toshimaru.net/web</id><content type="html" xml:base="https://blog.toshimaru.net/web/"><![CDATA[<p><a href="http://ratiocalculator.toshimaru.net/" class="btn btn-primary">Ratio Calculator</a></p>

<p><a href="http://ratiocalculator.toshimaru.net/">http://ratiocalculator.toshimaru.net/</a></p>

<p>様々なアスペクト比を計算するWebアプリを作成しました。作ったきっかけは16:9の画像をいろいろと使っていて、いちいちサイズ計算するのが面倒だったから。</p>

<p>使った言語、環境など紹介します。</p>

<h2 id="フロントエンド">フロントエンド</h2>

<ul>
  <li>HTML5</li>
  <li>CSS3 (with Bootstrap)</li>
  <li>jQuery</li>
</ul>

<h2 id="バックエンド">バックエンド</h2>

<ul>
  <li><del>Google App Engine</del></li>
  <li><del>Python (<a href="http://flask.pocoo.org/">Flask</a>)</del></li>
</ul>

<p><strong>追記</strong>: バックエンドはGoogleAppEngineからGitHub Pagesに移行しています。ソースは下記GitHub URLにて公開しています。</p>

<p>https://github.com/toshimaru/ratiocalculator</p>

<h2 id="インスパイアされたサービス">インスパイアされたサービス</h2>

<p><a href="http://zeller-lab.com/img-width/">Web計。</a></p>]]></content><author><name>Toshimaru</name></author><category term="css" /><category term="html" /><category term="javascript" /><summary type="html"><![CDATA[様々なアスペクト比を計算するWebアプリを作成しました。作ったきっかけは16:9の画像をいろいろと使っていて、いちいちサイズ計算するのが面倒だったから。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/2012/10/ratiocal.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/2012/10/ratiocal.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Twitter Search API をJSで呼んでみる</title><link href="https://blog.toshimaru.net/twitter-search-api-js/" rel="alternate" type="text/html" title="Twitter Search API をJSで呼んでみる" /><published>2012-09-23T00:00:00+09:00</published><updated>2012-09-23T00:00:00+09:00</updated><id>https://blog.toshimaru.net/twitter-search-api-js</id><content type="html" xml:base="https://blog.toshimaru.net/twitter-search-api-js/"><![CDATA[<p>Twitter search API をJSを使って呼ぶ簡単なサンプルを作ってみました。せっかくなので、Bootstrap &amp; Hogan.js という二つのTwitter製オープンソースフレームワークを使ってみました。</p>

<p><strong>【!追記】現在はTwitter APIの仕様変更にて動かなくなっています。</strong></p>

<p><a href="http://toshimaru.net/demo/gettweet/">http://toshimaru.net/demo/gettweet/</a></p>

<p><img src="/images/2012/09/twitter.png" alt="twitter search api" /></p>

<p>使っている言語など。</p>

<ul>
  <li>HTML: html5</li>
  <li>JS: jQuery, <a href="http://twitter.github.com/hogan.js/">hogan.js(template engine)</a></li>
  <li>CSS: <a href="http://twitter.github.com/bootstrap/">bootstrap</a></li>
</ul>

<h2 id="参考">参考</h2>

<ul>
  <li><a href="https://dev.twitter.com/docs/api/1/get/search">GET search</a></li>
  <li><a href="http://blog.asial.co.jp/659">Twitter-APIを使ってみました</a></li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="css" /><category term="javascript" /><category term="jquery" /><summary type="html"><![CDATA[Twitter search API をJSを使って呼ぶ簡単なサンプルを作ってみました。せっかくなので、Bootstrap & Hogan.js という二つのTwitter製オープンソースフレームワークを使ってみました。]]></summary></entry><entry><title type="html">CSS3 を使って円を描く</title><link href="https://blog.toshimaru.net/157392690/" rel="alternate" type="text/html" title="CSS3 を使って円を描く" /><published>2012-08-27T00:00:00+09:00</published><updated>2012-08-27T00:00:00+09:00</updated><id>https://blog.toshimaru.net/157392690</id><content type="html" xml:base="https://blog.toshimaru.net/157392690/"><![CDATA[<p>現時点の本ブログデザインの左上の日付表示の部分。</p>
<p><a href="http://toshimaru.github.com/demo/circle.html"><img src="/images/2012/08/circle.png"></a></p>
<p><script src="https://gist.github.com/3495190.js"></script></p>
<p>気をつけたいのはFirefox13から、接頭辞付き-moz-border-radiusプロパティをサポートしなくなったこと（<a href="https://dev.mozilla.jp/2012/05/firefox13-backward-compatibility/">参考</a>）。代わりにborder-radiusを使用してください。</p>
<p>さらに駆使すれば星やハートも描くこともできるみたいです。詳しくは下記。</p>
<p><a href="http://css-tricks.com/examples/ShapesOfCSS/">The Shapes of CSS</a></p>
<h3>参考</h3>
<ul>
<li><a href="http://www.cardeo.ca/how-to-create-circles-with-css3-and-no-images/">How To Create Circles With CSS3 and No Images</a></li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="css" /><summary type="html"><![CDATA[現時点の本ブログデザインの左上の日付表示の部分。 気をつけたいのはFirefox13から、接頭辞付き-moz-border-radiusプロパティをサポートしなくなったこと（参考）。代わりにborder-radiusを使用してください。 さらに駆使すれば星やハートも描くこともできるみたいです。詳しくは下記。 The Shapes of CSS 参考 How To Create Circles With CSS3 and No Images]]></summary></entry></feed>