<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="https://blog.toshimaru.net/feed/by_tag/podcast.xml" rel="self" type="application/atom+xml" /><link href="https://blog.toshimaru.net/" rel="alternate" type="text/html" /><updated>2022-11-05T23:59:22+09:00</updated><id>https://blog.toshimaru.net/feed/by_tag/podcast.xml</id><title type="html">Hack Your Design!</title><subtitle>toshimaruの技術系なブログ</subtitle><author><name>Toshimaru</name></author><entry><title type="html">boot.fm Podcast に出演しました</title><link href="https://blog.toshimaru.net/bootfm-podcast/" rel="alternate" type="text/html" title="boot.fm Podcast に出演しました" /><published>2016-12-29T00:00:00+09:00</published><updated>2016-12-29T00:00:00+09:00</updated><id>https://blog.toshimaru.net/bootfm-podcast</id><content type="html" xml:base="https://blog.toshimaru.net/bootfm-podcast/"><![CDATA[<p>ちょっと前だが今月<a href="https://bootfm.github.io/">boot.fm</a>というTech系Podcastに出演した。</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">最近流行りのTechポッドキャストに出演しました。分報、フロントエンド技術とどう付き合うか、コードレビュー、mrubyあたりを話してます | Vol.4: Code review as a prior investment <a href="https://t.co/FjRE8HQa4E">https://t.co/FjRE8HQa4E</a></p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/809544891696939009">December 15, 2016</a></blockquote>
<script async="" src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>そのフォローアップや話しきれなかったことなど書いてみます。</p>

<h2 id="slack分報タスク管理について">Slack分報・タスク管理について</h2>

<p>分報の元ネタ: <a href="http://c16e.com/1511101558/">Slackで簡単に「日報」ならぬ「分報」をチームで実現する3ステップ〜Problemが10分で解決するチャットを作ろう | Craftsman Software Inc.</a></p>

<h3 id="僕が思う分報の良い点">僕が思う分報の良い点</h3>

<ul>
  <li>日報より情報発信の敷居がずっと低い
    <ul>
      <li>多分一番分かりやすい喩えは <strong>社内Twitter</strong></li>
    </ul>
  </li>
  <li>カジュアルなコミュニケーションができる
    <ul>
      <li>ハマっていることとかさらっと書いたら誰かが助け舟を出してくれたり</li>
      <li>ゆるーい雑談とかも</li>
    </ul>
  </li>
  <li>リアルタイムなコミュニケーションができる
    <ul>
      <li>Podcast内で紹介した<a href="https://toshi.slack.com/apps/A0HBTUUPK--todo">/todo</a>みたいなSlackインテグレーションアプリと組み合わせることによって、リアルタイムにタスクのWIP/DONEを関係者に共有できる</li>
    </ul>
  </li>
</ul>

<p>基本的に僕は日報を書いていきたいと思っているのだけど、日報真面目に書いているとけっこう時間がかかってしまう。最初は乗り気しなかったけどとりあえずやってみるかと始めた分報だが、日報ハードル高すぎ問題を感じていた僕には丁度良くハマった。</p>

<p>情報発信の対象となる受け手も限られていて、些細なこともカジュアルに書きやすいし読み手を過剰に意識することも少ない。</p>

<h3 id="僕が思う分報の悪い点">僕が思う分報の悪い点</h3>

<ul>
  <li>Slackチャンネル多くなる
    <ul>
      <li>1チャンネル/user なので人数分チャンネルできる</li>
      <li>JOINしすぎると間違いなくノイズになるのでMuteなり加入チャンネル選ぶなりで凌ぐ</li>
    </ul>
  </li>
  <li>知性のない発言が多くなる（かもしれない）
    <ul>
      <li>そういうのも含めて社内Twitterでありカジュアルなコミュニケーションなんだからまぁ良い点ともいえる</li>
    </ul>
  </li>
</ul>

<h3 id="その他slackで便利そうなやつ">その他Slackで便利そうなやつ</h3>

<ul>
  <li><a href="https://toshi.slack.com/apps/category/At0G5YTKU2-analytics">便利な Slack Integration App</a> 使ってKPIとか流してみる</li>
  <li><a href="https://github.com/masuidrive/miyamoto">masuidrive/miyamoto</a> でSlack勤怠管理してみるとか</li>
  <li><a href="https://hubot.github.com/">HUBOT</a>みたいなChatbotを棲ませて自動化実現したり便利機能を提供したりとか</li>
</ul>

<p>便利な Slack Integration App もどんどん増えているのでそういうのはどんどん導入していくと良いと思う。</p>

<p>Chatbot系はアイディア勝負。便利な使い方あればどんどん紹介してほしいと思う。</p>

<h2 id="フロントエンド-vs-バックエンド">フロントエンド vs バックエンド</h2>

<p>僕が最近React書いてて感じている「Railsやりつつフロントエンドのキャッチアップはしきれないし〜自分の書いているコードに自信を持ていないし〜けっこう妥協しちゃってるんですよ〜」という悩み相談みたいな感じになってしまったかもしれない。</p>

<p>お二人ともPodcast内で話したが、結論としては至極まっとうで、プロトタイピングやそもそもJavaScriptヘビーにSPAを作る必要がないのであれば無理してJS書くことないし、Railsのレールに乗っかってけばいいじゃんという感じ。</p>

<p>SPAにすることがプロダクトの価値として高くなるのであればReactなりAngularなり導入に踏み切ればいいじゃん、という感じ。ただそうなってくるとどうしてもRailsのレールから外れて開発を進めていく必要があり、レールを外れる勇気と覚悟が必要でウッ…となる。</p>

<p>とここまで書いてアレですが、Podcast収録した時点ではリリースされていなかった<a href="https://github.com/rails/webpacker">rails/webpacker</a>が現在出てきており、とうとうRailsにもyarn、webpackへの世界へのレールが開かれようとしております。そしてwebpackerの仕組みに乗っかってReactがinstallできるような仕組みも用意されつつある。</p>

<p>そういう流れが整備されていけば多少僕が今抱えている不安感も和らぐだろうと思いました。</p>

<h2 id="コードレビューについて">コードレビューについて</h2>

<p>けっこう自分が今コードレビューに時間をかけているので、コードレビュー質的・時間的にどれくらいやるもんなんって話。</p>

<p>コスト、というとコストかけたくないでござる！みたいなことを暗に思っているのではと思われてしまうかもしれないが、そうではない。基本的にレビューにはコストをかけるべきだし、短期的には時間がかかろうともそれは中長期的にチームの生産性向上につながると思ってる。つまりコードレビューに時間をかけるということはチームへの投資であるということ。</p>

<p>そのコードレビューをどう効率的に回していくかという話もできればよかったけどそれはまた別の機会に。まぁ基本的に丁寧なコードレビューをしようと思うとやっぱり時間はかかる。</p>

<h2 id="mruby">mruby</h2>

<p>mrubyワンチャンある？って話。得られた知見はこうだ。</p>

<ul>
  <li>Rubyのシンタックスはmrubyでもだいぶ動く</li>
  <li>mrubygem エコシステムはまだまだ未成熟</li>
  <li>Cを書く覚悟が必要（mrubygemないときにCを書く場面がある）</li>
  <li>信頼できない mrubygem だとたまに環境がぶっ壊れることある</li>
  <li>デバッグは(現在のところ)printデバッグ</li>
  <li>パフォーマンスが求められる場面だとmrubyよりはgolangが良い</li>
</ul>

<h2 id="参考リンク">参考リンク</h2>

<ul>
  <li><a href="https://bootfm.github.io/">boot.fm</a></li>
  <li><a href="https://roppongirb.connpass.com/event/42633/">Roppongi.rb #2 “Infrastructure x Ruby” - connpass</a></li>
  <li><a href="https://seleck.cc/822">リモートワークは敢えて取り入れない。Gunosyデータ分析部「情報共有」の仕組みとは | SELECK</a></li>
  <li><a href="https://github.com/k0kubun/mitamae">k0kubun/mitamae: Configuration management tool embedding mruby, which is alternative implementation of Itamae</a></li>
  <li><a href="http://qiita.com/k0kubun/items/3995d3b730b63ef67c56">Rubyを評価するCLIツールはCRubyとmrubyのどちらで実装するべきか - Qiita</a></li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="podcast" /><category term="tech" /><summary type="html"><![CDATA[ちょっと前だが今月boot.fmというTech系Podcastに出演した。最近流行りのTechポッドキャストに出演しました。分報、フロントエンド技術とどう付き合うか、コードレビュー、mrubyあたりを話してます | Vol.4: Code review as a prior investment そのフォローアップや話しきれなかったことなど書いてみます。]]></summary></entry></feed>