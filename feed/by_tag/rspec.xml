<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://blog.toshimaru.net/feed/by_tag/rspec.xml" rel="self" type="application/atom+xml" /><link href="https://blog.toshimaru.net/" rel="alternate" type="text/html" /><updated>2023-12-31T17:21:42+09:00</updated><id>https://blog.toshimaru.net/feed/by_tag/rspec.xml</id><title type="html">Hack Your Design!</title><subtitle>toshimaruの技術系なブログ</subtitle><author><name>Toshimaru</name></author><entry><title type="html">Kaigi on Railsで「FactoryBot the Right Way」を発表しました</title><link href="https://blog.toshimaru.net/kaigi-on-rails/" rel="alternate" type="text/html" title="Kaigi on Railsで「FactoryBot the Right Way」を発表しました" /><published>2020-10-07T00:00:00+09:00</published><updated>2020-10-08T00:00:00+09:00</updated><id>https://blog.toshimaru.net/kaigi-on-rails</id><content type="html" xml:base="https://blog.toshimaru.net/kaigi-on-rails/"><![CDATA[<p><a href="https://kaigionrails.org/">Kaigi on Rails</a>で「FactoryBot the Right Way」というタイトルで発表しました<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>。</p>

<h2 id="スライド">スライド</h2>

<script async="" class="speakerdeck-embed" data-id="8084985a97ce4b6685d8528388da9779" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script>

<h2 id="アーカイブ動画">アーカイブ動画</h2>

<p>動画もYouTubeにアーカイブとして上がっておりますので、音声付きで聴きたい方はこちらをどうぞ。</p>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">先行して <a href="https://twitter.com/toshimaru_e?ref_src=twsrc%5Etfw">@toshimaru_e</a> さんの動画をアップしました！他のセッションも順次公開していきますのでお楽しみに！ <a href="https://twitter.com/hashtag/kaigionrails?src=hash&amp;ref_src=twsrc%5Etfw">#kaigionrails</a><a href="https://t.co/duhoF1Xu1S">https://t.co/duhoF1Xu1S</a> <a href="https://t.co/y3PRYVRlO8">https://t.co/y3PRYVRlO8</a></p>&mdash; Kaigi on Rails (@kaigionrails) <a href="https://twitter.com/kaigionrails/status/1312397413592653824?ref_src=twsrc%5Etfw">October 3, 2020</a></blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<h2 id="感想">感想</h2>

<p>今回は初のビデオ録画登壇でした。</p>

<p>今までのリモート登壇（<a href="/career-strategy-for-around-thirty-engineer/">アラサーエンジニアの生存戦略</a>、<a href="/how-to-deal-with-fat-model/">Fat Modelの倒し方</a>）は基本Zoomを使ったLIVE登壇だったので、今回初めて録画登壇を経験できて良かったと思います。</p>

<p>録画のセットアップとしては下記を利用しました。</p>

<ul>
  <li>プレゼンテーションツール: Keynote</li>
  <li>スライド録画+音声録音: Keynoteのレコーディング機能 (with Krisp)
    <ul>
      <li>参考: <a href="https://support.apple.com/ja-jp/guide/keynote/tan8a5df9cc5/mac">MacのKeynoteでオーディオを録音する - Apple サポート</a></li>
    </ul>
  </li>
  <li>Backup用音声録音: QuickTime Player
    <ul>
      <li>参考: <a href="https://support.apple.com/ja-jp/guide/quicktime-player/qtpf25d6f827/mac">MacのQuickTime Playerでオーディオを録音する - Apple サポート</a></li>
    </ul>
  </li>
  <li>スピーカー側の動画撮影: iPad</li>
</ul>

<blockquote>
  <p>Kaigi on Railsのコアコンセプトは 「初学者から上級者までが楽しめるWeb系の技術カンファレンス」 です。</p>
</blockquote>

<p>ということでしたが、今回の発表の内容的には初学者もそこそこ楽しめる内容になっていのではないでしょうか。参考になったのなら幸いです<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup>。</p>

<blockquote class="twitter-tweet" data-conversation="none"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/kaigionrails?src=hash&amp;ref_src=twsrc%5Etfw">#kaigionrails</a> 発表資料チラ見せ。FactoryBotをより上手に使いこなしたい初級者〜中級者レベルの方にはそこそこ有益な情報になっていると思いますので是非😊 <a href="https://t.co/dQDOzP3BpX">pic.twitter.com/dQDOzP3BpX</a></p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/1311079864070369280?ref_src=twsrc%5Etfw">September 29, 2020</a></blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<h2 id="おわり">おわり</h2>

<p>Kaigi on Railsをオンラインで開催してくださったチーフオーガナイザーの <a href="https://twitter.com/okuramasafumi">@okuramasafumi</a> をはじめ、運営スタッフの皆さま、ありがとうございました。</p>

<h2 id="参考リンク">参考リンク</h2>

<ul>
  <li>公式ドキュメント
    <ul>
      <li><a href="https://github.com/thoughtbot/factory_bot/blob/master/GETTING_STARTED.md">GETTING_STARTED.md</a></li>
      <li><a href="https://github.com/thoughtbot/factory_bot/blob/master/NAME.md">Project Naming History</a></li>
    </ul>
  </li>
  <li>ベンチマークソースコード
    <ul>
      <li><a href="https://github.com/toshimaru/factory-bot-the-right-way">toshimaru/factory-bot-the-right-way</a></li>
    </ul>
  </li>
  <li><a href="https://fukabori.fm/episode/13">13. ペアプロやテストの疑問とか、ソフトウェアエンジニアの育成とか | fukabori.fm</a></li>
  <li><a href="https://sinsoku.hatenablog.com/entry/2017/04/09/214728">Rails アンチパターン - 錆びついたファクトリー (factory_girl) - アジャイルSEの憂鬱</a></li>
  <li><a href="https://magazine.rubyist.net/articles/kaigi_on_rails/index.html">Rubyist Magazine: Kaigi on Rails 特集号</a></li>
</ul>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>たぶん文法的には「FactoryBot <strong>in</strong> the right way」ってのが正しい気がするけど、こちらがゴロが良かったということでそれはご愛嬌で。。。 <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>RailsDM2018で発表したこちらの内容もあわせて参考にしていただけると :pray: <a href="/rdm2018-active-record-anti-patterns/">railsdm2018で「ActiveRecordデータ処理アンチパターン」を発表しました</a> <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Toshimaru</name></author><category term="presentation" /><category term="rspec" /><category term="rails" /><summary type="html"><![CDATA[Kaigi on Railsで「FactoryBot the Right Way」というタイトルで発表しました。動画もYouTubeにアーカイブとして上がっておりますので、音声付きで聴きたい方はこちらをどうぞ。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/kaigi-on-rails.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/kaigi-on-rails.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Rails on Docker 環境での SystemSpec 環境構築</title><link href="https://blog.toshimaru.net/rails-on-docker-system-spec/" rel="alternate" type="text/html" title="Rails on Docker 環境での SystemSpec 環境構築" /><published>2019-09-18T00:00:00+09:00</published><updated>2019-09-18T00:00:00+09:00</updated><id>https://blog.toshimaru.net/rails-on-docker-system-spec</id><content type="html" xml:base="https://blog.toshimaru.net/rails-on-docker-system-spec/"><![CDATA[<p>Rails on Docker な環境上に SystemSpec(System Test + RSpec) を導入しました。</p>

<h2 id="環境">環境</h2>

<p>今回SystemSpecを導入したのは下記のような環境です。</p>

<ul>
  <li>プロジェクト: <a href="https://github.com/toshimaru/RailsTwitterClone/">RailsTwitterClone</a></li>
  <li>docker-compose</li>
  <li>Ruby 2.6</li>
  <li>chromium-driver</li>
  <li>gem
    <ul>
      <li>rails (5.2)</li>
      <li>rspec-rails</li>
      <li>selenium-webdriver</li>
      <li>capybara</li>
    </ul>
  </li>
</ul>

<h2 id="対応pull-request">対応Pull Request</h2>

<p><a href="https://github.com/toshimaru/RailsTwitterClone/pull/506/files">Re-try System Spec by toshimaru · Pull Request #506 · toshimaru/RailsTwitterClone</a></p>

<h2 id="私のsystemspec遅すぎ">私のSystemSpec、遅すぎ…？</h2>

<p>実は SystemSpec を導入しようと試みたのは今回で二回目です。一回目は SystemTest が Rails の機能の一つとしてリリースされて間もない頃に試したのですが、テスト全体にかかる時間が劇的に遅くなったため、導入を断念したという経緯があります。</p>

<p>当時のPull Requestがこちら: <a href="https://github.com/toshimaru/RailsTwitterClone/pull/216">Try System Spec by toshimaru · Pull Request #216 · toshimaru/RailsTwitterClone</a></p>

<blockquote>
  <p>Before</p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Finished in 15.74 seconds (files took 7.65 seconds to load)
152 examples, 0 failures
</code></pre></div>  </div>

  <p>After</p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Finished in 58.46 seconds (files took 7.64 seconds to load)
152 examples, 3 failures
</code></pre></div>  </div>
</blockquote>

<p>しかしこれは結果からいうと設定が悪かったのでした。下記のように system テストを Headless Chrome で走るように設定していましたが、これだとすべての System テストが Headless Chrome モードで起動してしまい、結果的に遅くなります。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">RSpec</span><span class="p">.</span><span class="nf">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
  <span class="o">...</span>
  <span class="n">config</span><span class="p">.</span><span class="nf">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">,</span> <span class="ss">type: :system</span><span class="p">)</span> <span class="k">do</span>
    <span class="n">driven_by</span> <span class="ss">:selenium_chrome_headless</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>下記のようにJSを起動させる必要のない System テストは従来通りの<code class="language-plaintext highlighter-rouge">rack_test</code>、<code class="language-plaintext highlighter-rouge">js: true</code>なテストは<code class="language-plaintext highlighter-rouge">selenium_chrome_headless</code>に設定してやればテスト全体が高速に実行可能になりました。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">RSpec</span><span class="p">.</span><span class="nf">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
  <span class="o">...</span>
  <span class="n">config</span><span class="p">.</span><span class="nf">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">,</span> <span class="ss">type: :system</span><span class="p">)</span> <span class="k">do</span>
    <span class="n">driven_by</span> <span class="ss">:rack_test</span>
  <span class="k">end</span>

  <span class="n">config</span><span class="p">.</span><span class="nf">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">,</span> <span class="ss">type: :system</span><span class="p">,</span> <span class="ss">js: </span><span class="kp">true</span><span class="p">)</span> <span class="k">do</span>
    <span class="n">driven_by</span> <span class="ss">:selenium_chrome_headless</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<h2 id="dockerfile">Dockerfile</h2>

<p>今回利用した <code class="language-plaintext highlighter-rouge">Dockerfile</code> は Ruby 2.6 のベースイメージに <code class="language-plaintext highlighter-rouge">chromium-driver</code> をインストールしたコンテナとなります。</p>

<div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">FROM</span><span class="s"> ruby:2.6</span>

<span class="k">RUN </span>apt-get update <span class="nt">-qq</span> <span class="o">&amp;&amp;</span> apt-get <span class="nb">install</span> <span class="nt">-y</span> nodejs chromium-driver 
</code></pre></div></div>

<h3 id="chrome-failed-to-start-exited-abnormally">Chrome failed to start: exited abnormally</h3>

<p>しかし、上述の環境において<code class="language-plaintext highlighter-rouge">rspec</code>を実行すると下記のようなエラーが発生します。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Failure/Error: Unable to infer file and line number from backtrace

  Selenium::WebDriver::Error::UnknownError:
      unknown error: Chrome failed to start: exited abnormally
      (unknown error: DevToolsActivePort file doesn't exist)
      (The process started from chrome location /usr/bin/chromium is no longer running, so ChromeDriver is assuming that Chrome has crashed.)
</code></pre></div></div>

<p>このエラーは Chrome が<code class="language-plaintext highlighter-rouge">sandbox</code>モードで起動していることに起因します。下記のような<code class="language-plaintext highlighter-rouge">no-sandbox</code>オプション付きの Headless Chrome を Capybara に driver として登録してやることで回避します。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Capybara</span><span class="p">.</span><span class="nf">register_driver</span> <span class="ss">:headless_chrome</span> <span class="k">do</span> <span class="o">|</span><span class="n">app</span><span class="o">|</span>
  <span class="n">browser_options</span> <span class="o">=</span> <span class="o">::</span><span class="no">Selenium</span><span class="o">::</span><span class="no">WebDriver</span><span class="o">::</span><span class="no">Chrome</span><span class="o">::</span><span class="no">Options</span><span class="p">.</span><span class="nf">new</span><span class="p">.</span><span class="nf">tap</span> <span class="k">do</span> <span class="o">|</span><span class="n">opts</span><span class="o">|</span>
    <span class="n">opts</span><span class="p">.</span><span class="nf">args</span> <span class="o">&lt;&lt;</span> <span class="s2">"--headless"</span>
    <span class="n">opts</span><span class="p">.</span><span class="nf">args</span> <span class="o">&lt;&lt;</span> <span class="s2">"--disable-gpu"</span>
    <span class="n">opts</span><span class="p">.</span><span class="nf">args</span> <span class="o">&lt;&lt;</span> <span class="s2">"--no-sandbox"</span>
  <span class="k">end</span>
  <span class="no">Capybara</span><span class="o">::</span><span class="no">Selenium</span><span class="o">::</span><span class="no">Driver</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="ss">browser: :chrome</span><span class="p">,</span> <span class="ss">options: </span><span class="n">browser_options</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<p>こうして登録した<code class="language-plaintext highlighter-rouge">headless_chrome</code>をSystemTestに対して適応させてやればOKです。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">RSpec</span><span class="p">.</span><span class="nf">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
  <span class="o">...</span>
  <span class="n">config</span><span class="p">.</span><span class="nf">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">,</span> <span class="ss">type: :system</span><span class="p">,</span> <span class="ss">js: </span><span class="kp">true</span><span class="p">)</span> <span class="k">do</span>
    <span class="n">driven_by</span> <span class="ss">:headless_chrome</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>これできちんとDocker上でSystemSpecが通るようになりました。</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>docker-compose run web rspec
<span class="go">
Randomized with seed 30150
............................................................................................................Capybara starting Puma...
* Version 4.1.1 , codename: Fourth and One
* Min threads: 0, max threads: 4
* Listening on tcp://127.0.0.1:38789
</span><span class="c">...............................................
</span><span class="go">
Finished in 19.87 seconds (files took 8.8 seconds to load)
155 examples, 0 failures
</span></code></pre></div></div>

<h2 id="公式ではno-sandboxをデフォルトにはしてくれない">公式ではno-sandboxをデフォルトにはしてくれない？</h2>

<p>余談ですが、Capybara本体で登録されている<code class="language-plaintext highlighter-rouge">selenium_chrome_headless</code>に<code class="language-plaintext highlighter-rouge">no-sandbox</code>オプションを付与する変更をPRしてみましたが、下記の通りRejectされてしまいました。</p>

<p><a href="https://github.com/teamcapybara/capybara/pull/2241">Add <code class="language-plaintext highlighter-rouge">no-sandbox</code> option for selenium_chrome_headless by toshimaru · Pull Request #2241 · teamcapybara/capybara</a></p>

<h3 id="securityを担保するためのsandbox">Securityを担保するためのsandbox</h3>

<p>sandboxはセキュリティを高めるための環境なので基本的には <strong>デフォルトで no-sandbox にするべきではない</strong> という判断のようです。</p>

<blockquote>
  <p>Sandbox leverages the OS-provided security to allow code execution that cannot make persistent changes to the computer or access information that is confidential.</p>
</blockquote>

<p>via. <a href="https://chromium.googlesource.com/chromium/src/+/master/docs/design/sandbox.md">Sandbox</a></p>

<h2 id="参考">参考</h2>

<ul>
  <li><a href="https://qiita.com/ngron/items/f61b8635b4d67f666d75">Rails + Selenium + DockerでSystemSpecの環境構築 - Qiita</a></li>
  <li><a href="https://news.mynavi.jp/article/20081009-a027/">Google Chrome サンドボックスで実現するセキュリティ、Windowsの機能に依存 | マイナビニュース</a></li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="rspec" /><category term="rails" /><category term="docker" /><summary type="html"><![CDATA[Rails on Docker な環境上に SystemSpec(System Test + RSpec) を導入しました。 環境 今回SystemSpecを導入したのは下記のような環境です。私のSystemSpec、遅すぎ…？ 実は SystemSpec を導入しようと試みたのは今回で二回目です。一回目は SystemTest が Rails の機能の一つとしてリリースされて間もない頃に試したのですが、テスト全体にかかる時間が劇的に遅くなったため、導入を断念したという経緯があります。しかしこれは結果からいうと設定が悪かったのでした。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/systemspec/og.jpg" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/systemspec/og.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Rails E2Eテストで poltergeist から Headless Chrome へと乗り換える</title><link href="https://blog.toshimaru.net/poltergeist-to-selenium-webdriver/" rel="alternate" type="text/html" title="Rails E2Eテストで poltergeist から Headless Chrome へと乗り換える" /><published>2018-08-04T00:00:00+09:00</published><updated>2019-09-17T00:00:00+09:00</updated><id>https://blog.toshimaru.net/poltergeist-to-selenium-webdriver</id><content type="html" xml:base="https://blog.toshimaru.net/poltergeist-to-selenium-webdriver/"><![CDATA[<p>RailsのCapybaraを使ったE2Eテスト(feature spec)をこの度、<a href="https://github.com/teampoltergeist/poltergeist">poltergeist</a>から<a href="https://chromium.googlesource.com/chromium/src/+/master/headless/README.md">Headless Chrome</a>に乗り換えてみたのでそのときのメモ。</p>

<h2 id="対応-pull-request">対応 Pull Request</h2>

<p>今回対応したPull Requestはこちら。</p>

<p><a href="https://github.com/toshimaru/RailsTwitterClone/pull/211">Use headless Chrome instead of PhantomJS(poltergeist) by toshimaru · Pull Request #211 · toshimaru/RailsTwitterClone · GitHub</a></p>

<p>思ったよりも差分はコンパクトにまとまりました。</p>

<h2 id="install-selenium-webdriver">Install selenium-webdriver</h2>

<p>まずは<code class="language-plaintext highlighter-rouge">poltergeist</code> gemの代わりに、<code class="language-plaintext highlighter-rouge">selenium-webdriver</code>をインストール。</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gd">-  gem "poltergeist"
</span><span class="gi">+  gem "selenium-webdriver"
</span></code></pre></div></div>

<h2 id="change-capybarajavascript_driver">Change Capybara.javascript_driver</h2>

<p>次に<code class="language-plaintext highlighter-rouge">Capybara.javascript_driver</code>を<code class="language-plaintext highlighter-rouge">:poltergeist</code>から<code class="language-plaintext highlighter-rouge">:selenium_chrome_headless</code>に変更します。</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gd">- require "capybara/poltergeist"
- Capybara.javascript_driver = :poltergeist
</span><span class="gi">+ require "selenium-webdriver"
+ Capybara.javascript_driver = :selenium_chrome_headless
</span></code></pre></div></div>

<p>ちなみに<code class="language-plaintext highlighter-rouge">:selenium_chrome_headless</code>の設定は下記の変更の中でcapybara内に取り込まれています。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Capybara</span><span class="p">.</span><span class="nf">register_driver</span> <span class="ss">:selenium_chrome_headless</span> <span class="k">do</span> <span class="o">|</span><span class="n">app</span><span class="o">|</span>
  <span class="n">browser_options</span> <span class="o">=</span> <span class="o">::</span><span class="no">Selenium</span><span class="o">::</span><span class="no">WebDriver</span><span class="o">::</span><span class="no">Chrome</span><span class="o">::</span><span class="no">Options</span><span class="p">.</span><span class="nf">new</span>
  <span class="n">browser_options</span><span class="p">.</span><span class="nf">args</span> <span class="o">&lt;&lt;</span> <span class="s1">'--headless'</span>
  <span class="n">browser_options</span><span class="p">.</span><span class="nf">args</span> <span class="o">&lt;&lt;</span> <span class="s1">'--disable-gpu'</span>
  <span class="no">Capybara</span><span class="o">::</span><span class="no">Selenium</span><span class="o">::</span><span class="no">Driver</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="ss">browser: :chrome</span><span class="p">,</span> <span class="ss">options: </span><span class="n">browser_options</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<p>via. <a href="https://github.com/teamcapybara/capybara/commit/0275eab42c610cd1ccde7947b051d0b00857b9ce">add default selenium chrome driver registrations · teamcapybara/capybara@0275eab · GitHub</a></p>

<h2 id="install-chromedriver">Install chromedriver</h2>

<h3 id="on-macos">On MacOS</h3>

<p><code class="language-plaintext highlighter-rouge">chromedriver</code> が必要になってくるが、Macの場合はbrewで入れちゃうのが一番ラクです。</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>brew cask <span class="nb">install </span>chromedriver
<span class="go">Updating Homebrew...
</span><span class="gp">==&gt;</span><span class="w"> </span>Auto-updated Homebrew!
<span class="go">Updated 1 tap (homebrew/cask).
No changes to formulae.

</span><span class="gp">==&gt;</span><span class="w"> </span>Satisfying dependencies
<span class="gp">==&gt;</span><span class="w"> </span>Downloading https://chromedriver.storage.googleapis.com/2.41/chromedriver_mac64.zip
<span class="gp">#</span><span class="c">####################################################################### 100.0%</span>
<span class="gp">==&gt;</span><span class="w"> </span>Verifying checksum <span class="k">for </span>Cask chromedriver
<span class="gp">==&gt;</span><span class="w"> </span>Installing Cask chromedriver
<span class="gp">==&gt;</span><span class="w"> </span>Extracting nested container chromedriver
<span class="gp">==&gt;</span><span class="w"> </span>Linking Binary <span class="s1">'chromedriver'</span> to <span class="s1">'/usr/local/bin/chromedriver'</span><span class="nb">.</span>
<span class="go">🍺  chromedriver was successfully installed!
</span></code></pre></div></div>

<p><strong>注意事項</strong></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">brew install chromedriver</code>ではinstallできないので注意（<code class="language-plaintext highlighter-rouge">brew cask</code>経由にすること）</li>
  <li><code class="language-plaintext highlighter-rouge">chromedriver-helper</code> gem が入っているとうまく動かない場合があるので注意</li>
</ul>

<h3 id="on-circleci">On CircleCI</h3>

<p>CircleCI上では、<code class="language-plaintext highlighter-rouge">ruby:x.x-node-browsers</code>のCircleCI公式Ruby Dokcer Imageを使っていればきちんと動作しました。</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="na">docker</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">image</span><span class="pi">:</span> <span class="s">circleci/ruby:2.5-node-browsers</span>
</code></pre></div></div>

<p>上記の設定の場合、Ruby2.5のnode-browsersバージョンをベースイメージとして使用しています。</p>

<h3 id="on-travisci">On TravisCI</h3>

<p>これが今回の対応で一番ハマった設定でした。いろいろ試しましたが下記のエラーがなかなか解決できませんでした。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Failures:

  1) Authentication authorization screenshot
     Failure/Error: before { visit signin_path }

     Selenium::WebDriver::Error::WebDriverError:
        Unable to find Mozilla geckodriver. Please download the server from https://github.com/mozilla/geckodriver/releases and place it somewhere on your PATH. More info at https://developer.mozilla.org/en-US/docs/Mozilla/QA/Marionette/WebDriver.
     # ./spec/features/authentication_pages_spec.rb:9:in `block (3 levels) in &lt;top (required)&gt;'
</code></pre></div></div>

<p><del>本当は<code class="language-plaintext highlighter-rouge">sudo: false</code>の設定で動かしたかったのですがそれだと上手くいかなかったので<code class="language-plaintext highlighter-rouge">sudo</code>で起動させて<code class="language-plaintext highlighter-rouge">chromium-chromedriver</code>をテスト前にInstallしてパスを通すという方法でテストを通しました。</del></p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">sudo</span><span class="pi">:</span> <span class="s">required</span>
<span class="na">language</span><span class="pi">:</span> <span class="s">ruby</span>
<span class="na">before_install</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">sudo apt-get install -y chromium-chromedriver</span>
  <span class="pi">-</span> <span class="s">ln -s /usr/lib/chromium-browser/chromedriver ~/bin/chromedriver</span>
</code></pre></div></div>

<p><del>(もう少しスマートなやり方をご存知の方は教えていただけると嬉しいです🙏)</del></p>

<p><strong>追記（2019年9月17日）</strong></p>

<p><code class="language-plaintext highlighter-rouge">sudo</code> 無しでも下記のような設定でいけました。</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">dist</span><span class="pi">:</span> <span class="s">bionic</span>
<span class="na">addons</span><span class="pi">:</span>
  <span class="na">chrome</span><span class="pi">:</span> <span class="s">stable</span>
  <span class="na">apt</span><span class="pi">:</span>
    <span class="na">packages</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">chromium-chromedriver</span>
</code></pre></div></div>

<p>参考Pull Request: <a href="https://github.com/toshimaru/RailsTwitterClone/pull/524/files">No sudo on TravisCI by toshimaru · Pull Request #524 · toshimaru/RailsTwitterClone</a></p>

<h2 id="参考リンク">参考リンク</h2>

<ul>
  <li><a href="https://ohbarye.hatenablog.jp/entry/2018/03/10/232300">PhantomJS + Poltergeist を Selenium + Headless Chrome で置き換える (1) Rails + Capybara による feature spec 編 - valid,invalid</a></li>
  <li><a href="https://tech.speee.jp/entry/2017/06/15/135636">RSpec の feature spec でヘッドレス Chrome を使う - Speee DEVELOPER BLOG</a></li>
  <li><a href="http://y-yagi.tumblr.com/post/166831012790/rails%E9%9B%91%E3%81%ABsystem-test%E3%81%A7headless-chrome%E3%82%92%E4%BD%BF%E3%81%86">[Rails]雑にSystem TestでHeadless Chromeを使う | 日々雑記</a></li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="rails" /><category term="rspec" /><category term="chrome" /><summary type="html"><![CDATA[RailsのCapybaraを使ったE2Eテスト(feature spec)をこの度、poltergeistからHeadless Chromeに乗り換えてみたのでそのときのメモ。 今回対応したPull Requestしてはこちら。 https://github.com/toshimaru/RailsTwitterClone/pull/211 思ったよりも差分はコンパクトにまとまった。まずはpoltergeist gemの代わりに、selenium-webdriverをインストール。次にCapybara.javascript_driverを:poltergeistから:selenium_chrome_headlessに変更。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/chromedriver.jpg" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/chromedriver.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">カバレッジ率計測サービスをCoverallsからCodeClimateに乗り換えてみた話</title><link href="https://blog.toshimaru.net/coverage-with-codeclimate/" rel="alternate" type="text/html" title="カバレッジ率計測サービスをCoverallsからCodeClimateに乗り換えてみた話" /><published>2015-03-18T00:00:00+09:00</published><updated>2019-08-20T00:00:00+09:00</updated><id>https://blog.toshimaru.net/coverage-with-codeclimate</id><content type="html" xml:base="https://blog.toshimaru.net/coverage-with-codeclimate/"><![CDATA[<p><a href="https://github.com/toshimaru/RailsTwitterClone">趣味で立ち上げているプロジェクト</a>をこの度、CoverallsからCodeClimateに乗り換えてみたので、その知見の共有。</p>

<h2 id="どんなサービスを使うか">どんなサービスを使うか</h2>

<p>自分がRails/Rubyプロジェクト(not Private)をGitHubに公開するとき、必ず使うSaaS群があって、例えばCIサービスであったりカバレッジ率の計測サービスであったりコードの品質の計測サービスであったりする。それらのサービス群をまとめると下記のようになる。</p>

<table>
  <thead>
    <tr>
      <th>サービス</th>
      <th>用途</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><a href="https://travis-ci.org/repositories">Travis CI</a></td>
      <td>CI回す</td>
    </tr>
    <tr>
      <td><a href="https://coveralls.io/">Coveralls</a></td>
      <td>カバレッジ率を計測</td>
    </tr>
    <tr>
      <td><a href="https://codeclimate.com/">Code Climate</a></td>
      <td>コード品質を計測</td>
    </tr>
    <tr>
      <td><a href="https://gemnasium.com/dashboard">Gemnasium</a></td>
      <td><del>Gemのバージョンチェック</del> 既にcloseされたサービスです</td>
    </tr>
  </tbody>
</table>

<p><strong>※ Publicなレポジトリであれば全て無料で使えます</strong></p>

<p><img src="https://cloud.githubusercontent.com/assets/803398/6694382/558b6f5c-cd1d-11e4-96ff-1e67d5905e83.png" alt="badges" /></p>

<p><strong>【図】SaaSの利用により表示できるようになるバッジ群</strong></p>

<h2 id="coveralls--codeclimate">Coveralls → CodeClimate</h2>

<p>今回その内の１つであるCoverallsをCodeClimateに移行してみたのですが、そのきっかけとしてはCircleCIでCodeClimateとのインテグレーションが推奨されていたから。</p>

<p><a href="http://docs.travis-ci.com/user/code-climate/">Travis CI: Using Code Climate with Travis CI</a></p>

<p>コード品質とカバレッジ率は分散するよりも１つのサービスに集約されて閲覧できたほうが都合がよいし、TravisCIの勧めるCodeClimateに統合してみることとした。</p>

<h2 id="手順">手順</h2>

<h3 id="set-code-climate-token">Set Code Climate token</h3>

<p>CodeClimateのSettingsからテスト実行時のTokenがゲットできるのでそれを<code class="language-plaintext highlighter-rouge">.travis.yml</code>にセット。</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">addons</span><span class="pi">:</span>
  <span class="na">code_climate</span><span class="pi">:</span>
    <span class="na">repo_token</span><span class="pi">:</span> <span class="s">adf08323...</span>
</code></pre></div></div>

<h3 id="intall-codeclimate-reporter">Intall CodeClimate reporter</h3>

<p>codeclimate-test-reporter を<code class="language-plaintext highlighter-rouge">Gemfile</code>のtest groupに追加する。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">gem</span> <span class="s2">"codeclimate-test-reporter"</span><span class="p">,</span> <span class="ss">require: </span><span class="kp">false</span>
</code></pre></div></div>

<p>CodeClimateのセットアップインストラクション通りに書くとこう。<code class="language-plaintext highlighter-rouge">spec/rails_helper.rb</code>に書きます。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s2">"codeclimate-test-reporter"</span>
<span class="no">CodeClimate</span><span class="o">::</span><span class="no">TestReporter</span><span class="p">.</span><span class="nf">start</span>
</code></pre></div></div>

<h3 id="simplecovと同居させる">Simplecovと同居させる</h3>

<p>私の環境の場合、既にSimplecovが入っておりましたので、simplecovとインテグレーションさせる場合はちょっと異なるセットアップが必要になります。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'simplecov'</span>
<span class="nb">require</span> <span class="s2">"codeclimate-test-reporter"</span>
<span class="no">SimpleCov</span><span class="p">.</span><span class="nf">formatter</span> <span class="o">=</span> <span class="no">SimpleCov</span><span class="o">::</span><span class="no">Formatter</span><span class="o">::</span><span class="no">MultiFormatter</span><span class="p">[</span>
  <span class="no">SimpleCov</span><span class="o">::</span><span class="no">Formatter</span><span class="o">::</span><span class="no">HTMLFormatter</span><span class="p">,</span>
  <span class="no">CodeClimate</span><span class="o">::</span><span class="no">TestReporter</span><span class="o">::</span><span class="no">Formatter</span>
<span class="p">]</span>
<span class="no">SimpleCov</span><span class="p">.</span><span class="nf">start</span> <span class="s2">"rails"</span>
</code></pre></div></div>

<p>このようにSimpleCovのformatterに<code class="language-plaintext highlighter-rouge">CodeClimate::TestReporter::Formatter</code>を入れてやれば :ok:</p>

<p><img src="https://cloud.githubusercontent.com/assets/803398/6694285/ad01584c-cd1c-11e4-9f29-1589821188da.png" alt="codeclimate" /></p>

<p>これでCode Climate上で品質・カバレッジ率が閲覧できるようになりました。</p>

<h2 id="参考">参考</h2>

<ul>
  <li><a href="https://coderwall.com/p/vwhuqq/using-code-climate-s-new-test-reporter-together-with-coveralls-and-simplecov-s-html-formatter">Using Code Climate’s new test reporter together with Coveralls and SimpleCov’s HTML Formatter</a></li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="rspec" /><category term="ci" /><summary type="html"><![CDATA[趣味で立ち上げているプロジェクトをこの度、CoverallsからCodeClimateに乗り換えてみたので、その知見の共有。自分がRails(ruby)プロジェクトをGithubに公開するとき、必ず使うSaaS群があって、例えばCIサービスであったりカバレッジ率の計測であったりコードの品質の計測であったりする。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://cloud.githubusercontent.com/assets/803398/6655997/d4f38dc4-cb5b-11e4-8663-86fad6baf1f3.png" /><media:content medium="image" url="https://cloud.githubusercontent.com/assets/803398/6655997/d4f38dc4-cb5b-11e4-8663-86fad6baf1f3.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">RSpecが通ったり落ちたりしたときにはseed値を指定する</title><link href="https://blog.toshimaru.net/rspec-occasional-fail/" rel="alternate" type="text/html" title="RSpecが通ったり落ちたりしたときにはseed値を指定する" /><published>2014-09-23T00:00:00+09:00</published><updated>2014-09-23T00:00:00+09:00</updated><id>https://blog.toshimaru.net/rspec-occasional-fail</id><content type="html" xml:base="https://blog.toshimaru.net/rspec-occasional-fail/"><![CDATA[<p>RSpecがたまに落ちたり通ったりする。そんなときはRSpecのテスト実行順序によりテストがFailしている可能性が高い。つまりあるテストがあるテストの実行後じゃないと通らない、みたいな状況に陥っている可能性があり、これは順番に依存したテストなのでよろしくない状態である。</p>

<h2 id="バージョン情報">バージョン情報</h2>

<ul>
  <li>rails (4.1.5)</li>
  <li>rspec (3.1.0)</li>
</ul>

<h2 id="random-order-rspec">Random order RSpec</h2>

<p>RSpecを順番に依存させないために<code class="language-plaintext highlighter-rouge">spec_helper.rb</code>でこんな設定がされている。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Run specs in random order to surface order dependencies. If you find an</span>
<span class="c1"># order dependency and want to debug it, you can fix the order by providing</span>
<span class="c1"># the seed, which is printed after each run.</span>
<span class="c1">#     --seed 1234</span>
<span class="n">config</span><span class="p">.</span><span class="nf">order</span> <span class="o">=</span> <span class="s2">"random"</span>
</code></pre></div></div>

<p>この設定によりテスト実行の順序がランダムになり、順序に依存しないテストの記述が可能となる。シード値はテストの最後に得られる。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Randomized with seed 724
</code></pre></div></div>

<h2 id="シード値を指定して実行">シード値を指定して実行</h2>

<p>Failしたテストのこのシード値を設定してテストを走らせればFailしたテストの順番を再現できる。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ bundle exec rspec --seed 724 --fail-fast
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">--seed</code>でシード値を指定、<code class="language-plaintext highlighter-rouge">--fail-fast</code>を設定してFailしたときにテストを即時終了させるようにする。</p>

<p>こうすればFailするテストを再現できて、どのテストがどこでテスト実行順番に依存して落ちているのかがわかります。</p>

<h2 id="参考">参考</h2>

<p><a href="http://ikm.hatenablog.jp/entry/2013/03/26/003838">ランダムに落ちるspecの修正で便利だったRSpecの2つの設定</a></p>]]></content><author><name>Toshimaru</name></author><category term="rspec" /><summary type="html"><![CDATA[RSpecがたまに落ちたり通ったりする。そんなときはRSpecのテスト実行順序によりテストがFailしている可能性が高い。つまりあるテストがあるテストの実行後じゃないと通らない、みたいな状況に陥っている可能性があり、これは順番に依存したテストなのでよろしくない状態である。]]></summary></entry><entry><title type="html">RSpec2からRSpec3にバージョン上げたらテストがFailしまくった話</title><link href="https://blog.toshimaru.net/rspec2-to-rspec3-errors/" rel="alternate" type="text/html" title="RSpec2からRSpec3にバージョン上げたらテストがFailしまくった話" /><published>2014-07-19T00:00:00+09:00</published><updated>2014-07-19T00:00:00+09:00</updated><id>https://blog.toshimaru.net/rspec2-to-rspec3-errors</id><content type="html" xml:base="https://blog.toshimaru.net/rspec2-to-rspec3-errors/"><![CDATA[<p>遊びで作ってるRailsアプリケーションのRSpecのバージョンを２から３に上げたら、２では全部通ってたテストが３にした途端テストが100個くらいFailした。一体何が起こっているかわからなかったのでRSpec3の挙動の違いを調べてみることにした。</p>

<p><code class="language-plaintext highlighter-rouge">rspec-rails</code>を<code class="language-plaintext highlighter-rouge">bundle install</code>したあと<code class="language-plaintext highlighter-rouge">rspec:install</code>する。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ rails g rspec:install
create  .rspec
create  spec
create  spec/spec_helper.rb
create  spec/rails_helper.rb
</code></pre></div></div>

<p>今までなかった<code class="language-plaintext highlighter-rouge">rails_helper.rb</code>ってのが作られている。<code class="language-plaintext highlighter-rouge">scaffold</code>で生成されるspecディレクトリの構成はこう。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>spec
├── controllers
│   └── users_controller_spec.rb
├── helpers
│   └── users_helper_spec.rb
├── models
│   └── user_spec.rb
├── rails_helper.rb
├── requests
│   └── users_spec.rb
├── routing
│   └── users_routing_spec.rb
├── spec_helper.rb
└── views
    └── users
        ├── edit.html.erb_spec.rb
        ├── index.html.erb_spec.rb
        ├── new.html.erb_spec.rb
        └── show.html.erb_spec.rb
</code></pre></div></div>

<p>試しに<code class="language-plaintext highlighter-rouge">spec/controllers/users_controller_spec.rb</code>を開いてみると冒頭がこんな感じになっていました。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>require 'rails_helper'
</code></pre></div></div>

<p><a href="http://willnet.in/126">RSpec 3 時代の設定ファイル rails_helper.rb について</a></p>

<blockquote>
  <p>というわけで、これまで require ‘spec_helper’ としていた箇所の大部分は require ‘rails_helper’ に置換してあげる必要がありそうですね。パーフェクト Ruby on Rails のテストの章は require ‘spec_helper’ となっているので、RSpec 3 のリリース版を利用する場合は適宜読み替えをお願いします。</p>
</blockquote>

<p><code class="language-plaintext highlighter-rouge">spec_helper</code>を<code class="language-plaintext highlighter-rouge">rails_helper</code>に変えて、それらの２ファイルの設定をRSpec3用に見直せば全てのテストが問題なく通るようになりました、とさ。</p>

<p>RSpec3よりruby1.8,ruby1.9をサポートしなくなったり新しいマッチャーが増えたりしてるので変更点を下記より再度確認してみるとよいと思います。</p>

<p><a href="http://myronmars.to/n/dev-blog/2014/05/notable-changes-in-rspec-3">Notable Changes in RSpec 3</a></p>]]></content><author><name>Toshimaru</name></author><category term="ruby" /><category term="rspec" /><summary type="html"><![CDATA[遊びで作ってるRailsアプリケーションのRSpecのバージョンを２から３に上げたら、２では全部通ってたテストが３にした途端テストが100個くらいFailした。一体何が起こっているかわからなかったのでRSpec3の挙動の違いを調べてみることにした。]]></summary></entry></feed>