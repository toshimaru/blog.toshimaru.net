<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://blog.toshimaru.net/feed/by_tag/roppongirb.xml" rel="self" type="application/atom+xml" /><link href="https://blog.toshimaru.net/" rel="alternate" type="text/html" /><updated>2020-12-19T12:12:43+09:00</updated><id>https://blog.toshimaru.net/feed/by_tag/roppongirb.xml</id><title type="html">Hack Your Design!</title><subtitle>toshimaruの技術系なブログ</subtitle><author><name>Toshimaru</name></author><entry><title type="html">Railsフロントエンド技術の今とこれから</title><link href="https://blog.toshimaru.net/rails-frontend/" rel="alternate" type="text/html" title="Railsフロントエンド技術の今とこれから" /><published>2017-05-22T00:00:00+09:00</published><updated>2017-05-22T00:00:00+09:00</updated><id>https://blog.toshimaru.net/rails-frontend</id><content type="html" xml:base="https://blog.toshimaru.net/rails-frontend/">&lt;p&gt;待望されたYarnサポートの入ったRails5.1が2017年4月にリリースされました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://edgeguides.rubyonrails.org/5_1_release_notes.html&quot;&gt;Ruby on Rails 5.1 Release Notes — Ruby on Rails Guides&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;他にもjQueryがデフォルトdependencyから外されたり、Optionalでwebpackサポートが入ったりしており、Railsのフロントエンドは大きな転換点を迎えたと言ってよいでしょう。本エントリではRailsのフロントエンド技術の今を振り返り、今後どうなっていくかをまとめてみたいと思います。&lt;/p&gt;

&lt;h2 id=&quot;disられてきたrailsフロントエンド-no_good&quot;&gt;DisられてきたRailsフロントエンド :no_good:&lt;/h2&gt;

&lt;p&gt;Railsのフロントエンド技術スタックは、フロントエンドを専業とするエンジニアにDisられるものでした。具体的には下記の技術要素です。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;jQuery&lt;/li&gt;
  &lt;li&gt;CoffeeScript&lt;/li&gt;
  &lt;li&gt;Assets Pipeline (sprockets)&lt;/li&gt;
  &lt;li&gt;gemのエコシステムに乗ったJSライブラリ(jquery-railsなど)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;複雑化するWebアプリケーションにおいてjQueryはもう時代遅れとされてますし、CoffeeScriptよりも時代はES6、AltJS使うにしても今はTypeScriptが有力候補でしょうか。gemのエコシステムに乗っかっているJSライブラリがAsset Pipelineを通して各環境にシップされるていることも嫌われます。なぜならJSにはnpmというエコシステムがあるからです。&lt;/p&gt;

&lt;h2 id=&quot;railsのフロントエンド刷新の歩み-walking&quot;&gt;Railsのフロントエンド刷新の歩み :walking:&lt;/h2&gt;

&lt;p&gt;しかし2016年春頃&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;からRailsの作者・&lt;a href=&quot;https://github.com/dhh&quot;&gt;DHH&lt;/a&gt;の上げたIssueを皮切りに、フロントエンド技術刷新の歩みが始まります。その歴史・経緯を追ってみましょう。&lt;/p&gt;

&lt;h3 id=&quot;2016年5月&quot;&gt;2016年5月&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Rails v5.1 で jQueryを依存性としてDropしようというIssueをDHHが上げる
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/rails/rails/issues/25208&quot;&gt;Drop jQuery as a dependency · Issue #25208 · rails/rails&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2016年10月&quot;&gt;2016年10月&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Railsにnpm supportを追加するPRが上げられる
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/rails/rails/pull/26836&quot;&gt;Add Yarn support in new apps using –yarn option by Liceth · Pull Request #26836 · rails/rails&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Sprockets 側でNPMをsupportするPRが上げられる
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/rails/sprockets/pull/405&quot;&gt;NPM support: Add support for resolving main from npm’s package.json by guilleiguaran · Pull Request #405 · rails/sprockets&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2016年11月&quot;&gt;2016年11月&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;npm support PRにてnpmではなくyarnを採用することが決められる
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/rails/rails/pull/26836#issuecomment-257426850&quot;&gt;https://github.com/rails/rails/pull/26836#issuecomment-257426850&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;jquery-rails をRailsから外すPRが上げられる
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/rails/rails/pull/27113&quot;&gt;Drop jQuery as a dependency by guilleiguaran · Pull Request #27113 · rails/rails&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2016年12月&quot;&gt;2016年12月&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;DHH自らwebpacker gemを作成開始、v0.1としてgemを公開
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/rails/webpacker/commit/f4cc31d&quot;&gt;FIRST!1! · rails/webpacker@f4cc31d&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;同gemをRails本体の機能に取り込む
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/rails/rails/pull/27288&quot;&gt;Basic –webpack delegation to new webpacker gem by dhh · Pull Request #27288 · rails/rails&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2017年2月&quot;&gt;2017年2月&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Rails 5.1.beta1 リリース
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://weblog.rubyonrails.org/2017/2/23/Rails-5-1-beta1/&quot;&gt;Rails 5.1.0.beta1: Loving JavaScript, System Tests, Encrypted Secrets, and more | Riding Rails&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;webpacker 1.0 リリース
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://rubygems.org/gems/webpacker/versions/1.0&quot;&gt;https://rubygems.org/gems/webpacker/versions/1.0&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;jQueryに依存しないujsである rails-ujs が actionview の一機能としてRails本体に取り込まれる
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/rails/rails/commit/41c33bd4b2ec3f4a482e6030b6fda15091d81e4a&quot;&gt;https://github.com/rails/rails/commit/41c33bd4b2ec3f4a482e6030b6fda15091d81e4a&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2017年4月&quot;&gt;2017年4月&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;:tada: Rails 5.1 リリース
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://weblog.rubyonrails.org/2017/4/27/Rails-5-1-final/&quot;&gt;Rails 5.1: Loving JavaScript, System Tests, Encrypted Secrets, and more | Riding Rails&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上が現在に至るRailsフロントエンド進化の軌跡となります。2016年5月のDHHの問題提起からわずか(?)一年足らずでここまで進化したのは純粋にすごいなーと思いました。&lt;/p&gt;

&lt;h2 id=&quot;railsのフロントエンド実装の選択肢&quot;&gt;Railsのフロントエンド実装の選択肢&lt;/h2&gt;

&lt;p&gt;Rails5.1のフロントエンド刷新以降、&lt;strong&gt;今Railsにはどんなフロントエンド実装の選択肢があるのか&lt;/strong&gt;、ざっと見てみます。&lt;/p&gt;

&lt;h3 id=&quot;1-asset-pipeline&quot;&gt;1. &lt;a href=&quot;https://railsguides.jp/asset_pipeline.html&quot;&gt;Asset Pipeline&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Sprockets + CoffeeScript, SASS, jQuery&lt;/li&gt;
  &lt;li&gt;今まで通りの古き良きassets管理&lt;/li&gt;
  &lt;li&gt;知見も多く転がっており、枯れているのでハマりにくい&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-sprockets-4&quot;&gt;2. &lt;a href=&quot;https://github.com/rails/sprockets&quot;&gt;Sprockets 4&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;ES6 support &lt;a href=&quot;https://github.com/rails/sprockets/blob/master/UPGRADING.md#es6-support&quot;&gt;https://github.com/rails/sprockets/blob/master/UPGRADING.md#es6-support&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Sprockets4の開発自体は停滞気味 &lt;a href=&quot;https://github.com/rails/sprockets/blob/master/CHANGELOG.md&quot;&gt;https://github.com/rails/sprockets/blob/master/CHANGELOG.md&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;3-browserify-rails&quot;&gt;3. &lt;a href=&quot;https://github.com/browserify-rails/browserify-rails&quot;&gt;browserify-rails&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;sprockets のコールバックとして動作
    &lt;ul&gt;
      &lt;li&gt;つまりsprocketsに依存している&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;導入のための参考記事: &lt;a href=&quot;http://techlife.cookpad.com/entry/2015/12/14/130041&quot;&gt;モダンJavaScript開発環境 on Rails - クックパッド開発者ブログ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;4-webpacker&quot;&gt;4. &lt;a href=&quot;https://github.com/rails/webpacker&quot;&gt;webpacker&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;絶賛開発中
    &lt;ul&gt;
      &lt;li&gt;活発に変更が入っているので導入に際しては現時点ではREADMEを参考にするのが良さそう&lt;/li&gt;
      &lt;li&gt;まだ小慣れていない印象&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;最初はwebpack+railsのシームレスな統合のための薄い実装だと思ったが、現在ゴテゴテな実装…
    &lt;ul&gt;
      &lt;li&gt;react, angular, elm, vue などの初期インストールタスクが１つのレポジトリに全部のっている
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;https://github.com/rails/webpacker/issues/20#issuecomment-266347480&quot;&gt;plugable にしようぜ&lt;/a&gt;という話はあるが現在そうはなっていない&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;初回インストール時の生成ファイル・パッケージ構成はたぶんフロントエンドガチ勢からみたら&lt;a href=&quot;https://github.com/rails/webpacker/blob/5003a5de0222c1f5b0f3c2b887064039e06f7eae/lib/install/template.rb#L25-L30&quot;&gt;クソの山っぽい&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;レールにのったwebpack利用という意味のカジュアルな利用だったら良いかもしれない&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;5-webpack-rails&quot;&gt;5. &lt;a href=&quot;https://github.com/mipearson/webpack-rails&quot;&gt;webpack-rails&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Sprockets 非依存&lt;/li&gt;
  &lt;li&gt;webpack利用のための薄い実装
    &lt;ul&gt;
      &lt;li&gt;初期のwebpackerに似てる印象&lt;/li&gt;
      &lt;li&gt;個人的にはwebpackerよりは筋が良い印象を受けた&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;6-react_on_rails&quot;&gt;6. &lt;a href=&quot;https://github.com/shakacode/react_on_rails&quot;&gt;react_on_rails&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;SSRサポート&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/sstephenson/execjs&quot;&gt;execjs&lt;/a&gt; 依存&lt;/li&gt;
  &lt;li&gt;webpacker integration アリ
    &lt;ul&gt;
      &lt;li&gt;webpackerの薄い実装も登場 &lt;a href=&quot;https://github.com/shakacode/webpacker_lite&quot;&gt;shakacode/webpacker_lite&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;参考記事: &lt;a href=&quot;http://r7kamura.hatenablog.com/entry/2016/10/10/173610&quot;&gt;Ruby on Rails on React on SSR on SPA - ✘╹◡╹✘&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;7-react-rails&quot;&gt;7. &lt;a href=&quot;https://github.com/reactjs/react-rails&quot;&gt;react-rails&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;SSRサポート&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/sstephenson/execjs&quot;&gt;execjs&lt;/a&gt; 依存&lt;/li&gt;
  &lt;li&gt;react_on_railsと異なる点は、integration の選択肢として Rails Assets Pipline もしくは webpacker が選べること
    &lt;ul&gt;
      &lt;li&gt;Asset Pipelineにのりたかったらこちらを選択&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;8-独自に導入&quot;&gt;8. 独自に導入&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;独自にJSアプリケーションをRailsに統合させる構成を考えRails上にのっける&lt;/li&gt;
  &lt;li&gt;例: &lt;a href=&quot;http://techlife.cookpad.com/entry/2016/07/27/101015&quot;&gt;webpackを使った Rails上でのReact開発 - クックパッド開発者ブログ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;9-sprockets-commoner&quot;&gt;9. &lt;a href=&quot;https://github.com/Shopify/sprockets-commoner&quot;&gt;sprockets-commoner&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Shopify製&lt;/li&gt;
  &lt;li&gt;コンセプトとしてはRails Wayを壊さずにBabelを利用すること&lt;/li&gt;
  &lt;li&gt;Sprocketsに依存&lt;/li&gt;
  &lt;li&gt;導入に際してはitkrt2yさんのこちらの記事を参考に: &lt;a href=&quot;http://qiita.com/itkrt2y/items/18ea41828e1c22fc31e3&quot;&gt;顧客が本当に求めていたsprockets、sprockets-commonerの紹介 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;どうすべきか&quot;&gt;どうすべきか&lt;/h2&gt;

&lt;p&gt;上記に紹介したように様々な実装があるわけですが、我々はどれをどのように選択すべきでしょうか。僕なりにまとめてみました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb3/flowchart.png&quot; alt=&quot;chart&quot; /&gt;&lt;/p&gt;

&lt;p&gt;まず最初にあるのが、Railsが嫌い/宗教的にあわない/フロントエンドをレールにのらせたくないのであれば無理してRailsを使うことはないと思っています。Railsをやめる、あるいはRailsはWebAPIに徹して独立したフロントエンドの世界観を築くのもアリだと思ってます。&lt;/p&gt;

&lt;p&gt;また現状のAsset管理に満足していて、かつビジネス上の要件としてリッチなJS実装が求められないのであれば無理してモダンなフロントエンド機構を構築する必要はありません。無理してwebpackだのbrowserifyだの導入せずに、古き良きAsset Pipelineでいいのです（技術そのものが目的な場合はこの限りではない）。&lt;/p&gt;

&lt;h2 id=&quot;今後どうなるか&quot;&gt;今後どうなるか&lt;/h2&gt;

&lt;p&gt;Railsコミュニティの流れとして、&lt;strong&gt;今後どうなっていくか&lt;/strong&gt; も考えてみたいと思います。&lt;/p&gt;

&lt;h3 id=&quot;1-gemからnpmへ&quot;&gt;1. gemからnpmへ&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb3/rails-npm.png&quot; alt=&quot;bridge&quot; /&gt;&lt;/p&gt;

&lt;p&gt;RailsからNPM(yarn)のブリッジがRailsのコア機能の１つとして提供されたことはとても意義深いことだと思っています。その結果起こりうることとしては以下でしょうか。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;jquery-rails, underscore-rails のような Asset Pipeline に載せるタイプのgemは廃れていく(npm管理に移っていく)&lt;/li&gt;
  &lt;li&gt;Railsエンジニアがnpmライブラリを今後どんどん活用することによって、RailsエンジニアのJS界隈進出が増えるかも…?
    &lt;ul&gt;
      &lt;li&gt;railsコミュニティにとってもnpmコミュニティにとっても良い事&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-reactへの大潮流&quot;&gt;2. Reactへの大潮流&lt;/h3&gt;

&lt;p&gt;今までJSライブラリのデファクトと言ったらjQueryでしたが、フロントエンド実装の複雑化にともないReactを採用する企業が増えその状況が変わってきました（少なくとも僕の観測範囲内では）。jQueryを使っての複雑なDOM操作のコードは破綻しがちですし限界があります。その結果のReact採用なのでしょう。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;反省会というからReact導入が一般的に浸透し導入後一巡したってことだろうなぁ&lt;br /&gt;Twitterトレンド入り！ 「&lt;a href=&quot;https://twitter.com/hashtag/React%E5%8F%8D%E7%9C%81%E4%BC%9A?src=hash&quot;&gt;#React反省会&lt;/a&gt;」登壇資料一挙公開！ | Wantedly Engineer Blog &lt;a href=&quot;https://t.co/PbG49aclqa&quot;&gt;https://t.co/PbG49aclqa&lt;/a&gt;&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/862817538022883328&quot;&gt;May 11, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;上記のようにReactが導入されやすい環境が整ってきている昨今、今後ますますRails+Reactの採用事例は増えていくと思われます&lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h3 id=&quot;3-turbolinks-がますます下火に&quot;&gt;3. Turbolinks がますます下火に&lt;/h3&gt;

&lt;p&gt;&lt;del&gt;黙って無効化すべし&lt;/del&gt; 無効化されることの多いturbolinks機能ですがますます下火になっていくと思われます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb3/turbolinks.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;リッチなレンダリングUXを提供するためのRailsチーム(DHH)の苦肉の策がTurbolinksという理解でいますが、上述したようにフロントエンド開発の機構が整ってきている今、わざわざturbolinksを使う必要性もなくなってきました。&lt;/p&gt;

&lt;p&gt;とはいえ、絶対にJS書きたくないでござる！というJS書きたくないマンなRailsエンジニアの選択肢の１つとしてはアリだと思います。&lt;/p&gt;

&lt;h2 id=&quot;フロントエンドというマイクロサービスがもたらす複雑性&quot;&gt;フロントエンドというマイクロサービスがもたらす複雑性&lt;/h2&gt;

&lt;p&gt;と、ここまでRailsとフロントエンドの話をしてきましたが、一方で安易なフロントエンド技術の導入は負債を生み出す危険性もあることも付しておきます。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;このツラミわかるなぁ | ReactSPAをRailsに戻している話 // Speaker Deck &lt;a href=&quot;https://t.co/G3Ln3NbmCQ&quot;&gt;https://t.co/G3Ln3NbmCQ&lt;/a&gt;&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/857758278830350337&quot;&gt;April 28, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;このケースのように複雑なフロントエンド実装が逆に負債となり足かせとなる場合もあります。&lt;a href=&quot;http://anond.hatelabo.jp/20170501085956&quot;&gt;全くメンテされないクソJSコードの塊を作る&lt;/a&gt;ような状況は避けなければなりません。&lt;/p&gt;

&lt;p&gt;高度に専業化したフロントエンド技術はもはやいちサーバーサイドエンジニアが片手間に開発・メンテナンスできるレベルのものでもなくなってきています。うまく作ったとしてもその後のアップデートに追従していくのは至難の業でしょう。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot; data-cards=&quot;hidden&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;紹介されているこっちのスライドもよくわかるなぁ。「フロントエンドは一個のマイクロサービス(ただのViewじゃない)」「マイクロサービス作っているのだから辛いの当然」 &lt;a href=&quot;https://t.co/YqkrIYSXxf&quot;&gt;https://t.co/YqkrIYSXxf&lt;/a&gt;&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/857790990496616448&quot;&gt;April 28, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;このようにフロントエンドを１つのマイクロサービスと捉える見方もあります。マイクロサービスであるからこそ、モノリシックサービスよりもアーキテクチャ・実装が複雑になりがちです。高度なフロントエンド技術導入の際はチームとしてその複雑性を受け入れる覚悟が必要でしょう。&lt;/p&gt;

&lt;h2 id=&quot;イベント告知&quot;&gt;イベント告知&lt;/h2&gt;

&lt;p&gt;そんなわけで随分と長い前置きでしたが、次回のRoppongi.rb#3のテーマは”Rails x Frontend”で開催します。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://roppongirb.connpass.com/event/56456/&quot;&gt;Roppongi.rb #3 “Rails x Frontend-Tech”&lt;/a&gt;&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;Roppongi.rb #3 &amp;quot;Rails x Frontend-Tech&amp;quot; 〜これからのRails Frontendの話をしよう〜 を公開しました！ &lt;a href=&quot;https://t.co/hOjXX7J8dC&quot;&gt;https://t.co/hOjXX7J8dC&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/roppongirb?src=hash&quot;&gt;#roppongirb&lt;/a&gt;&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/861725918552707072&quot;&gt;May 8, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;既に参加枠（抽選）は埋まっており参加登録いただいた方を全員ご案内できないのが恐縮ですが、もしよければ登録して遊びにきてください。&lt;/p&gt;

&lt;h2 id=&quot;参考リンク&quot;&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://qiita.com/itkrt2y/items/7e999836f460fb9c005d&quot;&gt;Rails5.1に向けてフロントエンド周りで起こっている革命まとめ - Qiita&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://qiita.com/yuroyoro/items/a29e39989f4469ef5e41&quot;&gt;Rails5.1から導入されるwebpacker.gemは本当にRailsのフロントエンド開発に福音をもたらすのか? - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;ちょうど&lt;a href=&quot;http://railsconf.com/2016&quot;&gt;RailsConf 2016&lt;/a&gt;の後くらいのタイミングでしょうか。 &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;一方で、複雑でないアプリケーションに対しReactを導入するのはオーバーキルなのでごく一部分の小さなイベント制御JSコードであればjQueryで十分な場面も未だ多くあると思います。 &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Toshimaru</name></author><category term="rails" /><category term="frontend" /><category term="roppongirb" /><summary type="html">待望されたYarnサポートの入ったRails5.1が2017年4月にリリースされました。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/roppongirb3/roppongirb-3.jpg" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/roppongirb3/roppongirb-3.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Roppongi.rb#2で「Infrastructure as (Ruby) Code の現状確認」を発表しました</title><link href="https://blog.toshimaru.net/infrastructure-as-ruby-code-2016/" rel="alternate" type="text/html" title="Roppongi.rb#2で「Infrastructure as (Ruby) Code の現状確認」を発表しました" /><published>2016-11-06T00:00:00+09:00</published><updated>2016-11-06T00:00:00+09:00</updated><id>https://blog.toshimaru.net/infrastructure-as-ruby-code-2016</id><content type="html" xml:base="https://blog.toshimaru.net/infrastructure-as-ruby-code-2016/">&lt;p&gt;第二回Roppongi.rbを&lt;a href=&quot;http://roppongirb.connpass.com/event/42633/&quot;&gt;「Infrastructure x Ruby」というテーマで開催&lt;/a&gt;した。&lt;/p&gt;

&lt;p&gt;僕はその中で「Infrastructure as (Ruby) Code の現状確認」という内容でオープニングLTとして発表したので、その内容をブログにもまとめておく（前回発表分の発表内容まとめはこちら: &lt;a href=&quot;http://blog.toshimaru.net/roppongirb-speeding-up-rails/&quot;&gt;Roppongi.rbで「Rails高速化戦略」を発表しました&lt;/a&gt;）。&lt;/p&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;786983b0a1f94d1ca1250aa48ce94ed0&quot; data-ratio=&quot;1.33333333333333&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;目的&quot;&gt;目的&lt;/h2&gt;

&lt;p&gt;発表の目的としては世に言われる &lt;strong&gt;Infrastructure as Code&lt;/strong&gt; の認識・理解を参加者であわせること。&lt;/p&gt;

&lt;h2 id=&quot;infrastructure-as-codeの意義&quot;&gt;Infrastructure as Codeの意義&lt;/h2&gt;

&lt;p&gt;大きく３つあると思っている。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;インフラ構築手順を秘伝のタレ化させない&lt;/li&gt;
  &lt;li&gt;手順をコードに落としてインフラへの変更をトラッキングする&lt;/li&gt;
  &lt;li&gt;手順を不変（immutable）にする&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;秘伝のタレ&quot;&gt;秘伝のタレ&lt;/h3&gt;

&lt;p&gt;秘伝のタレ。一体どういう意味だろうか。まるで秘伝のタレのように継ぎ足し継ぎ足し変更が入り代々受け継がれてきたサーバーを形容する表現が &lt;strong&gt;秘伝のタレ&lt;/strong&gt; だ。&lt;/p&gt;

&lt;p&gt;秘伝のタレが代々受け継がれている環境なんかでは、メンテナンスされているかどうかまるでわからない「サーバー構築手順書.xls」なんてモノがあったりする。そしてそれは大体において手順書通りにはうまくいかないのが常だ。&lt;/p&gt;

&lt;p&gt;インフラ担当者のアタマにしか入っていない隠し味なんかがあったりするとオワタ状態＼(^o^)／。その担当者が退職したりすると誰も現プロダクション環境は再現できません、という状況が出来上がる。&lt;/p&gt;

&lt;h3 id=&quot;コード化するということ&quot;&gt;コード化するということ&lt;/h3&gt;

&lt;p&gt;秘伝のタレ化を防ぐために、コード化という行為を行う。ではコード化されることで良い事とはなんだろうか。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;コード化される&lt;/li&gt;
  &lt;li&gt;➜ Gitでトラック可能になる&lt;/li&gt;
  &lt;li&gt;➜ Githubでプルリク可能になる&lt;/li&gt;
  &lt;li&gt;➜ Githubでレビュー可能になる&lt;/li&gt;
  &lt;li&gt;➜ :blush: = HAPPY!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このようにコード化されることでソフトウェア開発のグッドプラクティスであるGithub Workflowに乗ることができる。:surfer:&lt;/p&gt;

&lt;h2 id=&quot;immutable-infrastructure&quot;&gt;Immutable Infrastructure&lt;/h2&gt;

&lt;p&gt;次に手順を不変（Immutable）にするということについて。Immutableという言葉はインフラ的文脈ではImmutable Infrastructureという言葉が有名かと思う。&lt;/p&gt;

&lt;p&gt;Immutable Infrastructureについては、&lt;a href=&quot;http://rebuild.fm/25/&quot;&gt;rebuild.fmでnaoyaさんやmizzyさんがmiyagawaさんと話して&lt;/a&gt;いたり、&lt;a href=&quot;https://speakerdeck.com/naoya/immutable-infrastructure-number-jawsdays&quot;&gt;naoyaさんが発表していたり&lt;/a&gt;したあたりを契機に日本でも浸透した言葉だと思っている。&lt;/p&gt;

&lt;p&gt;出自はというとChad Fowler氏が書いた下記の記事。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://chadfowler.com/2013/06/23/immutable-deployments.html&quot;&gt;Trash Your Servers and Burn Your Code: Immutable Infrastructure and Disposable Components&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;immutable-infrastructure-のキーワード&quot;&gt;Immutable Infrastructure のキーワード&lt;/h3&gt;

&lt;p&gt;Immutable Infrastructureを僕なりに解釈すると、その言葉の本質は下記のキーワードで表せると思う。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Immutable （不変）&lt;/li&gt;
  &lt;li&gt;Disposable（使い捨て）&lt;/li&gt;
  &lt;li&gt;Reproducible （再現可能）&lt;/li&gt;
  &lt;li&gt;Idempotence（冪等性）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Immutable Infrastructureが登場した背景にはAWS, GCPを始めとするIaaSの登場が大きいと思っている。どういうことかというとIaaSでボタン１つでサーバーを上げて必要なくなったら捨てるダイナミックなサーバー、つまり &lt;strong&gt;Disposable&lt;/strong&gt; なサーバーが誕生したということが背景の１つにある。&lt;/p&gt;

&lt;p&gt;そして、オートスケーリングの恩恵を享受するためにはサーバー・プロビジョニング自動化作業が必要となる。スケール前提のサーバー群はいつ何時でも既存のサーバーと同じ状態のサーバーが立ち上がる必要がある&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;。つまり、構築手順を &lt;strong&gt;Immutable&lt;/strong&gt; にし &lt;strong&gt;Reproducible&lt;/strong&gt; なサーバー環境にする(= &lt;strong&gt;Idempotence&lt;/strong&gt; を担保する)ことが必要。&lt;/p&gt;

&lt;h2 id=&quot;構成管理ツールの歴史&quot;&gt;構成管理ツールの歴史&lt;/h2&gt;

&lt;p&gt;メジャーなプロビジョニングツール(構成管理ツール)の歴史を追ってみる。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;2005年 &lt;a href=&quot;https://docs.puppet.com/puppet/&quot;&gt;Puppet&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;2009年 &lt;a href=&quot;https://www.chef.io/chef/&quot;&gt;Chef&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;2012年 &lt;a href=&quot;https://www.ansible.com&quot;&gt;Ansible&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;2014年 &lt;a href=&quot;https://www.terraform.io&quot;&gt;Terraform&lt;/a&gt;, &lt;a href=&quot;https://github.com/itamae-kitchen/itamae&quot;&gt;Itamae&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;実装言語別分類&quot;&gt;実装言語別分類&lt;/h2&gt;

&lt;p&gt;実装言語別に分類してみる。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Ruby実装&lt;/th&gt;
      &lt;th&gt;Go実装&lt;/th&gt;
      &lt;th&gt;Python実装&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Puppet, Chef, Itamae, Serverkit&lt;/td&gt;
      &lt;td&gt;Terraform&lt;/td&gt;
      &lt;td&gt;Ansible&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;表現別分類&quot;&gt;表現別分類&lt;/h2&gt;

&lt;p&gt;インフラストラクチャをどうコードで表現しているかの表現体形で分類してみる。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;RubyによるDSL&lt;/th&gt;
      &lt;th&gt;HCLによるDSL&lt;/th&gt;
      &lt;th&gt;YAML&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Puppet, Chef, Itamae&lt;/td&gt;
      &lt;td&gt;Terraform&lt;/td&gt;
      &lt;td&gt;Ansible, Serverkit&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;why-yaml&quot;&gt;Why YAML?&lt;/h3&gt;

&lt;p&gt;なぜYAMLで表現するのか？ まずはXML/JSONより記述がラクという点がある。そしてYAMLは人間にとってよみやすい、かきやすい、わかりやすいという特徴がある。そしてRailsの設定ファイルなどで一般的に使われている記述フォーマットなので、学習コストが低いという点が利点である。&lt;/p&gt;

&lt;h3 id=&quot;why-hcl&quot;&gt;Why HCL?&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hashicorp/hcl&quot;&gt;HCL&lt;/a&gt; とは HashiCorp configuration language の略。HCLの&lt;a href=&quot;https://github.com/hashicorp/hcl#why&quot;&gt;READMEではHLCについてこう説明&lt;/a&gt;されている。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;:x: JSONダメ。なぜならコメントかけない。しんどい。&lt;/li&gt;
  &lt;li&gt;:x: YAMLもダメ。なぜなら初心者には記法むずかしい！&lt;/li&gt;
  &lt;li&gt;:x: Rubyとかもダメ。なぜなら自由度高すぎぃ！複雑すぎぃ！&lt;/li&gt;
  &lt;li&gt;:o: よろしい、ならば独自言語だ。ということで生まれたのが &lt;strong&gt;HCL&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;why-ruby&quot;&gt;Why Ruby?&lt;/h3&gt;

&lt;p&gt;なぜRubyを採用するか？ まずはDSLが書きやすいという点。そしてRSpecなどのRuby DSLに代表されるようにRuby DSLは宣言的な記述が可能である。宣言的ということはコードを読んだだけでそのコードの意図が伝わりやすいということだ。そしてDSLといってもRubyはRuby。RubyなのでRubyでできることは何でもできちゃうので、自由度が高い（これは悪い意味に作用することもあってやりすぎるとChefのレシピそのものが秘伝のタレ化する可能性があるので注意）。&lt;/p&gt;

&lt;h2 id=&quot;infrastructure-as-code-の概念整理&quot;&gt;Infrastructure as Code の概念整理&lt;/h2&gt;

&lt;p&gt;Infrastructure as Code の概念を整理してみたい。&lt;a href=&quot;http://mizzy.org/blog/2013/10/29/1/&quot;&gt;mizzyさんのブログでは&lt;/a&gt;、プロビジョニングのレイヤーを下記のように分けるような考え方が紹介されていた。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb2/provisioning-tools.png&quot; alt=&quot;provisioning layers&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;シンプルなプロビジョニングレイヤーの考え方&quot;&gt;シンプルなプロビジョニング・レイヤーの考え方&lt;/h2&gt;

&lt;p&gt;オーケストレーションなどというと抽象的なのとInfrastructure as Codeのスコープが広くなってしまうと思うので、シンプルにこんな風に考えてみるのはどうだろうか。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb2/infra-as-code-layers.png&quot; alt=&quot;infra-as-code-layers&quot; /&gt;&lt;/p&gt;

&lt;p&gt;上記の考え方で先の構成管理ツールを分類するとこんな感じだ。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb2/provisioning-categorize.png&quot; alt=&quot;provisioning categorize&quot; /&gt;&lt;/p&gt;

&lt;p&gt;しかしこれで本当に全てはコード化されるか、というとそうではない。サーバーのプロビジョニングでコード化されるのはAWSサービス群のほんの一部、EC2のみだ。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb2/aws-services.png&quot; alt=&quot;AWS services&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;infrastructure-as-code-のカバー範囲&quot;&gt;Infrastructure as Code のカバー範囲&lt;/h2&gt;

&lt;p&gt;IaaSは仮想サーバ以外にもさまざまなサービスを提供している。AWSの例でいうと、ELB, RDS, VPC, S3, CloudFront, IAM, SecurityGroup などなど。&lt;/p&gt;

&lt;p&gt;それらに対するオペレーションをAWS Management ConsoleなどのGUIでやるべきだろうか？&lt;/p&gt;

&lt;h3 id=&quot;gui-configuration-is-hard&quot;&gt;GUI Configuration is hard…&lt;/h3&gt;

&lt;p&gt;さきほどのImmutable Infrastructureの文脈でいうと、GUIによる操作はImmutableではない。なぜならGUIは変わるかもしれないし、GUI操作は明確な言語化できないほどにファジーだからだ。では重要な設定をそのGUI任せにしていいのだろうか？&lt;/p&gt;

&lt;p&gt;Route53やSecurityGroupなどオペレーションミスで一歩間違うと大障害になりかねない。これらのGUIの設定をimmutableにはできないだろうか。じゃあimmutableなインターフェースであるAPIを叩けばいいじゃない。というところで、&lt;strong&gt;Configuration as Code&lt;/strong&gt; という言葉が出て来る。&lt;/p&gt;

&lt;p&gt;この考え方を使えばInfrastructure as Codeの概念をさらに良い感じに敷衍できるのではないかと僕は考えた。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb2/configuratino-as-code.png&quot; alt=&quot;Configuration as Code*&quot; /&gt;&lt;/p&gt;

&lt;p&gt;こう考えるとIaaSの各種サービス群もコード化の対象として捉えることができる。&lt;/p&gt;

&lt;h2 id=&quot;全てがコードになる例&quot;&gt;全てがコードになる例&lt;/h2&gt;

&lt;h3 id=&quot;route53-configuration&quot;&gt;Route53 Configuration&lt;/h3&gt;

&lt;p&gt;Route53のコード化例。こんな感じにRuby DSLになる&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;hosted_zone&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;example.com.&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;rrset&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;example.com.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;A&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ttl&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;resource_records&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;127.0.0.2&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;powered by &lt;a href=&quot;https://github.com/winebarrel/roadworker&quot;&gt;roadworker&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;aws_route53_record&quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;www&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;zone_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;${aws_route53_zone.primary.zone_id}&quot;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;www.example.com&quot;&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;ttl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;300&quot;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;records&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${aws_eip.lb.public_ip}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;powered by &lt;a href=&quot;https://www.terraform.io/docs/providers/aws/r/route.html&quot;&gt;AWS: aws_route - Terraform by HashiCorp&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;cloudwatch-alarm&quot;&gt;CloudWatch Alarm&lt;/h3&gt;

&lt;p&gt;CloudWatchのAlarmだってDSLになる。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;alarm&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;alarm1&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;AWS/EC2&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;metric_name&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;CPUUtilization&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;dimensions&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;InstanceId&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;i-XXXXXXXX&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;period&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;statistic&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:average&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;threshold&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;gt;=&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;50.0&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;evaluation_periods&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;actions_enabled&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;alarm_actions&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ok_actions&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;insufficient_data_actions&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;arn:aws:sns:us-east-1:123456789012:my_topic&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;powered by &lt;a href=&quot;https://github.com/winebarrel/radiosonde&quot;&gt;radiosonde&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;datadog-alert-configuration&quot;&gt;Datadog Alert Configuration&lt;/h3&gt;

&lt;p&gt;さらにコード化される対象はIaaSだけではない。Datadogという監視のアラート設定もコード化される。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;monitor&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Check load avg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;metric alert&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;avg(last_5m):avg:ddstat.load_avg.1m{host:i-XXXXXXXX} &amp;gt; 1&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;@winebarrel@example.net&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;locked&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;new_host_delay&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;notify_no_data&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;no_data_timeframe&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;notify_audit&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;silenced&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({})&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;powered by &lt;a href=&quot;https://github.com/winebarrel/barkdog&quot;&gt;barkdog&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;github-member-management&quot;&gt;Github Member Management&lt;/h3&gt;

&lt;p&gt;Githubのメンバー管理だってTerraformでできちゃうんだぜ。&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;github_membership&quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;membership_for_some_user&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;SomeUser&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;member&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;github_repository&quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;example&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;example&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;My awesome codebase&quot;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;github_repository_collaborator&quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;a_repo_collaborator&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;our-cool-repo&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;SomeUser&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;permission&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;admin&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;powered by &lt;a href=&quot;https://www.terraform.io/docs/providers/github/&quot;&gt;Provider: GitHub - Terraform by HashiCorp&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;全てがプルリクになる&quot;&gt;全てがプルリクになる&lt;/h2&gt;

&lt;p&gt;冒頭に述べたように、コード化されるということはGithubに乗せてプルリクエストを出せるということだ。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb2/pull-request.png&quot; alt=&quot;Pull Request&quot; /&gt;&lt;/p&gt;

&lt;p&gt;こんなふうにプルリクになっているとレビューも簡単。&lt;/p&gt;

&lt;h2 id=&quot;コード化するメリット&quot;&gt;コード化するメリット&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;レビューによるチェック体制により、より安全なConfigurationオペレーションを実現できる&lt;/li&gt;
  &lt;li&gt;CIサービスと連携させてテスト・CDの自動化も可能となる&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;コード化することによりGithubワークフロー（プルリク→レビュー→マージ）に乗ることができてハッピー :smile:&lt;/li&gt;
  &lt;li&gt;Infrastructure as Code = Server Configuration as Code + Service Configuration as Code ➜ サーバーだけではなく、サービスそれ自体もコード化されていく。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;感想&quot;&gt;感想&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;今回の発表はKeynoteでスライド作ったけど、Keynoteはレイアウトとかテーマの設定が自由にできてDecksetよりはデザイン凝ろうと思ったときに便利。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/ryotarai/itamae-infra-as-code-xian-zhuang-que-ren-hui&quot;&gt;Itamae - Infra as Code 現状確認会&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://rebuild.fm/25/&quot;&gt;Rebuild: 25: Immutable Infrastructure&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/naoya/infrastructure-as-code&quot;&gt;Infrastructure as Code // Speaker Deck&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://mizzy.org/blog/2016/04/22/1/&quot;&gt;Infrastructure as Code 再考&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://chadfowler.com/2013/06/23/immutable-deployments.html&quot;&gt;Trash Your Servers and Burn Your Code: Immutable Infrastructure and Disposable Components&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://martinfowler.com/bliki/InfrastructureAsCode.html&quot;&gt;InfrastructureAsCode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;特定のサーバーにデータに依存してしまわないように、データ的にはステートレスなサーバー構成が前提となる &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Toshimaru</name></author><category term="ruby" /><category term="roppongirb" /><category term="aws" /><category term="presentation" /><summary type="html">第二回Roppongi.rbを「Infrastructure x Ruby」というテーマで開催した。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/roppongirb2/og.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/roppongirb2/og.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Roppongi.rbで「Rails高速化戦略」を発表しました</title><link href="https://blog.toshimaru.net/roppongirb-speeding-up-rails/" rel="alternate" type="text/html" title="Roppongi.rbで「Rails高速化戦略」を発表しました" /><published>2016-07-19T00:00:00+09:00</published><updated>2016-07-19T00:00:00+09:00</updated><id>https://blog.toshimaru.net/roppongirb-speeding-up-rails</id><content type="html" xml:base="https://blog.toshimaru.net/roppongirb-speeding-up-rails/">&lt;p&gt;自分がオーガナイザーを務めた &lt;a href=&quot;http://roppongirb.connpass.com/event/33502/&quot;&gt;Roppongi.rb #1&lt;/a&gt;で「Rails高速化戦略」という題で発表してきました。スライドは下記になります。&lt;/p&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;37881a2ec2214ef39d85820f3327bbc2&quot; data-ratio=&quot;1.33333333333333&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;発表内容をこちらのブログでも文章形式でざっとまとめてみたいと思います。&lt;/p&gt;

&lt;h2 id=&quot;rails-ruby-遅いよね&quot;&gt;Rails (Ruby) 遅いよね&lt;/h2&gt;

&lt;p&gt;RailsないしRubyはプログラミング言語の中では速くはない言語であることは言うまでもないと思う&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;。 実際に「Rails/Ruby遅いよねって今まで思ったことある方どれくらいいますか？」と会場でも聞いてみたところ、予想では半数以上手を挙げてくれると思ったのだけど、実際は30人中3~4人くらい。あまりにも意外な結果だったので自分なりに理由を分析してみると２つあるかなと思う。&lt;/p&gt;

&lt;h3 id=&quot;パフォーマンスを求められないから&quot;&gt;パフォーマンスを求められないから&lt;/h3&gt;

&lt;p&gt;例えば社内の数人が使うような管理画面の場合。この場合、パフォーマンスよりも機能性（ちゃんと検索・閲覧できるかとかCRUD操作ができるかとか）などが優先されると思う。数人だけが使うのでアクセススパイクもないし、パフォーマンスが問題にもなりにくい。&lt;/p&gt;

&lt;h3 id=&quot;railsをフレームワークとして使っていないから&quot;&gt;Railsをフレームワークとして使っていないから&lt;/h3&gt;

&lt;p&gt;すごくパフォーマンスを求められるWebアプリの場合、それが事前にわかっているならまずは言語選択レベルでRailsを選択しないかもしれない。今ならGoとかElixirとかScalaとか代替言語もあるのでそちらを選択した場合はRailsは使わないことになるのでRailsの遅さで困ることもない。&lt;/p&gt;

&lt;h2 id=&quot;それでもやっぱりrailsだ&quot;&gt;それでもやっぱりRailsだ…!&lt;/h2&gt;

&lt;p&gt;それでもやっぱりRuby好きのRubyっ子であれば、Rubyは使いたい… ということで、Railsの高速化をする上での戦略を紹介。&lt;/p&gt;

&lt;h2 id=&quot;ruby-version-up&quot;&gt;Ruby Version Up&lt;/h2&gt;

&lt;p&gt;まずはRubyバージョンアップ。Rubyバージョンの歴史はこんな感じになっている。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;2013.2: Ruby 2.0&lt;/li&gt;
  &lt;li&gt;2013.12: Ruby 2.1&lt;/li&gt;
  &lt;li&gt;2014.12: Ruby 2.2&lt;/li&gt;
  &lt;li&gt;2015.12: Ruby 2.3&lt;/li&gt;
  &lt;li&gt;20xx: Ruby 3.0&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;去年matzの口からRuby3のコンセプトが発表された。その驚くべき内容が &lt;strong&gt;Ruby 3 x 3&lt;/strong&gt; 。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb/ruby3x3.png&quot; alt=&quot;ruby 3 x 3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;via. &lt;a href=&quot;https://www.youtube.com/watch?v=E9bO1uqs4Oc&quot;&gt;Ruby3 challenges - RubyKaigi 2015 Keynote - YouTube&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;とあるrailsアプリの場合&quot;&gt;とあるRailsアプリの場合&lt;/h2&gt;

&lt;p&gt;会社で取り組んでいるプロダクトのRubyのバージョンは基本的に最新バージョンを使うようにしているものの、中にはレガシーな環境もある。下記はあるプロダクトでRuby2.0 から Ruby2.1に上げた例。結果としては、Ruby 2.0 =&amp;gt; 2.1 Ruby Version Up だけで レスポンス速度が約2倍向上した。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb/ruby2_0-to-2_1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;このようにRubyバージョンアップによりアプリケーションコード変更ゼロでも&lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;、速度改善が期待できる。古いRubyお使いの方は今すぐRubyのバージョンアップ！&lt;/p&gt;

&lt;h2 id=&quot;what-about-rails&quot;&gt;What about Rails?&lt;/h2&gt;

&lt;p&gt;じゃあRailsはどうだろうか。下記は&lt;a href=&quot;https://github.com/amatsuda&quot;&gt;amatsuda&lt;/a&gt;さんのmatzのRuby 3x3 を受けての発表。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb/rails3x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/a_matsuda/3x-rails&quot;&gt;3x Rails // Speaker Deck&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?&lt;/code&gt;が付いていることで分かる通り3倍速くなるという発表というより、まだまだRailsは速くするために工夫の余地があるよ、というような発表。&lt;/p&gt;

&lt;p&gt;下記は同じ&lt;a href=&quot;https://github.com/amatsuda&quot;&gt;amatsuda&lt;/a&gt;さんが発表された&lt;a href=&quot;http://togetter.com/li/955629&quot;&gt;Rails Upgrade Casual Talks&lt;/a&gt;での資料です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb/rails-verup1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;via. &lt;a href=&quot;https://speakerdeck.com/a_matsuda/rails-upgrade-casual-talks&quot;&gt;Rails Upgrade Casual Talks // Speaker Deck&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;たしかに色んな機能が追加されている中、Railsが劇的に速くなることは考えにくい。解決策は…?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb/rails-verup2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;歯を食いしばってRails/Rubyをバージョンアップ&lt;/strong&gt; :innocent:&lt;/p&gt;

&lt;p&gt;Rails 遅くなってもRuby は速くなっているので、どちらも最新版をしっかり追っかけていけば、遅くなることなくRailsの機能拡張も追っかけていけるのでOK.&lt;/p&gt;

&lt;h2 id=&quot;ボトルネックを潰す&quot;&gt;ボトルネックを潰す&lt;/h2&gt;

&lt;p&gt;Railsアプリをどうボトルネックを発見し潰していくか？&lt;/p&gt;

&lt;h3 id=&quot;推測するな計測せよ&quot;&gt;推測するな、計測せよ　&lt;/h3&gt;

&lt;p&gt;ボトルネックは計測して数値で示すもの。ボトルネックを発見するためのサービス・ツールをいくつか紹介。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://newrelic.com/&quot;&gt;New Relic&lt;/a&gt;: 無料で使えて導入もラクでよい&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/MiniProfiler/rack-mini-profiler&quot;&gt;rack-mini-profiler&lt;/a&gt;: 開発環境導入する。クエリやpartialレンダー時間を表示。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/kainosnoema/rack-lineprof&quot;&gt;rack-lineprof&lt;/a&gt;: Rubyのコードを行単位で計測したい場合に有効&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ツールを使った結果ボトルネックになりやすい箇所というとRDBまわり。それを解決するgem・機能を紹介。&lt;/p&gt;

&lt;h2 id=&quot;activerecord-optimization&quot;&gt;ActiveRecord Optimization&lt;/h2&gt;

&lt;h3 id=&quot;mag_right-問題発見型&quot;&gt;:mag_right: 問題発見型&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/flyerhzm/bullet&quot;&gt;bullet&lt;/a&gt;: Kill &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;N+1&lt;/code&gt; issue!&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/joker1007/activerecord-cause&quot;&gt;activerecord-cause&lt;/a&gt;: Logs where ActiveRecord actually loads record&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;key-dbスキーマ最適化型&quot;&gt;:key: DBスキーマ最適化型&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/pboling/flag_shih_tzu&quot;&gt;flag_shih_tzu&lt;/a&gt;: Bit fields for ActiveRecord&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://guides.rubyonrails.org/association_basics.html#counter-cache&quot;&gt;counter-cache&lt;/a&gt;: cacheing count query result
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/magnusvk/counter_culture&quot;&gt;counter_culture&lt;/a&gt;: Better counter-cache&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;zap-クエリ効率化型&quot;&gt;:zap: クエリ効率化型&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/k0kubun/activerecord-precount&quot;&gt;activerecord-precount&lt;/a&gt;: Yet another counter_cache alternative.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/zdennis/activerecord-import&quot;&gt;activerecord-import&lt;/a&gt;: bulk inserting data&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;クエリを意識してactiverecord使いこなそう&quot;&gt;クエリを意識してActiveRecord使いこなそう&lt;/h2&gt;

&lt;p&gt;ActiveRecordもといORマッパの良さってDBを意識しなくて済むところ。でも高速化を行う上でクエリは避けられない壁。DBを意識せずコードを書いている最近のワカモノはもっとクエリを意識しよう！ &lt;del&gt;老害っぽい発言だ&lt;/del&gt;&lt;/p&gt;

&lt;h2 id=&quot;パーシャルレンダリングを減らす&quot;&gt;パーシャルレンダリングを減らす&lt;/h2&gt;

&lt;h3 id=&quot;n1-partial-rendering&quot;&gt;N+1 partial rendering&lt;/h3&gt;

&lt;p&gt;データN個分&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;render&lt;/code&gt;処理が走ってしまうのを、個人的に &lt;strong&gt;N+1 rendering&lt;/strong&gt; と呼んでいる。データの数N+親のビュー1回で &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;N+1&lt;/code&gt;. 例えばこんなコード。&lt;/p&gt;

&lt;div class=&quot;language-erb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- views/items/index --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;%&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-erb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- views/items/_item --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link_to&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Show'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link_to&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Edit'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edit_item_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link_to&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Destroy'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;method: :delete&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;この場合のログはこうなる。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Processing by ItemsController#index as HTML
  Rendering items/index.html.erb within layouts/application
  Item Load (0.3ms)  SELECT &quot;items&quot;.* FROM &quot;items&quot;
  Rendered items/_item.html.erb (0.5ms)
  Rendered items/_item.html.erb (0.3ms)
  ...snip...
  Rendered items/_item.html.erb (0.5ms)
  Rendered items/_item.html.erb (0.3ms)
  Rendered items/index.html.erb within layouts/application (57.7ms)
Completed 200 OK in 80ms (Views: 77.1ms | ActiveRecord: 0.3ms)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Viewで80msくらいかかっている。&lt;/p&gt;

&lt;h3 id=&quot;collection-rendering&quot;&gt;Collection rendering&lt;/h3&gt;

&lt;p&gt;上記の場合、Collectionレンダーの機能を使えばもっと効率的にrenderできる。&lt;/p&gt;

&lt;div class=&quot;language-erb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- views/items/index --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@items&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-erb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- views/items/_item --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link_to&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Show'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link_to&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Edit'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edit_item_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link_to&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Destroy'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;method: :delete&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;この場合のログはこうなる。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Processing by ItemsController#index as HTML
  Rendering items/index.html.erb within layouts/application
  Item Load (0.4ms)  SELECT &quot;items&quot;.* FROM &quot;items&quot;
  Rendered collection of items/_item.html.erb [29 times] (6.9ms)
  Rendered items/index.html.erb within layouts/application (10.3ms)
Completed 200 OK in 29ms (Views: 26.4ms | ActiveRecord: 0.4ms)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ビューで25msくらい。だいたい上記の例と比べると1/3くらいになっている。&lt;/p&gt;

&lt;h2 id=&quot;rails-caching&quot;&gt;Rails caching&lt;/h2&gt;

&lt;p&gt;RailsのCacheの仕組みとして&lt;a href=&quot;http://guides.rubyonrails.org/caching_with_rails.html&quot;&gt;公式ガイド&lt;/a&gt;で3つ紹介されているのだが、ご存知だろうか。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Fragment Cache&lt;/strong&gt;: View fragment caching.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Action Cache&lt;/strong&gt;: Controller’s action caching (removed in Rails4).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Page Cache&lt;/strong&gt;: Static page caching (removed in Rails4).&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;1-fragment-cache&quot;&gt;1. Fragment Cache&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb/cache-fragment.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;グローバルナビ・サイドバーなどの多く呼ばれる共通コンテンツに有効&lt;/li&gt;
  &lt;li&gt;重い処理が走るビューの一部分であればあるほど高速化が期待できる&lt;/li&gt;
  &lt;li&gt;Advanced Usage: &lt;strong&gt;Russian Doll Caching&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-action-cache&quot;&gt;2. Action Cache&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb/action-cache.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Rails4で削除されてgem化: &lt;a href=&quot;https://github.com/rails/actionpack-action_caching&quot;&gt;actionpack-action_caching&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Viewの手前のControllerのAction自体の処理が重い場合に有効&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cache_path&lt;/code&gt; でキャッシュキーをカスタマイズ可能
    &lt;ul&gt;
      &lt;li&gt;モデルのupdated_at を組み込んだり、PC/スマフォでキャッシュビュー出し分け可能&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;3-page-cache&quot;&gt;3. Page Cache&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Rails4で削除されてgem化: &lt;a href=&quot;https://github.com/rails/actionpack-page_caching&quot;&gt;actionpack-page_caching&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;キャッシュ対象となるControllerのActionの生成するHTMLをまるっと静的ファイルに吐き出す&lt;/li&gt;
  &lt;li&gt;その静的ファイルをNGINXなどのWeb Server/Reverse Proxyでハンドリング&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;railsのキャッシュ戦略&quot;&gt;Railsのキャッシュ戦略&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Railsデフォルトの FragmentCache を使ってビューのレンダリングを高速化&lt;/li&gt;
  &lt;li&gt;それでもダメな場合や Controller 自体の処理が重い場合なら、ActionCache/PageCache を検討&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;warning-注意&quot;&gt;:warning: 注意&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;キャッシュしても根っこの問題は消えない&lt;/li&gt;
  &lt;li&gt;キャッシュのライフサイクル管理&lt;/li&gt;
  &lt;li&gt;用法用量を守って正しくお使いください&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;キャッシュしても根っこの問題はバイパスされるだけでそれ自体が解決されるわけではないので、本質的にはその根っこの問題を潰すほうがキャッシュより優先すべき。キャッシュによって&lt;strong&gt;臭いものには蓋&lt;/strong&gt;をしていないか。キャッシュによって大きなボトルネックが隠蔽されていないか。本質的な問題を潰した上でなお高速化したい場合にキャッシュを利用するのが筋の良いキャッシュ戦略だと思う。&lt;/p&gt;

&lt;p&gt;またキャッシュを行うことでそのライフサイクル管理も必要になってくることはアタマに入れておきたい。どういう場合にキャッシュがexpireすべきなのか(あるいはexpireすべきでないのか)、updateすべきなのか、削除すべきなのか。この辺もきちんと考えた上でキャッシュに取り組みたい。&lt;/p&gt;

&lt;h2 id=&quot;静的ファイル配信&quot;&gt;静的ファイル配信&lt;/h2&gt;

&lt;h3 id=&quot;nginx&quot;&gt;NGINX&lt;/h3&gt;

&lt;p&gt;プロダクション運用においては実際Railsが静的ファイルまでサーブすることはなくて、下記のようにNGINXに静的ファイルをサーブさせることが多い。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb/nginx.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;cdn&quot;&gt;CDN&lt;/h3&gt;

&lt;p&gt;さらに言うと、Railsの吐く assets:precompile の成果物は、CDNに乗せちゃって配信を最適化してやるともっとよい。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb/nginx-cdn.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;レイテンシに負けないプロトコル--http2&quot;&gt;レイテンシに負けないプロトコル = HTTP/2&lt;/h2&gt;

&lt;p&gt;バンド幅大きくなってもページロード時間は大きく変わらない。&lt;strong&gt;光の速度はこれ以上速くならない&lt;/strong&gt;。じゃあどうするか。解決策がHTTP/2.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb/http2-latency.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb/http2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;via. &lt;a href=&quot;http://www.slideshare.net/kazuho/dena-http2&quot;&gt;ウェブを速くするためにDeNAがやっていること - HTTP/2と、さらにその先&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下記のBEFORE/AFTERは画像の配信をHTTPからHTTP/2に変更した場合のリクエストをキャプチャしたもの。&lt;/p&gt;

&lt;h3 id=&quot;before-http2&quot;&gt;Before HTTP/2&lt;/h3&gt;

&lt;p&gt;HTTP/2前の状態。リクエストが順番に走っていることが見て取れる。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb/before-http2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;after-http2&quot;&gt;After HTTP/2&lt;/h3&gt;

&lt;p&gt;HTTP/2後の状態。リクエストが見事に多重化されている。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb/after-http2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.httpvshttps.com/&quot;&gt;こちらのページ&lt;/a&gt;ではHTTPSの画像ロードの速度の速さを体感できる。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb/HTTP_vs_HTTPS.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;ユーザーの体感速度--サーバーサイドレスポンス--クライアントサイドスピード&quot;&gt;ユーザーの体感速度 = サーバーサイドレスポンス + クライアントサイド・スピード&lt;/h2&gt;

&lt;p&gt;仮にサーバーレスポンスタイムを&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1ms&lt;/code&gt;にしたとしても、十分に速くなったとはいえない。なぜなら最終的にユーザーが感じるであろうウェブページの体感速度はサーバーサイドのレスポンス速度とクライアントサイドでのページロードのスピードを足し合わせたものだから。サーバーが0msでレスポンス返しても10秒間クライアントサイドの画面が真っ白だったら、ユーザーにとってはそれは10秒待たされてるのと一緒。&lt;/p&gt;

&lt;h3 id=&quot;rails-helloworld-app-の場合&quot;&gt;Rails HelloWorld App の場合&lt;/h3&gt;

&lt;p&gt;Rails5をほぼ素の状態でHello Worldという文字列を出力するアプリをHerokuにデプロイして&lt;a href=&quot;https://developers.google.com/speed/pagespeed/insights/&quot;&gt;Google PageSpeed Insights&lt;/a&gt;で計測してみた。&lt;/p&gt;

&lt;p&gt;結果は80点以下… :weary:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb/render-block-js.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Should Fix&lt;/code&gt;として報告されているのは、headタグ内にあるJS読み込みが Render Blocking してますよ、という内容のもの。Webの高速化はサーバーサイドだけで済むようなラクなもんじゃない。&lt;/p&gt;

&lt;h2 id=&quot;amp-zap&quot;&gt;AMP :zap:&lt;/h2&gt;

&lt;p&gt;AMPはWeb高速化のベストプラクティスを詰め込んだ仕様/制限のこと。詳しくは下記が参考になる。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@cramforce/why-amp-is-fast-7d2ff1f48597#.tcozirlt5&quot;&gt;Why AMP is fast — Medium&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mozaic.fm/episodes/22/amp.html&quot;&gt;ep22 AMP | mozaic.fm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;またAMPに対応するとページが速くなる他にもおいしいことがあって、GoogleがAMPページをキャッシュしてコンテンツ配信を肩代わりしてくれるのだ。いうなればAMPのためのGoogle無料CDN。これでオーガニック検索のトラフィックはだいぶラクになるかも？&lt;/p&gt;

&lt;p&gt;僕も自分の&lt;a href=&quot;http://blog.toshima.ru/&quot;&gt;英語Tipsブログ&lt;/a&gt;をAMP化してみたが非常に高速にページが表示できている。(完全にAMP化はできていないのだけど) まだAMP試していない人は、AMPすげーはやいのでぜひその速さを体感してみてほしい。そしてWebの高速化にまっすぐ向き合ってもらいたいと思う。&lt;/p&gt;

&lt;h2 id=&quot;その他の参考資料&quot;&gt;その他の参考資料&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/mirakui/high-performance-rails-long-edition&quot;&gt;High Performance Rails (long edition) // Speaker Deck&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/joker1007/railspahuomansuji-ben-falseki&quot;&gt;Railsパフォーマンス基本のキ // Speaker Deck&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://parashuto.com/rriver/development/page-speed-optimization&quot;&gt;デザイナーやディレクターも知っておきたい、ページ表示速度の高速化の基本 – Rriver&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;roppongirb-イベントについて&quot;&gt;Roppongi.rb イベントについて&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/hashtag/roppongirb?f=tweets&amp;amp;vertical=default&quot;&gt;#roppongirb hashtag on Twitter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;イベント発表資料: &lt;a href=&quot;http://roppongirb.connpass.com/event/33502/presentation/&quot;&gt;Roppongi.rb 資料一覧 - connpass&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://morizyun.github.io/blog/roppongi-rb-ruby-rails/&quot;&gt;Roppongi.rb #1 発表の密度が濃くて楽しかったYO! - 酒と泪とRubyとRailsと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.techempower.com/benchmarks/&quot;&gt;Round 12 results - TechEmpower Framework Benchmarks&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;ただしRubyバージョン差異による非互換性を解消するための変更は必要だけどね。 &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Toshimaru</name></author><category term="rails" /><category term="ruby" /><category term="roppongirb" /><category term="presentation" /><category term="web" /><summary type="html">自分がオーガナイザーを務めた Roppongi.rb #1で「Rails高速化戦略」という題で発表してきました。スライドは下記になります。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/roppongirb/title.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/roppongirb/title.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>