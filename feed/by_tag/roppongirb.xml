<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="https://blog.toshimaru.net/feed/by_tag/roppongirb.xml" rel="self" type="application/atom+xml" /><link href="https://blog.toshimaru.net/" rel="alternate" type="text/html" /><updated>2022-11-05T23:59:22+09:00</updated><id>https://blog.toshimaru.net/feed/by_tag/roppongirb.xml</id><title type="html">Hack Your Design!</title><subtitle>toshimaruの技術系なブログ</subtitle><author><name>Toshimaru</name></author><entry><title type="html">Railsフロントエンド技術の今とこれから</title><link href="https://blog.toshimaru.net/rails-frontend/" rel="alternate" type="text/html" title="Railsフロントエンド技術の今とこれから" /><published>2017-05-22T00:00:00+09:00</published><updated>2017-05-22T00:00:00+09:00</updated><id>https://blog.toshimaru.net/rails-frontend</id><content type="html" xml:base="https://blog.toshimaru.net/rails-frontend/"><![CDATA[<p>待望されたYarnサポートの入ったRails5.1が2017年4月にリリースされました。</p>

<p><a href="http://edgeguides.rubyonrails.org/5_1_release_notes.html">Ruby on Rails 5.1 Release Notes — Ruby on Rails Guides</a></p>

<p>他にもjQueryがデフォルトdependencyから外されたり、Optionalでwebpackサポートが入ったりしており、Railsのフロントエンドは大きな転換点を迎えたと言ってよいでしょう。本エントリではRailsのフロントエンド技術の今を振り返り、今後どうなっていくかをまとめてみたいと思います。</p>

<h2 id="disられてきたrailsフロントエンド-no_good">DisられてきたRailsフロントエンド :no_good:</h2>

<p>Railsのフロントエンド技術スタックは、フロントエンドを専業とするエンジニアにDisられるものでした。具体的には下記の技術要素です。</p>

<ul>
  <li>jQuery</li>
  <li>CoffeeScript</li>
  <li>Assets Pipeline (sprockets)</li>
  <li>gemのエコシステムに乗ったJSライブラリ(jquery-railsなど)</li>
</ul>

<p>複雑化するWebアプリケーションにおいてjQueryはもう時代遅れとされてますし、CoffeeScriptよりも時代はES6、AltJS使うにしても今はTypeScriptが有力候補でしょうか。gemのエコシステムに乗っかっているJSライブラリがAsset Pipelineを通して各環境にシップされるていることも嫌われます。なぜならJSにはnpmというエコシステムがあるからです。</p>

<h2 id="railsのフロントエンド刷新の歩み-walking">Railsのフロントエンド刷新の歩み :walking:</h2>

<p>しかし2016年春頃<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>からRailsの作者・<a href="https://github.com/dhh">DHH</a>の上げたIssueを皮切りに、フロントエンド技術刷新の歩みが始まります。その歴史・経緯を追ってみましょう。</p>

<h3 id="2016年5月">2016年5月</h3>
<ul>
  <li>Rails v5.1 で jQueryを依存性としてDropしようというIssueをDHHが上げる
    <ul>
      <li><a href="https://github.com/rails/rails/issues/25208">Drop jQuery as a dependency · Issue #25208 · rails/rails</a></li>
    </ul>
  </li>
</ul>

<h3 id="2016年10月">2016年10月</h3>
<ul>
  <li>Railsにnpm supportを追加するPRが上げられる
    <ul>
      <li><a href="https://github.com/rails/rails/pull/26836">Add Yarn support in new apps using –yarn option by Liceth · Pull Request #26836 · rails/rails</a></li>
    </ul>
  </li>
  <li>Sprockets 側でNPMをsupportするPRが上げられる
    <ul>
      <li><a href="https://github.com/rails/sprockets/pull/405">NPM support: Add support for resolving main from npm’s package.json by guilleiguaran · Pull Request #405 · rails/sprockets</a></li>
    </ul>
  </li>
</ul>

<h3 id="2016年11月">2016年11月</h3>
<ul>
  <li>npm support PRにてnpmではなくyarnを採用することが決められる
    <ul>
      <li><a href="https://github.com/rails/rails/pull/26836#issuecomment-257426850">https://github.com/rails/rails/pull/26836#issuecomment-257426850</a></li>
    </ul>
  </li>
  <li>jquery-rails をRailsから外すPRが上げられる
    <ul>
      <li><a href="https://github.com/rails/rails/pull/27113">Drop jQuery as a dependency by guilleiguaran · Pull Request #27113 · rails/rails</a></li>
    </ul>
  </li>
</ul>

<h3 id="2016年12月">2016年12月</h3>
<ul>
  <li>DHH自らwebpacker gemを作成開始、v0.1としてgemを公開
    <ul>
      <li><a href="https://github.com/rails/webpacker/commit/f4cc31d">FIRST!1! · rails/webpacker@f4cc31d</a></li>
    </ul>
  </li>
  <li>同gemをRails本体の機能に取り込む
    <ul>
      <li><a href="https://github.com/rails/rails/pull/27288">Basic –webpack delegation to new webpacker gem by dhh · Pull Request #27288 · rails/rails</a></li>
    </ul>
  </li>
</ul>

<h3 id="2017年2月">2017年2月</h3>
<ul>
  <li>Rails 5.1.beta1 リリース
    <ul>
      <li><a href="http://weblog.rubyonrails.org/2017/2/23/Rails-5-1-beta1/">Rails 5.1.0.beta1: Loving JavaScript, System Tests, Encrypted Secrets, and more | Riding Rails</a></li>
    </ul>
  </li>
  <li>webpacker 1.0 リリース
    <ul>
      <li><a href="https://rubygems.org/gems/webpacker/versions/1.0">https://rubygems.org/gems/webpacker/versions/1.0</a></li>
    </ul>
  </li>
  <li>jQueryに依存しないujsである rails-ujs が actionview の一機能としてRails本体に取り込まれる
    <ul>
      <li><a href="https://github.com/rails/rails/commit/41c33bd4b2ec3f4a482e6030b6fda15091d81e4a">https://github.com/rails/rails/commit/41c33bd4b2ec3f4a482e6030b6fda15091d81e4a</a></li>
    </ul>
  </li>
</ul>

<h3 id="2017年4月">2017年4月</h3>
<ul>
  <li>:tada: Rails 5.1 リリース
    <ul>
      <li><a href="http://weblog.rubyonrails.org/2017/4/27/Rails-5-1-final/">Rails 5.1: Loving JavaScript, System Tests, Encrypted Secrets, and more | Riding Rails</a></li>
    </ul>
  </li>
</ul>

<p>以上が現在に至るRailsフロントエンド進化の軌跡となります。2016年5月のDHHの問題提起からわずか(?)一年足らずでここまで進化したのは純粋にすごいなーと思いました。</p>

<h2 id="railsのフロントエンド実装の選択肢">Railsのフロントエンド実装の選択肢</h2>

<p>Rails5.1のフロントエンド刷新以降、<strong>今Railsにはどんなフロントエンド実装の選択肢があるのか</strong>、ざっと見てみます。</p>

<h3 id="1-asset-pipeline">1. <a href="https://railsguides.jp/asset_pipeline.html">Asset Pipeline</a></h3>
<ul>
  <li>Sprockets + CoffeeScript, SASS, jQuery</li>
  <li>今まで通りの古き良きassets管理</li>
  <li>知見も多く転がっており、枯れているのでハマりにくい</li>
</ul>

<h3 id="2-sprockets-4">2. <a href="https://github.com/rails/sprockets">Sprockets 4</a></h3>
<ul>
  <li>ES6 support <a href="https://github.com/rails/sprockets/blob/master/UPGRADING.md#es6-support">https://github.com/rails/sprockets/blob/master/UPGRADING.md#es6-support</a></li>
  <li>Sprockets4の開発自体は停滞気味 <a href="https://github.com/rails/sprockets/blob/master/CHANGELOG.md">https://github.com/rails/sprockets/blob/master/CHANGELOG.md</a></li>
</ul>

<h3 id="3-browserify-rails">3. <a href="https://github.com/browserify-rails/browserify-rails">browserify-rails</a></h3>
<ul>
  <li>sprockets のコールバックとして動作
    <ul>
      <li>つまりsprocketsに依存している</li>
    </ul>
  </li>
  <li>導入のための参考記事: <a href="http://techlife.cookpad.com/entry/2015/12/14/130041">モダンJavaScript開発環境 on Rails - クックパッド開発者ブログ</a></li>
</ul>

<h3 id="4-webpacker">4. <a href="https://github.com/rails/webpacker">webpacker</a></h3>
<ul>
  <li>絶賛開発中
    <ul>
      <li>活発に変更が入っているので導入に際しては現時点ではREADMEを参考にするのが良さそう</li>
      <li>まだ小慣れていない印象</li>
    </ul>
  </li>
  <li>最初はwebpack+railsのシームレスな統合のための薄い実装だと思ったが、現在ゴテゴテな実装…
    <ul>
      <li>react, angular, elm, vue などの初期インストールタスクが１つのレポジトリに全部のっている
        <ul>
          <li><a href="https://github.com/rails/webpacker/issues/20#issuecomment-266347480">plugable にしようぜ</a>という話はあるが現在そうはなっていない</li>
        </ul>
      </li>
      <li>初回インストール時の生成ファイル・パッケージ構成はたぶんフロントエンドガチ勢からみたら<a href="https://github.com/rails/webpacker/blob/5003a5de0222c1f5b0f3c2b887064039e06f7eae/lib/install/template.rb#L25-L30">クソの山っぽい</a></li>
      <li>レールにのったwebpack利用という意味のカジュアルな利用だったら良いかもしれない</li>
    </ul>
  </li>
</ul>

<h3 id="5-webpack-rails">5. <a href="https://github.com/mipearson/webpack-rails">webpack-rails</a></h3>
<ul>
  <li>Sprockets 非依存</li>
  <li>webpack利用のための薄い実装
    <ul>
      <li>初期のwebpackerに似てる印象</li>
      <li>個人的にはwebpackerよりは筋が良い印象を受けた</li>
    </ul>
  </li>
</ul>

<h3 id="6-react_on_rails">6. <a href="https://github.com/shakacode/react_on_rails">react_on_rails</a></h3>
<ul>
  <li>SSRサポート</li>
  <li><a href="https://github.com/sstephenson/execjs">execjs</a> 依存</li>
  <li>webpacker integration アリ
    <ul>
      <li>webpackerの薄い実装も登場 <a href="https://github.com/shakacode/webpacker_lite">shakacode/webpacker_lite</a></li>
    </ul>
  </li>
  <li>参考記事: <a href="http://r7kamura.hatenablog.com/entry/2016/10/10/173610">Ruby on Rails on React on SSR on SPA - ✘╹◡╹✘</a></li>
</ul>

<h3 id="7-react-rails">7. <a href="https://github.com/reactjs/react-rails">react-rails</a></h3>
<ul>
  <li>SSRサポート</li>
  <li><a href="https://github.com/sstephenson/execjs">execjs</a> 依存</li>
  <li>react_on_railsと異なる点は、integration の選択肢として Rails Assets Pipline もしくは webpacker が選べること
    <ul>
      <li>Asset Pipelineにのりたかったらこちらを選択</li>
    </ul>
  </li>
</ul>

<h3 id="8-独自に導入">8. 独自に導入</h3>
<ul>
  <li>独自にJSアプリケーションをRailsに統合させる構成を考えRails上にのっける</li>
  <li>例: <a href="http://techlife.cookpad.com/entry/2016/07/27/101015">webpackを使った Rails上でのReact開発 - クックパッド開発者ブログ</a></li>
</ul>

<h3 id="9-sprockets-commoner">9. <a href="https://github.com/Shopify/sprockets-commoner">sprockets-commoner</a></h3>
<ul>
  <li>Shopify製</li>
  <li>コンセプトとしてはRails Wayを壊さずにBabelを利用すること</li>
  <li>Sprocketsに依存</li>
  <li>導入に際してはitkrt2yさんのこちらの記事を参考に: <a href="http://qiita.com/itkrt2y/items/18ea41828e1c22fc31e3">顧客が本当に求めていたsprockets、sprockets-commonerの紹介 - Qiita</a></li>
</ul>

<h2 id="どうすべきか">どうすべきか</h2>

<p>上記に紹介したように様々な実装があるわけですが、我々はどれをどのように選択すべきでしょうか。僕なりにまとめてみました。</p>

<p><img src="/images/posts/roppongirb3/flowchart.png" alt="chart" /></p>

<p>まず最初にあるのが、Railsが嫌い/宗教的にあわない/フロントエンドをレールにのらせたくないのであれば無理してRailsを使うことはないと思っています。Railsをやめる、あるいはRailsはWebAPIに徹して独立したフロントエンドの世界観を築くのもアリだと思ってます。</p>

<p>また現状のAsset管理に満足していて、かつビジネス上の要件としてリッチなJS実装が求められないのであれば無理してモダンなフロントエンド機構を構築する必要はありません。無理してwebpackだのbrowserifyだの導入せずに、古き良きAsset Pipelineでいいのです（技術そのものが目的な場合はこの限りではない）。</p>

<h2 id="今後どうなるか">今後どうなるか</h2>

<p>Railsコミュニティの流れとして、<strong>今後どうなっていくか</strong> も考えてみたいと思います。</p>

<h3 id="1-gemからnpmへ">1. gemからnpmへ</h3>

<p><img src="/images/posts/roppongirb3/rails-npm.png" alt="bridge" /></p>

<p>RailsからNPM(yarn)のブリッジがRailsのコア機能の１つとして提供されたことはとても意義深いことだと思っています。その結果起こりうることとしては以下でしょうか。</p>

<ul>
  <li>jquery-rails, underscore-rails のような Asset Pipeline に載せるタイプのgemは廃れていく(npm管理に移っていく)</li>
  <li>Railsエンジニアがnpmライブラリを今後どんどん活用することによって、RailsエンジニアのJS界隈進出が増えるかも…?
    <ul>
      <li>railsコミュニティにとってもnpmコミュニティにとっても良い事</li>
    </ul>
  </li>
</ul>

<h3 id="2-reactへの大潮流">2. Reactへの大潮流</h3>

<p>今までJSライブラリのデファクトと言ったらjQueryでしたが、フロントエンド実装の複雑化にともないReactを採用する企業が増えその状況が変わってきました（少なくとも僕の観測範囲内では）。jQueryを使っての複雑なDOM操作のコードは破綻しがちですし限界があります。その結果のReact採用なのでしょう。</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">反省会というからReact導入が一般的に浸透し導入後一巡したってことだろうなぁ<br />Twitterトレンド入り！ 「<a href="https://twitter.com/hashtag/React%E5%8F%8D%E7%9C%81%E4%BC%9A?src=hash">#React反省会</a>」登壇資料一挙公開！ | Wantedly Engineer Blog <a href="https://t.co/PbG49aclqa">https://t.co/PbG49aclqa</a></p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/862817538022883328">May 11, 2017</a></blockquote>

<p>上記のようにReactが導入されやすい環境が整ってきている昨今、今後ますますRails+Reactの採用事例は増えていくと思われます<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup>。</p>

<h3 id="3-turbolinks-がますます下火に">3. Turbolinks がますます下火に</h3>

<p><del>黙って無効化すべし</del> 無効化されることの多いturbolinks機能ですがますます下火になっていくと思われます。</p>

<p><img src="/images/posts/roppongirb3/turbolinks.png" alt="" /></p>

<p>リッチなレンダリングUXを提供するためのRailsチーム(DHH)の苦肉の策がTurbolinksという理解でいますが、上述したようにフロントエンド開発の機構が整ってきている今、わざわざturbolinksを使う必要性もなくなってきました。</p>

<p>とはいえ、絶対にJS書きたくないでござる！というJS書きたくないマンなRailsエンジニアの選択肢の１つとしてはアリだと思います。</p>

<h2 id="フロントエンドというマイクロサービスがもたらす複雑性">フロントエンドというマイクロサービスがもたらす複雑性</h2>

<p>と、ここまでRailsとフロントエンドの話をしてきましたが、一方で安易なフロントエンド技術の導入は負債を生み出す危険性もあることも付しておきます。</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">このツラミわかるなぁ | ReactSPAをRailsに戻している話 // Speaker Deck <a href="https://t.co/G3Ln3NbmCQ">https://t.co/G3Ln3NbmCQ</a></p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/857758278830350337">April 28, 2017</a></blockquote>

<p>このケースのように複雑なフロントエンド実装が逆に負債となり足かせとなる場合もあります。<a href="http://anond.hatelabo.jp/20170501085956">全くメンテされないクソJSコードの塊を作る</a>ような状況は避けなければなりません。</p>

<p>高度に専業化したフロントエンド技術はもはやいちサーバーサイドエンジニアが片手間に開発・メンテナンスできるレベルのものでもなくなってきています。うまく作ったとしてもその後のアップデートに追従していくのは至難の業でしょう。</p>

<blockquote class="twitter-tweet" data-conversation="none" data-cards="hidden" data-lang="en"><p lang="ja" dir="ltr">紹介されているこっちのスライドもよくわかるなぁ。「フロントエンドは一個のマイクロサービス(ただのViewじゃない)」「マイクロサービス作っているのだから辛いの当然」 <a href="https://t.co/YqkrIYSXxf">https://t.co/YqkrIYSXxf</a></p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/857790990496616448">April 28, 2017</a></blockquote>

<p>このようにフロントエンドを１つのマイクロサービスと捉える見方もあります。マイクロサービスであるからこそ、モノリシックサービスよりもアーキテクチャ・実装が複雑になりがちです。高度なフロントエンド技術導入の際はチームとしてその複雑性を受け入れる覚悟が必要でしょう。</p>

<h2 id="イベント告知">イベント告知</h2>

<p>そんなわけで随分と長い前置きでしたが、次回のRoppongi.rb#3のテーマは”Rails x Frontend”で開催します。</p>

<p><a href="https://roppongirb.connpass.com/event/56456/">Roppongi.rb #3 “Rails x Frontend-Tech”</a></p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">Roppongi.rb #3 &quot;Rails x Frontend-Tech&quot; 〜これからのRails Frontendの話をしよう〜 を公開しました！ <a href="https://t.co/hOjXX7J8dC">https://t.co/hOjXX7J8dC</a> <a href="https://twitter.com/hashtag/roppongirb?src=hash">#roppongirb</a></p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/861725918552707072">May 8, 2017</a></blockquote>

<p>既に参加枠（抽選）は埋まっており参加登録いただいた方を全員ご案内できないのが恐縮ですが、もしよければ登録して遊びにきてください。</p>

<h2 id="参考リンク">参考リンク</h2>

<ul>
  <li><a href="http://qiita.com/itkrt2y/items/7e999836f460fb9c005d">Rails5.1に向けてフロントエンド周りで起こっている革命まとめ - Qiita</a></li>
  <li><a href="http://qiita.com/yuroyoro/items/a29e39989f4469ef5e41">Rails5.1から導入されるwebpacker.gemは本当にRailsのフロントエンド開発に福音をもたらすのか? - Qiita</a></li>
</ul>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>ちょうど<a href="http://railsconf.com/2016">RailsConf 2016</a>の後くらいのタイミングでしょうか。 <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>一方で、複雑でないアプリケーションに対しReactを導入するのはオーバーキルなのでごく一部分の小さなイベント制御JSコードであればjQueryで十分な場面も未だ多くあると思います。 <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Toshimaru</name></author><category term="rails" /><category term="frontend" /><category term="roppongirb" /><summary type="html"><![CDATA[待望されたYarnサポートの入ったRails5.1が2017年4月にリリースされました。他にもjQueryがデフォルトdependencyから外されたり、Optionalでwebpackサポートが入ったりしており、Railsのフロントエンドは大きな転換点を迎えたと言ってよいでしょう。本エントリではRailsのフロントエンド技術の今を振り返り、今後どうなっていくかをまとめてみたいと思います。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/roppongirb3/roppongirb-3.jpg" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/roppongirb3/roppongirb-3.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Roppongi.rb#2で「Infrastructure as (Ruby) Code の現状確認」を発表しました</title><link href="https://blog.toshimaru.net/infrastructure-as-ruby-code-2016/" rel="alternate" type="text/html" title="Roppongi.rb#2で「Infrastructure as (Ruby) Code の現状確認」を発表しました" /><published>2016-11-06T00:00:00+09:00</published><updated>2016-11-06T00:00:00+09:00</updated><id>https://blog.toshimaru.net/infrastructure-as-ruby-code-2016</id><content type="html" xml:base="https://blog.toshimaru.net/infrastructure-as-ruby-code-2016/"><![CDATA[<p>第二回Roppongi.rbを<a href="http://roppongirb.connpass.com/event/42633/">「Infrastructure x Ruby」というテーマで開催</a>した。</p>

<p>僕はその中で「Infrastructure as (Ruby) Code の現状確認」という内容でオープニングLTとして発表したので、その内容をブログにもまとめておく（前回発表分の発表内容まとめはこちら: <a href="http://blog.toshimaru.net/roppongirb-speeding-up-rails/">Roppongi.rbで「Rails高速化戦略」を発表しました</a>）。</p>

<script async="" class="speakerdeck-embed" data-id="786983b0a1f94d1ca1250aa48ce94ed0" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>

<h2 id="目的">目的</h2>

<p>発表の目的としては世に言われる <strong>Infrastructure as Code</strong> の認識・理解を参加者であわせること。</p>

<h2 id="infrastructure-as-codeの意義">Infrastructure as Codeの意義</h2>

<p>大きく３つあると思っている。</p>

<ol>
  <li>インフラ構築手順を秘伝のタレ化させない</li>
  <li>手順をコードに落としてインフラへの変更をトラッキングする</li>
  <li>手順を不変（immutable）にする</li>
</ol>

<h3 id="秘伝のタレ">秘伝のタレ</h3>

<p>秘伝のタレ。一体どういう意味だろうか。まるで秘伝のタレのように継ぎ足し継ぎ足し変更が入り代々受け継がれてきたサーバーを形容する表現が <strong>秘伝のタレ</strong> だ。</p>

<p>秘伝のタレが代々受け継がれている環境なんかでは、メンテナンスされているかどうかまるでわからない「サーバー構築手順書.xls」なんてモノがあったりする。そしてそれは大体において手順書通りにはうまくいかないのが常だ。</p>

<p>インフラ担当者のアタマにしか入っていない隠し味なんかがあったりするとオワタ状態＼(^o^)／。その担当者が退職したりすると誰も現プロダクション環境は再現できません、という状況が出来上がる。</p>

<h3 id="コード化するということ">コード化するということ</h3>

<p>秘伝のタレ化を防ぐために、コード化という行為を行う。ではコード化されることで良い事とはなんだろうか。</p>

<ul>
  <li>コード化される</li>
  <li>➜ Gitでトラック可能になる</li>
  <li>➜ Githubでプルリク可能になる</li>
  <li>➜ Githubでレビュー可能になる</li>
  <li>➜ :blush: = HAPPY!</li>
</ul>

<p>このようにコード化されることでソフトウェア開発のグッドプラクティスであるGithub Workflowに乗ることができる。:surfer:</p>

<h2 id="immutable-infrastructure">Immutable Infrastructure</h2>

<p>次に手順を不変（Immutable）にするということについて。Immutableという言葉はインフラ的文脈ではImmutable Infrastructureという言葉が有名かと思う。</p>

<p>Immutable Infrastructureについては、<a href="http://rebuild.fm/25/">rebuild.fmでnaoyaさんやmizzyさんがmiyagawaさんと話して</a>いたり、<a href="https://speakerdeck.com/naoya/immutable-infrastructure-number-jawsdays">naoyaさんが発表していたり</a>したあたりを契機に日本でも浸透した言葉だと思っている。</p>

<p>出自はというとChad Fowler氏が書いた下記の記事。</p>

<p><a href="http://chadfowler.com/2013/06/23/immutable-deployments.html">Trash Your Servers and Burn Your Code: Immutable Infrastructure and Disposable Components</a></p>

<h3 id="immutable-infrastructure-のキーワード">Immutable Infrastructure のキーワード</h3>

<p>Immutable Infrastructureを僕なりに解釈すると、その言葉の本質は下記のキーワードで表せると思う。</p>

<ul>
  <li>Immutable （不変）</li>
  <li>Disposable（使い捨て）</li>
  <li>Reproducible （再現可能）</li>
  <li>Idempotence（冪等性）</li>
</ul>

<p>Immutable Infrastructureが登場した背景にはAWS, GCPを始めとするIaaSの登場が大きいと思っている。どういうことかというとIaaSでボタン１つでサーバーを上げて必要なくなったら捨てるダイナミックなサーバー、つまり <strong>Disposable</strong> なサーバーが誕生したということが背景の１つにある。</p>

<p>そして、オートスケーリングの恩恵を享受するためにはサーバー・プロビジョニング自動化作業が必要となる。スケール前提のサーバー群はいつ何時でも既存のサーバーと同じ状態のサーバーが立ち上がる必要がある<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>。つまり、構築手順を <strong>Immutable</strong> にし <strong>Reproducible</strong> なサーバー環境にする(= <strong>Idempotence</strong> を担保する)ことが必要。</p>

<h2 id="構成管理ツールの歴史">構成管理ツールの歴史</h2>

<p>メジャーなプロビジョニングツール(構成管理ツール)の歴史を追ってみる。</p>

<ul>
  <li>2005年 <a href="https://docs.puppet.com/puppet/">Puppet</a></li>
  <li>2009年 <a href="https://www.chef.io/chef/">Chef</a></li>
  <li>2012年 <a href="https://www.ansible.com">Ansible</a></li>
  <li>2014年 <a href="https://www.terraform.io">Terraform</a>, <a href="https://github.com/itamae-kitchen/itamae">Itamae</a></li>
</ul>

<h2 id="実装言語別分類">実装言語別分類</h2>

<p>実装言語別に分類してみる。</p>

<table>
  <thead>
    <tr>
      <th>Ruby実装</th>
      <th>Go実装</th>
      <th>Python実装</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Puppet, Chef, Itamae, Serverkit</td>
      <td>Terraform</td>
      <td>Ansible</td>
    </tr>
  </tbody>
</table>

<h2 id="表現別分類">表現別分類</h2>

<p>インフラストラクチャをどうコードで表現しているかの表現体形で分類してみる。</p>

<table>
  <thead>
    <tr>
      <th>RubyによるDSL</th>
      <th>HCLによるDSL</th>
      <th>YAML</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Puppet, Chef, Itamae</td>
      <td>Terraform</td>
      <td>Ansible, Serverkit</td>
    </tr>
  </tbody>
</table>

<h3 id="why-yaml">Why YAML?</h3>

<p>なぜYAMLで表現するのか？ まずはXML/JSONより記述がラクという点がある。そしてYAMLは人間にとってよみやすい、かきやすい、わかりやすいという特徴がある。そしてRailsの設定ファイルなどで一般的に使われている記述フォーマットなので、学習コストが低いという点が利点である。</p>

<h3 id="why-hcl">Why HCL?</h3>

<p><a href="https://github.com/hashicorp/hcl">HCL</a> とは HashiCorp configuration language の略。HCLの<a href="https://github.com/hashicorp/hcl#why">READMEではHLCについてこう説明</a>されている。</p>

<ul>
  <li>:x: JSONダメ。なぜならコメントかけない。しんどい。</li>
  <li>:x: YAMLもダメ。なぜなら初心者には記法むずかしい！</li>
  <li>:x: Rubyとかもダメ。なぜなら自由度高すぎぃ！複雑すぎぃ！</li>
  <li>:o: よろしい、ならば独自言語だ。ということで生まれたのが <strong>HCL</strong></li>
</ul>

<h3 id="why-ruby">Why Ruby?</h3>

<p>なぜRubyを採用するか？ まずはDSLが書きやすいという点。そしてRSpecなどのRuby DSLに代表されるようにRuby DSLは宣言的な記述が可能である。宣言的ということはコードを読んだだけでそのコードの意図が伝わりやすいということだ。そしてDSLといってもRubyはRuby。RubyなのでRubyでできることは何でもできちゃうので、自由度が高い（これは悪い意味に作用することもあってやりすぎるとChefのレシピそのものが秘伝のタレ化する可能性があるので注意）。</p>

<h2 id="infrastructure-as-code-の概念整理">Infrastructure as Code の概念整理</h2>

<p>Infrastructure as Code の概念を整理してみたい。<a href="http://mizzy.org/blog/2013/10/29/1/">mizzyさんのブログでは</a>、プロビジョニングのレイヤーを下記のように分けるような考え方が紹介されていた。</p>

<p><img src="/images/posts/roppongirb2/provisioning-tools.png" alt="provisioning layers" /></p>

<h2 id="シンプルなプロビジョニングレイヤーの考え方">シンプルなプロビジョニング・レイヤーの考え方</h2>

<p>オーケストレーションなどというと抽象的なのとInfrastructure as Codeのスコープが広くなってしまうと思うので、シンプルにこんな風に考えてみるのはどうだろうか。</p>

<p><img src="/images/posts/roppongirb2/infra-as-code-layers.png" alt="infra-as-code-layers" /></p>

<p>上記の考え方で先の構成管理ツールを分類するとこんな感じだ。</p>

<p><img src="/images/posts/roppongirb2/provisioning-categorize.png" alt="provisioning categorize" /></p>

<p>しかしこれで本当に全てはコード化されるか、というとそうではない。サーバーのプロビジョニングでコード化されるのはAWSサービス群のほんの一部、EC2のみだ。</p>

<p><img src="/images/posts/roppongirb2/aws-services.png" alt="AWS services" /></p>

<h2 id="infrastructure-as-code-のカバー範囲">Infrastructure as Code のカバー範囲</h2>

<p>IaaSは仮想サーバ以外にもさまざまなサービスを提供している。AWSの例でいうと、ELB, RDS, VPC, S3, CloudFront, IAM, SecurityGroup などなど。</p>

<p>それらに対するオペレーションをAWS Management ConsoleなどのGUIでやるべきだろうか？</p>

<h3 id="gui-configuration-is-hard">GUI Configuration is hard…</h3>

<p>さきほどのImmutable Infrastructureの文脈でいうと、GUIによる操作はImmutableではない。なぜならGUIは変わるかもしれないし、GUI操作は明確な言語化できないほどにファジーだからだ。では重要な設定をそのGUI任せにしていいのだろうか？</p>

<p>Route53やSecurityGroupなどオペレーションミスで一歩間違うと大障害になりかねない。これらのGUIの設定をimmutableにはできないだろうか。じゃあimmutableなインターフェースであるAPIを叩けばいいじゃない。というところで、<strong>Configuration as Code</strong> という言葉が出て来る。</p>

<p>この考え方を使えばInfrastructure as Codeの概念をさらに良い感じに敷衍できるのではないかと僕は考えた。</p>

<p><img src="/images/posts/roppongirb2/configuratino-as-code.png" alt="Configuration as Code*" /></p>

<p>こう考えるとIaaSの各種サービス群もコード化の対象として捉えることができる。</p>

<h2 id="全てがコードになる例">全てがコードになる例</h2>

<h3 id="route53-configuration">Route53 Configuration</h3>

<p>Route53のコード化例。こんな感じにRuby DSLになる</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">hosted_zone</span> <span class="s2">"example.com."</span> <span class="k">do</span>
  <span class="n">rrset</span> <span class="s2">"example.com."</span><span class="p">,</span> <span class="s2">"A"</span> <span class="k">do</span>
    <span class="n">ttl</span> <span class="mi">300</span>
    <span class="n">resource_records</span><span class="p">(</span>
      <span class="s2">"127.0.0.1"</span><span class="p">,</span>
      <span class="s2">"127.0.0.2"</span>
    <span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>powered by <a href="https://github.com/winebarrel/roadworker">roadworker</a></p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">resource</span> <span class="s">"aws_route53_record"</span> <span class="s">"www"</span> <span class="p">{</span>
 <span class="n">zone_id</span> <span class="o">=</span> <span class="s">"${aws_route53_zone.primary.zone_id}"</span>
 <span class="n">name</span> <span class="o">=</span> <span class="s">"www.example.com"</span>
 <span class="k">type</span> <span class="o">=</span> <span class="s">"A"</span>
 <span class="n">ttl</span> <span class="o">=</span> <span class="s">"300"</span>
 <span class="n">records</span> <span class="o">=</span> <span class="p">[</span><span class="s">"${aws_eip.lb.public_ip}"</span><span class="p">]</span>
<span class="p">}</span>
</code></pre></div></div>

<p>powered by <a href="https://www.terraform.io/docs/providers/aws/r/route.html">AWS: aws_route - Terraform by HashiCorp</a></p>

<h3 id="cloudwatch-alarm">CloudWatch Alarm</h3>

<p>CloudWatchのAlarmだってDSLになる。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">alarm</span> <span class="s2">"alarm1"</span> <span class="k">do</span>
  <span class="n">namespace</span> <span class="s2">"AWS/EC2"</span>
  <span class="n">metric_name</span> <span class="s2">"CPUUtilization"</span>
  <span class="n">dimensions</span> <span class="s2">"InstanceId"</span><span class="o">=&gt;</span><span class="s2">"i-XXXXXXXX"</span>
  <span class="n">period</span> <span class="mi">300</span>
  <span class="n">statistic</span> <span class="ss">:average</span>
  <span class="n">threshold</span> <span class="s2">"&gt;="</span><span class="p">,</span> <span class="mf">50.0</span>
  <span class="n">evaluation_periods</span> <span class="mi">1</span>
  <span class="n">actions_enabled</span> <span class="kp">true</span>
  <span class="n">alarm_actions</span> <span class="p">[]</span>
  <span class="n">ok_actions</span> <span class="p">[]</span>
  <span class="n">insufficient_data_actions</span> <span class="p">[</span><span class="s2">"arn:aws:sns:us-east-1:123456789012:my_topic"</span><span class="p">]</span>
<span class="k">end</span>
</code></pre></div></div>

<p>powered by <a href="https://github.com/winebarrel/radiosonde">radiosonde</a></p>

<h3 id="datadog-alert-configuration">Datadog Alert Configuration</h3>

<p>さらにコード化される対象はIaaSだけではない。Datadogという監視のアラート設定もコード化される。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">monitor</span> <span class="s2">"Check load avg"</span><span class="p">,</span> <span class="ss">:type</span><span class="o">=&gt;</span><span class="s2">"metric alert"</span> <span class="k">do</span>
  <span class="n">query</span> <span class="s2">"avg(last_5m):avg:ddstat.load_avg.1m{host:i-XXXXXXXX} &gt; 1"</span>
  <span class="n">message</span> <span class="s2">"@winebarrel@example.net"</span>
  <span class="n">options</span> <span class="k">do</span>
    <span class="n">locked</span> <span class="kp">false</span>
    <span class="n">new_host_delay</span> <span class="mi">300</span>
    <span class="n">notify_no_data</span> <span class="kp">true</span>
    <span class="n">no_data_timeframe</span> <span class="mi">2</span>
    <span class="n">notify_audit</span> <span class="kp">true</span>
    <span class="n">silenced</span><span class="p">({})</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>powered by <a href="https://github.com/winebarrel/barkdog">barkdog</a></p>

<h3 id="github-member-management">Github Member Management</h3>

<p>Githubのメンバー管理だってTerraformでできちゃうんだぜ。</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">resource</span> <span class="s">"github_membership"</span> <span class="s">"membership_for_some_user"</span> <span class="p">{</span>
    <span class="n">username</span> <span class="o">=</span> <span class="s">"SomeUser"</span>
    <span class="n">role</span> <span class="o">=</span> <span class="s">"member"</span>
<span class="p">}</span>

<span class="n">resource</span> <span class="s">"github_repository"</span> <span class="s">"example"</span> <span class="p">{</span>
  <span class="n">name</span>        <span class="o">=</span> <span class="s">"example"</span>
  <span class="n">description</span> <span class="o">=</span> <span class="s">"My awesome codebase"</span>

  <span class="n">private</span> <span class="o">=</span> <span class="no">true</span>
<span class="p">}</span>

<span class="n">resource</span> <span class="s">"github_repository_collaborator"</span> <span class="s">"a_repo_collaborator"</span> <span class="p">{</span>
    <span class="n">repository</span> <span class="o">=</span> <span class="s">"our-cool-repo"</span>
    <span class="n">username</span> <span class="o">=</span> <span class="s">"SomeUser"</span>
    <span class="n">permission</span> <span class="o">=</span> <span class="s">"admin"</span>
<span class="p">}</span>
</code></pre></div></div>

<p>powered by <a href="https://www.terraform.io/docs/providers/github/">Provider: GitHub - Terraform by HashiCorp</a></p>

<h2 id="全てがプルリクになる">全てがプルリクになる</h2>

<p>冒頭に述べたように、コード化されるということはGithubに乗せてプルリクエストを出せるということだ。</p>

<p><img src="/images/posts/roppongirb2/pull-request.png" alt="Pull Request" /></p>

<p>こんなふうにプルリクになっているとレビューも簡単。</p>

<h2 id="コード化するメリット">コード化するメリット</h2>

<ul>
  <li>レビューによるチェック体制により、より安全なConfigurationオペレーションを実現できる</li>
  <li>CIサービスと連携させてテスト・CDの自動化も可能となる</li>
</ul>

<h2 id="まとめ">まとめ</h2>

<ul>
  <li>コード化することによりGithubワークフロー（プルリク→レビュー→マージ）に乗ることができてハッピー :smile:</li>
  <li>Infrastructure as Code = Server Configuration as Code + Service Configuration as Code ➜ サーバーだけではなく、サービスそれ自体もコード化されていく。</li>
</ul>

<h2 id="感想">感想</h2>

<ul>
  <li>今回の発表はKeynoteでスライド作ったけど、Keynoteはレイアウトとかテーマの設定が自由にできてDecksetよりはデザイン凝ろうと思ったときに便利。</li>
</ul>

<h2 id="参考">参考</h2>

<ul>
  <li><a href="https://speakerdeck.com/ryotarai/itamae-infra-as-code-xian-zhuang-que-ren-hui">Itamae - Infra as Code 現状確認会</a></li>
  <li><a href="http://rebuild.fm/25/">Rebuild: 25: Immutable Infrastructure</a></li>
  <li><a href="https://speakerdeck.com/naoya/infrastructure-as-code">Infrastructure as Code // Speaker Deck</a></li>
  <li><a href="http://mizzy.org/blog/2016/04/22/1/">Infrastructure as Code 再考</a></li>
  <li><a href="http://chadfowler.com/2013/06/23/immutable-deployments.html">Trash Your Servers and Burn Your Code: Immutable Infrastructure and Disposable Components</a></li>
  <li><a href="http://martinfowler.com/bliki/InfrastructureAsCode.html">InfrastructureAsCode</a></li>
</ul>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>特定のサーバーにデータに依存してしまわないように、データ的にはステートレスなサーバー構成が前提となる <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Toshimaru</name></author><category term="ruby" /><category term="roppongirb" /><category term="aws" /><category term="presentation" /><summary type="html"><![CDATA[第二回Roppongi.rbを「Infrastructure x Ruby」というテーマで開催した。 僕はその中で「Infrastructure as (Ruby) Code の現状確認」という内容で発表したので、その内容をブログにもまとめておく。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/roppongirb2/og.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/roppongirb2/og.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Roppongi.rbで「Rails高速化戦略」を発表しました</title><link href="https://blog.toshimaru.net/roppongirb-speeding-up-rails/" rel="alternate" type="text/html" title="Roppongi.rbで「Rails高速化戦略」を発表しました" /><published>2016-07-19T00:00:00+09:00</published><updated>2016-07-19T00:00:00+09:00</updated><id>https://blog.toshimaru.net/roppongirb-speeding-up-rails</id><content type="html" xml:base="https://blog.toshimaru.net/roppongirb-speeding-up-rails/"><![CDATA[<p>自分がオーガナイザーを務めた <a href="http://roppongirb.connpass.com/event/33502/">Roppongi.rb #1</a>で「Rails高速化戦略」という題で発表してきました。スライドは下記になります。</p>

<script async="" class="speakerdeck-embed" data-id="37881a2ec2214ef39d85820f3327bbc2" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>

<p>発表内容をこちらのブログでも文章形式でざっとまとめてみたいと思います。</p>

<h2 id="rails-ruby-遅いよね">Rails (Ruby) 遅いよね</h2>

<p>RailsないしRubyはプログラミング言語の中では速くはない言語であることは言うまでもないと思う<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>。 実際に「Rails/Ruby遅いよねって今まで思ったことある方どれくらいいますか？」と会場でも聞いてみたところ、予想では半数以上手を挙げてくれると思ったのだけど、実際は30人中3~4人くらい。あまりにも意外な結果だったので自分なりに理由を分析してみると２つあるかなと思う。</p>

<h3 id="パフォーマンスを求められないから">パフォーマンスを求められないから</h3>

<p>例えば社内の数人が使うような管理画面の場合。この場合、パフォーマンスよりも機能性（ちゃんと検索・閲覧できるかとかCRUD操作ができるかとか）などが優先されると思う。数人だけが使うのでアクセススパイクもないし、パフォーマンスが問題にもなりにくい。</p>

<h3 id="railsをフレームワークとして使っていないから">Railsをフレームワークとして使っていないから</h3>

<p>すごくパフォーマンスを求められるWebアプリの場合、それが事前にわかっているならまずは言語選択レベルでRailsを選択しないかもしれない。今ならGoとかElixirとかScalaとか代替言語もあるのでそちらを選択した場合はRailsは使わないことになるのでRailsの遅さで困ることもない。</p>

<h2 id="それでもやっぱりrailsだ">それでもやっぱりRailsだ…!</h2>

<p>それでもやっぱりRuby好きのRubyっ子であれば、Rubyは使いたい… ということで、Railsの高速化をする上での戦略を紹介。</p>

<h2 id="ruby-version-up">Ruby Version Up</h2>

<p>まずはRubyバージョンアップ。Rubyバージョンの歴史はこんな感じになっている。</p>

<ul>
  <li>2013.2: Ruby 2.0</li>
  <li>2013.12: Ruby 2.1</li>
  <li>2014.12: Ruby 2.2</li>
  <li>2015.12: Ruby 2.3</li>
  <li>20xx: Ruby 3.0</li>
</ul>

<p>去年matzの口からRuby3のコンセプトが発表された。その驚くべき内容が <strong>Ruby 3 x 3</strong> 。</p>

<p><img src="/images/posts/roppongirb/ruby3x3.png" alt="ruby 3 x 3" /></p>

<p>via. <a href="https://www.youtube.com/watch?v=E9bO1uqs4Oc">Ruby3 challenges - RubyKaigi 2015 Keynote - YouTube</a></p>

<h2 id="とあるrailsアプリの場合">とあるRailsアプリの場合</h2>

<p>会社で取り組んでいるプロダクトのRubyのバージョンは基本的に最新バージョンを使うようにしているものの、中にはレガシーな環境もある。下記はあるプロダクトでRuby2.0 から Ruby2.1に上げた例。結果としては、Ruby 2.0 =&gt; 2.1 Ruby Version Up だけで レスポンス速度が約2倍向上した。</p>

<p><img src="/images/posts/roppongirb/ruby2_0-to-2_1.png" alt="" /></p>

<p>このようにRubyバージョンアップによりアプリケーションコード変更ゼロでも<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup>、速度改善が期待できる。古いRubyお使いの方は今すぐRubyのバージョンアップ！</p>

<h2 id="what-about-rails">What about Rails?</h2>

<p>じゃあRailsはどうだろうか。下記は<a href="https://github.com/amatsuda">amatsuda</a>さんのmatzのRuby 3x3 を受けての発表。</p>

<p><img src="/images/posts/roppongirb/rails3x.png" alt="" /></p>

<p><a href="https://speakerdeck.com/a_matsuda/3x-rails">3x Rails // Speaker Deck</a></p>

<p><code class="language-plaintext highlighter-rouge">?</code>が付いていることで分かる通り3倍速くなるという発表というより、まだまだRailsは速くするために工夫の余地があるよ、というような発表。</p>

<p>下記は同じ<a href="https://github.com/amatsuda">amatsuda</a>さんが発表された<a href="http://togetter.com/li/955629">Rails Upgrade Casual Talks</a>での資料です。</p>

<p><img src="/images/posts/roppongirb/rails-verup1.png" alt="" /></p>

<p>via. <a href="https://speakerdeck.com/a_matsuda/rails-upgrade-casual-talks">Rails Upgrade Casual Talks // Speaker Deck</a></p>

<p>たしかに色んな機能が追加されている中、Railsが劇的に速くなることは考えにくい。解決策は…?</p>

<p><img src="/images/posts/roppongirb/rails-verup2.png" alt="" /></p>

<p><strong>歯を食いしばってRails/Rubyをバージョンアップ</strong> :innocent:</p>

<p>Rails 遅くなってもRuby は速くなっているので、どちらも最新版をしっかり追っかけていけば、遅くなることなくRailsの機能拡張も追っかけていけるのでOK.</p>

<h2 id="ボトルネックを潰す">ボトルネックを潰す</h2>

<p>Railsアプリをどうボトルネックを発見し潰していくか？</p>

<h3 id="推測するな計測せよ">推測するな、計測せよ　</h3>

<p>ボトルネックは計測して数値で示すもの。ボトルネックを発見するためのサービス・ツールをいくつか紹介。</p>

<ul>
  <li><a href="https://newrelic.com/">New Relic</a>: 無料で使えて導入もラクでよい</li>
  <li><a href="https://github.com/MiniProfiler/rack-mini-profiler">rack-mini-profiler</a>: 開発環境導入する。クエリやpartialレンダー時間を表示。</li>
  <li><a href="https://github.com/kainosnoema/rack-lineprof">rack-lineprof</a>: Rubyのコードを行単位で計測したい場合に有効</li>
</ul>

<p>ツールを使った結果ボトルネックになりやすい箇所というとRDBまわり。それを解決するgem・機能を紹介。</p>

<h2 id="activerecord-optimization">ActiveRecord Optimization</h2>

<h3 id="mag_right-問題発見型">:mag_right: 問題発見型</h3>

<ul>
  <li><a href="https://github.com/flyerhzm/bullet">bullet</a>: Kill <code class="language-plaintext highlighter-rouge">N+1</code> issue!</li>
  <li><a href="https://github.com/joker1007/activerecord-cause">activerecord-cause</a>: Logs where ActiveRecord actually loads record</li>
</ul>

<h3 id="key-dbスキーマ最適化型">:key: DBスキーマ最適化型</h3>

<ul>
  <li><a href="https://github.com/pboling/flag_shih_tzu">flag_shih_tzu</a>: Bit fields for ActiveRecord</li>
  <li><a href="http://guides.rubyonrails.org/association_basics.html#counter-cache">counter-cache</a>: cacheing count query result
    <ul>
      <li><a href="https://github.com/magnusvk/counter_culture">counter_culture</a>: Better counter-cache</li>
    </ul>
  </li>
</ul>

<h3 id="zap-クエリ効率化型">:zap: クエリ効率化型</h3>

<ul>
  <li><a href="https://github.com/k0kubun/activerecord-precount">activerecord-precount</a>: Yet another counter_cache alternative.</li>
  <li><a href="https://github.com/zdennis/activerecord-import">activerecord-import</a>: bulk inserting data</li>
</ul>

<h2 id="クエリを意識してactiverecord使いこなそう">クエリを意識してActiveRecord使いこなそう</h2>

<p>ActiveRecordもといORマッパの良さってDBを意識しなくて済むところ。でも高速化を行う上でクエリは避けられない壁。DBを意識せずコードを書いている最近のワカモノはもっとクエリを意識しよう！ <del>老害っぽい発言だ</del></p>

<h2 id="パーシャルレンダリングを減らす">パーシャルレンダリングを減らす</h2>

<h3 id="n1-partial-rendering">N+1 partial rendering</h3>

<p>データN個分<code class="language-plaintext highlighter-rouge">render</code>処理が走ってしまうのを、個人的に <strong>N+1 rendering</strong> と呼んでいる。データの数N+親のビュー1回で <code class="language-plaintext highlighter-rouge">N+1</code>. 例えばこんなコード。</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- views/items/index --&gt;</span>
<span class="cp">&lt;%</span> <span class="vi">@items</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span> <span class="cp">%&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">render</span> <span class="n">item</span> <span class="cp">%&gt;</span>
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
</code></pre></div></div>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- views/items/_item --&gt;</span>
<span class="nt">&lt;tr&gt;</span>
  <span class="nt">&lt;td&gt;</span><span class="cp">&lt;%=</span> <span class="n">item</span><span class="p">.</span><span class="nf">name</span> <span class="cp">%&gt;</span><span class="nt">&lt;/td&gt;</span>
  <span class="nt">&lt;td&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s1">'Show'</span><span class="p">,</span> <span class="n">item</span> <span class="cp">%&gt;</span><span class="nt">&lt;/td&gt;</span>
  <span class="nt">&lt;td&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s1">'Edit'</span><span class="p">,</span> <span class="n">edit_item_path</span><span class="p">(</span><span class="n">item</span><span class="p">)</span> <span class="cp">%&gt;</span><span class="nt">&lt;/td&gt;</span>
  <span class="nt">&lt;td&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s1">'Destroy'</span><span class="p">,</span> <span class="n">item</span><span class="p">,</span> <span class="ss">method: :delete</span> <span class="cp">%&gt;</span><span class="nt">&lt;/td&gt;</span>
<span class="nt">&lt;/tr&gt;</span>
</code></pre></div></div>

<p>この場合のログはこうなる。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Processing by ItemsController#index as HTML
  Rendering items/index.html.erb within layouts/application
  Item Load (0.3ms)  SELECT "items".* FROM "items"
  Rendered items/_item.html.erb (0.5ms)
  Rendered items/_item.html.erb (0.3ms)
  ...snip...
  Rendered items/_item.html.erb (0.5ms)
  Rendered items/_item.html.erb (0.3ms)
  Rendered items/index.html.erb within layouts/application (57.7ms)
Completed 200 OK in 80ms (Views: 77.1ms | ActiveRecord: 0.3ms)
</code></pre></div></div>

<p>Viewで80msくらいかかっている。</p>

<h3 id="collection-rendering">Collection rendering</h3>

<p>上記の場合、Collectionレンダーの機能を使えばもっと効率的にrenderできる。</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- views/items/index --&gt;</span>
<span class="cp">&lt;%=</span> <span class="n">render</span> <span class="vi">@items</span> <span class="cp">%&gt;</span>
</code></pre></div></div>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- views/items/_item --&gt;</span>
<span class="nt">&lt;tr&gt;</span>
  <span class="nt">&lt;td&gt;</span><span class="cp">&lt;%=</span> <span class="n">item</span><span class="p">.</span><span class="nf">name</span> <span class="cp">%&gt;</span><span class="nt">&lt;/td&gt;</span>
  <span class="nt">&lt;td&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s1">'Show'</span><span class="p">,</span> <span class="n">item</span> <span class="cp">%&gt;</span><span class="nt">&lt;/td&gt;</span>
  <span class="nt">&lt;td&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s1">'Edit'</span><span class="p">,</span> <span class="n">edit_item_path</span><span class="p">(</span><span class="n">item</span><span class="p">)</span> <span class="cp">%&gt;</span><span class="nt">&lt;/td&gt;</span>
  <span class="nt">&lt;td&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s1">'Destroy'</span><span class="p">,</span> <span class="n">item</span><span class="p">,</span> <span class="ss">method: :delete</span> <span class="cp">%&gt;</span><span class="nt">&lt;/td&gt;</span>
<span class="nt">&lt;/tr&gt;</span>
</code></pre></div></div>

<p>この場合のログはこうなる。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Processing by ItemsController#index as HTML
  Rendering items/index.html.erb within layouts/application
  Item Load (0.4ms)  SELECT "items".* FROM "items"
  Rendered collection of items/_item.html.erb [29 times] (6.9ms)
  Rendered items/index.html.erb within layouts/application (10.3ms)
Completed 200 OK in 29ms (Views: 26.4ms | ActiveRecord: 0.4ms)
</code></pre></div></div>

<p>ビューで25msくらい。だいたい上記の例と比べると1/3くらいになっている。</p>

<h2 id="rails-caching">Rails caching</h2>

<p>RailsのCacheの仕組みとして<a href="http://guides.rubyonrails.org/caching_with_rails.html">公式ガイド</a>で3つ紹介されているのだが、ご存知だろうか。</p>

<ol>
  <li><strong>Fragment Cache</strong>: View fragment caching.</li>
  <li><strong>Action Cache</strong>: Controller’s action caching (removed in Rails4).</li>
  <li><strong>Page Cache</strong>: Static page caching (removed in Rails4).</li>
</ol>

<h3 id="1-fragment-cache">1. Fragment Cache</h3>

<p><img src="/images/posts/roppongirb/cache-fragment.png" alt="" /></p>

<ul>
  <li>グローバルナビ・サイドバーなどの多く呼ばれる共通コンテンツに有効</li>
  <li>重い処理が走るビューの一部分であればあるほど高速化が期待できる</li>
  <li>Advanced Usage: <strong>Russian Doll Caching</strong></li>
</ul>

<h3 id="2-action-cache">2. Action Cache</h3>

<p><img src="/images/posts/roppongirb/action-cache.png" alt="" /></p>

<ul>
  <li>Rails4で削除されてgem化: <a href="https://github.com/rails/actionpack-action_caching">actionpack-action_caching</a></li>
  <li>Viewの手前のControllerのAction自体の処理が重い場合に有効</li>
  <li><code class="language-plaintext highlighter-rouge">cache_path</code> でキャッシュキーをカスタマイズ可能
    <ul>
      <li>モデルのupdated_at を組み込んだり、PC/スマフォでキャッシュビュー出し分け可能</li>
    </ul>
  </li>
</ul>

<h3 id="3-page-cache">3. Page Cache</h3>
<ul>
  <li>Rails4で削除されてgem化: <a href="https://github.com/rails/actionpack-page_caching">actionpack-page_caching</a></li>
  <li>キャッシュ対象となるControllerのActionの生成するHTMLをまるっと静的ファイルに吐き出す</li>
  <li>その静的ファイルをNGINXなどのWeb Server/Reverse Proxyでハンドリング</li>
</ul>

<h2 id="railsのキャッシュ戦略">Railsのキャッシュ戦略</h2>
<ol>
  <li>Railsデフォルトの FragmentCache を使ってビューのレンダリングを高速化</li>
  <li>それでもダメな場合や Controller 自体の処理が重い場合なら、ActionCache/PageCache を検討</li>
</ol>

<h3 id="warning-注意">:warning: 注意</h3>
<ul>
  <li>キャッシュしても根っこの問題は消えない</li>
  <li>キャッシュのライフサイクル管理</li>
  <li>用法用量を守って正しくお使いください</li>
</ul>

<p>キャッシュしても根っこの問題はバイパスされるだけでそれ自体が解決されるわけではないので、本質的にはその根っこの問題を潰すほうがキャッシュより優先すべき。キャッシュによって<strong>臭いものには蓋</strong>をしていないか。キャッシュによって大きなボトルネックが隠蔽されていないか。本質的な問題を潰した上でなお高速化したい場合にキャッシュを利用するのが筋の良いキャッシュ戦略だと思う。</p>

<p>またキャッシュを行うことでそのライフサイクル管理も必要になってくることはアタマに入れておきたい。どういう場合にキャッシュがexpireすべきなのか(あるいはexpireすべきでないのか)、updateすべきなのか、削除すべきなのか。この辺もきちんと考えた上でキャッシュに取り組みたい。</p>

<h2 id="静的ファイル配信">静的ファイル配信</h2>

<h3 id="nginx">NGINX</h3>

<p>プロダクション運用においては実際Railsが静的ファイルまでサーブすることはなくて、下記のようにNGINXに静的ファイルをサーブさせることが多い。</p>

<p><img src="/images/posts/roppongirb/nginx.png" alt="" /></p>

<h3 id="cdn">CDN</h3>

<p>さらに言うと、Railsの吐く assets:precompile の成果物は、CDNに乗せちゃって配信を最適化してやるともっとよい。</p>

<p><img src="/images/posts/roppongirb/nginx-cdn.png" alt="" /></p>

<h2 id="レイテンシに負けないプロトコル--http2">レイテンシに負けないプロトコル = HTTP/2</h2>

<p>バンド幅大きくなってもページロード時間は大きく変わらない。<strong>光の速度はこれ以上速くならない</strong>。じゃあどうするか。解決策がHTTP/2.</p>

<p><img src="/images/posts/roppongirb/http2-latency.png" alt="" /></p>

<p><img src="/images/posts/roppongirb/http2.png" alt="" /></p>

<p>via. <a href="http://www.slideshare.net/kazuho/dena-http2">ウェブを速くするためにDeNAがやっていること - HTTP/2と、さらにその先</a></p>

<p>下記のBEFORE/AFTERは画像の配信をHTTPからHTTP/2に変更した場合のリクエストをキャプチャしたもの。</p>

<h3 id="before-http2">Before HTTP/2</h3>

<p>HTTP/2前の状態。リクエストが順番に走っていることが見て取れる。</p>

<p><img src="/images/posts/roppongirb/before-http2.png" alt="" /></p>

<h3 id="after-http2">After HTTP/2</h3>

<p>HTTP/2後の状態。リクエストが見事に多重化されている。</p>

<p><img src="/images/posts/roppongirb/after-http2.png" alt="" /></p>

<p><a href="https://www.httpvshttps.com/">こちらのページ</a>ではHTTPSの画像ロードの速度の速さを体感できる。</p>

<p><img src="/images/posts/roppongirb/HTTP_vs_HTTPS.png" alt="" /></p>

<h2 id="ユーザーの体感速度--サーバーサイドレスポンス--クライアントサイドスピード">ユーザーの体感速度 = サーバーサイドレスポンス + クライアントサイド・スピード</h2>

<p>仮にサーバーレスポンスタイムを<code class="language-plaintext highlighter-rouge">1ms</code>にしたとしても、十分に速くなったとはいえない。なぜなら最終的にユーザーが感じるであろうウェブページの体感速度はサーバーサイドのレスポンス速度とクライアントサイドでのページロードのスピードを足し合わせたものだから。サーバーが0msでレスポンス返しても10秒間クライアントサイドの画面が真っ白だったら、ユーザーにとってはそれは10秒待たされてるのと一緒。</p>

<h3 id="rails-helloworld-app-の場合">Rails HelloWorld App の場合</h3>

<p>Rails5をほぼ素の状態でHello Worldという文字列を出力するアプリをHerokuにデプロイして<a href="https://developers.google.com/speed/pagespeed/insights/">Google PageSpeed Insights</a>で計測してみた。</p>

<p>結果は80点以下… :weary:</p>

<p><img src="/images/posts/roppongirb/render-block-js.png" alt="" /></p>

<p><code class="language-plaintext highlighter-rouge">Should Fix</code>として報告されているのは、headタグ内にあるJS読み込みが Render Blocking してますよ、という内容のもの。Webの高速化はサーバーサイドだけで済むようなラクなもんじゃない。</p>

<h2 id="amp-zap">AMP :zap:</h2>

<p>AMPはWeb高速化のベストプラクティスを詰め込んだ仕様/制限のこと。詳しくは下記が参考になる。</p>

<ul>
  <li><a href="https://medium.com/@cramforce/why-amp-is-fast-7d2ff1f48597#.tcozirlt5">Why AMP is fast — Medium</a></li>
  <li><a href="https://mozaic.fm/episodes/22/amp.html">ep22 AMP | mozaic.fm</a></li>
</ul>

<p>またAMPに対応するとページが速くなる他にもおいしいことがあって、GoogleがAMPページをキャッシュしてコンテンツ配信を肩代わりしてくれるのだ。いうなればAMPのためのGoogle無料CDN。これでオーガニック検索のトラフィックはだいぶラクになるかも？</p>

<p>僕も自分の<a href="http://blog.toshima.ru/">英語Tipsブログ</a>をAMP化してみたが非常に高速にページが表示できている。(完全にAMP化はできていないのだけど) まだAMP試していない人は、AMPすげーはやいのでぜひその速さを体感してみてほしい。そしてWebの高速化にまっすぐ向き合ってもらいたいと思う。</p>

<h2 id="その他の参考資料">その他の参考資料</h2>
<ul>
  <li><a href="https://speakerdeck.com/mirakui/high-performance-rails-long-edition">High Performance Rails (long edition) // Speaker Deck</a></li>
  <li><a href="https://speakerdeck.com/joker1007/railspahuomansuji-ben-falseki">Railsパフォーマンス基本のキ // Speaker Deck</a></li>
  <li><a href="http://parashuto.com/rriver/development/page-speed-optimization">デザイナーやディレクターも知っておきたい、ページ表示速度の高速化の基本 – Rriver</a></li>
</ul>

<h2 id="roppongirb-イベントについて">Roppongi.rb イベントについて</h2>
<ul>
  <li><a href="https://twitter.com/hashtag/roppongirb?f=tweets&amp;vertical=default">#roppongirb hashtag on Twitter</a></li>
  <li>イベント発表資料: <a href="http://roppongirb.connpass.com/event/33502/presentation/">Roppongi.rb 資料一覧 - connpass</a></li>
  <li><a href="http://morizyun.github.io/blog/roppongi-rb-ruby-rails/">Roppongi.rb #1 発表の密度が濃くて楽しかったYO! - 酒と泪とRubyとRailsと</a></li>
</ul>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><a href="https://www.techempower.com/benchmarks/">Round 12 results - TechEmpower Framework Benchmarks</a> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>ただしRubyバージョン差異による非互換性を解消するための変更は必要だけどね。 <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Toshimaru</name></author><category term="rails" /><category term="ruby" /><category term="roppongirb" /><category term="presentation" /><category term="web" /><summary type="html"><![CDATA[自分がオーガナイザーを務めた Roppongi.rb #1で「Rails高速化戦略」という題で発表してきました。スライドは下記になります。発表内容をこちらのブログでも文章形式でざっとまとめてみたいと思います。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/roppongirb/title.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/roppongirb/title.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>