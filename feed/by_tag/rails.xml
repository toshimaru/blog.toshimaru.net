<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="https://blog.toshimaru.net/feed/by_tag/rails.xml" rel="self" type="application/atom+xml" /><link href="https://blog.toshimaru.net/" rel="alternate" type="text/html" /><updated>2023-01-21T02:29:31+09:00</updated><id>https://blog.toshimaru.net/feed/by_tag/rails.xml</id><title type="html">Hack Your Design!</title><subtitle>toshimaruの技術系なブログ</subtitle><author><name>Toshimaru</name></author><entry><title type="html">Kaigi on Railsで「FactoryBot the Right Way」を発表しました</title><link href="https://blog.toshimaru.net/kaigi-on-rails/" rel="alternate" type="text/html" title="Kaigi on Railsで「FactoryBot the Right Way」を発表しました" /><published>2020-10-07T00:00:00+09:00</published><updated>2020-10-08T00:00:00+09:00</updated><id>https://blog.toshimaru.net/kaigi-on-rails</id><content type="html" xml:base="https://blog.toshimaru.net/kaigi-on-rails/"><![CDATA[<p><a href="https://kaigionrails.org/">Kaigi on Rails</a>で「FactoryBot the Right Way」というタイトルで発表しました<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>。</p>

<h2 id="スライド">スライド</h2>

<script async="" class="speakerdeck-embed" data-id="8084985a97ce4b6685d8528388da9779" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script>

<h2 id="アーカイブ動画">アーカイブ動画</h2>

<p>動画もYouTubeにアーカイブとして上がっておりますので、音声付きで聴きたい方はこちらをどうぞ。</p>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">先行して <a href="https://twitter.com/toshimaru_e?ref_src=twsrc%5Etfw">@toshimaru_e</a> さんの動画をアップしました！他のセッションも順次公開していきますのでお楽しみに！ <a href="https://twitter.com/hashtag/kaigionrails?src=hash&amp;ref_src=twsrc%5Etfw">#kaigionrails</a><a href="https://t.co/duhoF1Xu1S">https://t.co/duhoF1Xu1S</a> <a href="https://t.co/y3PRYVRlO8">https://t.co/y3PRYVRlO8</a></p>&mdash; Kaigi on Rails (@kaigionrails) <a href="https://twitter.com/kaigionrails/status/1312397413592653824?ref_src=twsrc%5Etfw">October 3, 2020</a></blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<h2 id="感想">感想</h2>

<p>今回は初のビデオ録画登壇でした。</p>

<p>今までのリモート登壇（<a href="/career-strategy-for-around-thirty-engineer/">アラサーエンジニアの生存戦略</a>、<a href="/how-to-deal-with-fat-model/">Fat Modelの倒し方</a>）は基本Zoomを使ったLIVE登壇だったので、今回初めて録画登壇を経験できて良かったと思います。</p>

<p>録画のセットアップとしては下記を利用しました。</p>

<ul>
  <li>プレゼンテーションツール: Keynote</li>
  <li>スライド録画+音声録音: Keynoteのレコーディング機能 (with Krisp)
    <ul>
      <li>参考: <a href="https://support.apple.com/ja-jp/guide/keynote/tan8a5df9cc5/mac">MacのKeynoteでオーディオを録音する - Apple サポート</a></li>
    </ul>
  </li>
  <li>Backup用音声録音: QuickTime Player
    <ul>
      <li>参考: <a href="https://support.apple.com/ja-jp/guide/quicktime-player/qtpf25d6f827/mac">MacのQuickTime Playerでオーディオを録音する - Apple サポート</a></li>
    </ul>
  </li>
  <li>スピーカー側の動画撮影: iPad</li>
</ul>

<blockquote>
  <p>Kaigi on Railsのコアコンセプトは 「初学者から上級者までが楽しめるWeb系の技術カンファレンス」 です。</p>
</blockquote>

<p>ということでしたが、今回の発表の内容的には初学者もそこそこ楽しめる内容になっていのではないでしょうか。参考になったのなら幸いです<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup>。</p>

<blockquote class="twitter-tweet" data-conversation="none"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/kaigionrails?src=hash&amp;ref_src=twsrc%5Etfw">#kaigionrails</a> 発表資料チラ見せ。FactoryBotをより上手に使いこなしたい初級者〜中級者レベルの方にはそこそこ有益な情報になっていると思いますので是非😊 <a href="https://t.co/dQDOzP3BpX">pic.twitter.com/dQDOzP3BpX</a></p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/1311079864070369280?ref_src=twsrc%5Etfw">September 29, 2020</a></blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<h2 id="おわり">おわり</h2>

<p>Kaigi on Railsをオンラインで開催してくださったチーフオーガナイザーの <a href="https://twitter.com/okuramasafumi">@okuramasafumi</a> をはじめ、運営スタッフの皆さま、ありがとうございました。</p>

<h2 id="参考リンク">参考リンク</h2>

<ul>
  <li>公式ドキュメント
    <ul>
      <li><a href="https://github.com/thoughtbot/factory_bot/blob/master/GETTING_STARTED.md">GETTING_STARTED.md</a></li>
      <li><a href="https://github.com/thoughtbot/factory_bot/blob/master/NAME.md">Project Naming History</a></li>
    </ul>
  </li>
  <li>ベンチマークソースコード
    <ul>
      <li><a href="https://github.com/toshimaru/factory-bot-the-right-way">toshimaru/factory-bot-the-right-way</a></li>
    </ul>
  </li>
  <li><a href="https://fukabori.fm/episode/13">13. ペアプロやテストの疑問とか、ソフトウェアエンジニアの育成とか | fukabori.fm</a></li>
  <li><a href="https://sinsoku.hatenablog.com/entry/2017/04/09/214728">Rails アンチパターン - 錆びついたファクトリー (factory_girl) - アジャイルSEの憂鬱</a></li>
  <li><a href="https://magazine.rubyist.net/articles/kaigi_on_rails/index.html">Rubyist Magazine: Kaigi on Rails 特集号</a></li>
</ul>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>たぶん文法的には「FactoryBot <strong>in</strong> the right way」ってのが正しい気がするけど、こちらがゴロが良かったということでそれはご愛嬌で。。。 <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>RailsDM2018で発表したこちらの内容もあわせて参考にしていただけると :pray: <a href="/rdm2018-active-record-anti-patterns/">railsdm2018で「ActiveRecordデータ処理アンチパターン」を発表しました</a> <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Toshimaru</name></author><category term="presentation" /><category term="rspec" /><category term="rails" /><summary type="html"><![CDATA[Kaigi on Railsで「FactoryBot the Right Way」というタイトルで発表しました。動画もYouTubeにアーカイブとして上がっておりますので、音声付きで聴きたい方はこちらをどうぞ。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/kaigi-on-rails.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/kaigi-on-rails.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">銀座Rails#21で「Fat Modelの倒し方」を発表しました 〜質問・感想編〜</title><link href="https://blog.toshimaru.net/how-to-deal-with-fat-model-after/" rel="alternate" type="text/html" title="銀座Rails#21で「Fat Modelの倒し方」を発表しました 〜質問・感想編〜" /><published>2020-06-05T00:00:00+09:00</published><updated>2020-06-05T00:00:00+09:00</updated><id>https://blog.toshimaru.net/how-to-deal-with-fat-model-after</id><content type="html" xml:base="https://blog.toshimaru.net/how-to-deal-with-fat-model-after/"><![CDATA[<p>本記事は『<a href="/how-to-deal-with-fat-model/">銀座Rails#21で「Fat Modelの倒し方」を発表しました</a>』の後編になります。</p>

<p>当日あった質問、発表してみての感想などを書きたいと思います。</p>

<ul id="markdown-toc">
  <li><a href="#当日の質問" id="markdown-toc-当日の質問">当日の質問</a>    <ul>
      <li><a href="#ファイルの置き場について" id="markdown-toc-ファイルの置き場について">ファイルの置き場について</a></li>
      <li><a href="#trailblazer-について" id="markdown-toc-trailblazer-について">trailblazer について</a></li>
    </ul>
  </li>
  <li><a href="#初リモート登壇してみて" id="markdown-toc-初リモート登壇してみて">初リモート登壇してみて</a>    <ul>
      <li><a href="#セットアップ" id="markdown-toc-セットアップ">セットアップ</a></li>
      <li><a href="#感想" id="markdown-toc-感想">感想</a></li>
    </ul>
  </li>
  <li><a href="#special-thanks" id="markdown-toc-special-thanks">Special Thanks</a></li>
</ul>

<h2 id="当日の質問">当日の質問</h2>

<h3 id="ファイルの置き場について">ファイルの置き場について</h3>

<p>質問の文脈としては「POROファイルの置き場ってどこ？」という内容でした。</p>

<p>発表中でPOROは「Modelの補助輪」という表現をしましたが、役割としてはModelにあたるので置き場所も<code class="language-plaintext highlighter-rouge">app/models</code>配下で問題ないと考えます。</p>

<p>特別な置き場を作りたくなってしまうかもしれませんが、Railsの提供するMVCのレールを逸脱しない範囲で独自路線を作っていくのが個人的には良いアプローチかなと考えています。POROをモデルの延長線上にあるものと考えれば、<code class="language-plaintext highlighter-rouge">app/models</code>にPOROが配置されているのは不自然ではないかと思います。</p>

<p>もちろん <code class="language-plaintext highlighter-rouge">app/models</code> の内部でドメイン毎にnamespace（module）を持たせファイルを構造化していくのはアリだと思います。例えば下記の例です。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>app/models
├── application_record.rb
├── domain1
│   └── plain_object.rb
├── domain2
│   └── plain_object.rb
├── domain3
│   └── plain_object.rb
|
...
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">app/models</code>にフラットにファイルを置いていくと、テーブル数増加・コード肥大化とともにものすごい数になってしまいます。意味のある単位でディレクトリ（module）を切っておくのは今すぐできる手軽な構造化という意味で、早いうちに導入しておくと良いと思います。</p>

<h3 id="trailblazer-について">trailblazer について</h3>

<p>「<a href="https://github.com/trailblazer/trailblazer">trailblazer</a> についてどう思う？」という話がありました。今回の発表にあたりtrailblazerはノーマークだったので、当日は「ちゃんと調べて触ったわけではないので、正直わかりません」という回答をしました。</p>

<p>trailblazer自体は、2015年頃に<a href="https://devchat.tv/ruby-rogues/206-rr-trailblazer-with-nick-sutterer/">Ruby Rogues Podcast</a>で聞いて知っていて、当時は「へ〜、興味深いコンセプトのフレームワークだけど、Not for meかな〜」「RailsのMVC構造とは違って小難しそうなフレームワークだな〜」などと思っていました。</p>

<p>今回の発表を通して改めて trailblazer を評価してみると、<strong>Railsの巨大化にともなって発生するペインポイントを回避するためによく考えられたアーキテクチャだ</strong> と思いました。</p>

<p>trailblazer は「高度に抽象化（high-level abstractions）されたRubyフレームワーク」だと謳っています。「何と比べて高度か？」というと、明らかに「Rails（MVCアーキテクチャ）と比べて高度だ」と考えることができます。具体的にはMVCアーキテクチャと比べて、大規模化しても破綻しにくいアーキテクチャになっているかと思います。</p>

<p><img src="/images/posts/ginzarails-21/trailblazer.png" alt="trailblazer" /></p>

<p>一方でtrailblazerアーキテクチャの中には「Railsでもgemとか使えば表現できるよね？」っていう部分もあるのは事実だと思います。trailblazerのアドバンテージとしては <strong>gem拡張なし</strong> で <strong>標準で</strong> 実現できる点と言えます。素の状態で破綻しにくいアーキテクチャが提供されています。</p>

<p>Hanamiにも共通して言えることなのですが、trailblazerを採用するときのディスアドバンテージはこんな感じでしょうか。</p>

<ul>
  <li>gem拡張に乏しい
    <ul>
      <li>やりたいことをやれるgemが転がっているか？</li>
    </ul>
  </li>
  <li>ハマったときのトラブルシュートの難しさ
    <ul>
      <li>ドキュメントは十分にあるか？</li>
      <li>コミュニティは成熟しているか？</li>
    </ul>
  </li>
  <li>バグを踏んだときの問題解決の難しさ
    <ul>
      <li>アクティブなメンテナはどれだけいるか？</li>
      <li>バグを報告したらすぐ反応して直してくれるか？</li>
      <li>Pull Request を upstream にカジュアルに投げることができそうか？</li>
    </ul>
  </li>
</ul>

<p>上述したデメリットを考えると、Hanamiないしtrailblazerがどれだけ優秀なアーキテクチャであっても採用は慎重にならざるを得ないと言えます。</p>

<p>Ruby on Railsの優位性はRuby Webフレームワークの圧倒的デファクトになっていることです。gemエコシステムやコミュニティ、ドキュメント、ブログ記事がしっかり整っているのは圧倒的アドバンテージと言えるのではないでしょうか。</p>

<h2 id="初リモート登壇してみて">初リモート登壇してみて</h2>

<h3 id="セットアップ">セットアップ</h3>

<p>今回の発表が初の<a href="https://zoom.us/">Zoom</a>によるリモート登壇でした。</p>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">初リモート登壇セットアップ <a href="https://twitter.com/hashtag/ginzarails?src=hash&amp;ref_src=twsrc%5Etfw">#ginzarails</a> <a href="https://t.co/Ays780ImG9">pic.twitter.com/Ays780ImG9</a></p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/1261229167036653570?ref_src=twsrc%5Etfw">May 15, 2020</a></blockquote>

<p>macOS + iPad の2画面を<a href="https://support.apple.com/ja-jp/HT210380">Sidecar</a>を使って実現した形となります。通常登壇だとスピーカーノートを手元のマシンに映して、プレゼン資料をプロジェクタに映して…とするところですが、リモート登壇だとプロジェクタにあたる部分が無いのでサブディスプレイは必須だなと感じました。</p>

<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=toshimaru-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B07PRX2Q11&amp;linkId=496cfb91e959b3c29be79559c0666db9"></iframe>

<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=toshimaru-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B07H27J698&amp;linkId=aa0e907ba05d2a0e01a21b30e73d5b86"></iframe>

<p>リモート発表ということもありネットワークが一番の心配事だったのですが、Google WiFiルーター ⇔ macOS とのネットワーク優先度をMAXにして、5GHz帯を掴むようにして発表に臨むことで、特に問題は発生しませんでした。</p>

<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=toshimaru-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B084ZCV6M5&amp;linkId=dd1f57286c1fe56f3d3bc5db74ef399e"></iframe>

<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=toshimaru-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B01MAW2294&amp;linkId=bdc1818106278e95163b1f29f12bfdd9"></iframe>

<p>また発声がキレイに通るように、ノイズキャンセリングApp・<a href="https://krisp.ai/">Krisp</a>を導入していました（<a href="https://ref.krisp.ai/u/ud778344eb">こちら</a>から登録すると一ヶ月無料で使えます）。リモート時代には必須。</p>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">リモート戦国時代を生き抜くために Krisp を年間購読した</p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/1252784955878305792?ref_src=twsrc%5Etfw">April 22, 2020</a></blockquote>

<p>プレゼンツールはおなじみの<a href="https://www.deckset.com/">Deckset</a>。マークダウンでまとめられるのはGood、一方でデザインを凝ろうとするとパワポやキーノートより逆に大変なのでそのへんは課題感あります。</p>

<h3 id="感想">感想</h3>

<p>正直な気持ちをいうと、「発表するならジェスチャーが使えて、オーディエンスの顔・反応が見れて、緊張感を持って臨めるリアル登壇が良いかなー」って考えだったのですが、コロナが長期化しそうな状況を鑑みて今回のリモート登壇にチャレンジしてみることにしました。</p>

<p>実際にやってみて良かったこととしては、お家環境で椅子に座ってノンビリ発表できるのでそこまで疲れないという点でした。あとZoomはリモート登壇にはとても便利なツール（良い背景画像が無かったので今回はバーチャル背景を使わなかったのが若干後悔）。</p>

<p>逆に難しいなと思ったのはやっぱりオーディエンスの反応が見えない点。ここは運営側で<a href="http://commentscreen.com/">Comment Screen</a>環境を用意してもらえたことで、発表中のオーディエンスへの質問や反応はある程度見ることができました。またこれは登壇者側・参加者側どちらでもそうなのですが、リアル現場での懇親会のように発表後にカジュアルに話せないのはちょっと残念だなーと思う点です。</p>

<p>総じてリモート登壇を初めての体験できてよかったと思います。</p>

<p>あと今回いただいた30分という尺はある程度まとまった量の発表をゆっくり進行するには丁度良い尺でした。それ以上の長さになると発表者側もオーディエンス側もダレそうだなぁという印象。</p>

<h2 id="special-thanks">Special Thanks</h2>

<p>本発表はもともと銀座Rails#18で発表予定だったものです。改めての発表機会をいただき、銀座Rails運営の皆様ありがとうございました。</p>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">イベントキャンセルによってお蔵入りした発表資料。普通に喋ったら20分超えの大作だっただけに残念。。。コロナが落ち着くまでは蔵出しせずに寝かせておくかな...😷 <a href="https://t.co/Qzu2YNQyve">pic.twitter.com/Qzu2YNQyve</a></p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/1229425295930716160?ref_src=twsrc%5Etfw">February 17, 2020</a></blockquote>

<p>Rails Model の限界を考えるにあたり、<a href="https://twitter.com/_yasaichi">yasaichiさん</a>、<a href="https://github.com/hshimoyama">hshiroyamaさん</a>の発表を参考にさせていただきました。ありがとうございました。</p>

<script async="" class="speakerdeck-embed" data-id="b5579c5fa5fa4e479ec81fda3b231eb2" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>

<script async="" class="speakerdeck-embed" data-id="ce30c3cf9433471283e24855f6bdd2b4" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">1年前に「Ruby on Railsの正体と向き合い方」というテーマで登壇したときに、時間の関係で言及できなかった「コードレベルの向き合い方」の詳細が綺麗に整理された上でまとまっていて、いたく感動してしまった。おすすめ / Fat Modelの倒し方 / how to deal with fat model <a href="https://t.co/0vMubQfiLb">https://t.co/0vMubQfiLb</a></p>&mdash; (やさいち|yasaichi) (@_yasaichi) <a href="https://twitter.com/_yasaichi/status/1264889633332060160?ref_src=twsrc%5Etfw">May 25, 2020</a></blockquote>]]></content><author><name>Toshimaru</name></author><category term="presentation" /><category term="rails" /><summary type="html"><![CDATA[本記事は『銀座Rails#21で「Fat Modelの倒し方」を発表しました』の後編になります。当日あった質問、発表してみての感想などを書きたいと思います。当日の質問： ファイルの置き場について trailblazer について]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/ginzarails-21/og2.jpg" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/ginzarails-21/og2.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">銀座Rails#21で「Fat Modelの倒し方」を発表しました</title><link href="https://blog.toshimaru.net/how-to-deal-with-fat-model/" rel="alternate" type="text/html" title="銀座Rails#21で「Fat Modelの倒し方」を発表しました" /><published>2020-06-01T00:00:00+09:00</published><updated>2020-06-05T00:00:00+09:00</updated><id>https://blog.toshimaru.net/how-to-deal-with-fat-model</id><content type="html" xml:base="https://blog.toshimaru.net/how-to-deal-with-fat-model/"><![CDATA[<p><a href="https://ginza-rails.connpass.com/event/173610/">銀座Rails#21</a>で「Fat Modelの倒し方」と題して発表してきました。</p>

<h2 id="発表スライド">発表スライド</h2>

<script async="" class="speakerdeck-embed" data-id="fa367404507c4311aa3eeb087fc45a6e" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>

<h2 id="目次">目次</h2>

<ul id="markdown-toc">
  <li><a href="#発表スライド" id="markdown-toc-発表スライド">発表スライド</a></li>
  <li><a href="#目次" id="markdown-toc-目次">目次</a></li>
  <li><a href="#fat-rails-stage" id="markdown-toc-fat-rails-stage">Fat Rails Stage</a></li>
  <li><a href="#fat-model対処のための３つのアプローチ" id="markdown-toc-fat-model対処のための３つのアプローチ">Fat Model対処のための３つのアプローチ</a></li>
  <li><a href="#rails-modelの限界" id="markdown-toc-rails-modelの限界">Rails Modelの限界</a></li>
  <li><a href="#rails-modelはなぜ辛くなるのか" id="markdown-toc-rails-modelはなぜ辛くなるのか">Rails Modelはなぜ辛くなるのか？</a></li>
  <li><a href="#目指すべきゴール" id="markdown-toc-目指すべきゴール">目指すべきゴール</a></li>
  <li><a href="#rails-way" id="markdown-toc-rails-way">Rails Way</a>    <ul>
      <li><a href="#concerns" id="markdown-toc-concerns">Concerns</a></li>
      <li><a href="#sti" id="markdown-toc-sti">STI</a></li>
      <li><a href="#polymorphic-association" id="markdown-toc-polymorphic-association">Polymorphic Association</a></li>
      <li><a href="#accepts_nested_attributes_for" id="markdown-toc-accepts_nested_attributes_for">accepts_nested_attributes_for</a></li>
      <li><a href="#その他細かめのテクニック" id="markdown-toc-その他細かめのテクニック">その他細かめのテクニック</a></li>
      <li><a href="#rails-wayまとめ" id="markdown-toc-rails-wayまとめ">「Rails Way」まとめ</a></li>
    </ul>
  </li>
  <li><a href="#sub-rails-way" id="markdown-toc-sub-rails-way">Sub-Rails Way</a>    <ul>
      <li><a href="#view-model" id="markdown-toc-view-model">View Model</a></li>
      <li><a href="#権限管理認可" id="markdown-toc-権限管理認可">権限管理・認可</a></li>
      <li><a href="#interactor" id="markdown-toc-interactor">Interactor</a></li>
      <li><a href="#特定の課題の解決" id="markdown-toc-特定の課題の解決">特定の課題の解決</a></li>
      <li><a href="#それrailsでできるよ" id="markdown-toc-それrailsでできるよ">「それRailsでできるよ」</a></li>
      <li><a href="#それrubyでできるよ" id="markdown-toc-それrubyでできるよ">「それRubyでできるよ」</a></li>
      <li><a href="#saasに切り出す" id="markdown-toc-saasに切り出す">SaaSに切り出す</a></li>
      <li><a href="#sub-rails-wayまとめ" id="markdown-toc-sub-rails-wayまとめ">「Sub-Rails Way」まとめ</a></li>
    </ul>
  </li>
  <li><a href="#non-rails-way" id="markdown-toc-non-rails-way">Non-Rails Way</a>    <ul>
      <li><a href="#form-model" id="markdown-toc-form-model">Form Model</a></li>
      <li><a href="#poro" id="markdown-toc-poro">PORO</a></li>
      <li><a href="#service-class" id="markdown-toc-service-class">Service Class</a></li>
      <li><a href="#1-table-multiple-models" id="markdown-toc-1-table-multiple-models">1 Table Multiple Models</a></li>
      <li><a href="#non-rails-wayまとめ" id="markdown-toc-non-rails-wayまとめ">「Non-Rails Way」まとめ</a></li>
    </ul>
  </li>
  <li><a href="#全体のまとめ" id="markdown-toc-全体のまとめ">全体のまとめ</a></li>
  <li><a href="#参考資料" id="markdown-toc-参考資料">参考資料</a></li>
  <li><a href="#後編質問感想編" id="markdown-toc-後編質問感想編">後編（質問・感想編）</a></li>
</ul>

<h2 id="fat-rails-stage">Fat Rails Stage</h2>

<p>肥大化したRailsアプリケーション（Fat Rails Application）において最も辛いレイヤーはどこでしょうか？</p>

<ol>
  <li>Fat View</li>
  <li>Fat Controller</li>
  <li>Fat Model</li>
</ol>

<p>僕はFat Modelだと考えています。</p>

<p>下記は「RailsがどのようにFatになっていくか」段階を示した表です。</p>

<table>
  <thead>
    <tr>
      <th>Fat Stage</th>
      <th>Rails習熟度</th>
      <th>Fat Layer</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>低</td>
      <td>Fat View</td>
    </tr>
    <tr>
      <td>2</td>
      <td>中</td>
      <td>Fat Controller</td>
    </tr>
    <tr>
      <td>3</td>
      <td>高</td>
      <td>Fat Model<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></td>
    </tr>
  </tbody>
</table>

<p>まずはFatステージ1。Railsというものを全然知らない超初心者が陥るステージです。ビューに何でもかんでもロジックを書いちゃう。その結果がFat Viewです。</p>

<p>次にFatステージ2。ある程度Railsに慣れてきた開発者が陥るステージです。Modelへのロジック分離がうまくできず、Controllerにロジックが集中する。その結果はFat Controllerです。</p>

<p>最後がFatステージ3。Railsを習熟したエンジニアであればModelにロジックを寄せていくのが定石です。その結果出来上がるのはFat Modelです。</p>

<p>このように <strong>どんなにRailsに習熟してようと最終的にぶつかる壁がFat Model</strong> です。</p>

<h2 id="fat-model対処のための３つのアプローチ">Fat Model対処のための３つのアプローチ</h2>

<p>Fat Modelを倒すためのアプローチとして、僕は下記の3つに分けて整理すれば良いのではと考えました。</p>

<ol>
  <li>Rails Way</li>
  <li>Sub-Rails Way</li>
  <li>Non-Rails Way</li>
</ol>

<h2 id="rails-modelの限界">Rails Modelの限界</h2>

<p>なぜRailsアプリケーションのModel層は限界を迎えてしまうのでしょうか？</p>

<p>Railsの原始的な状態は、1つのModelに1つのControllerが結びついています。すなわち、<code class="language-plaintext highlighter-rouge">User</code>モデルがあれば<code class="language-plaintext highlighter-rouge">UsersController</code>があり、Controllerのそれぞれのアクションに<code class="language-plaintext highlighter-rouge">User</code>モデルが紐づくという形です。</p>

<p>しかし下図<sup id="fnref:a" role="doc-noteref"><a href="#fn:a" class="footnote" rel="footnote">2</a></sup>はそれが破綻した状態です。どうなっているかというと、複数のControllerからいろんなかたちで１つのモデルが触られる、そういう状態です。</p>

<p><img src="/images/posts/ginzarails-21/controllers-model.jpg" alt="inline" /></p>

<p>続いてのスライドです<sup id="fnref:b" role="doc-noteref"><a href="#fn:b" class="footnote" rel="footnote">3</a></sup>。</p>

<p><img src="https://speakerd.s3.amazonaws.com/presentations/ce30c3cf9433471283e24855f6bdd2b4/slide_42.jpg?12161035" alt="inline" /></p>

<p>ここのキーワードとしては <strong>ユースケース</strong>。いろんなユースケースを1つのModelで表現しなければならないという状況が辛いと言えます。</p>

<h2 id="rails-modelはなぜ辛くなるのか">Rails Modelはなぜ辛くなるのか？</h2>

<ul>
  <li>1つのModelが複数の異なるユースケースに密結合して実装されるとき
    <ul>
      <li>→ ある条件やcontextに紐付いたValidation/Callback処理</li>
    </ul>
  </li>
  <li>1つのフォームで複数のサブリソースが更新されるとき（フォームとModelが1対1で紐付かないとき）
    <ul>
      <li>→ 1つのModelを起点とした複数Modelを跨ぐトランザクション処理</li>
    </ul>
  </li>
</ul>

<p>上述の限界は、Rails ModelとDBのテーブルが一対一で紐づくRailsの世界観に起因する限界と言えます。</p>

<h2 id="目指すべきゴール">目指すべきゴール</h2>

<p>ではどうRailsの限界を乗り越えていけばいいでしょうか？</p>

<p>下記は横軸がコードベースのサイズ、縦軸がペイン（痛みの度合い）を描いたグラフです<sup id="fnref:c" role="doc-noteref"><a href="#fn:c" class="footnote" rel="footnote">4</a></sup>。</p>

<p><img src="/images/posts/ginzarails-21/growth.png" alt="inline" /></p>

<p>赤線はバニラRailsです。コードベースのサイズとともにペインが増大しています。</p>

<p>緑線はストラクチャードRails。コードベースが増大してもペインが増大しません。</p>

<p>僕の発表の言うところでは、赤線（バニラRails）がRails Way、緑線（ストラクチャードRails）がSub-Rails・Non-Rails Wayにあたります。</p>

<p><img src="/images/posts/ginzarails-21/growth2.png" alt="inline" /></p>

<p>ということで我々の基本的なゴールとしてはこの緑線、すなわち、 <strong>コードベースが大きくなってもペインが増大しないRailsコードベース</strong> を目指しましょう、ということになります。</p>

<h2 id="rails-way">Rails Way</h2>

<p>小学生の絵みたいで恐縮なんですが、Rails Wayを絵にするとこんなイメージです。</p>

<p><img src="/images/posts/ginzarails-21/rails-way.png" alt="fit" /></p>

<p>つまり <strong>Railsのレールに沿った開発アプローチ</strong> です。</p>

<h3 id="concerns">Concerns</h3>

<p>まずはConcerns。Model/Controllerの共通の関心事（Concern）をmoduleに切り出す手法です（代表例: DHH’s <code class="language-plaintext highlighter-rouge">Recording</code> Class<sup id="fnref:6" role="doc-noteref"><a href="#fn:6" class="footnote" rel="footnote">5</a></sup>）。</p>

<p><img src="/images/posts/ginzarails-21/concerns.png" alt="inline" /></p>

<p>注意すべきは、ConcernのRails公式ガイドはありません。強いて言うなら下記の記事でDHHがConcernを紹介しています。</p>

<p><a href="https://signalvnoise.com/posts/3372-put-chubby-models-on-a-diet-with-concerns">Put chubby models on a diet with concerns</a></p>

<p>Modelの持っている能力（ability = <code class="language-plaintext highlighter-rouge">-able</code> suffix）に着目してConcern moduleに切り出していくのが、Rails Wayっぽさがあると言えます。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># app/models/concerns/concernable.rb</span>
<span class="k">module</span> <span class="nn">Concernable</span>
  <span class="kp">extend</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Concern</span>

  <span class="o">...</span><span class="p">(</span><span class="n">your</span> <span class="n">concern</span> <span class="n">code</span><span class="p">)</span><span class="o">...</span>
<span class="k">end</span>
</code></pre></div></div>

<h3 id="sti">STI</h3>

<p>RailsにおいてテーブルとModelは原則的に1対1で結びつきます。しかし、STIを使えば1つのテーブルで複数Model紐付けることができます。</p>

<p>下図は<code class="language-plaintext highlighter-rouge">players</code>という単一テーブルに複数のクラスが結びついている図です<sup id="fnref:5" role="doc-noteref"><a href="#fn:5" class="footnote" rel="footnote">6</a></sup>。</p>

<p><img src="/images/posts/ginzarails-21/sti.png" alt="inline" /></p>

<p>Railsのコード例です。 <code class="language-plaintext highlighter-rouge">companies</code> テーブルに紐づく <code class="language-plaintext highlighter-rouge">Firm</code>, <code class="language-plaintext highlighter-rouge">Client</code>モデルの例だと下記の通りです。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># app/models/company.rb</span>
<span class="k">class</span> <span class="nc">Company</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
<span class="k">end</span>

<span class="c1"># app/models/firm.rb</span>
<span class="k">class</span> <span class="nc">Firm</span> <span class="o">&lt;</span> <span class="no">Company</span>
<span class="k">end</span>

<span class="c1"># app/models/client.rb</span>
<span class="k">class</span> <span class="nc">Client</span> <span class="o">&lt;</span> <span class="no">Company</span>
<span class="k">end</span>
</code></pre></div></div>

<h3 id="polymorphic-association">Polymorphic Association</h3>

<p>1つのポリモーフィック関連付け定義で複数のテーブルを従属させることができるのがポリモーフィック関連です。</p>

<p><img src="/images/posts/ginzarails-21/polymorphic.png" alt="inline" /></p>

<p>上図の場合、通常のRails DB設計であれば <code class="language-plaintext highlighter-rouge">pictures</code>テーブルが<code class="language-plaintext highlighter-rouge">employee_id</code>, <code class="language-plaintext highlighter-rouge">product_id</code>を持っているべきですが、<code class="language-plaintext highlighter-rouge">imagable_id</code>という1つカラムで複数のテーブルを従属させることができています。</p>

<p>これをRailsのコードであらわすと下記の通りです。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># app/models/picture.rb</span>
<span class="k">class</span> <span class="nc">Picture</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
  <span class="n">belongs_to</span> <span class="ss">:imageable</span><span class="p">,</span> <span class="ss">polymorphic: </span><span class="kp">true</span>
<span class="k">end</span>

<span class="c1"># app/models/employee.rb</span>
<span class="k">class</span> <span class="nc">Employee</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
  <span class="n">has_many</span> <span class="ss">:pictures</span><span class="p">,</span> <span class="ss">as: :imageable</span>
<span class="k">end</span>

<span class="c1"># app/models/product.rb</span>
<span class="k">class</span> <span class="nc">Product</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
  <span class="n">has_many</span> <span class="ss">:pictures</span><span class="p">,</span> <span class="ss">as: :imageable</span>
<span class="k">end</span>
</code></pre></div></div>

<p>ただし注意点があります。ポリモーフィック関連は『SQLアンチパターン』6章でアンチパターンとして紹介されており、使用する際は気をつける必要があります。</p>

<p>詳しくは『SQLアンチパターン』を読んでいただければと思います。</p>

<h3 id="accepts_nested_attributes_for">accepts_nested_attributes_for</h3>

<p>ネストされたアトリビュートで関連リソースの作成・更新・削除を行うのが<code class="language-plaintext highlighter-rouge">accepts_nested_attributes_for</code>です。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Member</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">has_many</span> <span class="ss">:posts</span>
  <span class="n">accepts_nested_attributes_for</span> <span class="ss">:posts</span>
<span class="k">end</span>

<span class="n">params</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">member: </span><span class="p">{</span>
  <span class="ss">name: </span><span class="s1">'joe'</span><span class="p">,</span> <span class="ss">posts_attributes: </span><span class="p">[</span>
    <span class="p">{</span> <span class="ss">title: </span><span class="s1">'Kari, the awesome Ruby documentation browser!'</span> <span class="p">},</span>
    <span class="p">{</span> <span class="ss">title: </span><span class="s1">'The egalitarian assumption of the modern citizen'</span> <span class="p">},</span>
  <span class="p">]</span>
<span class="p">}}</span>
<span class="n">member</span> <span class="o">=</span> <span class="no">Member</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">params</span><span class="p">[</span><span class="ss">:member</span><span class="p">])</span>
</code></pre></div></div>

<p>ただしこの<code class="language-plaintext highlighter-rouge">accepts_nested_attributes_for</code>はDHH自らが「消したい」と発言しており<sup id="fnref:7" role="doc-noteref"><a href="#fn:7" class="footnote" rel="footnote">7</a></sup>、積極的に使うのはやや躊躇われるかもしれません。</p>

<p><img src="/images/posts/ginzarails-21/dhh.png" alt="inline" /></p>

<h3 id="その他細かめのテクニック">その他細かめのテクニック</h3>

<ul>
  <li><strong>Serialize Attribute</strong>
    <ul>
      <li>json型カラムへのメタデータ保存に便利</li>
      <li>⚠️『SQLアンチパターン』5章 EAV</li>
    </ul>
  </li>
  <li><strong>Value Object</strong> (<code class="language-plaintext highlighter-rouge">compose_of</code>)
    <ul>
      <li>複数カラムをValueオブジェクトとして展開するときに便利</li>
    </ul>
  </li>
  <li><strong>Validation Class</strong>/<strong>Callback Class</strong>
    <ul>
      <li>クラスとして分離可能 → 分離することで複数モデルで再利用可能に</li>
    </ul>
  </li>
</ul>

<h3 id="rails-wayまとめ">「Rails Way」まとめ</h3>

<p>全体としては、Rails WayだけではFat Modelを倒す手段として手数が少なく物足りないと感じます。</p>

<p>アプリケーションサイズがFatになっている時点でそのRailsアプリケーションは中規模以上のサイズが見込まれますから、正直Rails WayだけでFat Modelを倒すのは無理だと思います。</p>

<p>❌ Concerns, Validation ClassなどFat ModelをDRYに記述する手段にはなるが、構造的にダイエットする手段にはなっていません。あくまでそれらは局所的なダイエットに留まっています。</p>

<p>❌ STI, PolymorphicなどはDB設計と密結合したソリューションで、完全なコードレベルの解決にはなっていません。また、アンチパターンとして紹介されているように、それ自体が技術負債になりえる構造的問題を孕んでいます。</p>

<h2 id="sub-rails-way">Sub-Rails Way</h2>

<p>Sub-Rails Wayはレールを補強・拡張しつつレールに乗るスタイルです。</p>

<p><img src="/images/posts/ginzarails-21/sub-rails-way.png" alt="fit" /></p>

<p>レールを何を使って補強・拡張するのでしょうか？それは下記２つになります。</p>

<ol>
  <li>gem</li>
  <li>SaaS</li>
</ol>

<h3 id="view-model">View Model</h3>

<p>ModelにおけるView関連ロジックを <strong>View Model</strong> として切り出す手法です。</p>

<p>Development of Further PoEAAで<a href="https://martinfowler.com/eaaDev/PresentationModel.html">Presentation Model</a>という概念で紹介されているパターンにあたると考えています。ModelをDecoratorパターンっぽく拡張しているのでDecoratorとも呼ばれることが多いです<sup id="fnref:8" role="doc-noteref"><a href="#fn:8" class="footnote" rel="footnote">8</a></sup>。</p>

<p>このView Modelの良いところとしては、Fat Model の対処として機能するだけでなく、Fat View の対処としても機能する点です。</p>

<p>💎 gemの実装としては下記のようなものがあります。</p>

<ul>
  <li><a href="https://github.com/drapergem/draper">draper</a></li>
  <li><a href="https://github.com/amatsuda/active_decorator">active_decorator</a></li>
</ul>

<p>🔧 draperの場合、コードは下記のようになります（ArticleモデルのDecoratorクラス）。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># app/decorators/article_decorator.rb</span>
<span class="k">class</span> <span class="nc">ArticleDecorator</span> <span class="o">&lt;</span> <span class="no">Draper</span><span class="o">::</span><span class="no">Decorator</span>
  <span class="n">delegate_all</span>

  <span class="k">def</span> <span class="nf">publication_status</span>
    <span class="k">if</span> <span class="n">published?</span>
      <span class="s2">"Published at </span><span class="si">#{</span><span class="n">published_at</span><span class="si">}</span><span class="s2">"</span>
    <span class="k">else</span>
      <span class="s2">"Unpublished"</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">published_at</span>
    <span class="n">object</span><span class="p">.</span><span class="nf">published_at</span><span class="p">.</span><span class="nf">strftime</span><span class="p">(</span><span class="s2">"%A, %B %e"</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<h3 id="権限管理認可">権限管理・認可</h3>

<p>管理画面実装において逃げられない実装は認証とあわせて、権限管理・認可ではないでしょうか？</p>

<p>ResourceのCRUDでユーザーのアクセス制御するのが「Railsらしい」権限管理と考えています。</p>

<p>💎 gemの実装としては下記のようなものです。</p>

<ul>
  <li><a href="https://github.com/varvet/pundit">pundit</a></li>
  <li><a href="https://github.com/kyuden/banken">banken</a></li>
  <li><a href="https://github.com/CanCanCommunity/cancancan">cancancan</a></li>
</ul>

<p>🔧 punditの場合、コードは下記の通りです（Postモデルの認可クラス）。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># app/policies/post_policy.rb</span>
<span class="k">class</span> <span class="nc">PostPolicy</span>
  <span class="nb">attr_reader</span> <span class="ss">:user</span><span class="p">,</span> <span class="ss">:post</span>

  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="n">post</span><span class="p">)</span>
    <span class="vi">@user</span> <span class="o">=</span> <span class="n">user</span>
    <span class="vi">@post</span> <span class="o">=</span> <span class="n">post</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">update?</span>
    <span class="n">user</span><span class="p">.</span><span class="nf">admin?</span> <span class="n">or</span> <span class="n">not</span> <span class="n">post</span><span class="p">.</span><span class="nf">published?</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<h3 id="interactor">Interactor</h3>

<p>InteractorはClean Architecture由来する概念です。</p>

<p>下記の図は見たことある方も多くいらっしゃるかもしれません。赤い部分がClean Architectureにおけるユースケース層になります。このユースケース層に Interactor が表現されています。</p>

<p><img src="https://blog.cleancoder.com/uncle-bob/images/2012-08-13-the-clean-architecture/CleanArchitecture.jpg" alt="inline" /></p>

<p>ユースケース層というアプローチはとても良いと思っています。なぜなら先程「1つのModelが複数の異なるユースケースに密結合して実装されるとき―」と言いましたが、そのユースケースをまさにInteractorとして表現できるからです。</p>

<p>個人的にClean ArchitectureとRailsは相性が良いと思っていて、このようにMVC+InteractorでClean Architectureのそれぞれの層と一致させることができるからです。</p>

<p><img src="/images/posts/ginzarails-21/Clean_Coder_Blog.png" alt="inline" /></p>

<p>💎 gemとしては下記があります。</p>

<ul>
  <li><a href="https://github.com/collectiveidea/interactor-rails">interactor-rails</a></li>
  <li>(not Rails) <a href="https://github.com/hanami">hanami</a>’s <a href="https://github.com/hanami/utils/blob/master/lib/hanami/interactor.rb">Interactor</a></li>
</ul>

<p>hanamiはRailsではありませんが、Clean Architectureに強く影響を受けたRuby製Webフレームワークです。hanamiには Interactor の仕組みが標準で実装されています。</p>

<p>🔧 interactor-railsの場合のコードは下記の通りです（ユーザーを認証するクラス）。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># app/interactors/authenticate_user.rb</span>
<span class="k">class</span> <span class="nc">AuthenticateUser</span>
  <span class="kp">include</span> <span class="no">Interactor</span>

  <span class="k">def</span> <span class="nf">call</span>
    <span class="k">if</span> <span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="p">.</span><span class="nf">authenticate</span><span class="p">(</span><span class="n">context</span><span class="p">.</span><span class="nf">email</span><span class="p">,</span> <span class="n">context</span><span class="p">.</span><span class="nf">password</span><span class="p">)</span>
      <span class="n">context</span><span class="p">.</span><span class="nf">user</span> <span class="o">=</span> <span class="n">user</span>
      <span class="n">context</span><span class="p">.</span><span class="nf">token</span> <span class="o">=</span> <span class="n">user</span><span class="p">.</span><span class="nf">secret_token</span>
    <span class="k">else</span>
      <span class="n">context</span><span class="p">.</span><span class="nf">fail!</span><span class="p">(</span><span class="ss">message: </span><span class="s2">"authenticate_user.failure"</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="c1"># Inside your controller,</span>
<span class="n">result</span> <span class="o">=</span> <span class="no">AuthenticateUser</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="n">session_params</span><span class="p">)</span>  
</code></pre></div></div>

<h3 id="特定の課題の解決">特定の課題の解決</h3>

<p>特定の課題を解決するgemとしては例えば下記のようなものがあります。</p>

<ul>
  <li><strong>論理削除</strong>
    <ul>
      <li>💎 gem: <a href="https://github.com/jhawthorn/discard">discard</a>, <a href="https://github.com/rubysherpas/paranoia">paranoia</a>, <a href="https://github.com/ActsAsParanoid/acts_as_paranoid">acts_as_paranoid</a></li>
      <li>⚠️ <a href="https://www.slideshare.net/t_wada/ronsakucasual">SQLアンチパターン 幻の第26章「とりあえず削除フラグ」</a></li>
    </ul>
  </li>
  <li><strong>要素のソート・並び替え</strong>
    <ul>
      <li>💎 gem: <a href="https://github.com/brendon/acts_as_list">acts_as_list</a>, <a href="https://github.com/mixonic/ranked-model">ranked-model</a></li>
    </ul>
  </li>
  <li><strong>State Machine</strong>
    <ul>
      <li>💎 gem: <a href="https://github.com/aasm/aasm">aasm</a>, <a href="https://github.com/amatsuda/stateful_enum">stateful_enum</a></li>
    </ul>
  </li>
  <li><strong>Tagging</strong>
    <ul>
      <li>💎 gem: <a href="https://github.com/mbleigh/acts-as-taggable-on">acts-as-taggable-on</a></li>
    </ul>
  </li>
  <li><strong>HashをActiveRecordっぽく操作</strong>
    <ul>
      <li>💎 gem: <a href="https://github.com/zilkey/active_hash">active_hash</a></li>
    </ul>
  </li>
</ul>

<p>解決したい課題に応じて導入していくのが良いと思います。</p>

<h3 id="それrailsでできるよ">「それRailsでできるよ」<sup id="fnref:10" role="doc-noteref"><a href="#fn:10" class="footnote" rel="footnote">9</a></sup></h3>

<p>逆にgemを使わずともRails標準で解決できるよって課題も多く存在します。例えば下記のような例です。</p>

<ul>
  <li>:gem: <a href="https://github.com/brainspec/enumerize">enumerize</a> (Emumerized Attributes)
    <ul>
      <li>Rails 4.1: ActiveRecord enum</li>
      <li>参考. <a href="https://api.rubyonrails.org/v5.2.3/classes/ActiveRecord/Enum.html">ActiveRecord::Enum</a></li>
    </ul>
  </li>
  <li>:gem: <a href="https://github.com/eagletmt/switch_point">switch_point</a> (Database R/W Split)
    <ul>
      <li>Rails 6: Multi-DB</li>
      <li>参考: <a href="https://railsguides.jp/active_record_multiple_databases.html">Active Record で複数のデータベース利用 - Railsガイド</a></li>
    </ul>
  </li>
  <li>:gem: <a href="https://github.com/zdennis/activerecord-import">activerecord-import</a> (Bulk Import)
    <ul>
      <li>Rails 6: <code class="language-plaintext highlighter-rouge">insert_all</code>, <code class="language-plaintext highlighter-rouge">upsert_all</code></li>
    </ul>
  </li>
  <li>:gem: <a href="https://github.com/carrierwaveuploader/carrierwave">carrierwave</a>, <a href="https://github.com/shrinerb/shrine">shrine</a> (File Uploader)
    <ul>
      <li>Rails 5.2: Active Storage</li>
      <li>参考: <a href="https://railsguides.jp/active_storage_overview.html">Active Storage の概要 - Railsガイド</a></li>
    </ul>
  </li>
  <li>:gem: <a href="https://github.com/norman/friendly_id">friendly_id</a>
    <ul>
      <li>ActiveRecord: <code class="language-plaintext highlighter-rouge">to_param</code></li>
      <li>参考: <a href="https://api.rubyonrails.org/classes/ActiveRecord/Integration.html#method-i-to_param">ActiveRecord::Integration</a></li>
    </ul>
  </li>
  <li>:gem: <a href="https://github.com/magnusvk/counter_culture">counter_culture</a>
    <ul>
      <li>ActiveRecord: <code class="language-plaintext highlighter-rouge">counter_cache</code></li>
      <li>参考: <a href="https://railsguides.jp/association_basics.html#belongs-to%E3%81%AE%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3-counter-cache">Active Record の関連付け</a></li>
    </ul>
  </li>
  <li>ID/Password認証
    <ul>
      <li>ActiveModel: <code class="language-plaintext highlighter-rouge">has_secure_password</code></li>
      <li>参考: <a href="https://api.rubyonrails.org/classes/ActiveModel/SecurePassword/ClassMethods.html">ActiveModel::SecurePassword::ClassMethods</a></li>
    </ul>
  </li>
  <li>:gem: <a href="https://github.com/rubyconfig/config">config</a> (YAML Config Management)
    <ul>
      <li>Rails Custom configuration:</li>
      <li><code class="language-plaintext highlighter-rouge">Rails::Application.config_for</code></li>
      <li><code class="language-plaintext highlighter-rouge">config.x</code></li>
      <li>参考: <a href="https://railsguides.jp/configuring.html#%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%A0%E8%A8%AD%E5%AE%9A">Rails アプリケーションを設定する - Railsガイド</a></li>
    </ul>
  </li>
</ul>

<h3 id="それrubyでできるよ">「それRubyでできるよ」<sup id="fnref:10:1" role="doc-noteref"><a href="#fn:10" class="footnote" rel="footnote">9</a></sup></h3>

<p>gemを使わずともRubyでもできるよってケースもあります。</p>

<ul>
  <li>:gem: <a href="https://github.com/pry/pry">pry</a>
    <ul>
      <li>Ruby 2.4: <code class="language-plaintext highlighter-rouge">binding.irb</code></li>
      <li>Ruby 2.7: REPL Syntax Highlighting</li>
    </ul>
  </li>
</ul>

<h3 id="saasに切り出す">SaaSに切り出す</h3>

<p>処理をSaaSに切り出す、という意味では下記の例があります。</p>

<ul>
  <li><a href="https://auth0.com/jp/">Auth0</a>
    <ul>
      <li>ユーザー認証ロジックをAuth0に移譲</li>
      <li>認証にともなうMFA、パスワードリセット、セキュリティ対策などの面倒な実装をAuth0が肩代わり</li>
    </ul>
  </li>
  <li><a href="https://sentry.io/welcome/">Sentry</a>
    <ul>
      <li>エラー通知をSentryに移譲</li>
      <li>サービスにエラーをぽんぽん投げ込めばいい感じにエラーをアグリゲーション・可視化・各種通知してくれる</li>
    </ul>
  </li>
  <li><a href="https://newrelic.co.jp/">NewRelic</a>/<a href="https://www.datadoghq.com/ja/">Datadog</a>
    <ul>
      <li>APM (Application Performance Monitoring)を NewRelic/Datadog APMでやる</li>
      <li>自前で Elasticsearch + Kibana 環境を構築してもいいが、構築コスト・運用コストともに高くつく</li>
    </ul>
  </li>
</ul>

<h3 id="sub-rails-wayまとめ">「Sub-Rails Way」まとめ</h3>

<p>gem を使うことでFat Model対処法のバリエーションがぐっと広がります。独自実装でModelを太らせることをせず、使えるgemは積極的に利用していくとよいでしょう。</p>

<p>一方、gemを使わずともRails標準で解決できることも実は多くあるので見極めた上でgem導入しましょう。</p>

<p>また、選択肢はさほど多くないものの、最近はさまざまな便利SaaSが出ているので SaaSを使うのもFat Model対抗手段の１つとして検討してもよいでしょう。</p>

<h2 id="non-rails-way">Non-Rails Way</h2>

<p>Non-Railsはレールに乗らない別のレール、独自路線のことです。</p>

<p><img src="/images/posts/ginzarails-21/non-rails-way.png" alt="fit" /></p>

<p>つまり自らレールを作っていくスタイルです。</p>

<h3 id="form-model">Form Model</h3>

<p>Form Modelとは、<code class="language-plaintext highlighter-rouge">include ActiveModel</code>したRubyクラスのことです。</p>

<p>巷ではForm Objectと呼ばれることが多いですが、＜Formに特化したActiveModel＞という意味で、あえてForm Modelと本発表では呼んでいます。</p>

<p>フォームとForm Modelは一対一で紐付きます。こうすることで <strong>特定の＜Formのユースケース＞に対応したModel</strong> が作成可能になります。</p>

<p>💎 gemの実装としては下記のようなものがあります。</p>

<ul>
  <li><a href="https://github.com/trailblazer/reform">reform</a></li>
  <li><a href="https://github.com/dry-rb/">dry-rb</a>シリーズ（旧・<a href="https://github.com/solnic/virtus">virtus</a>）</li>
</ul>

<p>Form Modelの使い所としては下記のように整理できると思います。</p>

<table>
  <thead>
    <tr>
      <th>紐づく<br />テーブル数</th>
      <th>Form Modelのユースケース</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>問い合わせフォームなどテーブルを作るまでもないフォームで利用</td>
    </tr>
    <tr>
      <td>1</td>
      <td>-</td>
    </tr>
    <tr>
      <td>2以上</td>
      <td><code class="language-plaintext highlighter-rouge">accepts_nested_attributes_for</code>の代わりとして、複雑なフォームの組み立て時に利用</td>
    </tr>
  </tbody>
</table>

<p>テーブルとフォームが1対1で紐づく場合はRails Wayで解決させるのが素直な実装</p>

<p>その他の特定のユースケースに特化したForm Model実装としては、下記のようなものが考えられます。</p>

<ul>
  <li>SearchForm: 条件に基づく検索に特化したフォーム</li>
  <li>DownloadForm: CSVなどのダウンロードに特化したフォーム</li>
</ul>

<h3 id="poro">PORO</h3>

<p>POROとはPlain Old Ruby Objectの略です。元ネタはPoEAAのPOJO (Plain Old Java Object)です。</p>

<p>POROは、ActiveRecordの機能に依存しない純粋なRuby実装です。なので<code class="language-plaintext highlighter-rouge">include ActiveModel</code>しているRubyクラスは個人的にはPOROとは呼んでいません。</p>

<p>純粋なRuby実装なのである意味、 <strong>Ruby Way</strong> とも言うことができます。</p>

<p>POROの主な用途としてはModelの補助輪的な役割だと考えています。</p>

<p>例えば下記の例ではクラスメソッド<code class="language-plaintext highlighter-rouge">create!</code>呼び出し時に引数を受け取って<code class="language-plaintext highlighter-rouge">create!</code>インスタンスメソッド内でトランザクションを張って複数モデルの更新を行っています。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">PostWithNotifications</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">create!</span><span class="p">(</span><span class="n">creator</span><span class="p">:,</span> <span class="n">body</span><span class="p">:)</span>
    <span class="n">new</span><span class="p">(</span><span class="ss">creator: </span><span class="n">creator</span><span class="p">,</span> <span class="ss">body: </span><span class="n">body</span><span class="p">).</span><span class="nf">create!</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">creator</span><span class="p">:,</span> <span class="n">body</span><span class="p">:)</span>
    <span class="vi">@creator</span> <span class="o">=</span> <span class="n">creator</span>
    <span class="vi">@body</span> <span class="o">=</span> <span class="n">body</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">create!</span>
    <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="p">.</span><span class="nf">transaction</span> <span class="k">do</span>
      <span class="n">create_post!</span>
      <span class="n">create_notifications!</span>
    <span class="k">end</span>    
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>このRubyクラスの場合、＜<code class="language-plaintext highlighter-rouge">Post</code>作成とともに<code class="language-plaintext highlighter-rouge">Notification</code>も作成する＞という複数モデル更新のユースケースをPOROに閉じ込めたということができるでしょう。</p>

<h3 id="service-class">Service Class</h3>

<p>続いてはサービスクラスです。</p>

<p>サービスクラスに関してはもしかしたら賛否両論あるかもしれません。サービスという概念がデカすぎる故に、人によって使い方・解釈が異なり、サービスクラスにまつわる巷のすれ違いを起こしている印象があります。</p>

<p>サービスクラスに関してはまずはサービスの定義問題があると思っています。つまり「あなたの言うServiceってなんですか？」という問題です。</p>

<p>一口にサービスといっても様々な文脈のサービスがあります。</p>

<table>
  <thead>
    <tr>
      <th>Architecture</th>
      <th>Service Name</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>PoEAA</strong></td>
      <td>Service Layer</td>
    </tr>
    <tr>
      <td><strong>DDD</strong></td>
      <td>Service Class</td>
    </tr>
    <tr>
      <td><strong>Onion Architecture</strong></td>
      <td>Application Service, Domain Service</td>
    </tr>
    <tr>
      <td><strong>Rails “Service”</strong> ?</td>
      <td>上記のどれでもない”Service”<br />上記を組み合わせた”Service”</td>
    </tr>
  </tbody>
</table>

<p>「どういう文脈のサービスか？」を明確にした上で議論しないとサービスクラスの定義・概念がボンヤリしてしまう印象です。なのでサービスクラスを導入する際は、サービスクラスの定義・使い方を明確にした上でチームに導入していくのが良いと思います。</p>

<p>個人的な見解にはなりますが、＜特定のユースケースの解決＞という意味においてはInteractorのほうが少なくともRailsにおいては筋が良いと考えています。</p>

<p>また、個人的に下手にサービスという巨大で強い概念を持ち込むより、POROという概念で雑にまとめたほうが好みだったりします。</p>

<h3 id="1-table-multiple-models">1 Table Multiple Models</h3>

<p>一つのテーブルに複数Modelを紐付けるアプローチです。</p>

<p>Rails WayだとSTIでのみこれは実現可能ですが、STIを使わずにがんばってアプリケーションコードで複数モデルを表現しちゃいましょうというやり方です。</p>

<p>コードにすると、例えば下記のようなコードになります。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">User::AsSignUp</span> <span class="o">&lt;</span> <span class="no">User</span>
  <span class="n">validates</span> <span class="ss">:password</span><span class="p">,</span> <span class="o">...</span>
  <span class="n">after_create</span> <span class="ss">:send_welcome_email</span>

  <span class="kp">private</span>

  <span class="k">def</span> <span class="nf">send_welcome_email</span>
    <span class="o">...</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>この例では＜<code class="language-plaintext highlighter-rouge">User</code>のサインアップ＞というユースケースにのみ特化したActiveRecordのModelを作成しています。</p>

<p>ただこの実装に関しては、1 Table 1 ModelというRailsのパラダイム（規約）を壊すことになってしまうので、いささか危険思想という印象があります。</p>

<p>ただ僕自身実際にプロダクションに導入して運用した経験はないので、もし実運用における成功例お持ちの方がいれば教えていただけると幸いです。</p>

<h3 id="non-rails-wayまとめ">「Non-Rails Way」まとめ</h3>

<p>4つの Non-Railsを紹介しました。</p>

<ol>
  <li>Form Model</li>
  <li>PORO</li>
  <li>Service Class</li>
  <li>1 Table Multiple Models</li>
</ol>

<p>これらをうまく導入できればFat Modelを倒す強力な武器となるのは間違いないでしょう。</p>

<p>どれをどう導入するかに関しては正解はないと思うのでチームにあった手法を選択すると良いと考えています。</p>

<p>といっても「どれを導入すればいいかわからん…」ってなると思うので個人的なおすすめアプローチを紹介すると、モデルを太らせてしまうような複雑なフォームに関してはForm Modelで表現するのがわかりやすいと思います。</p>

<p>何らかのユースケースに特化したクラスを作りたいのであれば、Sub-Railsのセクションで紹介したInteractorを使うのが個人的にはオススメです。</p>

<p>上記で足りないユースケースが出てきた場合、POROと総称してModelの補助輪となるようなRubyクラスを用意してあげると良いかと思います。</p>

<h2 id="全体のまとめ">全体のまとめ</h2>

<p>Fat Modelを倒すための3つのアプローチを紹介しました。</p>

<ol>
  <li><strong>Rails Way</strong>: Railsの規約に沿った開発アプローチ</li>
  <li><strong>Sub-Rails Way</strong>: Railsの規約をgemで補強・拡張するアプローチ</li>
  <li><strong>Non-Rails Way</strong>: Railsの規約から外れる独自実装アプローチ</li>
</ol>

<p>まずは、 <strong>Rails Way</strong> + <strong>Sub-Rails Way</strong> でFat Modelをダイエットできないか考えましょう。小規模なRailsアプリケーションであれば Rails Way + Sub-Rails Way で十分戦えると思います。</p>

<p>Rails Way + Sub-Rails Way だけで立ち行かなくなった場合に、必要に応じて適切な <strong>Non-Rails Way</strong> を取り入れていきましょう。</p>

<p><strong>Non-Rails Way</strong> はチーム毎に最適解があると思っています。チームで合意できる独自路線を選択・導入すればよいのではないでしょうか。</p>

<h2 id="参考資料">参考資料</h2>

<ul>
  <li>書籍
    <ul>
      <li><a href="https://amzn.to/2TO3ZTe">エンタープライズアプリケーションアーキテクチャパターン</a></li>
      <li><a href="https://amzn.to/2XfXKJT">Clean Architecture　達人に学ぶソフトウェアの構造と設計</a></li>
      <li><a href="https://amzn.to/3exaz8y">エリック・エヴァンスのドメイン駆動設計</a></li>
      <li><a href="https://leanpub.com/growing-rails">Growing Rails Applications in Practice</a> by Henning Koch and Thomas Eisenbarth</li>
    </ul>
  </li>
  <li>アーキテクチャにまつわる資料
    <ul>
      <li><a href="https://martinfowler.com/eaaDev/">Martin Fowler: Development of Further Patterns of Enterprise Application Architecture</a></li>
      <li><a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html">Clean Coder Blog: The Clean Architecture</a></li>
      <li><a href="https://jeffreypalermo.com/2008/07/the-onion-architecture-part-1/">The Onion Architecture : part 1 | Programming with Palermo</a></li>
      <li><a href="https://guides.hanamirb.org/architecture/interactors/">Architecture: Interactors | Hanami Guides</a></li>
      <li><a href="https://qiita.com/yuku_t/items/961194a5443b618a4cac">中規模Web開発のためのMVC分割とレイヤアーキテクチャ - Qiita</a></li>
    </ul>
  </li>
  <li>Rails公式ドキュメント
    <ul>
      <li><a href="https://guides.rubyonrails.org/association_basics.html">Active Record Associations — Ruby on Rails Guides</a></li>
      <li><a href="https://guides.rubyonrails.org/active_model_basics.html">Active Model Basics — Ruby on Rails Guides</a></li>
      <li><a href="https://api.rubyonrails.org/classes/ActiveRecord/NestedAttributes/ClassMethods.html">accepts_nested_attributes_for</a></li>
      <li><a href="https://api.rubyonrails.org/classes/ActiveRecord/Inheritance.html">ActiveRecord::Inheritance</a></li>
      <li><a href="https://api.rubyonrails.org/v6.0.2.1/classes/ActiveSupport/Concern.html">ActiveSupport::Concern</a></li>
    </ul>
  </li>
  <li>Form Model (Form Object)について
    <ul>
      <li><a href="https://tech.libinc.co.jp/entry/2019/04/05/113000">Railsで複数モデルを扱うフォームをすっきり書く（Formオブジェクト） - LiBz Tech Blog</a></li>
      <li><a href="https://moneyforward.com/engineers_blog/2018/12/15/formobject/">accepts_nested_attributes_forを使わず、複数の子レコードを保存する | Money Forward Engineers’ Blog</a></li>
      <li><a href="https://discourse.clean-rails.org/t/model-form-1-1/14">Model と画面上の form が1対1で一致しない場合、どのように実装するのが綺麗なのか？ - clean-rails.org</a></li>
    </ul>
  </li>
  <li>Service Class (Service Object) について
    <ul>
      <li><a href="https://techracho.bpsinc.jp/hachi8833/2017_10_16/46482">Railsで重要なパターンpart 1: Service Object（翻訳）｜TechRacho（テックラッチョ）〜エンジニアの「？」を「！」に〜｜BPS株式会社</a></li>
      <li><a href="https://qiita.com/joker1007/items/2a03500017766bdb0234">てめえらのRailsはオブジェクト指向じゃねえ！まずはCallbackクラス、Validatorクラスを活用しろ！ - Qiita</a></li>
      <li><a href="https://intersect.whitefusion.io/the-art-of-code/why-service-objects-are-an-anti-pattern">Why Service Objects are an Anti-Pattern — INTERSECT</a></li>
      <li><a href="https://techracho.bpsinc.jp/hachi8833/2018_04_16/55130">Service Objectがアンチパターンである理由とよりよい代替手段（翻訳）｜TechRacho（テックラッチョ）〜エンジニアの「？」を「！」に〜｜BPS株式会社</a></li>
    </ul>
  </li>
  <li><a href="https://speakerdeck.com/willnet/concerns-about-concerns">Concerns about Concerns - Speaker Deck</a></li>
  <li><a href="https://tech.kitchhike.com/entry/2018/02/28/221159">Decorator と Presenter を使い分けて、 Rails を ViewModel ですっきりさせよう - KitchHike Tech Blog</a></li>
  <li><a href="https://qiita.com/hanachin_/items/ba1dd93905567d88145c">ActiveRecordのモデルが1つだとつらい - Qiita</a></li>
</ul>

<h2 id="後編質問感想編">後編（質問・感想編）</h2>

<p>別記事にまとめました。</p>

<p><a href="/how-to-deal-with-fat-model-after">銀座Rails#21で「Fat Modelの倒し方」を発表しました 〜質問・感想編〜</a></p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><a href="http://weblog.jamisbuck.org/2006/10/18/skinny-controller-fat-model">Buckblog: Skinny Controller, Fat Model</a> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:a" role="doc-endnote">
      <p><a href="https://speakerdeck.com/hshimoyama/rails-with-applicationmodel">ApplicationModel のある風景 - Speaker Deck</a> <a href="#fnref:a" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:b" role="doc-endnote">
      <p><a href="https://speakerdeck.com/yasaichi/what-is-ruby-on-rails-and-how-to-deal-with-it">Ruby on Railsの正体と向き合い方 - Speaker Deck</a> <a href="#fnref:b" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:c" role="doc-endnote">
      <p><a href="https://leanpub.com/growing-rails">Growing Rails Applications in Practice</a> <a href="#fnref:c" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:6" role="doc-endnote">
      <p><a href="https://twitter.com/dhh/status/964244090224128001">https://twitter.com/dhh/status/964244090224128001</a> <a href="#fnref:6" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:5" role="doc-endnote">
      <p>PoEAA: <a href="https://www.martinfowler.com/eaaCatalog/singleTableInheritance.html">Single Table Inheritance</a> <a href="#fnref:5" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:7" role="doc-endnote">
      <p><a href="https://github.com/rails/rails/pull/26976#discussion_r87855694">https://github.com/rails/rails/pull/26976#discussion_r87855694</a> <a href="#fnref:7" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:8" role="doc-endnote">
      <p>参考: <a href="https://amzn.to/3cekmi3">『Rubyによるデザインパターン』</a> 第11章 オブジェクトを改良する：Decorator <a href="#fnref:8" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:10" role="doc-endnote">
      <p>Ruby/Rails公式の提供する機能はgemより貧弱だったりするのであしからず <a href="#fnref:10" class="reversefootnote" role="doc-backlink">&#8617;</a> <a href="#fnref:10:1" class="reversefootnote" role="doc-backlink">&#8617;<sup>2</sup></a></p>
    </li>
  </ol>
</div>]]></content><author><name>Toshimaru</name></author><category term="presentation" /><category term="rails" /><category term="activerecord" /><summary type="html"><![CDATA[銀座Rails#21で「Fat Modelの倒し方」と題して発表してきた。　肥大化したRailsアプリケーション（Fat Rails Application）において最も辛いレイヤーはどこでしょうか？ 僕はFat Modelだと考えています。 Fat Modelを倒すためのアプローチを 1. Rails Way 2. Sub-Rails Way 3. Non-Rails Way の３つに分けて整理します。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/ginzarails-21/og.jpg" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/ginzarails-21/og.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">[Ruby]日時が特定日時の範囲内にあるかのチェック</title><link href="https://blog.toshimaru.net/datetime-range-check/" rel="alternate" type="text/html" title="[Ruby]日時が特定日時の範囲内にあるかのチェック" /><published>2020-05-17T00:00:00+09:00</published><updated>2020-05-17T00:00:00+09:00</updated><id>https://blog.toshimaru.net/datetime-range-check</id><content type="html" xml:base="https://blog.toshimaru.net/datetime-range-check/"><![CDATA[<h1 id="timewithzonebetween-で範囲内判定">TimeWithZone#between? で範囲内判定</h1>

<p>特定日付が範囲内にあるかの判定を行うには <a href="https://railsdoc.github.io/classes/ActiveSupport/TimeWithZone.html#method-i-between-3F">ActiveSupport::TimeWithZone#between?</a> が使える。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 日時.between?(始端, 終端)</span>
<span class="no">Time</span><span class="p">.</span><span class="nf">now</span><span class="p">.</span><span class="nf">between?</span><span class="p">(</span><span class="no">Date</span><span class="p">.</span><span class="nf">yesterday</span><span class="p">,</span> <span class="no">Date</span><span class="p">.</span><span class="nf">tomorrow</span><span class="p">)</span>
</code></pre></div></div>

<p>実際に範囲内チェックを行うとこんな感じ。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="no">Time</span><span class="p">.</span><span class="nf">now</span><span class="p">.</span><span class="nf">between?</span><span class="p">(</span><span class="no">Date</span><span class="p">.</span><span class="nf">yesterday</span><span class="p">,</span> <span class="no">Date</span><span class="p">.</span><span class="nf">tomorrow</span><span class="p">)</span>
<span class="o">=&gt;</span> <span class="kp">true</span>

<span class="o">&gt;</span> <span class="no">Time</span><span class="p">.</span><span class="nf">now</span><span class="p">.</span><span class="nf">between?</span><span class="p">(</span><span class="mi">1</span><span class="p">.</span><span class="nf">week</span><span class="p">.</span><span class="nf">ago</span><span class="p">,</span> <span class="no">Date</span><span class="p">.</span><span class="nf">yesterday</span><span class="p">)</span>
<span class="o">=&gt;</span> <span class="kp">false</span>

<span class="o">&gt;</span> <span class="no">Time</span><span class="p">.</span><span class="nf">now</span><span class="p">.</span><span class="nf">between?</span><span class="p">(</span><span class="no">Date</span><span class="p">.</span><span class="nf">tomorrow</span><span class="p">,</span> <span class="mi">1</span><span class="p">.</span><span class="nf">week</span><span class="p">.</span><span class="nf">since</span><span class="p">)</span>
<span class="o">=&gt;</span> <span class="kp">false</span>
</code></pre></div></div>

<p>ただ上記の書き方の場合、始端もしくは終端が <code class="language-plaintext highlighter-rouge">nil</code> の場合にエラーが出てしまう。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Date</span><span class="p">.</span><span class="nf">today</span><span class="p">.</span><span class="nf">between?</span><span class="p">(</span><span class="no">Date</span><span class="p">.</span><span class="nf">yesterday</span><span class="p">,</span> <span class="kp">nil</span><span class="p">)</span>
<span class="no">ArgumentError</span><span class="p">:</span> <span class="n">comparison</span> <span class="n">of</span> <span class="no">Date</span> <span class="n">with</span> <span class="kp">nil</span> <span class="n">failed</span>
<span class="n">from</span> <span class="p">(</span><span class="n">pry</span><span class="p">):</span><span class="mi">9</span><span class="ss">:in</span> <span class="sb">`between?`</span>
</code></pre></div></div>

<h2 id="rangecover-で範囲内判定">Range#cover? で範囲内判定</h2>

<p>上述の問題が回避するには、Rubyの <a href="https://docs.ruby-lang.org/ja/2.7.0/method/Range/i/cover=3f.html">Range#cover?</a> が使える。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># (始端..終端).cover? 日時</span>
<span class="o">&gt;</span> <span class="p">(</span><span class="no">Date</span><span class="p">.</span><span class="nf">yesterday</span><span class="o">..</span><span class="no">Date</span><span class="p">.</span><span class="nf">tomorrow</span><span class="p">).</span><span class="nf">cover?</span> <span class="no">Time</span><span class="p">.</span><span class="nf">now</span>
<span class="o">=&gt;</span> <span class="kp">true</span>
</code></pre></div></div>

<h3 id="始端終端が-nil-の場合">始端/終端が nil の場合</h3>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 始端がnil</span>
<span class="o">&gt;</span> <span class="p">(</span><span class="kp">nil</span><span class="o">..</span><span class="no">Date</span><span class="p">.</span><span class="nf">tomorrow</span><span class="p">).</span><span class="nf">cover?</span> <span class="no">Time</span><span class="p">.</span><span class="nf">now</span>
<span class="o">=&gt;</span> <span class="kp">true</span>

<span class="c1"># 終端がnil</span>
<span class="o">&gt;</span> <span class="p">(</span><span class="no">Date</span><span class="p">.</span><span class="nf">yesterday</span><span class="o">..</span><span class="kp">nil</span><span class="p">).</span><span class="nf">cover?</span> <span class="no">Time</span><span class="p">.</span><span class="nf">now</span>
<span class="o">=&gt;</span> <span class="kp">true</span>
</code></pre></div></div>

<p>下記の通り範囲内から外れた場合は <code class="language-plaintext highlighter-rouge">false</code> が帰ってくる。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="p">(</span><span class="kp">nil</span><span class="o">..</span><span class="no">Date</span><span class="p">.</span><span class="nf">yesterday</span><span class="p">).</span><span class="nf">cover?</span> <span class="no">Time</span><span class="p">.</span><span class="nf">now</span>
<span class="o">=&gt;</span> <span class="kp">false</span>
<span class="o">&gt;</span> <span class="p">(</span><span class="no">Date</span><span class="p">.</span><span class="nf">tomorrow</span><span class="o">..</span><span class="kp">nil</span><span class="p">).</span><span class="nf">cover?</span> <span class="no">Time</span><span class="p">.</span><span class="nf">now</span>
<span class="o">=&gt;</span> <span class="kp">false</span>
</code></pre></div></div>]]></content><author><name>Toshimaru</name></author><category term="ruby" /><category term="rails" /><summary type="html"><![CDATA[特定日付が範囲内にあるかの判定を行うには ActiveSupport::TimeWithZone#between? が使える。ただ上記の書き方の場合、始端もしくは終端が nil の場合にエラーが出てしまう。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/ruby-range.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/ruby-range.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">docker-compose で Rails6 + MySQL な環境を構築する</title><link href="https://blog.toshimaru.net/rails-on-docker-compose/" rel="alternate" type="text/html" title="docker-compose で Rails6 + MySQL な環境を構築する" /><published>2019-12-31T00:00:00+09:00</published><updated>2020-01-02T00:00:00+09:00</updated><id>https://blog.toshimaru.net/rails-on-docker-compose</id><content type="html" xml:base="https://blog.toshimaru.net/rails-on-docker-compose/"><![CDATA[<p>docker-compose を使って Ruby 2.7 + Rails 6.0 + MySQL 8.0 の環境を構築してみたいと思います。</p>

<h2 id="ゴール">ゴール</h2>

<p>ゴールはRailsのデフォルトホーム画面を表示させるところまでです。</p>

<h2 id="手順">手順</h2>

<p>下記の手順をベースに進めていきます‥</p>

<p><a href="https://docs.docker.com/compose/rails/">Quickstart: Compose and Rails | Docker Documentation</a></p>

<h3 id="dockerfile">Dockerfile</h3>

<p>適当なディレクトリを用意して、<code class="language-plaintext highlighter-rouge">Dockerfile</code>を下記の通り用意します。</p>

<div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">FROM</span><span class="s"> ruby:2.7</span>
<span class="k">RUN </span>apt-get update <span class="nt">-qq</span> <span class="o">&amp;&amp;</span> apt-get <span class="nb">install</span> <span class="nt">-y</span> nodejs yarnpkg
<span class="k">RUN </span><span class="nb">ln</span> <span class="nt">-s</span> /usr/bin/yarnpkg /usr/bin/yarn
<span class="k">RUN </span><span class="nb">mkdir</span> /app
<span class="k">WORKDIR</span><span class="s"> /app</span>
<span class="k">COPY</span><span class="s"> Gemfile /app/Gemfile</span>
<span class="k">COPY</span><span class="s"> Gemfile.lock /app/Gemfile.lock</span>
<span class="k">RUN </span>bundle <span class="nb">install</span>
<span class="k">COPY</span><span class="s"> . /app</span>

<span class="c"># Add a script to be executed every time the container starts.</span>
<span class="k">COPY</span><span class="s"> entrypoint.sh /usr/bin/</span>
<span class="k">RUN </span><span class="nb">chmod</span> +x /usr/bin/entrypoint.sh
<span class="k">ENTRYPOINT</span><span class="s"> ["entrypoint.sh"]</span>
<span class="k">EXPOSE</span><span class="s"> 3000</span>

<span class="c"># Start the main process.</span>
<span class="k">CMD</span><span class="s"> ["rails", "server", "-b", "0.0.0.0"]</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">yarnpkg</code>でyarnを入れると、yarn という実行ファイルではなく <code class="language-plaintext highlighter-rouge">yarnpkg</code> という実行ファイルになってしまうので、シンボリックリンクを作成している点に留意。</li>
</ul>

<h3 id="初期gemfile">初期Gemfile</h3>

<p>下記の通り<code class="language-plaintext highlighter-rouge">Gemfile</code>と<code class="language-plaintext highlighter-rouge">Gemfile.lock</code>を用意します。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">source</span> <span class="s1">'https://rubygems.org'</span>
<span class="n">gem</span> <span class="s1">'rails'</span><span class="p">,</span> <span class="s1">'~&gt;6'</span>
</code></pre></div></div>

<ul>
  <li>今回は Rails v6 （現時点の最新バージョン）を使います</li>
</ul>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">touch </span>Gemfile.lock
</code></pre></div></div>

<ul>
  <li>現段階では <code class="language-plaintext highlighter-rouge">Gemfile.lock</code> は空でOK</li>
</ul>

<h3 id="entrypointsh">entrypoint.sh</h3>

<p><code class="language-plaintext highlighter-rouge">Dockerfile</code>で<code class="language-plaintext highlighter-rouge">ENTRYPOINT</code>として定義している <code class="language-plaintext highlighter-rouge">entrypoint.sh</code> です。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="nb">set</span> <span class="nt">-e</span>

<span class="c"># Remove a potentially pre-existing server.pid for Rails.</span>
<span class="nb">rm</span> <span class="nt">-f</span> /app/tmp/pids/server.pid

<span class="c"># Then exec the container's main process (what's set as CMD in the Dockerfile).</span>
<span class="nb">exec</span> <span class="s2">"</span><span class="nv">$@</span><span class="s2">"</span>
</code></pre></div></div>

<h3 id="docker-composeyml">docker-compose.yml</h3>

<p><code class="language-plaintext highlighter-rouge">docker-compose.yml</code>を下記の通り用意します。</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">3'</span>
<span class="na">services</span><span class="pi">:</span>
  <span class="na">db</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">mysql:8.0</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">./tmp/db:/var/lib/mysql</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">MYSQL_ALLOW_EMPTY_PASSWORD=1</span>
  <span class="na">web</span><span class="pi">:</span>
    <span class="na">build</span><span class="pi">:</span> <span class="s">.</span>
    <span class="na">command</span><span class="pi">:</span> <span class="s">bash -c "rm -f tmp/pids/server.pid &amp;&amp; bundle exec rails s -p 3000 -b '0.0.0.0'"</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">.:/app</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">3000:3000"</span>
    <span class="na">depends_on</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">db</span>
</code></pre></div></div>

<ul>
  <li>MySQL は 8.0 （現時点の最新バージョン）を使用</li>
  <li><code class="language-plaintext highlighter-rouge">MYSQL_ALLOW_EMPTY_PASSWORD</code> を設定することで <code class="language-plaintext highlighter-rouge">password</code> が空でもrootで接続できるようにしておく</li>
</ul>

<h3 id="rails-new">rails new</h3>

<p><code class="language-plaintext highlighter-rouge">rails new</code> のコマンドをwebコンテナ上で実行してRailsのファイル群を生成します。</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>docker-compose run web bundle <span class="nb">exec </span>rails new <span class="nb">.</span> <span class="nt">--force</span> <span class="nt">--database</span><span class="o">=</span>mysql
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">--force</code> で既存ファイルを上書き</li>
  <li>DBはmysqlを指定</li>
</ul>

<p>Railsのファイル群が <code class="language-plaintext highlighter-rouge">rails new</code> コマンドによって出来上がったので build します。</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>docker-compose build
</code></pre></div></div>

<h3 id="dbホスト名変更">DBホスト名変更</h3>

<p>このままではDBに接続できません。なぜならば host 名を変更する必要があるからです。</p>

<p>下記の通り <code class="language-plaintext highlighter-rouge">config/database.yml</code> のhostの部分を <code class="language-plaintext highlighter-rouge">db</code> に置き換えましょう。</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">default</span><span class="pi">:</span> <span class="nl">&amp;default</span>
  <span class="na">adapter</span><span class="pi">:</span> <span class="s">mysql2</span>
  <span class="na">encoding</span><span class="pi">:</span> <span class="s">utf8mb4</span>
  <span class="na">pool</span><span class="pi">:</span> <span class="s">&lt;%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %&gt;</span>
  <span class="na">username</span><span class="pi">:</span> <span class="s">root</span>
  <span class="na">password</span><span class="pi">:</span>
  <span class="na">host</span><span class="pi">:</span> <span class="s">db</span>
<span class="na">development</span><span class="pi">:</span>
  <span class="na">&lt;&lt;</span><span class="pi">:</span> <span class="nv">*default</span>
  <span class="na">database</span><span class="pi">:</span> <span class="s">app_development</span>
<span class="na">test</span><span class="pi">:</span>
  <span class="na">&lt;&lt;</span><span class="pi">:</span> <span class="nv">*default</span>
  <span class="na">database</span><span class="pi">:</span> <span class="s">app_test</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">host</code> に <code class="language-plaintext highlighter-rouge">db</code> を設定
    <ul>
      <li><code class="language-plaintext highlighter-rouge">db</code> はコンテナ名になります</li>
    </ul>
  </li>
</ul>

<p>build後に docker-compose up します。</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>docker-compose up
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">localhost:3000</code> でRailsが立ち上がるのでアクセスしてみましょう。</p>

<h2 id="error-caching_sha2_password-could-not-be-loaded">Error: caching_sha2_password could not be loaded</h2>

<p>しかしここでRailsに接続すると、下記のようなエラーが発生します。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ActiveRecord::NoDatabaseError

Plugin caching_sha2_password could not be loaded: /usr//usr/lib/x86_64-linux-gnu/mariadb19/plugin/caching_sha2_password.so: cannot open shared object file: No such file or directory
</code></pre></div></div>

<p>これはwebコンテナが mysql 8.0 の<code class="language-plaintext highlighter-rouge">caching_sha2_password</code>認証方式に対応していないためです。</p>

<p>下記の手順で <code class="language-plaintext highlighter-rouge">caching_sha2_password</code> を <code class="language-plaintext highlighter-rouge">mysql_native_password</code>（旧来の認証方式）に変更しましょう。</p>

<h3 id="dbコンテナでmysqlクライアント起動">DBコンテナでmysqlクライアント起動</h3>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>docker-compose <span class="nb">exec </span>db bash
</code></pre></div></div>

<p>dbコンテナのbashを起動後にmysqlコマンドで接続します。</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">#</span><span class="w"> </span>mysql <span class="nt">-u</span> root
<span class="gp">Welcome to the MySQL monitor.  Commands end with ;</span><span class="w"> </span>or <span class="se">\g</span><span class="nb">.</span>
<span class="go">Your MySQL connection id is 9
Server version: 8.0.18 MySQL Community Server - GPL

</span><span class="c">...
</span></code></pre></div></div>

<h3 id="認証方式変更sql">認証方式変更SQL</h3>

<p>下記のクエリでユーザー一覧とその認証方式が閲覧できます。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mysql&gt; select User,Host,plugin from mysql.user;
+------------------+-----------+-----------------------+
| User             | Host      | plugin                |
+------------------+-----------+-----------------------+
| root             | %         | caching_sha2_password |
| mysql.infoschema | localhost | caching_sha2_password |
| mysql.session    | localhost | caching_sha2_password |
| mysql.sys        | localhost | caching_sha2_password |
| root             | localhost | caching_sha2_password |
+------------------+-----------+-----------------------+
5 rows in set (0.00 sec)
</code></pre></div></div>

<p>全て <code class="language-plaintext highlighter-rouge">caching_sha2_password</code> に設定されています。これを<code class="language-plaintext highlighter-rouge">mysql_native_password</code>に変更します。</p>

<p>今回対象となる <code class="language-plaintext highlighter-rouge">root@%</code> のユーザー設定を <code class="language-plaintext highlighter-rouge">ALTER USER</code> を使って変更しましょう。</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">ALTER</span> <span class="k">USER</span> <span class="s1">'root'</span><span class="o">@</span><span class="s1">'%'</span> <span class="n">IDENTIFIED</span> <span class="k">WITH</span> <span class="n">mysql_native_password</span> <span class="k">BY</span> <span class="s1">''</span><span class="p">;</span>
<span class="c1">-- Query OK, 0 rows affected (0.02 sec)</span>
</code></pre></div></div>

<p>変更されました。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mysql&gt; select User,Host,plugin from mysql.user;
+------------------+-----------+-----------------------+
| User             | Host      | plugin                |
+------------------+-----------+-----------------------+
| root             | %         | mysql_native_password |
| mysql.infoschema | localhost | caching_sha2_password |
| mysql.session    | localhost | caching_sha2_password |
| mysql.sys        | localhost | caching_sha2_password |
| root             | localhost | caching_sha2_password |
+------------------+-----------+-----------------------+
5 rows in set (0.00 sec)
</code></pre></div></div>

<h2 id="yay-youre-on-rails">“Yay! You’re on Rails!”</h2>

<p>DBが作成されていないよ、というメッセージが出るので <code class="language-plaintext highlighter-rouge">db:prepare</code> でテーブルを作成します。</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>docker-compose <span class="nb">exec </span>web bundle <span class="nb">exec </span>rails db:prepare
</code></pre></div></div>

<p>これでRailsのホーム画面が表示されるようになります。</p>

<p><img src="/images/posts/docker/railshome.png" alt="rails home" /></p>

<h2 id="参考">参考</h2>

<ul>
  <li>過去に同じことをやったときのエントリ: <a href="docker-compose-rails/">docker-compose で Rails 環境を構築する</a></li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="docker" /><category term="mysql" /><category term="rails" /><summary type="html"><![CDATA[docker-compose を使って Ruby 2.7 + Rails 6.0 + MySQL 8.0 の環境を構築してみたいと思います。ゴールはRailsのデフォルトホーム画面を表示させるところまでです。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/docker/yaml.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/docker/yaml.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">ActiveRecordでhas_oneを持ったモデルをスキップして関連を定義する方法</title><link href="https://blog.toshimaru.net/belongs-to-foreign-key-and-primary-key/" rel="alternate" type="text/html" title="ActiveRecordでhas_oneを持ったモデルをスキップして関連を定義する方法" /><published>2019-11-10T00:00:00+09:00</published><updated>2021-05-31T00:00:00+09:00</updated><id>https://blog.toshimaru.net/belongs-to-foreign-key-and-primary-key</id><content type="html" xml:base="https://blog.toshimaru.net/belongs-to-foreign-key-and-primary-key/"><![CDATA[<h2 id="テーブル構成">テーブル構成</h2>

<p>とあるRailsアプリケーションでこんなテーブル構成があったとします。</p>

<p><img src="/images/posts/belongs-to-foreign-key-and-primary-key/users-posts.png" alt="table relation" /></p>

<h2 id="railsモデル定義">Railsモデル定義</h2>

<p>Railsモデルは下記のような状態です。</p>

<ul>
  <li>ユーザー（<code class="language-plaintext highlighter-rouge">User</code>）は複数の記事（<code class="language-plaintext highlighter-rouge">Post</code>）データをもっている</li>
  <li>ユーザー（<code class="language-plaintext highlighter-rouge">User</code>）は１つのプロフィール（<code class="language-plaintext highlighter-rouge">Profile</code>）データをもっている</li>
</ul>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
  <span class="n">has_many</span> <span class="ss">:posts</span>
  <span class="n">has_one</span> <span class="ss">:profile</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Post</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
  <span class="n">belongs_to</span> <span class="ss">:user</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Profile</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
  <span class="n">belongs_to</span> <span class="ss">:user</span>
<span class="k">end</span>
</code></pre></div></div>

<p>モデルの生成コマンド（rails generate コマンド）は下記の通りです。</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>rails g model User
<span class="gp">$</span><span class="w"> </span>rails g model Post user:references
<span class="gp">$</span><span class="w"> </span>rails g model Profile user:references
</code></pre></div></div>

<h2 id="has_oneをもったモデルをスキップする">has_oneをもったモデルをスキップする</h2>

<p>やりたいこととしてはこのモデル構成の中心にいる <code class="language-plaintext highlighter-rouge">User</code> の関連をスキップして <code class="language-plaintext highlighter-rouge">Post</code> と <code class="language-plaintext highlighter-rouge">Profile</code> を直接関連付けてやることです。つまり <strong>User has_one Profile</strong>, <strong>User has_many Posts</strong> の関係を、<strong>Profile has_many Posts</strong> の関係にしちゃおう、ということです。</p>

<p>テーブル定義で表現すると下図の赤線の部分が今回やりたい関連の定義です。</p>

<p><img src="/images/posts/belongs-to-foreign-key-and-primary-key/users-posts2.png" alt="model relation 2" /></p>

<h3 id="モデル定義">モデル定義</h3>

<p>上記のやりたいことはアソシエーションの定義において、<code class="language-plaintext highlighter-rouge">foreign_key</code>, <code class="language-plaintext highlighter-rouge">primary_key</code> などのオプションを駆使して実現可能です。</p>

<p>下記がそのアソシエーション定義の完成形となります。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
  <span class="n">has_many</span> <span class="ss">:posts</span>
  <span class="n">has_one</span> <span class="ss">:profile</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Post</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
  <span class="n">belongs_to</span> <span class="ss">:user</span>
  <span class="n">belongs_to</span> <span class="ss">:profile</span><span class="p">,</span> <span class="ss">foreign_key: :user_id</span><span class="p">,</span> <span class="ss">primary_key: :user_id</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Profile</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
  <span class="n">belongs_to</span> <span class="ss">:user</span>
  <span class="n">has_many</span> <span class="ss">:posts</span><span class="p">,</span> <span class="ss">foreign_key: :user_id</span><span class="p">,</span> <span class="ss">primary_key: :user_id</span>
<span class="k">end</span>
</code></pre></div></div>

<p>この定義により <code class="language-plaintext highlighter-rouge">Post</code> → <code class="language-plaintext highlighter-rouge">Profile</code>, <code class="language-plaintext highlighter-rouge">Profile</code> → <code class="language-plaintext highlighter-rouge">Post</code> の双方向の関連付けが定義することができました。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="no">Post</span><span class="p">.</span><span class="nf">first</span><span class="p">.</span><span class="nf">profile</span>
<span class="c1">#  Post Load (1.2ms)  SELECT  `posts`.* FROM `posts` ORDER BY `posts`.`id` ASC LIMIT 1</span>
<span class="c1">#  Profile Load (3.9ms)  SELECT  `profiles`.* FROM `profiles` WHERE `profiles`.`user_id` = 1 LIMIT 1</span>
<span class="o">=&gt;</span> <span class="c1">#&lt;Profile id: 1, user_id: 1, ..."&gt;</span>
<span class="o">&gt;</span> <span class="no">Profile</span><span class="p">.</span><span class="nf">first</span><span class="p">.</span><span class="nf">posts</span>
<span class="c1">#  Profile Load (0.8ms)  SELECT  `profiles`.* FROM `profiles` ORDER BY `profiles`.`id` ASC LIMIT 1</span>
<span class="c1">#  Post Load (0.4ms)  SELECT  `posts`.* FROM `posts` WHERE `posts`.`user_id` = 1 LIMIT 11</span>
<span class="o">=&gt;</span> <span class="c1">#&lt;ActiveRecord::Associations::CollectionProxy [#&lt;Post id: 1, user_id: 1, ..."&gt;, #&lt;Post id: 2, user_id: 1, ...]&gt;</span>
</code></pre></div></div>

<p>上結果の通り、<code class="language-plaintext highlighter-rouge">User Load</code>を通すことなくお互いを呼び出すことができていることが確認できました。</p>

<h2 id="inverse_of-を設定する">inverse_of を設定する</h2>

<p>上記のコードでやりたいことが実現できましたが、まだ１つだけ問題があります。それは <code class="language-plaintext highlighter-rouge">foreign_key</code> オプションを使っているために、双方向の関連付けが不完全に設定されていることです。</p>

<blockquote>
  <p>Active Recordでは標準的な名前同士の関連付けのほとんどをサポートしていて、自動的に認識できます。ただし、Active Recordでスコープや次のオプションを使った場合、双方向の関連付けは自動的に認識されません。</p>

  <ul>
    <li><code class="language-plaintext highlighter-rouge">:through</code></li>
    <li><code class="language-plaintext highlighter-rouge">:foreign_key</code></li>
  </ul>
</blockquote>

<p>via. <a href="https://railsguides.jp/association_basics.html#%E5%8F%8C%E6%96%B9%E5%90%91%E9%96%A2%E9%80%A3%E4%BB%98%E3%81%91">Active Record の関連付け - Rails ガイド</a></p>

<p>実際に試してみましょう。すると下記の通り、同じidを持ったインスタンスにもかかわらず違うオブジェクトとして生成されていることがわかります。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="n">profile1</span> <span class="o">=</span> <span class="no">Profile</span><span class="p">.</span><span class="nf">first</span>
<span class="o">=&gt;</span> <span class="c1">#&lt;Profile id: 1, user_id: 1, ..."&gt;</span>
<span class="o">&gt;</span> <span class="n">profile2</span> <span class="o">=</span> <span class="n">profile1</span><span class="p">.</span><span class="nf">posts</span><span class="p">.</span><span class="nf">first</span><span class="p">.</span><span class="nf">profile</span>
<span class="o">=&gt;</span> <span class="c1">#&lt;Profile id: 1, user_id: 1, ..."&gt;</span>
<span class="o">&gt;</span> <span class="n">profile1</span><span class="p">.</span><span class="nf">equal?</span> <span class="n">profile2</span>
<span class="o">=&gt;</span> <span class="kp">false</span>
</code></pre></div></div>

<h3 id="モデル定義inverse_of-version">モデル定義（inverse_of version）</h3>

<p>これを解決するために <code class="language-plaintext highlighter-rouge">inverse_of</code> を設定します。上述のコードを下記のように変更します。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
  <span class="n">has_many</span> <span class="ss">:posts</span>
  <span class="n">has_one</span> <span class="ss">:profile</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Post</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
  <span class="n">belongs_to</span> <span class="ss">:user</span>
  <span class="n">belongs_to</span> <span class="ss">:profile</span><span class="p">,</span> <span class="ss">foreign_key: :user_id</span><span class="p">,</span> <span class="ss">primary_key: :user_id</span><span class="p">,</span> <span class="ss">inverse_of: :posts</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Profile</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
  <span class="n">belongs_to</span> <span class="ss">:user</span>
  <span class="n">has_many</span> <span class="ss">:posts</span><span class="p">,</span> <span class="ss">foreign_key: :user_id</span><span class="p">,</span> <span class="ss">primary_key: :user_id</span><span class="p">,</span> <span class="ss">inverse_of: :profile</span>
<span class="k">end</span>
</code></pre></div></div>

<p>これで下記コードは同じオブジェクトとなり、<code class="language-plaintext highlighter-rouge">true</code>を返すようになります。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="n">profile1</span> <span class="o">=</span> <span class="no">Profile</span><span class="p">.</span><span class="nf">first</span>
<span class="o">&gt;</span> <span class="n">profile2</span> <span class="o">=</span> <span class="n">profile1</span><span class="p">.</span><span class="nf">posts</span><span class="p">.</span><span class="nf">first</span><span class="p">.</span><span class="nf">profile</span>
<span class="o">&gt;</span> <span class="n">profile1</span><span class="p">.</span><span class="nf">equal?</span> <span class="n">profile2</span>
<span class="o">=&gt;</span> <span class="kp">true</span>
</code></pre></div></div>

<h2 id="過去に書いた関連記事">過去に書いた関連記事</h2>

<ul>
  <li><a href="/belongs_to-through/">ActiveRecordでhas_many, throughとは逆の関連を定義する</a></li>
</ul>

<h2 id="参考">参考</h2>

<ul>
  <li><a href="https://railsdoc.github.io/classes/ActiveRecord/Associations/ClassMethods.html#method-i-belongs_to">ActiveRecord::Associations::ClassMethods - belongs_to | RailsDoc(β)</a></li>
  <li><a href="https://railsdoc.github.io/classes/ActiveRecord/Associations/ClassMethods.html#method-i-has_many">ActiveRecord::Associations::ClassMethods - has_many | RailsDoc(β)</a></li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="activerecord" /><category term="rails" /><summary type="html"><![CDATA[Railsモデルは下記のような状態です。 ユーザー（User）は複数の記事（Post）データをもっている ユーザー（User）は１つのプロフィール（Profile）データをもっている　やりたいこととしてはこのモデル構成の中心にいる User の関連をスキップして Post と Profile を直接関連付けてやることです。つまり User has_one Profile, User has_many Posts の関係を、Profile has_many Posts の関係にしちゃおう、ということです。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/belongs-to-foreign-key-and-primary-key/og.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/belongs-to-foreign-key-and-primary-key/og.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Rails on Docker 環境での SystemSpec 環境構築</title><link href="https://blog.toshimaru.net/rails-on-docker-system-spec/" rel="alternate" type="text/html" title="Rails on Docker 環境での SystemSpec 環境構築" /><published>2019-09-18T00:00:00+09:00</published><updated>2019-09-18T00:00:00+09:00</updated><id>https://blog.toshimaru.net/rails-on-docker-system-spec</id><content type="html" xml:base="https://blog.toshimaru.net/rails-on-docker-system-spec/"><![CDATA[<p>Rails on Docker な環境上に SystemSpec(System Test + RSpec) を導入しました。</p>

<h2 id="環境">環境</h2>

<p>今回SystemSpecを導入したのは下記のような環境です。</p>

<ul>
  <li>プロジェクト: <a href="https://github.com/toshimaru/RailsTwitterClone/">RailsTwitterClone</a></li>
  <li>docker-compose</li>
  <li>Ruby 2.6</li>
  <li>chromium-driver</li>
  <li>gem
    <ul>
      <li>rails (5.2)</li>
      <li>rspec-rails</li>
      <li>selenium-webdriver</li>
      <li>capybara</li>
    </ul>
  </li>
</ul>

<h2 id="対応pull-request">対応Pull Request</h2>

<p><a href="https://github.com/toshimaru/RailsTwitterClone/pull/506/files">Re-try System Spec by toshimaru · Pull Request #506 · toshimaru/RailsTwitterClone</a></p>

<h2 id="私のsystemspec遅すぎ">私のSystemSpec、遅すぎ…？</h2>

<p>実は SystemSpec を導入しようと試みたのは今回で二回目です。一回目は SystemTest が Rails の機能の一つとしてリリースされて間もない頃に試したのですが、テスト全体にかかる時間が劇的に遅くなったため、導入を断念したという経緯があります。</p>

<p>当時のPull Requestがこちら: <a href="https://github.com/toshimaru/RailsTwitterClone/pull/216">Try System Spec by toshimaru · Pull Request #216 · toshimaru/RailsTwitterClone</a></p>

<blockquote>
  <p>Before</p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Finished in 15.74 seconds (files took 7.65 seconds to load)
152 examples, 0 failures
</code></pre></div>  </div>

  <p>After</p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Finished in 58.46 seconds (files took 7.64 seconds to load)
152 examples, 3 failures
</code></pre></div>  </div>
</blockquote>

<p>しかしこれは結果からいうと設定が悪かったのでした。下記のように system テストを Headless Chrome で走るように設定していましたが、これだとすべての System テストが Headless Chrome モードで起動してしまい、結果的に遅くなります。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">RSpec</span><span class="p">.</span><span class="nf">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
  <span class="o">...</span>
  <span class="n">config</span><span class="p">.</span><span class="nf">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">,</span> <span class="ss">type: :system</span><span class="p">)</span> <span class="k">do</span>
    <span class="n">driven_by</span> <span class="ss">:selenium_chrome_headless</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>下記のようにJSを起動させる必要のない System テストは従来通りの<code class="language-plaintext highlighter-rouge">rack_test</code>、<code class="language-plaintext highlighter-rouge">js: true</code>なテストは<code class="language-plaintext highlighter-rouge">selenium_chrome_headless</code>に設定してやればテスト全体が高速に実行可能になりました。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">RSpec</span><span class="p">.</span><span class="nf">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
  <span class="o">...</span>
  <span class="n">config</span><span class="p">.</span><span class="nf">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">,</span> <span class="ss">type: :system</span><span class="p">)</span> <span class="k">do</span>
    <span class="n">driven_by</span> <span class="ss">:rack_test</span>
  <span class="k">end</span>

  <span class="n">config</span><span class="p">.</span><span class="nf">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">,</span> <span class="ss">type: :system</span><span class="p">,</span> <span class="ss">js: </span><span class="kp">true</span><span class="p">)</span> <span class="k">do</span>
    <span class="n">driven_by</span> <span class="ss">:selenium_chrome_headless</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<h2 id="dockerfile">Dockerfile</h2>

<p>今回利用した <code class="language-plaintext highlighter-rouge">Dockerfile</code> は Ruby 2.6 のベースイメージに <code class="language-plaintext highlighter-rouge">chromium-driver</code> をインストールしたコンテナとなります。</p>

<div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">FROM</span><span class="s"> ruby:2.6</span>

<span class="k">RUN </span>apt-get update <span class="nt">-qq</span> <span class="o">&amp;&amp;</span> apt-get <span class="nb">install</span> <span class="nt">-y</span> nodejs chromium-driver 
</code></pre></div></div>

<h3 id="chrome-failed-to-start-exited-abnormally">Chrome failed to start: exited abnormally</h3>

<p>しかし、上述の環境において<code class="language-plaintext highlighter-rouge">rspec</code>を実行すると下記のようなエラーが発生します。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Failure/Error: Unable to infer file and line number from backtrace

  Selenium::WebDriver::Error::UnknownError:
      unknown error: Chrome failed to start: exited abnormally
      (unknown error: DevToolsActivePort file doesn't exist)
      (The process started from chrome location /usr/bin/chromium is no longer running, so ChromeDriver is assuming that Chrome has crashed.)
</code></pre></div></div>

<p>このエラーは Chrome が<code class="language-plaintext highlighter-rouge">sandbox</code>モードで起動していることに起因します。下記のような<code class="language-plaintext highlighter-rouge">no-sandbox</code>オプション付きの Headless Chrome を Capybara に driver として登録してやることで回避します。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Capybara</span><span class="p">.</span><span class="nf">register_driver</span> <span class="ss">:headless_chrome</span> <span class="k">do</span> <span class="o">|</span><span class="n">app</span><span class="o">|</span>
  <span class="n">browser_options</span> <span class="o">=</span> <span class="o">::</span><span class="no">Selenium</span><span class="o">::</span><span class="no">WebDriver</span><span class="o">::</span><span class="no">Chrome</span><span class="o">::</span><span class="no">Options</span><span class="p">.</span><span class="nf">new</span><span class="p">.</span><span class="nf">tap</span> <span class="k">do</span> <span class="o">|</span><span class="n">opts</span><span class="o">|</span>
    <span class="n">opts</span><span class="p">.</span><span class="nf">args</span> <span class="o">&lt;&lt;</span> <span class="s2">"--headless"</span>
    <span class="n">opts</span><span class="p">.</span><span class="nf">args</span> <span class="o">&lt;&lt;</span> <span class="s2">"--disable-gpu"</span>
    <span class="n">opts</span><span class="p">.</span><span class="nf">args</span> <span class="o">&lt;&lt;</span> <span class="s2">"--no-sandbox"</span>
  <span class="k">end</span>
  <span class="no">Capybara</span><span class="o">::</span><span class="no">Selenium</span><span class="o">::</span><span class="no">Driver</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="ss">browser: :chrome</span><span class="p">,</span> <span class="ss">options: </span><span class="n">browser_options</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<p>こうして登録した<code class="language-plaintext highlighter-rouge">headless_chrome</code>をSystemTestに対して適応させてやればOKです。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">RSpec</span><span class="p">.</span><span class="nf">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
  <span class="o">...</span>
  <span class="n">config</span><span class="p">.</span><span class="nf">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">,</span> <span class="ss">type: :system</span><span class="p">,</span> <span class="ss">js: </span><span class="kp">true</span><span class="p">)</span> <span class="k">do</span>
    <span class="n">driven_by</span> <span class="ss">:headless_chrome</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>これできちんとDocker上でSystemSpecが通るようになりました。</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>docker-compose run web rspec
<span class="go">
Randomized with seed 30150
............................................................................................................Capybara starting Puma...
* Version 4.1.1 , codename: Fourth and One
* Min threads: 0, max threads: 4
* Listening on tcp://127.0.0.1:38789
</span><span class="c">...............................................
</span><span class="go">
Finished in 19.87 seconds (files took 8.8 seconds to load)
155 examples, 0 failures
</span></code></pre></div></div>

<h2 id="公式ではno-sandboxをデフォルトにはしてくれない">公式ではno-sandboxをデフォルトにはしてくれない？</h2>

<p>余談ですが、Capybara本体で登録されている<code class="language-plaintext highlighter-rouge">selenium_chrome_headless</code>に<code class="language-plaintext highlighter-rouge">no-sandbox</code>オプションを付与する変更をPRしてみましたが、下記の通りRejectされてしまいました。</p>

<p><a href="https://github.com/teamcapybara/capybara/pull/2241">Add <code class="language-plaintext highlighter-rouge">no-sandbox</code> option for selenium_chrome_headless by toshimaru · Pull Request #2241 · teamcapybara/capybara</a></p>

<h3 id="securityを担保するためのsandbox">Securityを担保するためのsandbox</h3>

<p>sandboxはセキュリティを高めるための環境なので基本的には <strong>デフォルトで no-sandbox にするべきではない</strong> という判断のようです。</p>

<blockquote>
  <p>Sandbox leverages the OS-provided security to allow code execution that cannot make persistent changes to the computer or access information that is confidential.</p>
</blockquote>

<p>via. <a href="https://chromium.googlesource.com/chromium/src/+/master/docs/design/sandbox.md">Sandbox</a></p>

<h2 id="参考">参考</h2>

<ul>
  <li><a href="https://qiita.com/ngron/items/f61b8635b4d67f666d75">Rails + Selenium + DockerでSystemSpecの環境構築 - Qiita</a></li>
  <li><a href="https://news.mynavi.jp/article/20081009-a027/">Google Chrome サンドボックスで実現するセキュリティ、Windowsの機能に依存 | マイナビニュース</a></li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="rspec" /><category term="rails" /><category term="docker" /><summary type="html"><![CDATA[Rails on Docker な環境上に SystemSpec(System Test + RSpec) を導入しました。 環境 今回SystemSpecを導入したのは下記のような環境です。私のSystemSpec、遅すぎ…？ 実は SystemSpec を導入しようと試みたのは今回で二回目です。一回目は SystemTest が Rails の機能の一つとしてリリースされて間もない頃に試したのですが、テスト全体にかかる時間が劇的に遅くなったため、導入を断念したという経緯があります。しかしこれは結果からいうと設定が悪かったのでした。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/systemspec/og.jpg" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/systemspec/og.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">SmartHR社に体験入社してきた</title><link href="https://blog.toshimaru.net/smarthr-job-trial/" rel="alternate" type="text/html" title="SmartHR社に体験入社してきた" /><published>2019-07-22T00:00:00+09:00</published><updated>2019-07-22T00:00:00+09:00</updated><id>https://blog.toshimaru.net/smarthr-job-trial</id><content type="html" xml:base="https://blog.toshimaru.net/smarthr-job-trial/"><![CDATA[<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">体験入社してます <a href="https://t.co/f2Ga5LE5Es">pic.twitter.com/f2Ga5LE5Es</a></p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/1149139455657119744?ref_src=twsrc%5Etfw">July 11, 2019</a></blockquote>

<p>SmartHR社の体験入社に参加してきました。同社の体験入社制度に関しては下記の記事に詳しいです。</p>

<p><a href="https://tech.smarthr.jp/entry/2018/09/20/120000">エンジニア向けの体験入社制度ができました - SmartHR Tech Blog</a></p>

<p>今回は体験入社を１スプリント分の一週間、営業日換算で４日間体験入社させてもらいました。</p>

<h2 id="なぜ参加したか">なぜ参加したか？</h2>

<p>SmartHR社のことは<a href="https://blog.shojimiyata.com/entry/2018/06/01/112424">RubyKaigi</a>や<a href="https://speakerdeck.com/miyasho88/we-are-hiring">会社紹介資料</a>などを通して知っており、傍目から良い会社そうだなぁという印象は持っていました。実際にSmartHRの中の人たちとも面談を通して直接話す中で、SmartHR社での働き方に興味が湧き、今回「体験入社をしてみたい！」という僕の申し出を受け入れてもらったかたちとなります。</p>

<p>僕が特にSmartHR社に関して良いと思った点、興味があった点は下記です。</p>

<ol>
  <li><strong>オープンな社風</strong>
    <ul>
      <li>会社として＜オープンな社風＞が根付いているように見受けられ、良いと思った</li>
      <li>このオープンな社風というトピックに関しては下記のブログに詳しいです
        <ul>
          <li><a href="https://blog.shojimiyata.com/entry/2018/02/15/125904">SmartHR が組織運営で一番大切にしていること - 宮田昇始のブログ</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><strong>スタートアップ企業としてはありえない退職率の低さ</strong>
    <ul>
      <li>僕自身、30人くらいの規模から数百人規模になっていく組織のスケール過程を身をもって体験しましたが、こういうスタートアップ企業は端的に言って＜激動の時代＞となります。その荒波の中にあっては振り落とされる人がいたり、いわゆる音楽性の違いによって退出していく人も多くいるはずですが、SmartHR社の場合はそんなことになっておらず、単純にその雰囲気および組織運営の手法に興味がありました</li>
    </ul>
  </li>
</ol>

<h2 id="なにをやったか">なにをやったか？</h2>

<p>体験入社としてJoinしたチームはSmartHR本体の開発をするチームでした。なので今回はSmartHR本体のいくつかの機能改修やバグ修正をやりました。</p>

<p>初日に行われたスプリント計画に一緒に参加して、Jiraのチケットをいくつかアサインしてもらいました。アサインされたチケットは下記のようなものです。</p>

<ul>
  <li><a href="https://www.e-gov.go.jp/shinsei/">e-Gov電子申請</a>まわりの改修</li>
  <li>小さなバグ修正</li>
  <li>APIの改修</li>
</ul>

<p>また上記とは別に一通りのスクラムセレモニーや全社員を対象に行っている経営会議共有会にも参加させてもらいました。</p>

<h2 id="成果">成果</h2>

<h3 id="一日目">一日目</h3>

<ul>
  <li>開発環境セットアップ</li>
  <li>経営会議共有会参加</li>
  <li>スプリントレビュー、スプリントレトロスペクティブ、スプリント計画に参加</li>
  <li>開発成果: 1 PR</li>
</ul>

<h3 id="二日目">二日目</h3>

<ul>
  <li>負債返済のためのモブプロ会に参加</li>
  <li>開発成果: 2PR</li>
</ul>

<h3 id="三日目">三日目</h3>

<ul>
  <li>バックログリファインメントに参加</li>
  <li>開発成果: 2PR, 1Merge</li>
</ul>

<h3 id="四日目">四日目</h3>

<ul>
  <li>開発成果: 3PR 4Merge</li>
</ul>

<h3 id="総評">総評</h3>

<p>一部未マージなPRを残すことになってしまったものの、当初にアサインされたチケットはすべて着手することができた点は良かったです💪。結果としては、受け入れチームの期待値と同等かそれ以上の成果は残せたようで良かったです😄。</p>

<h2 id="体験入社してみての感想">体験入社してみての感想</h2>

<h3 id="開発編">開発編</h3>

<ul>
  <li>開発環境セットアップはWikiにまとめられておりWiki通りの手順で進めていけばすんなり構築することができた
    <ul>
      <li>Rails以外のバックエンドはDocker化されておりバージョンまわりでハマることも無いようになっていて良かった</li>
    </ul>
  </li>
  <li>教科書通りのスクラムセレモニーを実施しており、きちんとスクラム回してて偉いなぁという印象でした（僕がスクラムマスターっぽい立ち回りするときはけっこうスクラムセレモニーサボっているので…）</li>
  <li>良い意味で粛々とプロダクト開発を進めている印象だった
    <ul>
      <li>いわゆるスタートアップなキラキラ系イケイケWeb開発という感じではなかった（決して悪い意味ではないです）</li>
      <li>一人ひとりがプロダクトに向き合い、オーナーシップをもって開発に取り組んでいる</li>
      <li>大人な人が多くきちんと協調して開発を進めている印象</li>
    </ul>
  </li>
  <li><strong>＜個人＞ではなく、＜チーム＞で課題を解決する姿勢が素晴らしいと思いました</strong>
    <ul>
      <li>例えばデスク（サービスデスク/ヘルプデスク）対応、コードレビューの対応、リリース作業など忙しくて手を付けられそうな人がいれば、手が空いている人が「（私が）やりますよ」と自然に手を挙げて対応をデリゲーションしていっている雰囲気は素晴らしいと感じました
        <ul>
          <li>これをチームで自然にできるようになるのはそう簡単なことではないので、チームとして成熟している証だと感じました</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>僕はもうエンジニアとしてはシニアレベルだしタスクは丸投げでも全然構わなかったけど、きちんと計画の時点で開発方針まである程度あたりをつけて落とし込んでくれたお陰で、とても開発がスムーズに進められました。受け入れメンバーの皆さまには感謝です</li>
  <li>開発の中できちんと技術負債を減らすことにも尽力されていて良いなぁと思いました
    <ul>
      <li>技術負債担当チームがあったり技術負債返済モブプロ（with <a href="https://twitter.com/netwillnet">willnet</a>さん）みたいな取り組みをしていたり</li>
    </ul>
  </li>
  <li>現在の規模でもCTOの芹澤さんがバリバリコード書いている雰囲気があり意外でした</li>
</ul>

<h3 id="開発以外編">開発以外編</h3>

<ul>
  <li>退職率の低さについて
    <ul>
      <li>やはり第一に採用でカルチャーマッチする人のみをきちんと選んで採っている点が大きそうです
        <ul>
          <li>参考: <a href="https://smarthr.co.jp/vision">Mission | 株式会社SmartHR</a></li>
        </ul>
      </li>
      <li>良いところも悪いところもすべてオープンにする姿勢が社員に響いているのではないでしょうか
        <ul>
          <li>経営会議共有会では出せる数値は詳らかに全部出す</li>
          <li>経営会議共有会の最後には代表・宮田さんへのAMA（Ask Me Anything）コーナーみたいなのもあって良かった</li>
          <li>都合の悪いことも含めて情報を隠さない → 現場の不安が変に増幅することもない</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>普段、自分が受け入れチーム側としてオンボーディングを実施することが多かったけど、今回受け入れてもらう側として参加できて新鮮だった</li>
  <li>今回の体験入社で初めてSmartHRを実際に使わせてもらったけど、とても便利でした。一度使うとたぶん紙での提出とか面倒くさくなりますね。
    <ul>
      <li>各社、SmartHRの導入よろしく頼む🙏</li>
    </ul>
  </li>
</ul>

<h2 id="smarthr社にマッチしそうな人について">SmartHR社にマッチしそうな人について</h2>

<p>体験入社してみてSmartHR社にマッチしそうな人、逆にマッチしなそうと感じる人を書いてみます。</p>

<h3 id="マッチしそうな人">マッチしそうな人</h3>

<ul>
  <li>SmartHR というサービスが好きな人</li>
  <li>会社・チーム一丸となってプロダクト作りをしたい人</li>
  <li>Railsでのサービス作りが好きな人</li>
  <li>チームワークが得意、好きな人</li>
  <li>オープンな社風に共感できる人</li>
</ul>

<h3 id="マッチしなそうな人">マッチしなそうな人</h3>

<ul>
  <li>プロダクトよりもエッジな技術をひたすら突き詰めたいという人</li>
  <li>チームワークよりも孤独な作業が好きな人</li>
</ul>

<h3 id="smarthr社への応募はこちらから">SmartHR社への応募はこちらから</h3>

<p>上記の「マッチしそうな人」にピンときた方は応募してみると良いかと思います！</p>

<p><a href="https://smarthr.co.jp/recruit">Recruit | 株式会社SmartHR</a></p>

<p>子会社創業メンバーも募集しているようです。</p>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">そろそろ起業しようかな？と思ってるけど「共同創業者がいない」「ネタがない」というエンジニアさん、SmartHRの子会社の創業メンバーとして一発当てませんか？<br /><br />いま2つの会社があなたを求めてます！お金の心配なく、事業とプロダクトに集中できます。興味ある方ぜひDMください！<br /><br />（続く</p>&mdash; 宮田 昇始 (@miyasho88) <a href="https://twitter.com/miyasho88/status/1151047024613236736?ref_src=twsrc%5Etfw">July 16, 2019</a></blockquote>

<h3 id="smarthrについてもっと知りたい">SmartHRについてもっと知りたい！</h3>

<p><strong>「SmartHRについてもっと知りたい！」</strong>という方はこちらもどうぞ。</p>

<ul>
  <li><a href="https://shanaiho.smarthr.co.jp/">SmartHRオープン社内報</a></li>
  <li><a href="https://tech.smarthr.jp/">SmartHR Tech Blog</a></li>
  <li><a href="https://blog.shojimiyata.com/">宮田昇始のブログ</a></li>
</ul>

<h2 id="最後に">最後に</h2>

<p>他社のスクラム・スプリントを経験するのはなかなかない貴重な機会なので、それを一通り体験できたのはとても良かったです。受け入れていただいたSmartHRさん、ありがとうございました！</p>]]></content><author><name>Toshimaru</name></author><category term="tech" /><category term="rails" /><summary type="html"><![CDATA[SmartHR社の体験入社に参加してきました。同社の体験入社制度に関しては下記の記事に詳しいです。 エンジニア向けの体験入社制度ができました - SmartHR Tech Blog 今回は体験入社を１スプリント分の一週間、営業日換算で４日間体験入社させてもらいました。SmartHR社のことはRubyKaigiや会社紹介資料などを通して知っており、傍目から良い会社そうだなぁという印象は持っていました。実際にSmartHRの中の人たちとも面談を通して直接話す中で、SmartHR社での働き方に興味が湧き、今回「体験入社をしてみたい！」という僕の申し出を受け入れてもらったかたちとなります。僕が特にSmartHR社に関して良いと思った点、興味があった点は下記です。 1. オープンな社風 2. スタートアップ企業としてはありえない退職率の低さ]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/smarthr.jpeg" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/smarthr.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Roppongi.rb#8で「Make Rails Documents SEO(Search Engine Optimized)」を発表しました</title><link href="https://blog.toshimaru.net/make-rails-documents-seo-search-engine-optimized/" rel="alternate" type="text/html" title="Roppongi.rb#8で「Make Rails Documents SEO(Search Engine Optimized)」を発表しました" /><published>2019-02-25T00:00:00+09:00</published><updated>2019-02-27T00:00:00+09:00</updated><id>https://blog.toshimaru.net/make-rails-documents-seo-search-engine-optimized</id><content type="html" xml:base="https://blog.toshimaru.net/make-rails-documents-seo-search-engine-optimized/"><![CDATA[<p><a href="https://roppongirb.connpass.com/event/118218/">Roppongi.rb #8</a>にて「Make Rails Documents SEO(Search Engine Optimized)」と題して発表してきた。</p>

<h2 id="発表スライド">発表スライド</h2>

<script async="" class="speakerdeck-embed" data-id="2238d7f3d662436b943b125a7b10fec1" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script>

<h2 id="railsdocgithubio">railsdoc.github.io</h2>

<p>発表では僕が過去に行ったいくつかのRails公式ドキュメントのSEO対応の紹介とともに、現在進めているプロジェクトである<a href="https://railsdoc.github.io/">railsdoc.github.io</a>を紹介した。</p>

<p>GitHub: <a href="https://github.com/railsdoc/railsdoc.github.io">railsdoc/railsdoc.github.io: Rails API Documentation.</a></p>

<h2 id="railsdocgithubioのゴール">railsdoc.github.ioのゴール</h2>

<ul>
  <li><a href="https://api.rubyonrails.org/">api.rubyonrails.org</a>をSEO強くする</li>
  <li><a href="https://api.rubyonrails.org/">api.rubyonrails.org</a>を使いやすくする</li>
</ul>

<p>下記はついでにできると良いなーと考えていること。</p>

<ul>
  <li>フロントの技術を少しだけモダンに
    <ul>
      <li><a href="https://getbootstrap.com/">bootstrap</a>を使ってデザイン構成しやすくする</li>
    </ul>
  </li>
  <li>GitHubといい感じの連携</li>
  <li>AMP対応もできると良さそう</li>
</ul>

<h2 id="railsdocgithubioの今後">railsdoc.github.ioの今後</h2>

<p>発表内で紹介したが今後については下記のように考えている。</p>

<ul>
  <li>コードベース整備中 &amp; 未実装箇所の実装</li>
  <li>folk版sdocじゃない独自のドキュメント生成gemを作りたい</li>
</ul>

<h2 id="紹介したprissue">紹介したPR/Issue</h2>

<ul>
  <li><a href="https://github.com/rails/weblog/pull/88">Introduce jekyll-seo-tag by toshimaru · Pull Request #88 · rails/weblog</a></li>
  <li><a href="https://github.com/rails/homepage/pull/73">Add Jekyll SEO tag and Jekyll sitemap by benbalter · Pull Request #73 · rails/homepage</a></li>
  <li><a href="https://github.com/rails/rails/pull/34860">Make Ruby on Rails Guides SNS-friendly by toshimaru · Pull Request #34860 · rails/rails</a></li>
  <li><a href="https://github.com/rails/rails/issues/27633">No Rails 5 in apidock.com/rails · Issue #27633 · rails/rails</a></li>
</ul>

<h2 id="紹介したrails公式ドキュメント">紹介したRails公式ドキュメント</h2>

<ol>
  <li><a href="rubyonrails.org">rubyonrails.org</a></li>
  <li><a href="weblog.rubyonrails.org">weblog.rubyonrails.org</a></li>
  <li><a href="guides.rubyonrails.org">guides.rubyonrails.org</a></li>
  <li><a href="api.rubyonrails.org">api.rubyonrails.org</a></li>
</ol>

<h2 id="その他">その他</h2>

<ul>
  <li>発表には<a href="https://www.deckset.com/">Deckset 2</a>を使った（ずっとDeckset1使ってたけど2にUpdateした）</li>
  <li>何かあればイシューに書いてほしい <a href="https://github.com/railsdoc/railsdoc.github.io/issues">github.com/railsdoc/railsdoc.github.io/issues</a></li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="presentation" /><category term="seo" /><category term="rails" /><summary type="html"><![CDATA[Roppongi.rb #8にて「Make Rails Documents SEO(Search Engine Optimized)」と題して発表してきた。発表スライドは下記になる。発表では僕が過去に行ったいくつかのRails公式ドキュメントのSEO対応の紹介とともに、現在進めているプロジェクトであるrailsdoc.github.ioを紹介した。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/roppongirb8/og.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/roppongirb8/og.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Rails E2Eテストで poltergeist から Headless Chrome へと乗り換える</title><link href="https://blog.toshimaru.net/poltergeist-to-selenium-webdriver/" rel="alternate" type="text/html" title="Rails E2Eテストで poltergeist から Headless Chrome へと乗り換える" /><published>2018-08-04T00:00:00+09:00</published><updated>2019-09-17T00:00:00+09:00</updated><id>https://blog.toshimaru.net/poltergeist-to-selenium-webdriver</id><content type="html" xml:base="https://blog.toshimaru.net/poltergeist-to-selenium-webdriver/"><![CDATA[<p>RailsのCapybaraを使ったE2Eテスト(feature spec)をこの度、<a href="https://github.com/teampoltergeist/poltergeist">poltergeist</a>から<a href="https://chromium.googlesource.com/chromium/src/+/master/headless/README.md">Headless Chrome</a>に乗り換えてみたのでそのときのメモ。</p>

<h2 id="対応-pull-request">対応 Pull Request</h2>

<p>今回対応したPull Requestはこちら。</p>

<p><a href="https://github.com/toshimaru/RailsTwitterClone/pull/211">Use headless Chrome instead of PhantomJS(poltergeist) by toshimaru · Pull Request #211 · toshimaru/RailsTwitterClone · GitHub</a></p>

<p>思ったよりも差分はコンパクトにまとまりました。</p>

<h2 id="install-selenium-webdriver">Install selenium-webdriver</h2>

<p>まずは<code class="language-plaintext highlighter-rouge">poltergeist</code> gemの代わりに、<code class="language-plaintext highlighter-rouge">selenium-webdriver</code>をインストール。</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gd">-  gem "poltergeist"
</span><span class="gi">+  gem "selenium-webdriver"
</span></code></pre></div></div>

<h2 id="change-capybarajavascript_driver">Change Capybara.javascript_driver</h2>

<p>次に<code class="language-plaintext highlighter-rouge">Capybara.javascript_driver</code>を<code class="language-plaintext highlighter-rouge">:poltergeist</code>から<code class="language-plaintext highlighter-rouge">:selenium_chrome_headless</code>に変更します。</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gd">- require "capybara/poltergeist"
- Capybara.javascript_driver = :poltergeist
</span><span class="gi">+ require "selenium-webdriver"
+ Capybara.javascript_driver = :selenium_chrome_headless
</span></code></pre></div></div>

<p>ちなみに<code class="language-plaintext highlighter-rouge">:selenium_chrome_headless</code>の設定は下記の変更の中でcapybara内に取り込まれています。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Capybara</span><span class="p">.</span><span class="nf">register_driver</span> <span class="ss">:selenium_chrome_headless</span> <span class="k">do</span> <span class="o">|</span><span class="n">app</span><span class="o">|</span>
  <span class="n">browser_options</span> <span class="o">=</span> <span class="o">::</span><span class="no">Selenium</span><span class="o">::</span><span class="no">WebDriver</span><span class="o">::</span><span class="no">Chrome</span><span class="o">::</span><span class="no">Options</span><span class="p">.</span><span class="nf">new</span>
  <span class="n">browser_options</span><span class="p">.</span><span class="nf">args</span> <span class="o">&lt;&lt;</span> <span class="s1">'--headless'</span>
  <span class="n">browser_options</span><span class="p">.</span><span class="nf">args</span> <span class="o">&lt;&lt;</span> <span class="s1">'--disable-gpu'</span>
  <span class="no">Capybara</span><span class="o">::</span><span class="no">Selenium</span><span class="o">::</span><span class="no">Driver</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="ss">browser: :chrome</span><span class="p">,</span> <span class="ss">options: </span><span class="n">browser_options</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<p>via. <a href="https://github.com/teamcapybara/capybara/commit/0275eab42c610cd1ccde7947b051d0b00857b9ce">add default selenium chrome driver registrations · teamcapybara/capybara@0275eab · GitHub</a></p>

<h2 id="install-chromedriver">Install chromedriver</h2>

<h3 id="on-macos">On MacOS</h3>

<p><code class="language-plaintext highlighter-rouge">chromedriver</code> が必要になってくるが、Macの場合はbrewで入れちゃうのが一番ラクです。</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>brew cask <span class="nb">install </span>chromedriver
<span class="go">Updating Homebrew...
</span><span class="gp">==&gt;</span><span class="w"> </span>Auto-updated Homebrew!
<span class="go">Updated 1 tap (homebrew/cask).
No changes to formulae.

</span><span class="gp">==&gt;</span><span class="w"> </span>Satisfying dependencies
<span class="gp">==&gt;</span><span class="w"> </span>Downloading https://chromedriver.storage.googleapis.com/2.41/chromedriver_mac64.zip
<span class="gp">#</span><span class="c">####################################################################### 100.0%</span>
<span class="gp">==&gt;</span><span class="w"> </span>Verifying checksum <span class="k">for </span>Cask chromedriver
<span class="gp">==&gt;</span><span class="w"> </span>Installing Cask chromedriver
<span class="gp">==&gt;</span><span class="w"> </span>Extracting nested container chromedriver
<span class="gp">==&gt;</span><span class="w"> </span>Linking Binary <span class="s1">'chromedriver'</span> to <span class="s1">'/usr/local/bin/chromedriver'</span><span class="nb">.</span>
<span class="go">🍺  chromedriver was successfully installed!
</span></code></pre></div></div>

<p><strong>注意事項</strong></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">brew install chromedriver</code>ではinstallできないので注意（<code class="language-plaintext highlighter-rouge">brew cask</code>経由にすること）</li>
  <li><code class="language-plaintext highlighter-rouge">chromedriver-helper</code> gem が入っているとうまく動かない場合があるので注意</li>
</ul>

<h3 id="on-circleci">On CircleCI</h3>

<p>CircleCI上では、<code class="language-plaintext highlighter-rouge">ruby:x.x-node-browsers</code>のCircleCI公式Ruby Dokcer Imageを使っていればきちんと動作しました。</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="na">docker</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">image</span><span class="pi">:</span> <span class="s">circleci/ruby:2.5-node-browsers</span>
</code></pre></div></div>

<p>上記の設定の場合、Ruby2.5のnode-browsersバージョンをベースイメージとして使用しています。</p>

<h3 id="on-travisci">On TravisCI</h3>

<p>これが今回の対応で一番ハマった設定でした。いろいろ試しましたが下記のエラーがなかなか解決できませんでした。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Failures:

  1) Authentication authorization screenshot
     Failure/Error: before { visit signin_path }

     Selenium::WebDriver::Error::WebDriverError:
        Unable to find Mozilla geckodriver. Please download the server from https://github.com/mozilla/geckodriver/releases and place it somewhere on your PATH. More info at https://developer.mozilla.org/en-US/docs/Mozilla/QA/Marionette/WebDriver.
     # ./spec/features/authentication_pages_spec.rb:9:in `block (3 levels) in &lt;top (required)&gt;'
</code></pre></div></div>

<p><del>本当は<code class="language-plaintext highlighter-rouge">sudo: false</code>の設定で動かしたかったのですがそれだと上手くいかなかったので<code class="language-plaintext highlighter-rouge">sudo</code>で起動させて<code class="language-plaintext highlighter-rouge">chromium-chromedriver</code>をテスト前にInstallしてパスを通すという方法でテストを通しました。</del></p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">sudo</span><span class="pi">:</span> <span class="s">required</span>
<span class="na">language</span><span class="pi">:</span> <span class="s">ruby</span>
<span class="na">before_install</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">sudo apt-get install -y chromium-chromedriver</span>
  <span class="pi">-</span> <span class="s">ln -s /usr/lib/chromium-browser/chromedriver ~/bin/chromedriver</span>
</code></pre></div></div>

<p><del>(もう少しスマートなやり方をご存知の方は教えていただけると嬉しいです🙏)</del></p>

<p><strong>追記（2019年9月17日）</strong></p>

<p><code class="language-plaintext highlighter-rouge">sudo</code> 無しでも下記のような設定でいけました。</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">dist</span><span class="pi">:</span> <span class="s">bionic</span>
<span class="na">addons</span><span class="pi">:</span>
  <span class="na">chrome</span><span class="pi">:</span> <span class="s">stable</span>
  <span class="na">apt</span><span class="pi">:</span>
    <span class="na">packages</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">chromium-chromedriver</span>
</code></pre></div></div>

<p>参考Pull Request: <a href="https://github.com/toshimaru/RailsTwitterClone/pull/524/files">No sudo on TravisCI by toshimaru · Pull Request #524 · toshimaru/RailsTwitterClone</a></p>

<h2 id="参考リンク">参考リンク</h2>

<ul>
  <li><a href="https://ohbarye.hatenablog.jp/entry/2018/03/10/232300">PhantomJS + Poltergeist を Selenium + Headless Chrome で置き換える (1) Rails + Capybara による feature spec 編 - valid,invalid</a></li>
  <li><a href="https://tech.speee.jp/entry/2017/06/15/135636">RSpec の feature spec でヘッドレス Chrome を使う - Speee DEVELOPER BLOG</a></li>
  <li><a href="http://y-yagi.tumblr.com/post/166831012790/rails%E9%9B%91%E3%81%ABsystem-test%E3%81%A7headless-chrome%E3%82%92%E4%BD%BF%E3%81%86">[Rails]雑にSystem TestでHeadless Chromeを使う | 日々雑記</a></li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="rails" /><category term="rspec" /><category term="chrome" /><summary type="html"><![CDATA[RailsのCapybaraを使ったE2Eテスト(feature spec)をこの度、poltergeistからHeadless Chromeに乗り換えてみたのでそのときのメモ。 今回対応したPull Requestしてはこちら。 https://github.com/toshimaru/RailsTwitterClone/pull/211 思ったよりも差分はコンパクトにまとまった。まずはpoltergeist gemの代わりに、selenium-webdriverをインストール。次にCapybara.javascript_driverを:poltergeistから:selenium_chrome_headlessに変更。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/chromedriver.jpg" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/chromedriver.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>