<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://blog.toshimaru.net/feed/by_tag/rails.xml" rel="self" type="application/atom+xml" /><link href="https://blog.toshimaru.net/" rel="alternate" type="text/html" /><updated>2020-10-25T21:19:08+09:00</updated><id>https://blog.toshimaru.net/feed/by_tag/rails.xml</id><title type="html">Hack Your Design!</title><subtitle>toshimaruの技術系なブログ</subtitle><author><name>Toshimaru</name></author><entry><title type="html">Kaigi on Railsで「FactoryBot the Right Way」を発表しました</title><link href="https://blog.toshimaru.net/kaigi-on-rails/" rel="alternate" type="text/html" title="Kaigi on Railsで「FactoryBot the Right Way」を発表しました" /><published>2020-10-07T00:00:00+09:00</published><updated>2020-10-08T00:00:00+09:00</updated><id>https://blog.toshimaru.net/kaigi-on-rails</id><content type="html" xml:base="https://blog.toshimaru.net/kaigi-on-rails/">&lt;p&gt;&lt;a href=&quot;https://kaigionrails.org/&quot;&gt;Kaigi on Rails&lt;/a&gt;で「FactoryBot the Right Way」というタイトルで発表しました&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h2 id=&quot;スライド&quot;&gt;スライド&lt;/h2&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;8084985a97ce4b6685d8528388da9779&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;アーカイブ動画&quot;&gt;アーカイブ動画&lt;/h2&gt;

&lt;p&gt;動画もYouTubeにアーカイブとして上がっておりますので、音声付きで聴きたい方はこちらをどうぞ。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;先行して &lt;a href=&quot;https://twitter.com/toshimaru_e?ref_src=twsrc%5Etfw&quot;&gt;@toshimaru_e&lt;/a&gt; さんの動画をアップしました！他のセッションも順次公開していきますのでお楽しみに！ &lt;a href=&quot;https://twitter.com/hashtag/kaigionrails?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#kaigionrails&lt;/a&gt;&lt;a href=&quot;https://t.co/duhoF1Xu1S&quot;&gt;https://t.co/duhoF1Xu1S&lt;/a&gt; &lt;a href=&quot;https://t.co/y3PRYVRlO8&quot;&gt;https://t.co/y3PRYVRlO8&lt;/a&gt;&lt;/p&gt;&amp;mdash; Kaigi on Rails (@kaigionrails) &lt;a href=&quot;https://twitter.com/kaigionrails/status/1312397413592653824?ref_src=twsrc%5Etfw&quot;&gt;October 3, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;感想&quot;&gt;感想&lt;/h2&gt;

&lt;p&gt;今回は初のビデオ録画登壇でした。&lt;/p&gt;

&lt;p&gt;今までのリモート登壇（&lt;a href=&quot;/career-strategy-for-around-thirty-engineer/&quot;&gt;アラサーエンジニアの生存戦略&lt;/a&gt;、&lt;a href=&quot;/how-to-deal-with-fat-model/&quot;&gt;Fat Modelの倒し方&lt;/a&gt;）は基本Zoomを使ったLIVE登壇だったので、今回初めて録画登壇を経験できて良かったと思います。&lt;/p&gt;

&lt;p&gt;録画のセットアップとしては下記を利用しました。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;プレゼンテーションツール: Keynote&lt;/li&gt;
  &lt;li&gt;スライド録画+音声録音: Keynoteのレコーディング機能 (with Krisp)
    &lt;ul&gt;
      &lt;li&gt;参考: &lt;a href=&quot;https://support.apple.com/ja-jp/guide/keynote/tan8a5df9cc5/mac&quot;&gt;MacのKeynoteでオーディオを録音する - Apple サポート&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Backup用音声録音: QuickTime Player
    &lt;ul&gt;
      &lt;li&gt;参考: &lt;a href=&quot;https://support.apple.com/ja-jp/guide/quicktime-player/qtpf25d6f827/mac&quot;&gt;MacのQuickTime Playerでオーディオを録音する - Apple サポート&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;スピーカー側の動画撮影: iPad&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Kaigi on Railsのコアコンセプトは 「初学者から上級者までが楽しめるWeb系の技術カンファレンス」 です。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ということでしたが、今回の発表の内容的には初学者もそこそこ楽しめる内容になっていのではないでしょうか。参考になったのなら幸いです&lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://twitter.com/hashtag/kaigionrails?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#kaigionrails&lt;/a&gt; 発表資料チラ見せ。FactoryBotをより上手に使いこなしたい初級者〜中級者レベルの方にはそこそこ有益な情報になっていると思いますので是非😊 &lt;a href=&quot;https://t.co/dQDOzP3BpX&quot;&gt;pic.twitter.com/dQDOzP3BpX&lt;/a&gt;&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/1311079864070369280?ref_src=twsrc%5Etfw&quot;&gt;September 29, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;おわり&quot;&gt;おわり&lt;/h2&gt;

&lt;p&gt;Kaigi on Railsをオンラインで開催してくださったチーフオーガナイザーの &lt;a href=&quot;https://twitter.com/okuramasafumi&quot;&gt;@okuramasafumi&lt;/a&gt; をはじめ、運営スタッフの皆さま、ありがとうございました。&lt;/p&gt;

&lt;h2 id=&quot;参考リンク&quot;&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;公式ドキュメント
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/thoughtbot/factory_bot/blob/master/GETTING_STARTED.md&quot;&gt;GETTING_STARTED.md&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/thoughtbot/factory_bot/blob/master/NAME.md&quot;&gt;Project Naming History&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ベンチマークソースコード
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/toshimaru/factory-bot-the-right-way&quot;&gt;toshimaru/factory-bot-the-right-way&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://fukabori.fm/episode/13&quot;&gt;13. ペアプロやテストの疑問とか、ソフトウェアエンジニアの育成とか | fukabori.fm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://sinsoku.hatenablog.com/entry/2017/04/09/214728&quot;&gt;Rails アンチパターン - 錆びついたファクトリー (factory_girl) - アジャイルSEの憂鬱&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://magazine.rubyist.net/articles/kaigi_on_rails/index.html&quot;&gt;Rubyist Magazine: Kaigi on Rails 特集号&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;たぶん文法的には「FactoryBot &lt;strong&gt;in&lt;/strong&gt; the right way」ってのが正しい気がするけど、こちらがゴロが良かったということでそれはご愛嬌で。。。 &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;RailsDM2018で発表したこちらの内容もあわせて参考にしていただけると :pray: &lt;a href=&quot;/rdm2018-active-record-anti-patterns/&quot;&gt;railsdm2018で「ActiveRecordデータ処理アンチパターン」を発表しました&lt;/a&gt; &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Toshimaru</name></author><category term="presentation" /><category term="rspec" /><category term="rails" /><summary type="html">Kaigi on Railsで「FactoryBot the Right Way」というタイトルで発表しました1。 たぶん文法的には「FactoryBot in the right way」ってのが正しい気がするけど、こちらがゴロが良かったということでそれはご愛嬌で。。。 &amp;#8617;</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/kaigi-on-rails.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/kaigi-on-rails.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">銀座Rails#21で「Fat Modelの倒し方」を発表しました 〜質問・感想編〜</title><link href="https://blog.toshimaru.net/how-to-deal-with-fat-model-after/" rel="alternate" type="text/html" title="銀座Rails#21で「Fat Modelの倒し方」を発表しました 〜質問・感想編〜" /><published>2020-06-05T00:00:00+09:00</published><updated>2020-06-05T00:00:00+09:00</updated><id>https://blog.toshimaru.net/how-to-deal-with-fat-model-after</id><content type="html" xml:base="https://blog.toshimaru.net/how-to-deal-with-fat-model-after/">&lt;p&gt;本記事は『&lt;a href=&quot;/how-to-deal-with-fat-model/&quot;&gt;銀座Rails#21で「Fat Modelの倒し方」を発表しました&lt;/a&gt;』の後編になります。&lt;/p&gt;

&lt;p&gt;当日あった質問、発表してみての感想などを書きたいと思います。&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#当日の質問&quot; id=&quot;markdown-toc-当日の質問&quot;&gt;当日の質問&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#ファイルの置き場について&quot; id=&quot;markdown-toc-ファイルの置き場について&quot;&gt;ファイルの置き場について&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#trailblazer-について&quot; id=&quot;markdown-toc-trailblazer-について&quot;&gt;trailblazer について&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#初リモート登壇してみて&quot; id=&quot;markdown-toc-初リモート登壇してみて&quot;&gt;初リモート登壇してみて&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#セットアップ&quot; id=&quot;markdown-toc-セットアップ&quot;&gt;セットアップ&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#感想&quot; id=&quot;markdown-toc-感想&quot;&gt;感想&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#special-thanks&quot; id=&quot;markdown-toc-special-thanks&quot;&gt;Special Thanks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;当日の質問&quot;&gt;当日の質問&lt;/h2&gt;

&lt;h3 id=&quot;ファイルの置き場について&quot;&gt;ファイルの置き場について&lt;/h3&gt;

&lt;p&gt;質問の文脈としては「POROファイルの置き場ってどこ？」という内容でした。&lt;/p&gt;

&lt;p&gt;発表中でPOROは「Modelの補助輪」という表現をしましたが、役割としてはModelにあたるので置き場所も&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/models&lt;/code&gt;配下で問題ないと考えます。&lt;/p&gt;

&lt;p&gt;特別な置き場を作りたくなってしまうかもしれませんが、Railsの提供するMVCのレールを逸脱しない範囲で独自路線を作っていくのが個人的には良いアプローチかなと考えています。POROをモデルの延長線上にあるものと考えれば、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/models&lt;/code&gt;にPOROが配置されているのは不自然ではないかと思います。&lt;/p&gt;

&lt;p&gt;もちろん &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/models&lt;/code&gt; の内部でドメイン毎にnamespace（module）を持たせファイルを構造化していくのはアリだと思います。例えば下記の例です。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app/models
├── application_record.rb
├── domain1
│   └── plain_object.rb
├── domain2
│   └── plain_object.rb
├── domain3
│   └── plain_object.rb
|
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/models&lt;/code&gt;にフラットにファイルを置いていくと、テーブル数増加・コード肥大化とともにものすごい数になってしまいます。意味のある単位でディレクトリ（module）を切っておくのは今すぐできる手軽な構造化という意味で、早いうちに導入しておくと良いと思います。&lt;/p&gt;

&lt;h3 id=&quot;trailblazer-について&quot;&gt;trailblazer について&lt;/h3&gt;

&lt;p&gt;「&lt;a href=&quot;https://github.com/trailblazer/trailblazer&quot;&gt;trailblazer&lt;/a&gt; についてどう思う？」という話がありました。今回の発表にあたりtrailblazerはノーマークだったので、当日は「ちゃんと調べて触ったわけではないので、正直わかりません」という回答をしました。&lt;/p&gt;

&lt;p&gt;trailblazer自体は、2015年頃に&lt;a href=&quot;https://devchat.tv/ruby-rogues/206-rr-trailblazer-with-nick-sutterer/&quot;&gt;Ruby Rogues Podcast&lt;/a&gt;で聞いて知っていて、当時は「へ〜、興味深いコンセプトのフレームワークだけど、Not for meかな〜」「RailsのMVC構造とは違って小難しそうなフレームワークだな〜」などと思っていました。&lt;/p&gt;

&lt;p&gt;今回の発表を通して改めて trailblazer を評価してみると、&lt;strong&gt;Railsの巨大化にともなって発生するペインポイントを回避するためによく考えられたアーキテクチャだ&lt;/strong&gt; と思いました。&lt;/p&gt;

&lt;p&gt;trailblazer は「高度に抽象化（high-level abstractions）されたRubyフレームワーク」だと謳っています。「何と比べて高度か？」というと、明らかに「Rails（MVCアーキテクチャ）と比べて高度だ」と考えることができます。具体的にはMVCアーキテクチャと比べて、大規模化しても破綻しにくいアーキテクチャになっているかと思います。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ginzarails-21/trailblazer.png&quot; alt=&quot;trailblazer&quot; /&gt;&lt;/p&gt;

&lt;p&gt;一方でtrailblazerアーキテクチャの中には「Railsでもgemとか使えば表現できるよね？」っていう部分もあるのは事実だと思います。trailblazerのアドバンテージとしては &lt;strong&gt;gem拡張なし&lt;/strong&gt; で &lt;strong&gt;標準で&lt;/strong&gt; 実現できる点と言えます。素の状態で破綻しにくいアーキテクチャが提供されています。&lt;/p&gt;

&lt;p&gt;Hanamiにも共通して言えることなのですが、trailblazerを採用するときのディスアドバンテージはこんな感じでしょうか。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;gem拡張に乏しい
    &lt;ul&gt;
      &lt;li&gt;やりたいことをやれるgemが転がっているか？&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ハマったときのトラブルシュートの難しさ
    &lt;ul&gt;
      &lt;li&gt;ドキュメントは十分にあるか？&lt;/li&gt;
      &lt;li&gt;コミュニティは成熟しているか？&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;バグを踏んだときの問題解決の難しさ
    &lt;ul&gt;
      &lt;li&gt;アクティブなメンテナはどれだけいるか？&lt;/li&gt;
      &lt;li&gt;バグを報告したらすぐ反応して直してくれるか？&lt;/li&gt;
      &lt;li&gt;Pull Request を upstream にカジュアルに投げることができそうか？&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上述したデメリットを考えると、Hanamiないしtrailblazerがどれだけ優秀なアーキテクチャであっても採用は慎重にならざるを得ないと言えます。&lt;/p&gt;

&lt;p&gt;Ruby on Railsの優位性はRuby Webフレームワークの圧倒的デファクトになっていることです。gemエコシステムやコミュニティ、ドキュメント、ブログ記事がしっかり整っているのは圧倒的アドバンテージと言えるのではないでしょうか。&lt;/p&gt;

&lt;h2 id=&quot;初リモート登壇してみて&quot;&gt;初リモート登壇してみて&lt;/h2&gt;

&lt;h3 id=&quot;セットアップ&quot;&gt;セットアップ&lt;/h3&gt;

&lt;p&gt;今回の発表が初の&lt;a href=&quot;https://zoom.us/&quot;&gt;Zoom&lt;/a&gt;によるリモート登壇でした。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;初リモート登壇セットアップ &lt;a href=&quot;https://twitter.com/hashtag/ginzarails?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#ginzarails&lt;/a&gt; &lt;a href=&quot;https://t.co/Ays780ImG9&quot;&gt;pic.twitter.com/Ays780ImG9&lt;/a&gt;&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/1261229167036653570?ref_src=twsrc%5Etfw&quot;&gt;May 15, 2020&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;macOS + iPad の2画面を&lt;a href=&quot;https://support.apple.com/ja-jp/HT210380&quot;&gt;Sidecar&lt;/a&gt;を使って実現した形となります。通常登壇だとスピーカーノートを手元のマシンに映して、プレゼン資料をプロジェクタに映して…とするところですが、リモート登壇だとプロジェクタにあたる部分が無いのでサブディスプレイは必須だなと感じました。&lt;/p&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=toshimaru-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B07PRX2Q11&amp;amp;linkId=496cfb91e959b3c29be79559c0666db9&quot;&gt;&lt;/iframe&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=toshimaru-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B07H27J698&amp;amp;linkId=aa0e907ba05d2a0e01a21b30e73d5b86&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;リモート発表ということもありネットワークが一番の心配事だったのですが、Google WiFiルーター ⇔ macOS とのネットワーク優先度をMAXにして、5GHz帯を掴むようにして発表に臨むことで、特に問題は発生しませんでした。&lt;/p&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=toshimaru-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B084ZCV6M5&amp;amp;linkId=dd1f57286c1fe56f3d3bc5db74ef399e&quot;&gt;&lt;/iframe&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=toshimaru-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B01MAW2294&amp;amp;linkId=bdc1818106278e95163b1f29f12bfdd9&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;また発声がキレイに通るように、ノイズキャンセリングApp・&lt;a href=&quot;https://krisp.ai/&quot;&gt;Krisp&lt;/a&gt;を導入していました（&lt;a href=&quot;https://ref.krisp.ai/u/ud778344eb&quot;&gt;こちら&lt;/a&gt;から登録すると一ヶ月無料で使えます）。リモート時代には必須。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;リモート戦国時代を生き抜くために Krisp を年間購読した&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/1252784955878305792?ref_src=twsrc%5Etfw&quot;&gt;April 22, 2020&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;プレゼンツールはおなじみの&lt;a href=&quot;https://www.deckset.com/&quot;&gt;Deckset&lt;/a&gt;。マークダウンでまとめられるのはGood、一方でデザインを凝ろうとするとパワポやキーノートより逆に大変なのでそのへんは課題感あります。&lt;/p&gt;

&lt;h3 id=&quot;感想&quot;&gt;感想&lt;/h3&gt;

&lt;p&gt;正直な気持ちをいうと、「発表するならジェスチャーが使えて、オーディエンスの顔・反応が見れて、緊張感を持って臨めるリアル登壇が良いかなー」って考えだったのですが、コロナが長期化しそうな状況を鑑みて今回のリモート登壇にチャレンジしてみることにしました。&lt;/p&gt;

&lt;p&gt;実際にやってみて良かったこととしては、お家環境で椅子に座ってノンビリ発表できるのでそこまで疲れないという点でした。あとZoomはリモート登壇にはとても便利なツール（良い背景画像が無かったので今回はバーチャル背景を使わなかったのが若干後悔）。&lt;/p&gt;

&lt;p&gt;逆に難しいなと思ったのはやっぱりオーディエンスの反応が見えない点。ここは運営側で&lt;a href=&quot;http://commentscreen.com/&quot;&gt;Comment Screen&lt;/a&gt;環境を用意してもらえたことで、発表中のオーディエンスへの質問や反応はある程度見ることができました。またこれは登壇者側・参加者側どちらでもそうなのですが、リアル現場での懇親会のように発表後にカジュアルに話せないのはちょっと残念だなーと思う点です。&lt;/p&gt;

&lt;p&gt;総じてリモート登壇を初めての体験できてよかったと思います。&lt;/p&gt;

&lt;p&gt;あと今回いただいた30分という尺はある程度まとまった量の発表をゆっくり進行するには丁度良い尺でした。それ以上の長さになると発表者側もオーディエンス側もダレそうだなぁという印象。&lt;/p&gt;

&lt;h2 id=&quot;special-thanks&quot;&gt;Special Thanks&lt;/h2&gt;

&lt;p&gt;本発表はもともと銀座Rails#18で発表予定だったものです。改めての発表機会をいただき、銀座Rails運営の皆様ありがとうございました。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;イベントキャンセルによってお蔵入りした発表資料。普通に喋ったら20分超えの大作だっただけに残念。。。コロナが落ち着くまでは蔵出しせずに寝かせておくかな...😷 &lt;a href=&quot;https://t.co/Qzu2YNQyve&quot;&gt;pic.twitter.com/Qzu2YNQyve&lt;/a&gt;&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/1229425295930716160?ref_src=twsrc%5Etfw&quot;&gt;February 17, 2020&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;Rails Model の限界を考えるにあたり、&lt;a href=&quot;https://twitter.com/_yasaichi&quot;&gt;yasaichiさん&lt;/a&gt;、&lt;a href=&quot;https://github.com/hshimoyama&quot;&gt;hshiroyamaさん&lt;/a&gt;の発表を参考にさせていただきました。ありがとうございました。&lt;/p&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;b5579c5fa5fa4e479ec81fda3b231eb2&quot; data-ratio=&quot;1.33333333333333&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;ce30c3cf9433471283e24855f6bdd2b4&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;1年前に「Ruby on Railsの正体と向き合い方」というテーマで登壇したときに、時間の関係で言及できなかった「コードレベルの向き合い方」の詳細が綺麗に整理された上でまとまっていて、いたく感動してしまった。おすすめ / Fat Modelの倒し方 / how to deal with fat model &lt;a href=&quot;https://t.co/0vMubQfiLb&quot;&gt;https://t.co/0vMubQfiLb&lt;/a&gt;&lt;/p&gt;&amp;mdash; (やさいち|yasaichi) (@_yasaichi) &lt;a href=&quot;https://twitter.com/_yasaichi/status/1264889633332060160?ref_src=twsrc%5Etfw&quot;&gt;May 25, 2020&lt;/a&gt;&lt;/blockquote&gt;</content><author><name>Toshimaru</name></author><category term="presentation" /><category term="rails" /><summary type="html">本記事は『銀座Rails#21で「Fat Modelの倒し方」を発表しました』の後編になります。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/ginzarails-21/og2.jpg" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/ginzarails-21/og2.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">銀座Rails#21で「Fat Modelの倒し方」を発表しました</title><link href="https://blog.toshimaru.net/how-to-deal-with-fat-model/" rel="alternate" type="text/html" title="銀座Rails#21で「Fat Modelの倒し方」を発表しました" /><published>2020-06-01T00:00:00+09:00</published><updated>2020-06-05T00:00:00+09:00</updated><id>https://blog.toshimaru.net/how-to-deal-with-fat-model</id><content type="html" xml:base="https://blog.toshimaru.net/how-to-deal-with-fat-model/">&lt;p&gt;&lt;a href=&quot;https://ginza-rails.connpass.com/event/173610/&quot;&gt;銀座Rails#21&lt;/a&gt;で「Fat Modelの倒し方」と題して発表してきました。&lt;/p&gt;

&lt;h2 id=&quot;発表スライド&quot;&gt;発表スライド&lt;/h2&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;fa367404507c4311aa3eeb087fc45a6e&quot; data-ratio=&quot;1.33333333333333&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;目次&quot;&gt;目次&lt;/h2&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#発表スライド&quot; id=&quot;markdown-toc-発表スライド&quot;&gt;発表スライド&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#目次&quot; id=&quot;markdown-toc-目次&quot;&gt;目次&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#fat-rails-stage&quot; id=&quot;markdown-toc-fat-rails-stage&quot;&gt;Fat Rails Stage&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#fat-model対処のための３つのアプローチ&quot; id=&quot;markdown-toc-fat-model対処のための３つのアプローチ&quot;&gt;Fat Model対処のための３つのアプローチ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#rails-modelの限界&quot; id=&quot;markdown-toc-rails-modelの限界&quot;&gt;Rails Modelの限界&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#rails-modelはなぜ辛くなるのか&quot; id=&quot;markdown-toc-rails-modelはなぜ辛くなるのか&quot;&gt;Rails Modelはなぜ辛くなるのか？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#目指すべきゴール&quot; id=&quot;markdown-toc-目指すべきゴール&quot;&gt;目指すべきゴール&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#rails-way&quot; id=&quot;markdown-toc-rails-way&quot;&gt;Rails Way&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#concerns&quot; id=&quot;markdown-toc-concerns&quot;&gt;Concerns&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#sti&quot; id=&quot;markdown-toc-sti&quot;&gt;STI&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#polymorphic-association&quot; id=&quot;markdown-toc-polymorphic-association&quot;&gt;Polymorphic Association&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#accepts_nested_attributes_for&quot; id=&quot;markdown-toc-accepts_nested_attributes_for&quot;&gt;accepts_nested_attributes_for&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#その他細かめのテクニック&quot; id=&quot;markdown-toc-その他細かめのテクニック&quot;&gt;その他細かめのテクニック&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#rails-wayまとめ&quot; id=&quot;markdown-toc-rails-wayまとめ&quot;&gt;「Rails Way」まとめ&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#sub-rails-way&quot; id=&quot;markdown-toc-sub-rails-way&quot;&gt;Sub-Rails Way&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#view-model&quot; id=&quot;markdown-toc-view-model&quot;&gt;View Model&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#権限管理認可&quot; id=&quot;markdown-toc-権限管理認可&quot;&gt;権限管理・認可&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#interactor&quot; id=&quot;markdown-toc-interactor&quot;&gt;Interactor&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#特定の課題の解決&quot; id=&quot;markdown-toc-特定の課題の解決&quot;&gt;特定の課題の解決&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#それrailsでできるよ&quot; id=&quot;markdown-toc-それrailsでできるよ&quot;&gt;「それRailsでできるよ」&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#それrubyでできるよ&quot; id=&quot;markdown-toc-それrubyでできるよ&quot;&gt;「それRubyでできるよ」&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#saasに切り出す&quot; id=&quot;markdown-toc-saasに切り出す&quot;&gt;SaaSに切り出す&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#sub-rails-wayまとめ&quot; id=&quot;markdown-toc-sub-rails-wayまとめ&quot;&gt;「Sub-Rails Way」まとめ&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#non-rails-way&quot; id=&quot;markdown-toc-non-rails-way&quot;&gt;Non-Rails Way&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#form-model&quot; id=&quot;markdown-toc-form-model&quot;&gt;Form Model&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#poro&quot; id=&quot;markdown-toc-poro&quot;&gt;PORO&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#service-class&quot; id=&quot;markdown-toc-service-class&quot;&gt;Service Class&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#1-table-multiple-models&quot; id=&quot;markdown-toc-1-table-multiple-models&quot;&gt;1 Table Multiple Models&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#non-rails-wayまとめ&quot; id=&quot;markdown-toc-non-rails-wayまとめ&quot;&gt;「Non-Rails Way」まとめ&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#全体のまとめ&quot; id=&quot;markdown-toc-全体のまとめ&quot;&gt;全体のまとめ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#参考資料&quot; id=&quot;markdown-toc-参考資料&quot;&gt;参考資料&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#後編質問感想編&quot; id=&quot;markdown-toc-後編質問感想編&quot;&gt;後編（質問・感想編）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;fat-rails-stage&quot;&gt;Fat Rails Stage&lt;/h2&gt;

&lt;p&gt;肥大化したRailsアプリケーション（Fat Rails Application）において最も辛いレイヤーはどこでしょうか？&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Fat View&lt;/li&gt;
  &lt;li&gt;Fat Controller&lt;/li&gt;
  &lt;li&gt;Fat Model&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;僕はFat Modelだと考えています。&lt;/p&gt;

&lt;p&gt;下記は「RailsがどのようにFatになっていくか」段階を示した表です。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Fat Stage&lt;/th&gt;
      &lt;th&gt;Rails習熟度&lt;/th&gt;
      &lt;th&gt;Fat Layer&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;低&lt;/td&gt;
      &lt;td&gt;Fat View&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;中&lt;/td&gt;
      &lt;td&gt;Fat Controller&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;高&lt;/td&gt;
      &lt;td&gt;Fat Model&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;まずはFatステージ1。Railsというものを全然知らない超初心者が陥るステージです。ビューに何でもかんでもロジックを書いちゃう。その結果がFat Viewです。&lt;/p&gt;

&lt;p&gt;次にFatステージ2。ある程度Railsに慣れてきた開発者が陥るステージです。Modelへのロジック分離がうまくできず、Controllerにロジックが集中する。その結果はFat Controllerです。&lt;/p&gt;

&lt;p&gt;最後がFatステージ3。Railsを習熟したエンジニアであればModelにロジックを寄せていくのが定石です。その結果出来上がるのはFat Modelです。&lt;/p&gt;

&lt;p&gt;このように &lt;strong&gt;どんなにRailsに習熟してようと最終的にぶつかる壁がFat Model&lt;/strong&gt; です。&lt;/p&gt;

&lt;h2 id=&quot;fat-model対処のための３つのアプローチ&quot;&gt;Fat Model対処のための３つのアプローチ&lt;/h2&gt;

&lt;p&gt;Fat Modelを倒すためのアプローチとして、僕は下記の3つに分けて整理すれば良いのではと考えました。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Rails Way&lt;/li&gt;
  &lt;li&gt;Sub-Rails Way&lt;/li&gt;
  &lt;li&gt;Non-Rails Way&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;rails-modelの限界&quot;&gt;Rails Modelの限界&lt;/h2&gt;

&lt;p&gt;なぜRailsアプリケーションのModel層は限界を迎えてしまうのでしょうか？&lt;/p&gt;

&lt;p&gt;Railsの原始的な状態は、1つのModelに1つのControllerが結びついています。すなわち、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User&lt;/code&gt;モデルがあれば&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UsersController&lt;/code&gt;があり、Controllerのそれぞれのアクションに&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User&lt;/code&gt;モデルが紐づくという形です。&lt;/p&gt;

&lt;p&gt;しかし下図&lt;sup id=&quot;fnref:a&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:a&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;はそれが破綻した状態です。どうなっているかというと、複数のControllerからいろんなかたちで１つのモデルが触られる、そういう状態です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ginzarails-21/controllers-model.jpg&quot; alt=&quot;inline&quot; /&gt;&lt;/p&gt;

&lt;p&gt;続いてのスライドです&lt;sup id=&quot;fnref:b&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:b&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://speakerd.s3.amazonaws.com/presentations/ce30c3cf9433471283e24855f6bdd2b4/slide_42.jpg?12161035&quot; alt=&quot;inline&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ここのキーワードとしては &lt;strong&gt;ユースケース&lt;/strong&gt;。いろんなユースケースを1つのModelで表現しなければならないという状況が辛いと言えます。&lt;/p&gt;

&lt;h2 id=&quot;rails-modelはなぜ辛くなるのか&quot;&gt;Rails Modelはなぜ辛くなるのか？&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;1つのModelが複数の異なるユースケースに密結合して実装されるとき
    &lt;ul&gt;
      &lt;li&gt;→ ある条件やcontextに紐付いたValidation/Callback処理&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;1つのフォームで複数のサブリソースが更新されるとき（フォームとModelが1対1で紐付かないとき）
    &lt;ul&gt;
      &lt;li&gt;→ 1つのModelを起点とした複数Modelを跨ぐトランザクション処理&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上述の限界は、Rails ModelとDBのテーブルが一対一で紐づくRailsの世界観に起因する限界と言えます。&lt;/p&gt;

&lt;h2 id=&quot;目指すべきゴール&quot;&gt;目指すべきゴール&lt;/h2&gt;

&lt;p&gt;ではどうRailsの限界を乗り越えていけばいいでしょうか？&lt;/p&gt;

&lt;p&gt;下記は横軸がコードベースのサイズ、縦軸がペイン（痛みの度合い）を描いたグラフです&lt;sup id=&quot;fnref:c&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:c&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ginzarails-21/growth.png&quot; alt=&quot;inline&quot; /&gt;&lt;/p&gt;

&lt;p&gt;赤線はバニラRailsです。コードベースのサイズとともにペインが増大しています。&lt;/p&gt;

&lt;p&gt;緑線はストラクチャードRails。コードベースが増大してもペインが増大しません。&lt;/p&gt;

&lt;p&gt;僕の発表の言うところでは、赤線（バニラRails）がRails Way、緑線（ストラクチャードRails）がSub-Rails・Non-Rails Wayにあたります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ginzarails-21/growth2.png&quot; alt=&quot;inline&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ということで我々の基本的なゴールとしてはこの緑線、すなわち、 &lt;strong&gt;コードベースが大きくなってもペインが増大しないRailsコードベース&lt;/strong&gt; を目指しましょう、ということになります。&lt;/p&gt;

&lt;h2 id=&quot;rails-way&quot;&gt;Rails Way&lt;/h2&gt;

&lt;p&gt;小学生の絵みたいで恐縮なんですが、Rails Wayを絵にするとこんなイメージです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ginzarails-21/rails-way.png&quot; alt=&quot;fit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;つまり &lt;strong&gt;Railsのレールに沿った開発アプローチ&lt;/strong&gt; です。&lt;/p&gt;

&lt;h3 id=&quot;concerns&quot;&gt;Concerns&lt;/h3&gt;

&lt;p&gt;まずはConcerns。Model/Controllerの共通の関心事（Concern）をmoduleに切り出す手法です（代表例: DHH’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Recording&lt;/code&gt; Class&lt;sup id=&quot;fnref:6&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:6&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ginzarails-21/concerns.png&quot; alt=&quot;inline&quot; /&gt;&lt;/p&gt;

&lt;p&gt;注意すべきは、ConcernのRails公式ガイドはありません。強いて言うなら下記の記事でDHHがConcernを紹介しています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://signalvnoise.com/posts/3372-put-chubby-models-on-a-diet-with-concerns&quot;&gt;Put chubby models on a diet with concerns&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Modelの持っている能力（ability = &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-able&lt;/code&gt; suffix）に着目してConcern moduleに切り出していくのが、Rails Wayっぽさがあると言えます。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# app/models/concerns/concernable.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Concernable&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveSupport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Concern&lt;/span&gt;

  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;your&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;concern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;sti&quot;&gt;STI&lt;/h3&gt;

&lt;p&gt;RailsにおいてテーブルとModelは原則的に1対1で結びつきます。しかし、STIを使えば1つのテーブルで複数Model紐付けることができます。&lt;/p&gt;

&lt;p&gt;下図は&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;players&lt;/code&gt;という単一テーブルに複数のクラスが結びついている図です&lt;sup id=&quot;fnref:5&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:5&quot; class=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ginzarails-21/sti.png&quot; alt=&quot;inline&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Railsのコード例です。 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;companies&lt;/code&gt; テーブルに紐づく &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Firm&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Client&lt;/code&gt;モデルの例だと下記の通りです。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# app/models/company.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Company&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationRecord&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# app/models/firm.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Firm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Company&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# app/models/client.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Company&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;polymorphic-association&quot;&gt;Polymorphic Association&lt;/h3&gt;

&lt;p&gt;1つのポリモーフィック関連付け定義で複数のテーブルを従属させることができるのがポリモーフィック関連です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ginzarails-21/polymorphic.png&quot; alt=&quot;inline&quot; /&gt;&lt;/p&gt;

&lt;p&gt;上図の場合、通常のRails DB設計であれば &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pictures&lt;/code&gt;テーブルが&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;employee_id&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;product_id&lt;/code&gt;を持っているべきですが、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;imagable_id&lt;/code&gt;という1つカラムで複数のテーブルを従属させることができています。&lt;/p&gt;

&lt;p&gt;これをRailsのコードであらわすと下記の通りです。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# app/models/picture.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Picture&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;belongs_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:imageable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;polymorphic: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# app/models/employee.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Employee&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:pictures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;as: :imageable&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# app/models/product.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:pictures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;as: :imageable&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ただし注意点があります。ポリモーフィック関連は『SQLアンチパターン』6章でアンチパターンとして紹介されており、使用する際は気をつける必要があります。&lt;/p&gt;

&lt;p&gt;詳しくは『SQLアンチパターン』を読んでいただければと思います。&lt;/p&gt;

&lt;h3 id=&quot;accepts_nested_attributes_for&quot;&gt;accepts_nested_attributes_for&lt;/h3&gt;

&lt;p&gt;ネストされたアトリビュートで関連リソースの作成・更新・削除を行うのが&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;accepts_nested_attributes_for&lt;/code&gt;です。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:posts&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;accepts_nested_attributes_for&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:posts&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;member: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;name: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'joe'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;posts_attributes: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;title: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Kari, the awesome Ruby documentation browser!'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;title: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'The egalitarian assumption of the modern citizen'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:member&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ただしこの&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;accepts_nested_attributes_for&lt;/code&gt;はDHH自らが「消したい」と発言しており&lt;sup id=&quot;fnref:7&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:7&quot; class=&quot;footnote&quot;&gt;7&lt;/a&gt;&lt;/sup&gt;、積極的に使うのはやや躊躇われるかもしれません。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ginzarails-21/dhh.png&quot; alt=&quot;inline&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;その他細かめのテクニック&quot;&gt;その他細かめのテクニック&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Serialize Attribute&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;json型カラムへのメタデータ保存に便利&lt;/li&gt;
      &lt;li&gt;⚠️『SQLアンチパターン』5章 EAV&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Value Object&lt;/strong&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;compose_of&lt;/code&gt;)
    &lt;ul&gt;
      &lt;li&gt;複数カラムをValueオブジェクトとして展開するときに便利&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Validation Class&lt;/strong&gt;/&lt;strong&gt;Callback Class&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;クラスとして分離可能 → 分離することで複数モデルで再利用可能に&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;rails-wayまとめ&quot;&gt;「Rails Way」まとめ&lt;/h3&gt;

&lt;p&gt;全体としては、Rails WayだけではFat Modelを倒す手段として手数が少なく物足りないと感じます。&lt;/p&gt;

&lt;p&gt;アプリケーションサイズがFatになっている時点でそのRailsアプリケーションは中規模以上のサイズが見込まれますから、正直Rails WayだけでFat Modelを倒すのは無理だと思います。&lt;/p&gt;

&lt;p&gt;❌ Concerns, Validation ClassなどFat ModelをDRYに記述する手段にはなるが、構造的にダイエットする手段にはなっていません。あくまでそれらは局所的なダイエットに留まっています。&lt;/p&gt;

&lt;p&gt;❌ STI, PolymorphicなどはDB設計と密結合したソリューションで、完全なコードレベルの解決にはなっていません。また、アンチパターンとして紹介されているように、それ自体が技術負債になりえる構造的問題を孕んでいます。&lt;/p&gt;

&lt;h2 id=&quot;sub-rails-way&quot;&gt;Sub-Rails Way&lt;/h2&gt;

&lt;p&gt;Sub-Rails Wayはレールを補強・拡張しつつレールに乗るスタイルです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ginzarails-21/sub-rails-way.png&quot; alt=&quot;fit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;レールを何を使って補強・拡張するのでしょうか？それは下記２つになります。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;gem&lt;/li&gt;
  &lt;li&gt;SaaS&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;view-model&quot;&gt;View Model&lt;/h3&gt;

&lt;p&gt;ModelにおけるView関連ロジックを &lt;strong&gt;View Model&lt;/strong&gt; として切り出す手法です。&lt;/p&gt;

&lt;p&gt;Development of Further PoEAAで&lt;a href=&quot;https://martinfowler.com/eaaDev/PresentationModel.html&quot;&gt;Presentation Model&lt;/a&gt;という概念で紹介されているパターンにあたると考えています。ModelをDecoratorパターンっぽく拡張しているのでDecoratorとも呼ばれることが多いです&lt;sup id=&quot;fnref:8&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:8&quot; class=&quot;footnote&quot;&gt;8&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;このView Modelの良いところとしては、Fat Model の対処として機能するだけでなく、Fat View の対処としても機能する点です。&lt;/p&gt;

&lt;p&gt;💎 gemの実装としては下記のようなものがあります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/drapergem/draper&quot;&gt;draper&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/amatsuda/active_decorator&quot;&gt;active_decorator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;🔧 draperの場合、コードは下記のようになります（ArticleモデルのDecoratorクラス）。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# app/decorators/article_decorator.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArticleDecorator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Draper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Decorator&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;delegate_all&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;publication_status&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;published?&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;Published at &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;published_at&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;Unpublished&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;published_at&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;published_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;strftime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;%A, %B %e&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;権限管理認可&quot;&gt;権限管理・認可&lt;/h3&gt;

&lt;p&gt;管理画面実装において逃げられない実装は認証とあわせて、権限管理・認可ではないでしょうか？&lt;/p&gt;

&lt;p&gt;ResourceのCRUDでユーザーのアクセス制御するのが「Railsらしい」権限管理と考えています。&lt;/p&gt;

&lt;p&gt;💎 gemの実装としては下記のようなものです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/varvet/pundit&quot;&gt;pundit&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/kyuden/banken&quot;&gt;banken&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/CanCanCommunity/cancancan&quot;&gt;cancancan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;🔧 punditの場合、コードは下記の通りです（Postモデルの認可クラス）。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# app/policies/post_policy.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PostPolicy&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:post&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update?&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;admin?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;published?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;interactor&quot;&gt;Interactor&lt;/h3&gt;

&lt;p&gt;InteractorはClean Architecture由来する概念です。&lt;/p&gt;

&lt;p&gt;下記の図は見たことある方も多くいらっしゃるかもしれません。赤い部分がClean Architectureにおけるユースケース層になります。このユースケース層に Interactor が表現されています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://blog.cleancoder.com/uncle-bob/images/2012-08-13-the-clean-architecture/CleanArchitecture.jpg&quot; alt=&quot;inline&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ユースケース層というアプローチはとても良いと思っています。なぜなら先程「1つのModelが複数の異なるユースケースに密結合して実装されるとき―」と言いましたが、そのユースケースをまさにInteractorとして表現できるからです。&lt;/p&gt;

&lt;p&gt;個人的にClean ArchitectureとRailsは相性が良いと思っていて、このようにMVC+InteractorでClean Architectureのそれぞれの層と一致させることができるからです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ginzarails-21/Clean_Coder_Blog.png&quot; alt=&quot;inline&quot; /&gt;&lt;/p&gt;

&lt;p&gt;💎 gemとしては下記があります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/collectiveidea/interactor-rails&quot;&gt;interactor-rails&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;(not Rails) &lt;a href=&quot;https://github.com/hanami&quot;&gt;hanami&lt;/a&gt;’s &lt;a href=&quot;https://github.com/hanami/utils/blob/master/lib/hanami/interactor.rb&quot;&gt;Interactor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;hanamiはRailsではありませんが、Clean Architectureに強く影響を受けたRuby製Webフレームワークです。hanamiには Interactor の仕組みが標準で実装されています。&lt;/p&gt;

&lt;p&gt;🔧 interactor-railsの場合のコードは下記の通りです（ユーザーを認証するクラス）。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# app/interactors/authenticate_user.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AuthenticateUser&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Interactor&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;authenticate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;secret_token&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fail!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;message: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;authenticate_user.failure&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Inside your controller,&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;AuthenticateUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;特定の課題の解決&quot;&gt;特定の課題の解決&lt;/h3&gt;

&lt;p&gt;特定の課題を解決するgemとしては例えば下記のようなものがあります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;論理削除&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;💎 gem: &lt;a href=&quot;https://github.com/jhawthorn/discard&quot;&gt;discard&lt;/a&gt;, &lt;a href=&quot;https://github.com/rubysherpas/paranoia&quot;&gt;paranoia&lt;/a&gt;, &lt;a href=&quot;https://github.com/ActsAsParanoid/acts_as_paranoid&quot;&gt;acts_as_paranoid&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;⚠️ &lt;a href=&quot;https://www.slideshare.net/t_wada/ronsakucasual&quot;&gt;SQLアンチパターン 幻の第26章「とりあえず削除フラグ」&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;要素のソート・並び替え&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;💎 gem: &lt;a href=&quot;https://github.com/brendon/acts_as_list&quot;&gt;acts_as_list&lt;/a&gt;, &lt;a href=&quot;https://github.com/mixonic/ranked-model&quot;&gt;ranked-model&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;State Machine&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;💎 gem: &lt;a href=&quot;https://github.com/aasm/aasm&quot;&gt;aasm&lt;/a&gt;, &lt;a href=&quot;https://github.com/amatsuda/stateful_enum&quot;&gt;stateful_enum&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Tagging&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;💎 gem: &lt;a href=&quot;https://github.com/mbleigh/acts-as-taggable-on&quot;&gt;acts-as-taggable-on&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;HashをActiveRecordっぽく操作&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;💎 gem: &lt;a href=&quot;https://github.com/zilkey/active_hash&quot;&gt;active_hash&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;解決したい課題に応じて導入していくのが良いと思います。&lt;/p&gt;

&lt;h3 id=&quot;それrailsでできるよ&quot;&gt;「それRailsでできるよ」&lt;sup id=&quot;fnref:10&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:10&quot; class=&quot;footnote&quot;&gt;9&lt;/a&gt;&lt;/sup&gt;&lt;/h3&gt;

&lt;p&gt;逆にgemを使わずともRails標準で解決できるよって課題も多く存在します。例えば下記のような例です。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;:gem: &lt;a href=&quot;https://github.com/brainspec/enumerize&quot;&gt;enumerize&lt;/a&gt; (Emumerized Attributes)
    &lt;ul&gt;
      &lt;li&gt;Rails 4.1: ActiveRecord enum&lt;/li&gt;
      &lt;li&gt;参考. &lt;a href=&quot;https://api.rubyonrails.org/v5.2.3/classes/ActiveRecord/Enum.html&quot;&gt;ActiveRecord::Enum&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;:gem: &lt;a href=&quot;https://github.com/eagletmt/switch_point&quot;&gt;switch_point&lt;/a&gt; (Database R/W Split)
    &lt;ul&gt;
      &lt;li&gt;Rails 6: Multi-DB&lt;/li&gt;
      &lt;li&gt;参考: &lt;a href=&quot;https://railsguides.jp/active_record_multiple_databases.html&quot;&gt;Active Record で複数のデータベース利用 - Railsガイド&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;:gem: &lt;a href=&quot;https://github.com/zdennis/activerecord-import&quot;&gt;activerecord-import&lt;/a&gt; (Bulk Import)
    &lt;ul&gt;
      &lt;li&gt;Rails 6: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;insert_all&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;upsert_all&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;:gem: &lt;a href=&quot;https://github.com/carrierwaveuploader/carrierwave&quot;&gt;carrierwave&lt;/a&gt;, &lt;a href=&quot;https://github.com/shrinerb/shrine&quot;&gt;shrine&lt;/a&gt; (File Uploader)
    &lt;ul&gt;
      &lt;li&gt;Rails 5.2: Active Storage&lt;/li&gt;
      &lt;li&gt;参考: &lt;a href=&quot;https://railsguides.jp/active_storage_overview.html&quot;&gt;Active Storage の概要 - Railsガイド&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;:gem: &lt;a href=&quot;https://github.com/norman/friendly_id&quot;&gt;friendly_id&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;ActiveRecord: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;to_param&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;参考: &lt;a href=&quot;https://api.rubyonrails.org/classes/ActiveRecord/Integration.html#method-i-to_param&quot;&gt;ActiveRecord::Integration&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;:gem: &lt;a href=&quot;https://github.com/magnusvk/counter_culture&quot;&gt;counter_culture&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;ActiveRecord: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;counter_cache&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;参考: &lt;a href=&quot;https://railsguides.jp/association_basics.html#belongs-to%E3%81%AE%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3-counter-cache&quot;&gt;Active Record の関連付け&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ID/Password認証
    &lt;ul&gt;
      &lt;li&gt;ActiveModel: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;has_secure_password&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;参考: &lt;a href=&quot;https://api.rubyonrails.org/classes/ActiveModel/SecurePassword/ClassMethods.html&quot;&gt;ActiveModel::SecurePassword::ClassMethods&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;:gem: &lt;a href=&quot;https://github.com/rubyconfig/config&quot;&gt;config&lt;/a&gt; (YAML Config Management)
    &lt;ul&gt;
      &lt;li&gt;Rails Custom configuration:&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Rails::Application.config_for&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config.x&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;参考: &lt;a href=&quot;https://railsguides.jp/configuring.html#%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%A0%E8%A8%AD%E5%AE%9A&quot;&gt;Rails アプリケーションを設定する - Railsガイド&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;それrubyでできるよ&quot;&gt;「それRubyでできるよ」&lt;sup id=&quot;fnref:10:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:10&quot; class=&quot;footnote&quot;&gt;9&lt;/a&gt;&lt;/sup&gt;&lt;/h3&gt;

&lt;p&gt;gemを使わずともRubyでもできるよってケースもあります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;:gem: &lt;a href=&quot;https://github.com/pry/pry&quot;&gt;pry&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Ruby 2.4: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;binding.irb&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Ruby 2.7: REPL Syntax Highlighting&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;saasに切り出す&quot;&gt;SaaSに切り出す&lt;/h3&gt;

&lt;p&gt;処理をSaaSに切り出す、という意味では下記の例があります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://auth0.com/jp/&quot;&gt;Auth0&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;ユーザー認証ロジックをAuth0に移譲&lt;/li&gt;
      &lt;li&gt;認証にともなうMFA、パスワードリセット、セキュリティ対策などの面倒な実装をAuth0が肩代わり&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://sentry.io/welcome/&quot;&gt;Sentry&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;エラー通知をSentryに移譲&lt;/li&gt;
      &lt;li&gt;サービスにエラーをぽんぽん投げ込めばいい感じにエラーをアグリゲーション・可視化・各種通知してくれる&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://newrelic.co.jp/&quot;&gt;NewRelic&lt;/a&gt;/&lt;a href=&quot;https://www.datadoghq.com/ja/&quot;&gt;Datadog&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;APM (Application Performance Monitoring)を NewRelic/Datadog APMでやる&lt;/li&gt;
      &lt;li&gt;自前で Elasticsearch + Kibana 環境を構築してもいいが、構築コスト・運用コストともに高くつく&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;sub-rails-wayまとめ&quot;&gt;「Sub-Rails Way」まとめ&lt;/h3&gt;

&lt;p&gt;gem を使うことでFat Model対処法のバリエーションがぐっと広がります。独自実装でModelを太らせることをせず、使えるgemは積極的に利用していくとよいでしょう。&lt;/p&gt;

&lt;p&gt;一方、gemを使わずともRails標準で解決できることも実は多くあるので見極めた上でgem導入しましょう。&lt;/p&gt;

&lt;p&gt;また、選択肢はさほど多くないものの、最近はさまざまな便利SaaSが出ているので SaaSを使うのもFat Model対抗手段の１つとして検討してもよいでしょう。&lt;/p&gt;

&lt;h2 id=&quot;non-rails-way&quot;&gt;Non-Rails Way&lt;/h2&gt;

&lt;p&gt;Non-Railsはレールに乗らない別のレール、独自路線のことです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ginzarails-21/non-rails-way.png&quot; alt=&quot;fit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;つまり自らレールを作っていくスタイルです。&lt;/p&gt;

&lt;h3 id=&quot;form-model&quot;&gt;Form Model&lt;/h3&gt;

&lt;p&gt;Form Modelとは、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;include ActiveModel&lt;/code&gt;したRubyクラスのことです。&lt;/p&gt;

&lt;p&gt;巷ではForm Objectと呼ばれることが多いですが、＜Formに特化したActiveModel＞という意味で、あえてForm Modelと本発表では呼んでいます。&lt;/p&gt;

&lt;p&gt;フォームとForm Modelは一対一で紐付きます。こうすることで &lt;strong&gt;特定の＜Formのユースケース＞に対応したModel&lt;/strong&gt; が作成可能になります。&lt;/p&gt;

&lt;p&gt;💎 gemの実装としては下記のようなものがあります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/trailblazer/reform&quot;&gt;reform&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dry-rb/&quot;&gt;dry-rb&lt;/a&gt;シリーズ（旧・&lt;a href=&quot;https://github.com/solnic/virtus&quot;&gt;virtus&lt;/a&gt;）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Form Modelの使い所としては下記のように整理できると思います。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;紐づく&lt;br /&gt;テーブル数&lt;/th&gt;
      &lt;th&gt;Form Modelのユースケース&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;問い合わせフォームなどテーブルを作るまでもないフォームで利用&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2以上&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;accepts_nested_attributes_for&lt;/code&gt;の代わりとして、複雑なフォームの組み立て時に利用&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;テーブルとフォームが1対1で紐づく場合はRails Wayで解決させるのが素直な実装&lt;/p&gt;

&lt;p&gt;その他の特定のユースケースに特化したForm Model実装としては、下記のようなものが考えられます。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SearchForm: 条件に基づく検索に特化したフォーム&lt;/li&gt;
  &lt;li&gt;DownloadForm: CSVなどのダウンロードに特化したフォーム&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;poro&quot;&gt;PORO&lt;/h3&gt;

&lt;p&gt;POROとはPlain Old Ruby Objectの略です。元ネタはPoEAAのPOJO (Plain Old Java Object)です。&lt;/p&gt;

&lt;p&gt;POROは、ActiveRecordの機能に依存しない純粋なRuby実装です。なので&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;include ActiveModel&lt;/code&gt;しているRubyクラスは個人的にはPOROとは呼んでいません。&lt;/p&gt;

&lt;p&gt;純粋なRuby実装なのである意味、 &lt;strong&gt;Ruby Way&lt;/strong&gt; とも言うことができます。&lt;/p&gt;

&lt;p&gt;POROの主な用途としてはModelの補助輪的な役割だと考えています。&lt;/p&gt;

&lt;p&gt;例えば下記の例ではクラスメソッド&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;create!&lt;/code&gt;呼び出し時に引数を受け取って&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;create!&lt;/code&gt;インスタンスメソッド内でトランザクションを張って複数モデルの更新を行っています。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PostWithNotifications&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;creator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;creator: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;creator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;body: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create!&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;creator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@creator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;creator&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create!&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;transaction&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;create_post!&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;create_notifications!&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;    
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;このRubyクラスの場合、＜&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Post&lt;/code&gt;作成とともに&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Notification&lt;/code&gt;も作成する＞という複数モデル更新のユースケースをPOROに閉じ込めたということができるでしょう。&lt;/p&gt;

&lt;h3 id=&quot;service-class&quot;&gt;Service Class&lt;/h3&gt;

&lt;p&gt;続いてはサービスクラスです。&lt;/p&gt;

&lt;p&gt;サービスクラスに関してはもしかしたら賛否両論あるかもしれません。サービスという概念がデカすぎる故に、人によって使い方・解釈が異なり、サービスクラスにまつわる巷のすれ違いを起こしている印象があります。&lt;/p&gt;

&lt;p&gt;サービスクラスに関してはまずはサービスの定義問題があると思っています。つまり「あなたの言うServiceってなんですか？」という問題です。&lt;/p&gt;

&lt;p&gt;一口にサービスといっても様々な文脈のサービスがあります。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Architecture&lt;/th&gt;
      &lt;th&gt;Service Name&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;PoEAA&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Service Layer&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;DDD&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Service Class&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Onion Architecture&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Application Service, Domain Service&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Rails “Service”&lt;/strong&gt; ?&lt;/td&gt;
      &lt;td&gt;上記のどれでもない”Service”&lt;br /&gt;上記を組み合わせた”Service”&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;「どういう文脈のサービスか？」を明確にした上で議論しないとサービスクラスの定義・概念がボンヤリしてしまう印象です。なのでサービスクラスを導入する際は、サービスクラスの定義・使い方を明確にした上でチームに導入していくのが良いと思います。&lt;/p&gt;

&lt;p&gt;個人的な見解にはなりますが、＜特定のユースケースの解決＞という意味においてはInteractorのほうが少なくともRailsにおいては筋が良いと考えています。&lt;/p&gt;

&lt;p&gt;また、個人的に下手にサービスという巨大で強い概念を持ち込むより、POROという概念で雑にまとめたほうが好みだったりします。&lt;/p&gt;

&lt;h3 id=&quot;1-table-multiple-models&quot;&gt;1 Table Multiple Models&lt;/h3&gt;

&lt;p&gt;一つのテーブルに複数Modelを紐付けるアプローチです。&lt;/p&gt;

&lt;p&gt;Rails WayだとSTIでのみこれは実現可能ですが、STIを使わずにがんばってアプリケーションコードで複数モデルを表現しちゃいましょうというやり方です。&lt;/p&gt;

&lt;p&gt;コードにすると、例えば下記のようなコードになります。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationRecord&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User::AsSignUp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;validates&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;after_create&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:send_welcome_email&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;send_welcome_email&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;この例では＜&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User&lt;/code&gt;のサインアップ＞というユースケースにのみ特化したActiveRecordのModelを作成しています。&lt;/p&gt;

&lt;p&gt;ただこの実装に関しては、1 Table 1 ModelというRailsのパラダイム（規約）を壊すことになってしまうので、いささか危険思想という印象があります。&lt;/p&gt;

&lt;p&gt;ただ僕自身実際にプロダクションに導入して運用した経験はないので、もし実運用における成功例お持ちの方がいれば教えていただけると幸いです。&lt;/p&gt;

&lt;h3 id=&quot;non-rails-wayまとめ&quot;&gt;「Non-Rails Way」まとめ&lt;/h3&gt;

&lt;p&gt;4つの Non-Railsを紹介しました。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Form Model&lt;/li&gt;
  &lt;li&gt;PORO&lt;/li&gt;
  &lt;li&gt;Service Class&lt;/li&gt;
  &lt;li&gt;1 Table Multiple Models&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;これらをうまく導入できればFat Modelを倒す強力な武器となるのは間違いないでしょう。&lt;/p&gt;

&lt;p&gt;どれをどう導入するかに関しては正解はないと思うのでチームにあった手法を選択すると良いと考えています。&lt;/p&gt;

&lt;p&gt;といっても「どれを導入すればいいかわからん…」ってなると思うので個人的なおすすめアプローチを紹介すると、モデルを太らせてしまうような複雑なフォームに関してはForm Modelで表現するのがわかりやすいと思います。&lt;/p&gt;

&lt;p&gt;何らかのユースケースに特化したクラスを作りたいのであれば、Sub-Railsのセクションで紹介したInteractorを使うのが個人的にはオススメです。&lt;/p&gt;

&lt;p&gt;上記で足りないユースケースが出てきた場合、POROと総称してModelの補助輪となるようなRubyクラスを用意してあげると良いかと思います。&lt;/p&gt;

&lt;h2 id=&quot;全体のまとめ&quot;&gt;全体のまとめ&lt;/h2&gt;

&lt;p&gt;Fat Modelを倒すための3つのアプローチを紹介しました。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Rails Way&lt;/strong&gt;: Railsの規約に沿った開発アプローチ&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sub-Rails Way&lt;/strong&gt;: Railsの規約をgemで補強・拡張するアプローチ&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Non-Rails Way&lt;/strong&gt;: Railsの規約から外れる独自実装アプローチ&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;まずは、 &lt;strong&gt;Rails Way&lt;/strong&gt; + &lt;strong&gt;Sub-Rails Way&lt;/strong&gt; でFat Modelをダイエットできないか考えましょう。小規模なRailsアプリケーションであれば Rails Way + Sub-Rails Way で十分戦えると思います。&lt;/p&gt;

&lt;p&gt;Rails Way + Sub-Rails Way だけで立ち行かなくなった場合に、必要に応じて適切な &lt;strong&gt;Non-Rails Way&lt;/strong&gt; を取り入れていきましょう。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Non-Rails Way&lt;/strong&gt; はチーム毎に最適解があると思っています。チームで合意できる独自路線を選択・導入すればよいのではないでしょうか。&lt;/p&gt;

&lt;h2 id=&quot;参考資料&quot;&gt;参考資料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;書籍
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://amzn.to/2TO3ZTe&quot;&gt;エンタープライズアプリケーションアーキテクチャパターン&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://amzn.to/2XfXKJT&quot;&gt;Clean Architecture　達人に学ぶソフトウェアの構造と設計&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://amzn.to/3exaz8y&quot;&gt;エリック・エヴァンスのドメイン駆動設計&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://leanpub.com/growing-rails&quot;&gt;Growing Rails Applications in Practice&lt;/a&gt; by Henning Koch and Thomas Eisenbarth&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;アーキテクチャにまつわる資料
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://martinfowler.com/eaaDev/&quot;&gt;Martin Fowler: Development of Further Patterns of Enterprise Application Architecture&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html&quot;&gt;Clean Coder Blog: The Clean Architecture&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://jeffreypalermo.com/2008/07/the-onion-architecture-part-1/&quot;&gt;The Onion Architecture : part 1 | Programming with Palermo&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://guides.hanamirb.org/architecture/interactors/&quot;&gt;Architecture: Interactors | Hanami Guides&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://qiita.com/yuku_t/items/961194a5443b618a4cac&quot;&gt;中規模Web開発のためのMVC分割とレイヤアーキテクチャ - Qiita&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Rails公式ドキュメント
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://guides.rubyonrails.org/association_basics.html&quot;&gt;Active Record Associations — Ruby on Rails Guides&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://guides.rubyonrails.org/active_model_basics.html&quot;&gt;Active Model Basics — Ruby on Rails Guides&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://api.rubyonrails.org/classes/ActiveRecord/NestedAttributes/ClassMethods.html&quot;&gt;accepts_nested_attributes_for&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://api.rubyonrails.org/classes/ActiveRecord/Inheritance.html&quot;&gt;ActiveRecord::Inheritance&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://api.rubyonrails.org/v6.0.2.1/classes/ActiveSupport/Concern.html&quot;&gt;ActiveSupport::Concern&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Form Model (Form Object)について
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://tech.libinc.co.jp/entry/2019/04/05/113000&quot;&gt;Railsで複数モデルを扱うフォームをすっきり書く（Formオブジェクト） - LiBz Tech Blog&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://moneyforward.com/engineers_blog/2018/12/15/formobject/&quot;&gt;accepts_nested_attributes_forを使わず、複数の子レコードを保存する | Money Forward Engineers’ Blog&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://discourse.clean-rails.org/t/model-form-1-1/14&quot;&gt;Model と画面上の form が1対1で一致しない場合、どのように実装するのが綺麗なのか？ - clean-rails.org&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Service Class (Service Object) について
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://techracho.bpsinc.jp/hachi8833/2017_10_16/46482&quot;&gt;Railsで重要なパターンpart 1: Service Object（翻訳）｜TechRacho（テックラッチョ）〜エンジニアの「？」を「！」に〜｜BPS株式会社&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://qiita.com/joker1007/items/2a03500017766bdb0234&quot;&gt;てめえらのRailsはオブジェクト指向じゃねえ！まずはCallbackクラス、Validatorクラスを活用しろ！ - Qiita&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://intersect.whitefusion.io/the-art-of-code/why-service-objects-are-an-anti-pattern&quot;&gt;Why Service Objects are an Anti-Pattern — INTERSECT&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://techracho.bpsinc.jp/hachi8833/2018_04_16/55130&quot;&gt;Service Objectがアンチパターンである理由とよりよい代替手段（翻訳）｜TechRacho（テックラッチョ）〜エンジニアの「？」を「！」に〜｜BPS株式会社&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/willnet/concerns-about-concerns&quot;&gt;Concerns about Concerns - Speaker Deck&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tech.kitchhike.com/entry/2018/02/28/221159&quot;&gt;Decorator と Presenter を使い分けて、 Rails を ViewModel ですっきりさせよう - KitchHike Tech Blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://qiita.com/hanachin_/items/ba1dd93905567d88145c&quot;&gt;ActiveRecordのモデルが1つだとつらい - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;後編質問感想編&quot;&gt;後編（質問・感想編）&lt;/h2&gt;

&lt;p&gt;別記事にまとめました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/how-to-deal-with-fat-model-after&quot;&gt;銀座Rails#21で「Fat Modelの倒し方」を発表しました 〜質問・感想編〜&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://weblog.jamisbuck.org/2006/10/18/skinny-controller-fat-model&quot;&gt;Buckblog: Skinny Controller, Fat Model&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:a&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/hshimoyama/rails-with-applicationmodel&quot;&gt;ApplicationModel のある風景 - Speaker Deck&lt;/a&gt; &lt;a href=&quot;#fnref:a&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:b&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/yasaichi/what-is-ruby-on-rails-and-how-to-deal-with-it&quot;&gt;Ruby on Railsの正体と向き合い方 - Speaker Deck&lt;/a&gt; &lt;a href=&quot;#fnref:b&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:c&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://leanpub.com/growing-rails&quot;&gt;Growing Rails Applications in Practice&lt;/a&gt; &lt;a href=&quot;#fnref:c&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:6&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://twitter.com/dhh/status/964244090224128001&quot;&gt;https://twitter.com/dhh/status/964244090224128001&lt;/a&gt; &lt;a href=&quot;#fnref:6&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:5&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;PoEAA: &lt;a href=&quot;https://www.martinfowler.com/eaaCatalog/singleTableInheritance.html&quot;&gt;Single Table Inheritance&lt;/a&gt; &lt;a href=&quot;#fnref:5&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:7&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://github.com/rails/rails/pull/26976#discussion_r87855694&quot;&gt;https://github.com/rails/rails/pull/26976#discussion_r87855694&lt;/a&gt; &lt;a href=&quot;#fnref:7&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:8&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;参考: &lt;a href=&quot;https://amzn.to/3cekmi3&quot;&gt;『Rubyによるデザインパターン』&lt;/a&gt; 第11章 オブジェクトを改良する：Decorator &lt;a href=&quot;#fnref:8&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:10&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Ruby/Rails公式の提供する機能はgemより貧弱だったりするのであしからず &lt;a href=&quot;#fnref:10&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt; &lt;a href=&quot;#fnref:10:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Toshimaru</name></author><category term="presentation" /><category term="rails" /><category term="activerecord" /><summary type="html">銀座Rails#21で「Fat Modelの倒し方」と題して発表してきました。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/ginzarails-21/og.jpg" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/ginzarails-21/og.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">[Ruby]日時が特定日時の範囲内にあるかのチェック</title><link href="https://blog.toshimaru.net/datetime-range-check/" rel="alternate" type="text/html" title="[Ruby]日時が特定日時の範囲内にあるかのチェック" /><published>2020-05-17T00:00:00+09:00</published><updated>2020-05-17T00:00:00+09:00</updated><id>https://blog.toshimaru.net/datetime-range-check</id><content type="html" xml:base="https://blog.toshimaru.net/datetime-range-check/">&lt;h1 id=&quot;timewithzonebetween-で範囲内判定&quot;&gt;TimeWithZone#between? で範囲内判定&lt;/h1&gt;

&lt;p&gt;特定日付が範囲内にあるかの判定を行うには &lt;a href=&quot;https://railsdoc.github.io/classes/ActiveSupport/TimeWithZone.html#method-i-between-3F&quot;&gt;ActiveSupport::TimeWithZone#between?&lt;/a&gt; が使える。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# 日時.between?(始端, 終端)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;between?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;yesterday&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tomorrow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;実際に範囲内チェックを行うとこんな感じ。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;between?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;yesterday&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tomorrow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;between?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;week&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ago&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;yesterday&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;between?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tomorrow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;week&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;since&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ただ上記の書き方の場合、始端もしくは終端が &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nil&lt;/code&gt; の場合にエラーが出てしまう。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;today&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;between?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;yesterday&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;ArgumentError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comparison&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;failed&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:in&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`between?`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;rangecover-で範囲内判定&quot;&gt;Range#cover? で範囲内判定&lt;/h2&gt;

&lt;p&gt;上述の問題が回避するには、Rubyの &lt;a href=&quot;https://docs.ruby-lang.org/ja/2.7.0/method/Range/i/cover=3f.html&quot;&gt;Range#cover?&lt;/a&gt; が使える。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# (始端..終端).cover? 日時&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;yesterday&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tomorrow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cover?&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;始端終端が-nil-の場合&quot;&gt;始端/終端が nil の場合&lt;/h3&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# 始端がnil&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tomorrow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cover?&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 終端がnil&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;yesterday&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cover?&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;下記の通り範囲内から外れた場合は &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt; が帰ってくる。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;yesterday&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cover?&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tomorrow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cover?&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Toshimaru</name></author><category term="ruby" /><category term="rails" /><summary type="html">TimeWithZone#between? で範囲内判定</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/ruby-range.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/ruby-range.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">docker-compose で Rails6 + MySQL な環境を構築する</title><link href="https://blog.toshimaru.net/rails-on-docker-compose/" rel="alternate" type="text/html" title="docker-compose で Rails6 + MySQL な環境を構築する" /><published>2019-12-31T00:00:00+09:00</published><updated>2020-01-02T00:00:00+09:00</updated><id>https://blog.toshimaru.net/rails-on-docker-compose</id><content type="html" xml:base="https://blog.toshimaru.net/rails-on-docker-compose/">&lt;p&gt;docker-compose を使って Ruby 2.7 + Rails 6.0 + MySQL 8.0 の環境を構築してみたいと思います。&lt;/p&gt;

&lt;h2 id=&quot;ゴール&quot;&gt;ゴール&lt;/h2&gt;

&lt;p&gt;ゴールはRailsのデフォルトホーム画面を表示させるところまでです。&lt;/p&gt;

&lt;h2 id=&quot;手順&quot;&gt;手順&lt;/h2&gt;

&lt;p&gt;下記の手順をベースに進めていきます‥&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.docker.com/compose/rails/&quot;&gt;Quickstart: Compose and Rails | Docker Documentation&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;dockerfile&quot;&gt;Dockerfile&lt;/h3&gt;

&lt;p&gt;適当なディレクトリを用意して、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt;を下記の通り用意します。&lt;/p&gt;

&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ruby:2.7&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;apt-get update &lt;span class=&quot;nt&quot;&gt;-qq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; nodejs yarnpkg
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ln&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; /usr/bin/yarnpkg /usr/bin/yarn
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; /app
&lt;span class=&quot;k&quot;&gt;WORKDIR&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; /app&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; Gemfile /app/Gemfile&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; Gemfile.lock /app/Gemfile.lock&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; . /app&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Add a script to be executed every time the container starts.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; entrypoint.sh /usr/bin/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chmod&lt;/span&gt; +x /usr/bin/entrypoint.sh
&lt;span class=&quot;k&quot;&gt;ENTRYPOINT&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; [&quot;entrypoint.sh&quot;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;EXPOSE&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; 3000&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Start the main process.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;CMD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; [&quot;rails&quot;, &quot;server&quot;, &quot;-b&quot;, &quot;0.0.0.0&quot;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yarnpkg&lt;/code&gt;でyarnを入れると、yarn という実行ファイルではなく &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yarnpkg&lt;/code&gt; という実行ファイルになってしまうので、シンボリックリンクを作成している点に留意。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;初期gemfile&quot;&gt;初期Gemfile&lt;/h3&gt;

&lt;p&gt;下記の通り&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt;と&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile.lock&lt;/code&gt;を用意します。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'https://rubygems.org'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'rails'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'~&amp;gt;6'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;今回は Rails v6 （現時点の最新バージョン）を使います&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;touch &lt;/span&gt;Gemfile.lock
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;現段階では &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile.lock&lt;/code&gt; は空でOK&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;entrypointsh&quot;&gt;entrypoint.sh&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt;で&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ENTRYPOINT&lt;/code&gt;として定義している &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;entrypoint.sh&lt;/code&gt; です。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Remove a potentially pre-existing server.pid for Rails.&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; /app/tmp/pids/server.pid

&lt;span class=&quot;c&quot;&gt;# Then exec the container's main process (what's set as CMD in the Dockerfile).&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$@&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;docker-composeyml&quot;&gt;docker-compose.yml&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt;を下記の通り用意します。&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mysql:8.0&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./tmp/db:/var/lib/mysql&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;MYSQL_ALLOW_EMPTY_PASSWORD=1&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;web&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bash -c &quot;rm -f tmp/pids/server.pid &amp;amp;&amp;amp; bundle exec rails s -p 3000 -b '0.0.0.0'&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;.:/app&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3000:3000&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;depends_on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;db&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;MySQL は 8.0 （現時点の最新バージョン）を使用&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MYSQL_ALLOW_EMPTY_PASSWORD&lt;/code&gt; を設定することで &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;password&lt;/code&gt; が空でもrootで接続できるようにしておく&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;rails-new&quot;&gt;rails new&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rails new&lt;/code&gt; のコマンドをwebコンテナ上で実行してRailsのファイル群を生成します。&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;docker-compose run web bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;rails new &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--force&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--database&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;mysql
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--force&lt;/code&gt; で既存ファイルを上書き&lt;/li&gt;
  &lt;li&gt;DBはmysqlを指定&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Railsのファイル群が &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rails new&lt;/code&gt; コマンドによって出来上がったので build します。&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;docker-compose build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;dbホスト名変更&quot;&gt;DBホスト名変更&lt;/h3&gt;

&lt;p&gt;このままではDBに接続できません。なぜならば host 名を変更する必要があるからです。&lt;/p&gt;

&lt;p&gt;下記の通り &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config/database.yml&lt;/code&gt; のhostの部分を &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;db&lt;/code&gt; に置き換えましょう。&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;&amp;amp;default&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;adapter&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mysql2&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;utf8mb4&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;pool&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;%= ENV.fetch(&quot;RAILS_MAX_THREADS&quot;) { 5 } %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;root&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;db&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;development&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;*default&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;app_development&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;*default&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;app_test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;host&lt;/code&gt; に &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;db&lt;/code&gt; を設定
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;db&lt;/code&gt; はコンテナ名になります&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;build後に docker-compose up します。&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;docker-compose up
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localhost:3000&lt;/code&gt; でRailsが立ち上がるのでアクセスしてみましょう。&lt;/p&gt;

&lt;h2 id=&quot;error-caching_sha2_password-could-not-be-loaded&quot;&gt;Error: caching_sha2_password could not be loaded&lt;/h2&gt;

&lt;p&gt;しかしここでRailsに接続すると、下記のようなエラーが発生します。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ActiveRecord::NoDatabaseError

Plugin caching_sha2_password could not be loaded: /usr//usr/lib/x86_64-linux-gnu/mariadb19/plugin/caching_sha2_password.so: cannot open shared object file: No such file or directory
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これはwebコンテナが mysql 8.0 の&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;caching_sha2_password&lt;/code&gt;認証方式に対応していないためです。&lt;/p&gt;

&lt;p&gt;下記の手順で &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;caching_sha2_password&lt;/code&gt; を &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mysql_native_password&lt;/code&gt;（旧来の認証方式）に変更しましょう。&lt;/p&gt;

&lt;h3 id=&quot;dbコンテナでmysqlクライアント起動&quot;&gt;DBコンテナでmysqlクライアント起動&lt;/h3&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;docker-compose &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;db bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;dbコンテナのbashを起動後にmysqlコマンドで接続します。&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;mysql &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; root
&lt;span class=&quot;gp&quot;&gt;Welcome to the MySQL monitor.  Commands end with ;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;or &lt;span class=&quot;se&quot;&gt;\g&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Your MySQL connection id is 9
Server version: 8.0.18 MySQL Community Server - GPL

&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;認証方式変更sql&quot;&gt;認証方式変更SQL&lt;/h3&gt;

&lt;p&gt;下記のクエリでユーザー一覧とその認証方式が閲覧できます。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysql&amp;gt; select User,Host,plugin from mysql.user;
+------------------+-----------+-----------------------+
| User             | Host      | plugin                |
+------------------+-----------+-----------------------+
| root             | %         | caching_sha2_password |
| mysql.infoschema | localhost | caching_sha2_password |
| mysql.session    | localhost | caching_sha2_password |
| mysql.sys        | localhost | caching_sha2_password |
| root             | localhost | caching_sha2_password |
+------------------+-----------+-----------------------+
5 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;全て &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;caching_sha2_password&lt;/code&gt; に設定されています。これを&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mysql_native_password&lt;/code&gt;に変更します。&lt;/p&gt;

&lt;p&gt;今回対象となる &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root@%&lt;/code&gt; のユーザー設定を &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ALTER USER&lt;/code&gt; を使って変更しましょう。&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;USER&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'root'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'%'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDENTIFIED&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mysql_native_password&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- Query OK, 0 rows affected (0.02 sec)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;変更されました。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysql&amp;gt; select User,Host,plugin from mysql.user;
+------------------+-----------+-----------------------+
| User             | Host      | plugin                |
+------------------+-----------+-----------------------+
| root             | %         | mysql_native_password |
| mysql.infoschema | localhost | caching_sha2_password |
| mysql.session    | localhost | caching_sha2_password |
| mysql.sys        | localhost | caching_sha2_password |
| root             | localhost | caching_sha2_password |
+------------------+-----------+-----------------------+
5 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;yay-youre-on-rails&quot;&gt;“Yay! You’re on Rails!”&lt;/h2&gt;

&lt;p&gt;DBが作成されていないよ、というメッセージが出るので &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;db:prepare&lt;/code&gt; でテーブルを作成します。&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;docker-compose &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;web bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;rails db:prepare
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これでRailsのホーム画面が表示されるようになります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/docker/railshome.png&quot; alt=&quot;rails home&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;過去に同じことをやったときのエントリ: &lt;a href=&quot;docker-compose-rails/&quot;&gt;docker-compose で Rails 環境を構築する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Toshimaru</name></author><category term="docker" /><category term="mysql" /><category term="rails" /><summary type="html">docker-compose を使って Ruby 2.7 + Rails 6.0 + MySQL 8.0 の環境を構築してみたいと思います。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/docker/yaml.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/docker/yaml.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">ActiveRecordでhas_oneを持ったモデルをスキップして関連を定義する方法</title><link href="https://blog.toshimaru.net/belongs-to-foreign-key-and-primary-key/" rel="alternate" type="text/html" title="ActiveRecordでhas_oneを持ったモデルをスキップして関連を定義する方法" /><published>2019-11-10T00:00:00+09:00</published><updated>2019-11-10T00:00:00+09:00</updated><id>https://blog.toshimaru.net/belongs-to-foreign-key-and-primary-key</id><content type="html" xml:base="https://blog.toshimaru.net/belongs-to-foreign-key-and-primary-key/">&lt;h2 id=&quot;テーブル構成&quot;&gt;テーブル構成&lt;/h2&gt;

&lt;p&gt;とあるRailsアプリケーションでこんなテーブル構成があったとします。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/belongs-to-foreign-key-and-primary-key/users-posts.png&quot; alt=&quot;table relation&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;railsモデル定義&quot;&gt;Railsモデル定義&lt;/h2&gt;

&lt;p&gt;Railsモデルは下記のような状態です。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ユーザー（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User&lt;/code&gt;）は複数の記事（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Post&lt;/code&gt;）データをもっている&lt;/li&gt;
  &lt;li&gt;ユーザー（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User&lt;/code&gt;）は１つのプロフィール（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Profile&lt;/code&gt;）データをもっている&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:posts&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_one&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:profile&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;belongs_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Profile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;belongs_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;has_oneをもったモデルをスキップする&quot;&gt;has_oneをもったモデルをスキップする&lt;/h2&gt;

&lt;p&gt;やりたいこととしてはこのモデル構成の中心にいる &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User&lt;/code&gt; の関連をスキップして &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Post&lt;/code&gt; と &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Profile&lt;/code&gt; を直接関連付けてやることです。つまり &lt;strong&gt;User has_one Profile&lt;/strong&gt;, &lt;strong&gt;User has_many Posts&lt;/strong&gt; の関係を、&lt;strong&gt;Profile has_many Posts&lt;/strong&gt; の関係にしちゃおう、ということです。&lt;/p&gt;

&lt;p&gt;テーブル定義で表現すると下図の赤線の部分が今回やりたい関連の定義です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/belongs-to-foreign-key-and-primary-key/users-posts2.png&quot; alt=&quot;model relation 2&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;モデル定義&quot;&gt;モデル定義&lt;/h3&gt;

&lt;p&gt;上記のやりたいことはアソシエーションの定義において、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foreign_key&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;primary_key&lt;/code&gt; などのオプションを駆使して実現可能です。&lt;/p&gt;

&lt;p&gt;下記がそのアソシエーション定義の完成形となります。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:posts&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_one&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:profile&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;belongs_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;belongs_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;foreign_key: :user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;primary_key: :user_id&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Profile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;belongs_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;foreign_key: :user_id&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;この定義により &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Post&lt;/code&gt; → &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Profile&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Profile&lt;/code&gt; → &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Post&lt;/code&gt; の双方向の関連付けが定義することができました。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;profile&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#  Post Load (1.2ms)  SELECT  `posts`.* FROM `posts` ORDER BY `posts`.`id` ASC LIMIT 1&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#  Profile Load (3.9ms)  SELECT  `profiles`.* FROM `profiles` WHERE `profiles`.`user_id` = 1 LIMIT 1&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#&amp;lt;Profile id: 1, user_id: 1, ...&quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;posts&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#  Profile Load (0.8ms)  SELECT  `profiles`.* FROM `profiles` ORDER BY `profiles`.`id` ASC LIMIT 1&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#  Post Load (0.4ms)  SELECT  `posts`.* FROM `posts` WHERE `posts`.`user_id` = 1 LIMIT 11&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#&amp;lt;ActiveRecord::Associations::CollectionProxy [#&amp;lt;Post id: 1, user_id: 1, ...&quot;&amp;gt;, #&amp;lt;Post id: 2, user_id: 1, ...]&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上結果の通り、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User Load&lt;/code&gt;を通すことなくお互いを呼び出すことができていることが確認できました。&lt;/p&gt;

&lt;h2 id=&quot;inverse_of-を設定する&quot;&gt;inverse_of を設定する&lt;/h2&gt;

&lt;p&gt;上記のコードでやりたいことが実現できましたが、まだ１つだけ問題があります。それは &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foreign_key&lt;/code&gt; オプションを使っているために、双方向の関連付けが不完全に設定されていることです。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Active Recordでは標準的な名前同士の関連付けのほとんどをサポートしていて、自動的に認識できます。ただし、Active Recordでスコープや次のオプションを使った場合、双方向の関連付けは自動的に認識されません。&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:through&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:foreign_key&lt;/code&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;via. &lt;a href=&quot;https://railsguides.jp/association_basics.html#%E5%8F%8C%E6%96%B9%E5%90%91%E9%96%A2%E9%80%A3%E4%BB%98%E3%81%91&quot;&gt;Active Record の関連付け - Rails ガイド&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;実際に試してみましょう。すると下記の通り、同じidを持ったインスタンスにもかかわらず違うオブジェクトとして生成されていることがわかります。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;profile1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#&amp;lt;Profile id: 1, user_id: 1, ...&quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;profile2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;profile1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;profile&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#&amp;lt;Profile id: 1, user_id: 1, ...&quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;profile1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;equal?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;profile2&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;モデル定義inverse_of-version&quot;&gt;モデル定義（inverse_of version）&lt;/h3&gt;

&lt;p&gt;これを解決するために &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inverse_of&lt;/code&gt; を設定します。上述のコードを下記のように変更します。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:posts&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_one&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:profile&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;belongs_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;belongs_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;foreign_key: :user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;primary_key: :user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;inverse_of: :posts&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Profile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;belongs_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;foreign_key: :user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;inverse_of: :profile&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これで下記コードは同じオブジェクトとなり、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;を返すようになります。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;profile1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;profile2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;profile1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;profile&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;profile1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;equal?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;profile2&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;過去に書いた関連記事&quot;&gt;過去に書いた関連記事&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/belongs_to-through/&quot;&gt;ActiveRecordでhas_many, throughとは逆の関連を定義する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://railsdoc.github.io/classes/ActiveRecord/Associations/ClassMethods.html#method-i-belongs_to&quot;&gt;ActiveRecord::Associations::ClassMethods - belongs_to | RailsDoc(β)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://railsdoc.github.io/classes/ActiveRecord/Associations/ClassMethods.html#method-i-has_many&quot;&gt;ActiveRecord::Associations::ClassMethods - has_many | RailsDoc(β)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Toshimaru</name></author><category term="activerecord" /><category term="rails" /><summary type="html">テーブル構成</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/belongs-to-foreign-key-and-primary-key/og.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/belongs-to-foreign-key-and-primary-key/og.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Rails on Docker 環境での SystemSpec 環境構築</title><link href="https://blog.toshimaru.net/rails-on-docker-system-spec/" rel="alternate" type="text/html" title="Rails on Docker 環境での SystemSpec 環境構築" /><published>2019-09-18T00:00:00+09:00</published><updated>2019-09-18T00:00:00+09:00</updated><id>https://blog.toshimaru.net/rails-on-docker-system-spec</id><content type="html" xml:base="https://blog.toshimaru.net/rails-on-docker-system-spec/">&lt;p&gt;Rails on Docker な環境上に SystemSpec(System Test + RSpec) を導入しました。&lt;/p&gt;

&lt;h2 id=&quot;環境&quot;&gt;環境&lt;/h2&gt;

&lt;p&gt;今回SystemSpecを導入したのは下記のような環境です。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;プロジェクト: &lt;a href=&quot;https://github.com/toshimaru/RailsTwitterClone/&quot;&gt;RailsTwitterClone&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;docker-compose&lt;/li&gt;
  &lt;li&gt;Ruby 2.6&lt;/li&gt;
  &lt;li&gt;chromium-driver&lt;/li&gt;
  &lt;li&gt;gem
    &lt;ul&gt;
      &lt;li&gt;rails (5.2)&lt;/li&gt;
      &lt;li&gt;rspec-rails&lt;/li&gt;
      &lt;li&gt;selenium-webdriver&lt;/li&gt;
      &lt;li&gt;capybara&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;対応pull-request&quot;&gt;対応Pull Request&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/toshimaru/RailsTwitterClone/pull/506/files&quot;&gt;Re-try System Spec by toshimaru · Pull Request #506 · toshimaru/RailsTwitterClone&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;私のsystemspec遅すぎ&quot;&gt;私のSystemSpec、遅すぎ…？&lt;/h2&gt;

&lt;p&gt;実は SystemSpec を導入しようと試みたのは今回で二回目です。一回目は SystemTest が Rails の機能の一つとしてリリースされて間もない頃に試したのですが、テスト全体にかかる時間が劇的に遅くなったため、導入を断念したという経緯があります。&lt;/p&gt;

&lt;p&gt;当時のPull Requestがこちら: &lt;a href=&quot;https://github.com/toshimaru/RailsTwitterClone/pull/216&quot;&gt;Try System Spec by toshimaru · Pull Request #216 · toshimaru/RailsTwitterClone&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Before&lt;/p&gt;

  &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Finished in 15.74 seconds (files took 7.65 seconds to load)
152 examples, 0 failures
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;

  &lt;p&gt;After&lt;/p&gt;

  &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Finished in 58.46 seconds (files took 7.64 seconds to load)
152 examples, 3 failures
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;しかしこれは結果からいうと設定が悪かったのでした。下記のように system テストを Headless Chrome で走るように設定していましたが、これだとすべての System テストが Headless Chrome モードで起動してしまい、結果的に遅くなります。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;configure&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;type: :system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;driven_by&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:selenium_chrome_headless&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;下記のようにJSを起動させる必要のない System テストは従来通りの&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rack_test&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;js: true&lt;/code&gt;なテストは&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;selenium_chrome_headless&lt;/code&gt;に設定してやればテスト全体が高速に実行可能になりました。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;configure&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;type: :system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;driven_by&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:rack_test&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;type: :system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;js: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;driven_by&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:selenium_chrome_headless&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;dockerfile&quot;&gt;Dockerfile&lt;/h2&gt;

&lt;p&gt;今回利用した &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt; は Ruby 2.6 のベースイメージに &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chromium-driver&lt;/code&gt; をインストールしたコンテナとなります。&lt;/p&gt;

&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ruby:2.6&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;apt-get update &lt;span class=&quot;nt&quot;&gt;-qq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; nodejs chromium-driver 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;chrome-failed-to-start-exited-abnormally&quot;&gt;Chrome failed to start: exited abnormally&lt;/h3&gt;

&lt;p&gt;しかし、上述の環境において&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rspec&lt;/code&gt;を実行すると下記のようなエラーが発生します。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Failure/Error: Unable to infer file and line number from backtrace

  Selenium::WebDriver::Error::UnknownError:
      unknown error: Chrome failed to start: exited abnormally
      (unknown error: DevToolsActivePort file doesn't exist)
      (The process started from chrome location /usr/bin/chromium is no longer running, so ChromeDriver is assuming that Chrome has crashed.)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;このエラーは Chrome が&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sandbox&lt;/code&gt;モードで起動していることに起因します。下記のような&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;no-sandbox&lt;/code&gt;オプション付きの Headless Chrome を Capybara に driver として登録してやることで回避します。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Capybara&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;register_driver&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:headless_chrome&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;browser_options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Selenium&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;WebDriver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Chrome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tap&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;--headless&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;--disable-gpu&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;--no-sandbox&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Capybara&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Selenium&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Driver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;browser: :chrome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;options: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;browser_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;こうして登録した&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;headless_chrome&lt;/code&gt;をSystemTestに対して適応させてやればOKです。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;configure&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;type: :system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;js: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;driven_by&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:headless_chrome&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これできちんとDocker上でSystemSpecが通るようになりました。&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;docker-compose run web rspec
&lt;span class=&quot;go&quot;&gt;
Randomized with seed 30150
............................................................................................................Capybara starting Puma...
* Version 4.1.1 , codename: Fourth and One
* Min threads: 0, max threads: 4
* Listening on tcp://127.0.0.1:38789
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;...............................................
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;
Finished in 19.87 seconds (files took 8.8 seconds to load)
155 examples, 0 failures
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;公式ではno-sandboxをデフォルトにはしてくれない&quot;&gt;公式ではno-sandboxをデフォルトにはしてくれない？&lt;/h2&gt;

&lt;p&gt;余談ですが、Capybara本体で登録されている&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;selenium_chrome_headless&lt;/code&gt;に&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;no-sandbox&lt;/code&gt;オプションを付与する変更をPRしてみましたが、下記の通りRejectされてしまいました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/teamcapybara/capybara/pull/2241&quot;&gt;Add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;no-sandbox&lt;/code&gt; option for selenium_chrome_headless by toshimaru · Pull Request #2241 · teamcapybara/capybara&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;securityを担保するためのsandbox&quot;&gt;Securityを担保するためのsandbox&lt;/h3&gt;

&lt;p&gt;sandboxはセキュリティを高めるための環境なので基本的には &lt;strong&gt;デフォルトで no-sandbox にするべきではない&lt;/strong&gt; という判断のようです。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Sandbox leverages the OS-provided security to allow code execution that cannot make persistent changes to the computer or access information that is confidential.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;via. &lt;a href=&quot;https://chromium.googlesource.com/chromium/src/+/master/docs/design/sandbox.md&quot;&gt;Sandbox&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://qiita.com/ngron/items/f61b8635b4d67f666d75&quot;&gt;Rails + Selenium + DockerでSystemSpecの環境構築 - Qiita&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://news.mynavi.jp/article/20081009-a027/&quot;&gt;Google Chrome サンドボックスで実現するセキュリティ、Windowsの機能に依存 | マイナビニュース&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Toshimaru</name></author><category term="rspec" /><category term="rails" /><category term="docker" /><summary type="html">Rails on Docker な環境上に SystemSpec(System Test + RSpec) を導入しました。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/systemspec/og.jpg" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/systemspec/og.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">SmartHR社に体験入社してきた</title><link href="https://blog.toshimaru.net/smarthr-job-trial/" rel="alternate" type="text/html" title="SmartHR社に体験入社してきた" /><published>2019-07-22T00:00:00+09:00</published><updated>2019-07-22T00:00:00+09:00</updated><id>https://blog.toshimaru.net/smarthr-job-trial</id><content type="html" xml:base="https://blog.toshimaru.net/smarthr-job-trial/">&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;体験入社してます &lt;a href=&quot;https://t.co/f2Ga5LE5Es&quot;&gt;pic.twitter.com/f2Ga5LE5Es&lt;/a&gt;&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/1149139455657119744?ref_src=twsrc%5Etfw&quot;&gt;July 11, 2019&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;SmartHR社の体験入社に参加してきました。同社の体験入社制度に関しては下記の記事に詳しいです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://tech.smarthr.jp/entry/2018/09/20/120000&quot;&gt;エンジニア向けの体験入社制度ができました - SmartHR Tech Blog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;今回は体験入社を１スプリント分の一週間、営業日換算で４日間体験入社させてもらいました。&lt;/p&gt;

&lt;h2 id=&quot;なぜ参加したか&quot;&gt;なぜ参加したか？&lt;/h2&gt;

&lt;p&gt;SmartHR社のことは&lt;a href=&quot;https://blog.shojimiyata.com/entry/2018/06/01/112424&quot;&gt;RubyKaigi&lt;/a&gt;や&lt;a href=&quot;https://speakerdeck.com/miyasho88/we-are-hiring&quot;&gt;会社紹介資料&lt;/a&gt;などを通して知っており、傍目から良い会社そうだなぁという印象は持っていました。実際にSmartHRの中の人たちとも面談を通して直接話す中で、SmartHR社での働き方に興味が湧き、今回「体験入社をしてみたい！」という僕の申し出を受け入れてもらったかたちとなります。&lt;/p&gt;

&lt;p&gt;僕が特にSmartHR社に関して良いと思った点、興味があった点は下記です。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;オープンな社風&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;会社として＜オープンな社風＞が根付いているように見受けられ、良いと思った&lt;/li&gt;
      &lt;li&gt;このオープンな社風というトピックに関しては下記のブログに詳しいです
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;https://blog.shojimiyata.com/entry/2018/02/15/125904&quot;&gt;SmartHR が組織運営で一番大切にしていること - 宮田昇始のブログ&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;スタートアップ企業としてはありえない退職率の低さ&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;僕自身、30人くらいの規模から数百人規模になっていく組織のスケール過程を身をもって体験しましたが、こういうスタートアップ企業は端的に言って＜激動の時代＞となります。その荒波の中にあっては振り落とされる人がいたり、いわゆる音楽性の違いによって退出していく人も多くいるはずですが、SmartHR社の場合はそんなことになっておらず、単純にその雰囲気および組織運営の手法に興味がありました&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;なにをやったか&quot;&gt;なにをやったか？&lt;/h2&gt;

&lt;p&gt;体験入社としてJoinしたチームはSmartHR本体の開発をするチームでした。なので今回はSmartHR本体のいくつかの機能改修やバグ修正をやりました。&lt;/p&gt;

&lt;p&gt;初日に行われたスプリント計画に一緒に参加して、Jiraのチケットをいくつかアサインしてもらいました。アサインされたチケットは下記のようなものです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.e-gov.go.jp/shinsei/&quot;&gt;e-Gov電子申請&lt;/a&gt;まわりの改修&lt;/li&gt;
  &lt;li&gt;小さなバグ修正&lt;/li&gt;
  &lt;li&gt;APIの改修&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;また上記とは別に一通りのスクラムセレモニーや全社員を対象に行っている経営会議共有会にも参加させてもらいました。&lt;/p&gt;

&lt;h2 id=&quot;成果&quot;&gt;成果&lt;/h2&gt;

&lt;h3 id=&quot;一日目&quot;&gt;一日目&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;開発環境セットアップ&lt;/li&gt;
  &lt;li&gt;経営会議共有会参加&lt;/li&gt;
  &lt;li&gt;スプリントレビュー、スプリントレトロスペクティブ、スプリント計画に参加&lt;/li&gt;
  &lt;li&gt;開発成果: 1 PR&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;二日目&quot;&gt;二日目&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;負債返済のためのモブプロ会に参加&lt;/li&gt;
  &lt;li&gt;開発成果: 2PR&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;三日目&quot;&gt;三日目&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;バックログリファインメントに参加&lt;/li&gt;
  &lt;li&gt;開発成果: 2PR, 1Merge&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;四日目&quot;&gt;四日目&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;開発成果: 3PR 4Merge&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;総評&quot;&gt;総評&lt;/h3&gt;

&lt;p&gt;一部未マージなPRを残すことになってしまったものの、当初にアサインされたチケットはすべて着手することができた点は良かったです💪。結果としては、受け入れチームの期待値と同等かそれ以上の成果は残せたようで良かったです😄。&lt;/p&gt;

&lt;h2 id=&quot;体験入社してみての感想&quot;&gt;体験入社してみての感想&lt;/h2&gt;

&lt;h3 id=&quot;開発編&quot;&gt;開発編&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;開発環境セットアップはWikiにまとめられておりWiki通りの手順で進めていけばすんなり構築することができた
    &lt;ul&gt;
      &lt;li&gt;Rails以外のバックエンドはDocker化されておりバージョンまわりでハマることも無いようになっていて良かった&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;教科書通りのスクラムセレモニーを実施しており、きちんとスクラム回してて偉いなぁという印象でした（僕がスクラムマスターっぽい立ち回りするときはけっこうスクラムセレモニーサボっているので…）&lt;/li&gt;
  &lt;li&gt;良い意味で粛々とプロダクト開発を進めている印象だった
    &lt;ul&gt;
      &lt;li&gt;いわゆるスタートアップなキラキラ系イケイケWeb開発という感じではなかった（決して悪い意味ではないです）&lt;/li&gt;
      &lt;li&gt;一人ひとりがプロダクトに向き合い、オーナーシップをもって開発に取り組んでいる&lt;/li&gt;
      &lt;li&gt;大人な人が多くきちんと協調して開発を進めている印象&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;＜個人＞ではなく、＜チーム＞で課題を解決する姿勢が素晴らしいと思いました&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;例えばデスク（サービスデスク/ヘルプデスク）対応、コードレビューの対応、リリース作業など忙しくて手を付けられそうな人がいれば、手が空いている人が「（私が）やりますよ」と自然に手を挙げて対応をデリゲーションしていっている雰囲気は素晴らしいと感じました
        &lt;ul&gt;
          &lt;li&gt;これをチームで自然にできるようになるのはそう簡単なことではないので、チームとして成熟している証だと感じました&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;僕はもうエンジニアとしてはシニアレベルだしタスクは丸投げでも全然構わなかったけど、きちんと計画の時点で開発方針まである程度あたりをつけて落とし込んでくれたお陰で、とても開発がスムーズに進められました。受け入れメンバーの皆さまには感謝です&lt;/li&gt;
  &lt;li&gt;開発の中できちんと技術負債を減らすことにも尽力されていて良いなぁと思いました
    &lt;ul&gt;
      &lt;li&gt;技術負債担当チームがあったり技術負債返済モブプロ（with &lt;a href=&quot;https://twitter.com/netwillnet&quot;&gt;willnet&lt;/a&gt;さん）みたいな取り組みをしていたり&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;現在の規模でもCTOの芹澤さんがバリバリコード書いている雰囲気があり意外でした&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;開発以外編&quot;&gt;開発以外編&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;退職率の低さについて
    &lt;ul&gt;
      &lt;li&gt;やはり第一に採用でカルチャーマッチする人のみをきちんと選んで採っている点が大きそうです
        &lt;ul&gt;
          &lt;li&gt;参考: &lt;a href=&quot;https://smarthr.co.jp/vision&quot;&gt;Mission | 株式会社SmartHR&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;良いところも悪いところもすべてオープンにする姿勢が社員に響いているのではないでしょうか
        &lt;ul&gt;
          &lt;li&gt;経営会議共有会では出せる数値は詳らかに全部出す&lt;/li&gt;
          &lt;li&gt;経営会議共有会の最後には代表・宮田さんへのAMA（Ask Me Anything）コーナーみたいなのもあって良かった&lt;/li&gt;
          &lt;li&gt;都合の悪いことも含めて情報を隠さない → 現場の不安が変に増幅することもない&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;普段、自分が受け入れチーム側としてオンボーディングを実施することが多かったけど、今回受け入れてもらう側として参加できて新鮮だった&lt;/li&gt;
  &lt;li&gt;今回の体験入社で初めてSmartHRを実際に使わせてもらったけど、とても便利でした。一度使うとたぶん紙での提出とか面倒くさくなりますね。
    &lt;ul&gt;
      &lt;li&gt;各社、SmartHRの導入よろしく頼む🙏&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;smarthr社にマッチしそうな人について&quot;&gt;SmartHR社にマッチしそうな人について&lt;/h2&gt;

&lt;p&gt;体験入社してみてSmartHR社にマッチしそうな人、逆にマッチしなそうと感じる人を書いてみます。&lt;/p&gt;

&lt;h3 id=&quot;マッチしそうな人&quot;&gt;マッチしそうな人&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;SmartHR というサービスが好きな人&lt;/li&gt;
  &lt;li&gt;会社・チーム一丸となってプロダクト作りをしたい人&lt;/li&gt;
  &lt;li&gt;Railsでのサービス作りが好きな人&lt;/li&gt;
  &lt;li&gt;チームワークが得意、好きな人&lt;/li&gt;
  &lt;li&gt;オープンな社風に共感できる人&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;マッチしなそうな人&quot;&gt;マッチしなそうな人&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;プロダクトよりもエッジな技術をひたすら突き詰めたいという人&lt;/li&gt;
  &lt;li&gt;チームワークよりも孤独な作業が好きな人&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;smarthr社への応募はこちらから&quot;&gt;SmartHR社への応募はこちらから&lt;/h3&gt;

&lt;p&gt;上記の「マッチしそうな人」にピンときた方は応募してみると良いかと思います！&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://smarthr.co.jp/recruit&quot;&gt;Recruit | 株式会社SmartHR&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;子会社創業メンバーも募集しているようです。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;そろそろ起業しようかな？と思ってるけど「共同創業者がいない」「ネタがない」というエンジニアさん、SmartHRの子会社の創業メンバーとして一発当てませんか？&lt;br /&gt;&lt;br /&gt;いま2つの会社があなたを求めてます！お金の心配なく、事業とプロダクトに集中できます。興味ある方ぜひDMください！&lt;br /&gt;&lt;br /&gt;（続く&lt;/p&gt;&amp;mdash; 宮田 昇始 (@miyasho88) &lt;a href=&quot;https://twitter.com/miyasho88/status/1151047024613236736?ref_src=twsrc%5Etfw&quot;&gt;July 16, 2019&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3 id=&quot;smarthrについてもっと知りたい&quot;&gt;SmartHRについてもっと知りたい！&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;「SmartHRについてもっと知りたい！」&lt;/strong&gt;という方はこちらもどうぞ。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://shanaiho.smarthr.co.jp/&quot;&gt;SmartHRオープン社内報&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tech.smarthr.jp/&quot;&gt;SmartHR Tech Blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.shojimiyata.com/&quot;&gt;宮田昇始のブログ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;最後に&quot;&gt;最後に&lt;/h2&gt;

&lt;p&gt;他社のスクラム・スプリントを経験するのはなかなかない貴重な機会なので、それを一通り体験できたのはとても良かったです。受け入れていただいたSmartHRさん、ありがとうございました！&lt;/p&gt;</content><author><name>Toshimaru</name></author><category term="tech" /><category term="rails" /><summary type="html">体験入社してます pic.twitter.com/f2Ga5LE5Es&amp;mdash; toshimaru (@toshimaru_e) July 11, 2019</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/smarthr.jpeg" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/smarthr.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Roppongi.rb#8で「Make Rails Documents SEO(Search Engine Optimized)」を発表しました</title><link href="https://blog.toshimaru.net/make-rails-documents-seo-search-engine-optimized/" rel="alternate" type="text/html" title="Roppongi.rb#8で「Make Rails Documents SEO(Search Engine Optimized)」を発表しました" /><published>2019-02-25T00:00:00+09:00</published><updated>2019-02-27T00:00:00+09:00</updated><id>https://blog.toshimaru.net/make-rails-documents-seo-search-engine-optimized</id><content type="html" xml:base="https://blog.toshimaru.net/make-rails-documents-seo-search-engine-optimized/">&lt;p&gt;&lt;a href=&quot;https://roppongirb.connpass.com/event/118218/&quot;&gt;Roppongi.rb #8&lt;/a&gt;にて「Make Rails Documents SEO(Search Engine Optimized)」と題して発表してきた。&lt;/p&gt;

&lt;h2 id=&quot;発表スライド&quot;&gt;発表スライド&lt;/h2&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;2238d7f3d662436b943b125a7b10fec1&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;railsdocgithubio&quot;&gt;railsdoc.github.io&lt;/h2&gt;

&lt;p&gt;発表では僕が過去に行ったいくつかのRails公式ドキュメントのSEO対応の紹介とともに、現在進めているプロジェクトである&lt;a href=&quot;https://railsdoc.github.io/&quot;&gt;railsdoc.github.io&lt;/a&gt;を紹介した。&lt;/p&gt;

&lt;p&gt;GitHub: &lt;a href=&quot;https://github.com/railsdoc/railsdoc.github.io&quot;&gt;railsdoc/railsdoc.github.io: Rails API Documentation.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;railsdocgithubioのゴール&quot;&gt;railsdoc.github.ioのゴール&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://api.rubyonrails.org/&quot;&gt;api.rubyonrails.org&lt;/a&gt;をSEO強くする&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://api.rubyonrails.org/&quot;&gt;api.rubyonrails.org&lt;/a&gt;を使いやすくする&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下記はついでにできると良いなーと考えていること。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;フロントの技術を少しだけモダンに
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://getbootstrap.com/&quot;&gt;bootstrap&lt;/a&gt;を使ってデザイン構成しやすくする&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;GitHubといい感じの連携&lt;/li&gt;
  &lt;li&gt;AMP対応もできると良さそう&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;railsdocgithubioの今後&quot;&gt;railsdoc.github.ioの今後&lt;/h2&gt;

&lt;p&gt;発表内で紹介したが今後については下記のように考えている。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;コードベース整備中 &amp;amp; 未実装箇所の実装&lt;/li&gt;
  &lt;li&gt;folk版sdocじゃない独自のドキュメント生成gemを作りたい&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;紹介したprissue&quot;&gt;紹介したPR/Issue&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/rails/weblog/pull/88&quot;&gt;Introduce jekyll-seo-tag by toshimaru · Pull Request #88 · rails/weblog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/rails/homepage/pull/73&quot;&gt;Add Jekyll SEO tag and Jekyll sitemap by benbalter · Pull Request #73 · rails/homepage&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/rails/rails/pull/34860&quot;&gt;Make Ruby on Rails Guides SNS-friendly by toshimaru · Pull Request #34860 · rails/rails&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/rails/rails/issues/27633&quot;&gt;No Rails 5 in apidock.com/rails · Issue #27633 · rails/rails&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;紹介したrails公式ドキュメント&quot;&gt;紹介したRails公式ドキュメント&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;rubyonrails.org&quot;&gt;rubyonrails.org&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;weblog.rubyonrails.org&quot;&gt;weblog.rubyonrails.org&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;guides.rubyonrails.org&quot;&gt;guides.rubyonrails.org&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;api.rubyonrails.org&quot;&gt;api.rubyonrails.org&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;その他&quot;&gt;その他&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;発表には&lt;a href=&quot;https://www.deckset.com/&quot;&gt;Deckset 2&lt;/a&gt;を使った（ずっとDeckset1使ってたけど2にUpdateした）&lt;/li&gt;
  &lt;li&gt;何かあればイシューに書いてほしい &lt;a href=&quot;https://github.com/railsdoc/railsdoc.github.io/issues&quot;&gt;github.com/railsdoc/railsdoc.github.io/issues&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Toshimaru</name></author><category term="presentation" /><category term="seo" /><category term="rails" /><summary type="html">Roppongi.rb #8にて「Make Rails Documents SEO(Search Engine Optimized)」と題して発表してきた。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/roppongirb8/og.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/roppongirb8/og.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Rails E2Eテストで poltergeist から Headless Chrome へと乗り換える</title><link href="https://blog.toshimaru.net/poltergeist-to-selenium-webdriver/" rel="alternate" type="text/html" title="Rails E2Eテストで poltergeist から Headless Chrome へと乗り換える" /><published>2018-08-04T00:00:00+09:00</published><updated>2019-09-17T00:00:00+09:00</updated><id>https://blog.toshimaru.net/poltergeist-to-selenium-webdriver</id><content type="html" xml:base="https://blog.toshimaru.net/poltergeist-to-selenium-webdriver/">&lt;p&gt;RailsのCapybaraを使ったE2Eテスト(feature spec)をこの度、&lt;a href=&quot;https://github.com/teampoltergeist/poltergeist&quot;&gt;poltergeist&lt;/a&gt;から&lt;a href=&quot;https://chromium.googlesource.com/chromium/src/+/master/headless/README.md&quot;&gt;Headless Chrome&lt;/a&gt;に乗り換えてみたのでそのときのメモ。&lt;/p&gt;

&lt;h2 id=&quot;対応-pull-request&quot;&gt;対応 Pull Request&lt;/h2&gt;

&lt;p&gt;今回対応したPull Requestはこちら。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/toshimaru/RailsTwitterClone/pull/211&quot;&gt;Use headless Chrome instead of PhantomJS(poltergeist) by toshimaru · Pull Request #211 · toshimaru/RailsTwitterClone · GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;思ったよりも差分はコンパクトにまとまりました。&lt;/p&gt;

&lt;h2 id=&quot;install-selenium-webdriver&quot;&gt;Install selenium-webdriver&lt;/h2&gt;

&lt;p&gt;まずは&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;poltergeist&lt;/code&gt; gemの代わりに、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;selenium-webdriver&lt;/code&gt;をインストール。&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gd&quot;&gt;-  gem &quot;poltergeist&quot;
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+  gem &quot;selenium-webdriver&quot;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;change-capybarajavascript_driver&quot;&gt;Change Capybara.javascript_driver&lt;/h2&gt;

&lt;p&gt;次に&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Capybara.javascript_driver&lt;/code&gt;を&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:poltergeist&lt;/code&gt;から&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:selenium_chrome_headless&lt;/code&gt;に変更します。&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gd&quot;&gt;- require &quot;capybara/poltergeist&quot;
- Capybara.javascript_driver = :poltergeist
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+ require &quot;selenium-webdriver&quot;
+ Capybara.javascript_driver = :selenium_chrome_headless
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ちなみに&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:selenium_chrome_headless&lt;/code&gt;の設定は下記の変更の中でcapybara内に取り込まれています。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Capybara&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;register_driver&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:selenium_chrome_headless&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;browser_options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Selenium&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;WebDriver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Chrome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;browser_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'--headless'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;browser_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'--disable-gpu'&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Capybara&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Selenium&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Driver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;browser: :chrome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;options: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;browser_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;via. &lt;a href=&quot;https://github.com/teamcapybara/capybara/commit/0275eab42c610cd1ccde7947b051d0b00857b9ce&quot;&gt;add default selenium chrome driver registrations · teamcapybara/capybara@0275eab · GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;install-chromedriver&quot;&gt;Install chromedriver&lt;/h2&gt;

&lt;h3 id=&quot;on-macos&quot;&gt;On MacOS&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chromedriver&lt;/code&gt; が必要になってくるが、Macの場合はbrewで入れちゃうのが一番ラクです。&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;brew cask &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;chromedriver
&lt;span class=&quot;go&quot;&gt;Updating Homebrew...
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;==&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;Auto-updated Homebrew!
&lt;span class=&quot;go&quot;&gt;Updated 1 tap (homebrew/cask).
No changes to formulae.

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;==&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;Satisfying dependencies
&lt;span class=&quot;gp&quot;&gt;==&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;Downloading https://chromedriver.storage.googleapis.com/2.41/chromedriver_mac64.zip
&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;####################################################################### 100.0%&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;==&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;Verifying checksum &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;Cask chromedriver
&lt;span class=&quot;gp&quot;&gt;==&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;Installing Cask chromedriver
&lt;span class=&quot;gp&quot;&gt;==&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;Extracting nested container chromedriver
&lt;span class=&quot;gp&quot;&gt;==&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;Linking Binary &lt;span class=&quot;s1&quot;&gt;'chromedriver'&lt;/span&gt; to &lt;span class=&quot;s1&quot;&gt;'/usr/local/bin/chromedriver'&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;🍺  chromedriver was successfully installed!
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;注意事項&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brew install chromedriver&lt;/code&gt;ではinstallできないので注意（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brew cask&lt;/code&gt;経由にすること）&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chromedriver-helper&lt;/code&gt; gem が入っているとうまく動かない場合があるので注意&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;on-circleci&quot;&gt;On CircleCI&lt;/h3&gt;

&lt;p&gt;CircleCI上では、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ruby:x.x-node-browsers&lt;/code&gt;のCircleCI公式Ruby Dokcer Imageを使っていればきちんと動作しました。&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;na&quot;&gt;docker&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;circleci/ruby:2.5-node-browsers&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上記の設定の場合、Ruby2.5のnode-browsersバージョンをベースイメージとして使用しています。&lt;/p&gt;

&lt;h3 id=&quot;on-travisci&quot;&gt;On TravisCI&lt;/h3&gt;

&lt;p&gt;これが今回の対応で一番ハマった設定でした。いろいろ試しましたが下記のエラーがなかなか解決できませんでした。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Failures:

  1) Authentication authorization screenshot
     Failure/Error: before { visit signin_path }

     Selenium::WebDriver::Error::WebDriverError:
        Unable to find Mozilla geckodriver. Please download the server from https://github.com/mozilla/geckodriver/releases and place it somewhere on your PATH. More info at https://developer.mozilla.org/en-US/docs/Mozilla/QA/Marionette/WebDriver.
     # ./spec/features/authentication_pages_spec.rb:9:in `block (3 levels) in &amp;lt;top (required)&amp;gt;'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;del&gt;本当は&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo: false&lt;/code&gt;の設定で動かしたかったのですがそれだと上手くいかなかったので&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo&lt;/code&gt;で起動させて&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chromium-chromedriver&lt;/code&gt;をテスト前にInstallしてパスを通すという方法でテストを通しました。&lt;/del&gt;&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;sudo&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;required&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ruby&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;before_install&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sudo apt-get install -y chromium-chromedriver&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ln -s /usr/lib/chromium-browser/chromedriver ~/bin/chromedriver&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;del&gt;(もう少しスマートなやり方をご存知の方は教えていただけると嬉しいです🙏)&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;追記（2019年9月17日）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo&lt;/code&gt; 無しでも下記のような設定でいけました。&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;dist&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bionic&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;addons&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;chrome&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;stable&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;apt&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;packages&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;chromium-chromedriver&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;参考Pull Request: &lt;a href=&quot;https://github.com/toshimaru/RailsTwitterClone/pull/524/files&quot;&gt;No sudo on TravisCI by toshimaru · Pull Request #524 · toshimaru/RailsTwitterClone&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;参考リンク&quot;&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://ohbarye.hatenablog.jp/entry/2018/03/10/232300&quot;&gt;PhantomJS + Poltergeist を Selenium + Headless Chrome で置き換える (1) Rails + Capybara による feature spec 編 - valid,invalid&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tech.speee.jp/entry/2017/06/15/135636&quot;&gt;RSpec の feature spec でヘッドレス Chrome を使う - Speee DEVELOPER BLOG&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://y-yagi.tumblr.com/post/166831012790/rails%E9%9B%91%E3%81%ABsystem-test%E3%81%A7headless-chrome%E3%82%92%E4%BD%BF%E3%81%86&quot;&gt;[Rails]雑にSystem TestでHeadless Chromeを使う | 日々雑記&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Toshimaru</name></author><category term="rails" /><category term="rspec" /><category term="chrome" /><summary type="html">RailsのCapybaraを使ったE2Eテスト(feature spec)をこの度、poltergeistからHeadless Chromeに乗り換えてみたのでそのときのメモ。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/chromedriver.jpg" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/chromedriver.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>