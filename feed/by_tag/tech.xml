<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://blog.toshimaru.net/feed/by_tag/tech.xml" rel="self" type="application/atom+xml" /><link href="https://blog.toshimaru.net/" rel="alternate" type="text/html" /><updated>2022-05-19T13:37:03+09:00</updated><id>https://blog.toshimaru.net/feed/by_tag/tech.xml</id><title type="html">Hack Your Design!</title><subtitle>toshimaruの技術系なブログ</subtitle><author><name>Toshimaru</name></author><entry><title type="html">【レビュー】HHKB Hybrid Type-S をしばらく使ってみた感想</title><link href="https://blog.toshimaru.net/hhkb-hybrid-type-s/" rel="alternate" type="text/html" title="【レビュー】HHKB Hybrid Type-S をしばらく使ってみた感想" /><published>2020-05-02T00:00:00+09:00</published><updated>2020-05-16T00:00:00+09:00</updated><id>https://blog.toshimaru.net/hhkb-hybrid-type-s</id><content type="html" xml:base="https://blog.toshimaru.net/hhkb-hybrid-type-s/"><![CDATA[<p><a href="https://happyhackingkb.com/jp/products/hybrid_types/">HHKB Professional
HYBRID Type-S</a> を購入してしばらく経ったので使ってみた感想を書いてみます。</p>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">例のブツです <a href="https://twitter.com/hashtag/HHKB?src=hash&amp;ref_src=twsrc%5Etfw">#HHKB</a> <a href="https://t.co/agDV1Hol5Z">pic.twitter.com/agDV1Hol5Z</a></p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/1206387903632248833?ref_src=twsrc%5Etfw">December 16, 2019</a></blockquote>

<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=toshimaru-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B082TXLC2B&amp;linkId=c5256b54070710d4ccbe87264a98553d"></iframe>
<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=toshimaru-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B082TSZ27D&amp;linkId=06db5d4f52a7b49dce985f7445194cbb"></iframe>

<h2 id="購入モチベーション">購入モチベーション</h2>

<ul>
  <li><strong>not Type-SなHHKBはややうるさい</strong>
    <ul>
      <li>自分でタイピングしているときは気にならないけど、隣でバシバシ叩かれているのを体験するとやや音が耳障りなときがある。ノイズを気にせずタイピングできるように静音性のある Type-S が欲しかった</li>
    </ul>
  </li>
  <li><strong>Type-C接続</strong>
    <ul>
      <li>mini USB接続で macbook の Type-C と接続しているのがどうも時代遅れ感があってイヤだった</li>
    </ul>
  </li>
  <li><strong>Bluetooth接続</strong>
    <ul>
      <li>BT無線接続でもキーボードを接続したかった</li>
      <li>⚠️ Bluetooth接続できるのは、macOS 10.15（Catalina）以降</li>
    </ul>
  </li>
  <li>その他
    <ul>
      <li>（<a href="https://medpeer.co.jp/recruit/workplace/development.html">会社の補助</a>が出る 😏）</li>
    </ul>
  </li>
</ul>

<h2 id="購入したモデル">購入したモデル</h2>

<p>カラーは白、日本語配列を購入しました。</p>

<p>今までは中二心をくすぐる墨カラーを使用していましたが、キーの視認性が悪く不便と気づいてしまったので白をセレクトしました（大人になったのね、私）。</p>

<p><img src="/images/posts/hhkb/white-hhkb.jpg" alt="白、日本語配列HHKB" /></p>

<p>下記エントリで紹介した通り、尊師スタイルで利用しています。</p>

<p><a href="/macbook-hhkb-sonshi-style/">俺流 MacBook+HHKB 最強尊師スタイル</a></p>

<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=toshimaru-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B077ZSGQDH&amp;linkId=254fa7761170460244a7a889534107de"></iframe>

<h2 id="hhkb-hybrid-特徴">HHKB Hybrid 特徴</h2>

<h3 id="無線接続有線接続">無線接続/有線接続</h3>

<p>名前のHybridというのはどうやら無線接続・有線接続のハイブリッド接続が可能、という意味っぽいです。</p>

<p>これにより、シーンに合わせて下記のように使い分けできるのは便利かもしれません。</p>

<ul>
  <li>自宅メインで接続するときは有線接続</li>
  <li>持ち運び利用するときは無線接続</li>
</ul>

<p>なお、無線の給電がバッテリーではなく乾電池なのは「HHKBを長く使ってもらうため」とのこと。バッテリーだと確かにヘタってしまうので、乾電池の採用はPFUらしい設計思想と言えるかもしれません。</p>

<h3 id="usb-type-c">USB Type-C</h3>

<p>HHKB Hybrid ではUSB Type-Cによる接続が可能です。</p>

<p>上述の通り僕は尊師スタイルでHHKBを使っているのでディスプレイとHHKB接続面がぶつからないように下記のL字のUSB Type-Cケーブルを購入しておきました。</p>

<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=toshimaru-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B07PLRNWQ7&amp;linkId=012378bddd1c67b23ef7468a9f50f430"></iframe>

<p><img src="/images/posts/hhkb/hhkbcover.jpg" alt="キーボードルーフ" /></p>

<p>☝️キャンペーンで無料で付いてきたキーボードルーフ。キーボード隙間に入り込むホコリを防げて地味に便利。</p>

<h2 id="しばらく使ってみた感想">しばらく使ってみた感想</h2>

<blockquote class="twitter-tweet" data-conversation="none"><p lang="ja" dir="ltr">Type-S、静かだし打ち心地もソフトで気持ちいい</p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/1207643044020801538?ref_src=twsrc%5Etfw">December 19, 2019</a></blockquote>

<h3 id="静音性">静音性</h3>

<p>キータイプしてまず驚くのは、その静音性。</p>

<p>not Type-SなHHKBを使ったことのなかった僕にとってType-Sを触ったのはこれが初でした。Type-SじゃなくともHHKBは十分に静かだと感じていたのですが、いざType-Sを使ってみると無印HHKBに比してやはり静か。</p>

<p>更に静音性を極めたい方であれば、PFU公式のHHKB吸振マットがあるのでこちらを購入すると良さそうです。</p>

<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=toshimaru-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B08344W1DY&amp;linkId=2671483c8c0b7897242464be48511332"></iframe>

<p>これだけの静音性であれば、HHKB使用時の同僚や家族からの「（うるせーな、こいつのキーボード…）」と思われる恐怖からは、いくばくか逃れることができると思います。</p>

<h2 id="キータッチ">キータッチ</h2>

<p>静音性とあわせて、キータッチもType-Sはだいぶソフトな印象があります。</p>

<p>これに関しては好みが分かれると思っていて「確かな打鍵感や音が好み」という方はType-Sではないほうが、好みではないかと思いました。</p>

<p>かくいう僕もそっちのタイプで、カチャカチャ鳴っているほうが＜俺仕事してる感＞が出て好きなんですよね（笑）。</p>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">Type-SなHHKB, not Type-SなHHKBを両方使った結果、not Type-SなHHKBのほうが好きということがわかった。「ｶﾁｬｶﾁｬ...ｯターン!!!」したい僕のような人間にとっては確かな打鍵感や打鍵時のフィードバックがあったほうが嬉しいのだ</p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/1222712303713312770?ref_src=twsrc%5Etfw">January 30, 2020</a></blockquote>

<h2 id="まとめ">まとめ</h2>

<ul>
  <li>Type-C・Bluetooth接続は良いぞ</li>
  <li>Type-S は静かで良い
    <ul>
      <li>周囲に人がいる職場や家庭で使う場合はType-Sが良いのではないでしょうか</li>
    </ul>
  </li>
  <li>キータッチの感触は not Type-S のほうが個人的には好き</li>
</ul>

<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=toshimaru-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B082TXLC2B&amp;linkId=c5256b54070710d4ccbe87264a98553d"></iframe>
<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=toshimaru-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B082TSZ27D&amp;linkId=06db5d4f52a7b49dce985f7445194cbb"></iframe>
<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=toshimaru-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B082TQK2SB&amp;linkId=666af27170fbdef39da1b8d2de31e88d"></iframe>
<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=toshimaru-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B082TYNNL2&amp;linkId=70759e0c4f584e35a0935d040fa17d96"></iframe>

<h2 id="おまけ">おまけ</h2>

<p>HHKBの持ち運びに100均のペットボトルクッションケースがシンデレラ・フィットという噂を聞いて試してみたらたしかにいい感じにフィットしました。公式ケースだとけっこういいお値段するのでオススメです。</p>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">もしお知り合いに、「HHKBの新型を買って、持ち歩きたいけど安いクッションケースないんだよなー」という人がいたら、100均で売ってたペットボトルクッションケースがシンデレラフィットですよ、と伝えてあげてください。<br /> <a href="https://twitter.com/hashtag/HHKB?src=hash&amp;ref_src=twsrc%5Etfw">#HHKB</a> <a href="https://t.co/zgopIDk2vJ">pic.twitter.com/zgopIDk2vJ</a></p>&mdash; いちのせさん (@yuhkiichinose) <a href="https://twitter.com/yuhkiichinose/status/1206531899209863168?ref_src=twsrc%5Etfw">December 16, 2019</a></blockquote>

<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=toshimaru-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B073XGWYVH&amp;linkId=1cfa8610e160a15364c222146ccca7cd"></iframe>
<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=toshimaru-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B07DC5732N&amp;linkId=743a7be3aa6974683f9ad656223c2d8d"></iframe>]]></content><author><name>Toshimaru</name></author><category term="tech" /><summary type="html"><![CDATA[HHKB Professional HYBRID Type-S を購入してしばらく経ったので使ってみた感想を書いてみます。購入モチベーション: not Type-SなHHKBはややうるさい Type-C接続 Bluetooth接続]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/hhkb/hhkb-hybrid.jpg" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/hhkb/hhkb-hybrid.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">俺流 MacBook+HHKB 最強尊師スタイル</title><link href="https://blog.toshimaru.net/macbook-hhkb-sonshi-style/" rel="alternate" type="text/html" title="俺流 MacBook+HHKB 最強尊師スタイル" /><published>2019-09-15T00:00:00+09:00</published><updated>2019-09-15T00:00:00+09:00</updated><id>https://blog.toshimaru.net/macbook-hhkb-sonshi-style</id><content type="html" xml:base="https://blog.toshimaru.net/macbook-hhkb-sonshi-style/"><![CDATA[<p>俺の中での  MacBook+HHKB 尊師スタイルの最終形が完成したので紹介してみる。</p>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">俺流MacBook+HHKB尊師スタイルの最終型が完成した <a href="https://t.co/HEW9luH8t3">pic.twitter.com/HEW9luH8t3</a></p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/1169423113982865410?ref_src=twsrc%5Etfw">September 5, 2019</a></blockquote>

<h2 id="hhkb-professional-jp">HHKB Professional JP</h2>

<p>僕は日本語配列派で矢印キーを使いたい人間なので、日本語配列なHHKBを使っている。また、Bluetooth版はレイテンシが気になるという噂を聞いたりしたのでUSB版を使っている。</p>

<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=toshimaru-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B001KWJTD6&amp;linkId=b7e6e472633ae6784805f395f31f6eea"></iframe>

<h2 id="キートップカスタマイズ">キートップカスタマイズ</h2>

<p>デザイン的に真っ黒だとつまらないので、公式のカラーキートップセットでキーボードにアクセント色を入れている。</p>

<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=toshimaru-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B00HC2W0FC&amp;linkId=f2649f32c781880d763e29ed9dc40b61"></iframe>

<h2 id="usb接続">USB接続</h2>

<p>そのままのUSB接続だとHHKB本体の接続部分とMacBookの画面がぶつかってしまうため、L型のUSB変換コネクタを使っている。あと、USB-Cにそのまま繋ぎたかったので、miniB → USB-Cな短めのケーブルを購入した。</p>

<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=toshimaru-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B06VW4GKX9&amp;linkId=dc659d537db9a8f40e58270e306bb201"></iframe>
<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=toshimaru-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B0197AP76U&amp;linkId=1b545d1b6282899c8ec9d78f6bbca88b"></iframe>

<h2 id="キーボードブリッジ">キーボードブリッジ</h2>

<p>素のMacBookにHHKBを載せただけではHHKBの重みでMacBook本体のキーボードが反応してしまうという問題がある。これを解決するのがキーボードブリッジである。</p>

<p>ただのプラスチックの板に4000円はなかなか高い買い物だが、サイズが丁度良かったり滑らないように設計されていたりとモノとしては満足している。</p>

<p>中には<a href="https://pqrs.org/osx/karabiner/">Karabiner</a>を使って外付けキーボードが接続された際に<a href="https://qiita.com/Jung0/items/df811a68bc704117f577">本体側のキーボードを無効化をするような設定</a>を入れている人もいるようだが、Karabinerを常用していない僕にとっては本製品が都合が良かった。</p>

<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=toshimaru-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B077ZSGQDH&amp;linkId=6dee09e1347120c915dddce4a42185ac"></iframe>

<h2 id="尊師スタイルじゃないとき">尊師スタイルじゃないとき</h2>

<p>たまに尊師スタイルせずクラムシェルモードでディスプレイと向き合うときはこんな感じでやっている。</p>

<p><img src="/images/posts/hhkb/hhkb.jpg" alt="hhkb clamshell" /></p>

<p>ARCHISSのリストレスト<strong>S</strong>サイズが安価でHHKBサイズにも丁度よくて気に入っている。</p>

<p>あとMacBookを閉じた状態でもトラックパッドのジェスチャを使いたいので外部マウスはMagic Trackpadを使っている（古いトラックパッドなのはご愛嬌）。</p>

<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=toshimaru-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B01LYYULYJ&amp;linkId=0f940b9d95cd1dc9ce3ba6952992f506"></iframe>
<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=toshimaru-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B016ZE7K8O&amp;linkId=0d04ab048365f77de34f243b1e96a079"></iframe>]]></content><author><name>Toshimaru</name></author><category term="tech" /><summary type="html"><![CDATA[俺の中での MacBook+HHKB 尊師スタイルの最終形が完成したので紹介してみる。HHKB Professional JP 僕は日本語配列派で矢印キーを使いたい人間なので、日本語配列なHHKBを使っている。また、Bluetooth版はレイテンシが気になるという噂を聞いたりしたのでUSB版を使っている。キートップカスタマイズ デザイン的に真っ黒だとつまらないので、公式のカラーキートップセットでキーボードにアクセント色を入れている。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/hhkb/og.jpg" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/hhkb/og.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">SmartHR社に体験入社してきた</title><link href="https://blog.toshimaru.net/smarthr-job-trial/" rel="alternate" type="text/html" title="SmartHR社に体験入社してきた" /><published>2019-07-22T00:00:00+09:00</published><updated>2019-07-22T00:00:00+09:00</updated><id>https://blog.toshimaru.net/smarthr-job-trial</id><content type="html" xml:base="https://blog.toshimaru.net/smarthr-job-trial/"><![CDATA[<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">体験入社してます <a href="https://t.co/f2Ga5LE5Es">pic.twitter.com/f2Ga5LE5Es</a></p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/1149139455657119744?ref_src=twsrc%5Etfw">July 11, 2019</a></blockquote>

<p>SmartHR社の体験入社に参加してきました。同社の体験入社制度に関しては下記の記事に詳しいです。</p>

<p><a href="https://tech.smarthr.jp/entry/2018/09/20/120000">エンジニア向けの体験入社制度ができました - SmartHR Tech Blog</a></p>

<p>今回は体験入社を１スプリント分の一週間、営業日換算で４日間体験入社させてもらいました。</p>

<h2 id="なぜ参加したか">なぜ参加したか？</h2>

<p>SmartHR社のことは<a href="https://blog.shojimiyata.com/entry/2018/06/01/112424">RubyKaigi</a>や<a href="https://speakerdeck.com/miyasho88/we-are-hiring">会社紹介資料</a>などを通して知っており、傍目から良い会社そうだなぁという印象は持っていました。実際にSmartHRの中の人たちとも面談を通して直接話す中で、SmartHR社での働き方に興味が湧き、今回「体験入社をしてみたい！」という僕の申し出を受け入れてもらったかたちとなります。</p>

<p>僕が特にSmartHR社に関して良いと思った点、興味があった点は下記です。</p>

<ol>
  <li><strong>オープンな社風</strong>
    <ul>
      <li>会社として＜オープンな社風＞が根付いているように見受けられ、良いと思った</li>
      <li>このオープンな社風というトピックに関しては下記のブログに詳しいです
        <ul>
          <li><a href="https://blog.shojimiyata.com/entry/2018/02/15/125904">SmartHR が組織運営で一番大切にしていること - 宮田昇始のブログ</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><strong>スタートアップ企業としてはありえない退職率の低さ</strong>
    <ul>
      <li>僕自身、30人くらいの規模から数百人規模になっていく組織のスケール過程を身をもって体験しましたが、こういうスタートアップ企業は端的に言って＜激動の時代＞となります。その荒波の中にあっては振り落とされる人がいたり、いわゆる音楽性の違いによって退出していく人も多くいるはずですが、SmartHR社の場合はそんなことになっておらず、単純にその雰囲気および組織運営の手法に興味がありました</li>
    </ul>
  </li>
</ol>

<h2 id="なにをやったか">なにをやったか？</h2>

<p>体験入社としてJoinしたチームはSmartHR本体の開発をするチームでした。なので今回はSmartHR本体のいくつかの機能改修やバグ修正をやりました。</p>

<p>初日に行われたスプリント計画に一緒に参加して、Jiraのチケットをいくつかアサインしてもらいました。アサインされたチケットは下記のようなものです。</p>

<ul>
  <li><a href="https://www.e-gov.go.jp/shinsei/">e-Gov電子申請</a>まわりの改修</li>
  <li>小さなバグ修正</li>
  <li>APIの改修</li>
</ul>

<p>また上記とは別に一通りのスクラムセレモニーや全社員を対象に行っている経営会議共有会にも参加させてもらいました。</p>

<h2 id="成果">成果</h2>

<h3 id="一日目">一日目</h3>

<ul>
  <li>開発環境セットアップ</li>
  <li>経営会議共有会参加</li>
  <li>スプリントレビュー、スプリントレトロスペクティブ、スプリント計画に参加</li>
  <li>開発成果: 1 PR</li>
</ul>

<h3 id="二日目">二日目</h3>

<ul>
  <li>負債返済のためのモブプロ会に参加</li>
  <li>開発成果: 2PR</li>
</ul>

<h3 id="三日目">三日目</h3>

<ul>
  <li>バックログリファインメントに参加</li>
  <li>開発成果: 2PR, 1Merge</li>
</ul>

<h3 id="四日目">四日目</h3>

<ul>
  <li>開発成果: 3PR 4Merge</li>
</ul>

<h3 id="総評">総評</h3>

<p>一部未マージなPRを残すことになってしまったものの、当初にアサインされたチケットはすべて着手することができた点は良かったです💪。結果としては、受け入れチームの期待値と同等かそれ以上の成果は残せたようで良かったです😄。</p>

<h2 id="体験入社してみての感想">体験入社してみての感想</h2>

<h3 id="開発編">開発編</h3>

<ul>
  <li>開発環境セットアップはWikiにまとめられておりWiki通りの手順で進めていけばすんなり構築することができた
    <ul>
      <li>Rails以外のバックエンドはDocker化されておりバージョンまわりでハマることも無いようになっていて良かった</li>
    </ul>
  </li>
  <li>教科書通りのスクラムセレモニーを実施しており、きちんとスクラム回してて偉いなぁという印象でした（僕がスクラムマスターっぽい立ち回りするときはけっこうスクラムセレモニーサボっているので…）</li>
  <li>良い意味で粛々とプロダクト開発を進めている印象だった
    <ul>
      <li>いわゆるスタートアップなキラキラ系イケイケWeb開発という感じではなかった（決して悪い意味ではないです）</li>
      <li>一人ひとりがプロダクトに向き合い、オーナーシップをもって開発に取り組んでいる</li>
      <li>大人な人が多くきちんと協調して開発を進めている印象</li>
    </ul>
  </li>
  <li><strong>＜個人＞ではなく、＜チーム＞で課題を解決する姿勢が素晴らしいと思いました</strong>
    <ul>
      <li>例えばデスク（サービスデスク/ヘルプデスク）対応、コードレビューの対応、リリース作業など忙しくて手を付けられそうな人がいれば、手が空いている人が「（私が）やりますよ」と自然に手を挙げて対応をデリゲーションしていっている雰囲気は素晴らしいと感じました
        <ul>
          <li>これをチームで自然にできるようになるのはそう簡単なことではないので、チームとして成熟している証だと感じました</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>僕はもうエンジニアとしてはシニアレベルだしタスクは丸投げでも全然構わなかったけど、きちんと計画の時点で開発方針まである程度あたりをつけて落とし込んでくれたお陰で、とても開発がスムーズに進められました。受け入れメンバーの皆さまには感謝です</li>
  <li>開発の中できちんと技術負債を減らすことにも尽力されていて良いなぁと思いました
    <ul>
      <li>技術負債担当チームがあったり技術負債返済モブプロ（with <a href="https://twitter.com/netwillnet">willnet</a>さん）みたいな取り組みをしていたり</li>
    </ul>
  </li>
  <li>現在の規模でもCTOの芹澤さんがバリバリコード書いている雰囲気があり意外でした</li>
</ul>

<h3 id="開発以外編">開発以外編</h3>

<ul>
  <li>退職率の低さについて
    <ul>
      <li>やはり第一に採用でカルチャーマッチする人のみをきちんと選んで採っている点が大きそうです
        <ul>
          <li>参考: <a href="https://smarthr.co.jp/vision">Mission | 株式会社SmartHR</a></li>
        </ul>
      </li>
      <li>良いところも悪いところもすべてオープンにする姿勢が社員に響いているのではないでしょうか
        <ul>
          <li>経営会議共有会では出せる数値は詳らかに全部出す</li>
          <li>経営会議共有会の最後には代表・宮田さんへのAMA（Ask Me Anything）コーナーみたいなのもあって良かった</li>
          <li>都合の悪いことも含めて情報を隠さない → 現場の不安が変に増幅することもない</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>普段、自分が受け入れチーム側としてオンボーディングを実施することが多かったけど、今回受け入れてもらう側として参加できて新鮮だった</li>
  <li>今回の体験入社で初めてSmartHRを実際に使わせてもらったけど、とても便利でした。一度使うとたぶん紙での提出とか面倒くさくなりますね。
    <ul>
      <li>各社、SmartHRの導入よろしく頼む🙏</li>
    </ul>
  </li>
</ul>

<h2 id="smarthr社にマッチしそうな人について">SmartHR社にマッチしそうな人について</h2>

<p>体験入社してみてSmartHR社にマッチしそうな人、逆にマッチしなそうと感じる人を書いてみます。</p>

<h3 id="マッチしそうな人">マッチしそうな人</h3>

<ul>
  <li>SmartHR というサービスが好きな人</li>
  <li>会社・チーム一丸となってプロダクト作りをしたい人</li>
  <li>Railsでのサービス作りが好きな人</li>
  <li>チームワークが得意、好きな人</li>
  <li>オープンな社風に共感できる人</li>
</ul>

<h3 id="マッチしなそうな人">マッチしなそうな人</h3>

<ul>
  <li>プロダクトよりもエッジな技術をひたすら突き詰めたいという人</li>
  <li>チームワークよりも孤独な作業が好きな人</li>
</ul>

<h3 id="smarthr社への応募はこちらから">SmartHR社への応募はこちらから</h3>

<p>上記の「マッチしそうな人」にピンときた方は応募してみると良いかと思います！</p>

<p><a href="https://smarthr.co.jp/recruit">Recruit | 株式会社SmartHR</a></p>

<p>子会社創業メンバーも募集しているようです。</p>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">そろそろ起業しようかな？と思ってるけど「共同創業者がいない」「ネタがない」というエンジニアさん、SmartHRの子会社の創業メンバーとして一発当てませんか？<br /><br />いま2つの会社があなたを求めてます！お金の心配なく、事業とプロダクトに集中できます。興味ある方ぜひDMください！<br /><br />（続く</p>&mdash; 宮田 昇始 (@miyasho88) <a href="https://twitter.com/miyasho88/status/1151047024613236736?ref_src=twsrc%5Etfw">July 16, 2019</a></blockquote>

<h3 id="smarthrについてもっと知りたい">SmartHRについてもっと知りたい！</h3>

<p><strong>「SmartHRについてもっと知りたい！」</strong>という方はこちらもどうぞ。</p>

<ul>
  <li><a href="https://shanaiho.smarthr.co.jp/">SmartHRオープン社内報</a></li>
  <li><a href="https://tech.smarthr.jp/">SmartHR Tech Blog</a></li>
  <li><a href="https://blog.shojimiyata.com/">宮田昇始のブログ</a></li>
</ul>

<h2 id="最後に">最後に</h2>

<p>他社のスクラム・スプリントを経験するのはなかなかない貴重な機会なので、それを一通り体験できたのはとても良かったです。受け入れていただいたSmartHRさん、ありがとうございました！</p>]]></content><author><name>Toshimaru</name></author><category term="tech" /><category term="rails" /><summary type="html"><![CDATA[SmartHR社の体験入社に参加してきました。同社の体験入社制度に関しては下記の記事に詳しいです。 エンジニア向けの体験入社制度ができました - SmartHR Tech Blog 今回は体験入社を１スプリント分の一週間、営業日換算で４日間体験入社させてもらいました。SmartHR社のことはRubyKaigiや会社紹介資料などを通して知っており、傍目から良い会社そうだなぁという印象は持っていました。実際にSmartHRの中の人たちとも面談を通して直接話す中で、SmartHR社での働き方に興味が湧き、今回「体験入社をしてみたい！」という僕の申し出を受け入れてもらったかたちとなります。僕が特にSmartHR社に関して良いと思った点、興味があった点は下記です。 1. オープンな社風 2. スタートアップ企業としてはありえない退職率の低さ]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/smarthr.jpeg" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/smarthr.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">技術者としてスポンジであり続けること　あるいは老害回避戦略の話</title><link href="https://blog.toshimaru.net/like-a-sponge-as-an-engineer/" rel="alternate" type="text/html" title="技術者としてスポンジであり続けること　あるいは老害回避戦略の話" /><published>2017-12-04T00:00:00+09:00</published><updated>2018-08-31T00:00:00+09:00</updated><id>https://blog.toshimaru.net/like-a-sponge-as-an-engineer</id><content type="html" xml:base="https://blog.toshimaru.net/like-a-sponge-as-an-engineer/"><![CDATA[<h2 id="エンジニアリングとは常に学習し続けることである">エンジニアリングとは常に学習し続けることである</h2>

<p>エンジニアリングとは常に学習し続けることである。僕がWeb技術者として生計を立てる上で大切にしているモットーだ。</p>

<p>ドッグイヤーな変化の激しいIT業界、変化に取り残されないためには常に学習が必要だ。今僕たちがデファクト・スタンダートとしている技術は一年後もスタンダートであり続けるだろうか？　一年くらいなら大丈夫？　じゃあ三年後は？　五年後は？ 十年後はどうだろう？ 自信をもって技術トレンドは今と変わっていないと言えるだろうか。</p>

<h2 id="変化する技術トレンド">変化する技術トレンド</h2>

<p>Web業界の技術トレンド変化を見るにしてもその変化が激しいことは明らかだ。古くは掲示板を動かしていたPerl CGIの時代から、最強のPHP製CMS・Wordpress、継続的にバージョンアップを重ね進化を続けるWebアプリケーションフレームワーク・Ruby on Rails…。近年だとサーバーサイドJavaScirpt・Node.js、Erlang VM上で動くRubyライクなシンタックスを持つElixir、Twitterでも運用実績を持つScala、Googleが作った爆速言語Go、Mozillaの開発したRustなどもよく聞く。お硬い感じなところだとJavaのSpring Frameworkであったり（最近はKotlin対応もしたと聞く）オープンソース化もされているMicrosoftの.NETなど。</p>

<p>サーバーサイド技術だけじゃなく、フロントエンド技術の変化も大きい。HTMLはHTML5になり、CSSはCSS3になってWebでリッチな表現が可能になった。貧弱な言語であったJavaScriptはES6(ES2015),ES7(ES2016)へと進化し言語として洗練されてきている（Bebelなどのトランスパイラーの進化の力も大きい）。便利な関数群を多く含みブラウザ間の挙動の差異を吸収してくれるjQueryはそこそこ長い間フロントエンドのデファクト・ライブラリだったが、フロントエンドコードの複雑化・巨大化に伴いその座をReactやAngularへと譲りつつある（React/Angularにたどり着くまでの紆余曲折はここでは省略）。</p>

<p>開発ワークフローもずいぶん進化した。開発者にとって一番大きかったのはGitHubの台頭だ。OSSを加速度的に推し進めエンジニアリング業界にソーシャルコーディングという概念を普及させた。これによりVCSはGitを利用しRemoteにはGithub（あるいはGithubライクなプロダクト）を使うのが当たり前となった。</p>

<p>テストももちろん書く。テストを書くと次はCIがしたくなる。Jenkins？ 今ならTravisCI、CircleCIなどのCIサービス使ったほうが良さそうだ。</p>

<p>アプリケーションのデプロイ先となるインフラはどうだ。オンプレ？ いや、今はクラウドの時代だ。IaaS業者ならAWS（Amazon Web Service）か。いや、GCP（Google Cloud Platform）も最近頑張っているようだ。そこまでインフラ面倒見る余裕なんてない？ならばHerokuなどのPaaSを選択することもできる。</p>

<p>モバイルアプリ開発はどうだろう？ iOS？ Objective-Cじゃなくて今はSwiftなんだっけ。Android？ 古き良きJava…ではなく最近はKotlinで書けるらしい。最近はReact Nativeという技術もあるらしい。Reactに慣れたWeb開発者にとって取っ付きやすそうだ。</p>

<h2 id="我々は学習し続けられるか">我々は学習し続けられるか？</h2>

<p>Web技術に限定してザッと思いつくだけ列挙してもこれだけあるのだ。これでもなお「１つの技術だけで今後も戦い続けることができる！」と自信を持って言えるだろうか。</p>

<p>あなたは言う。いいや、俺はこの技術一筋で勝負するんだ！なるほど、けっこうけっこう。あなたが変わらなくても世界は変わる。世界はあなたを待ってはくれない<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>。</p>

<p>学習を止めた時から変化の波に取り残され、気付いた頃にはもう手遅れ…、そんな事態は避けなければならない。</p>

<p>では問おう。<strong>我々は学習し続けられるのか？</strong></p>

<h2 id="学習の壁">学習の壁</h2>

<p>我々に立ちはだかる学習の壁。この学習の壁を乗り越える続けることは難しい。</p>

<p>そしてこれは歳を重ねれば重ねるほどに難しくなっていく。一般的に記憶力や集中力は年齢とともに衰えていくと言われるからだ<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup>。</p>

<p>一方で学習能力は年齢とは関係ないとする説もある<sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">3</a></sup>。記憶力そのものに年齢は関係なく、老化とともに記憶力が低下したと感じる理由は＜学習意欲の低下＞に起因しているとする説だ。</p>

<p>僕の考えとしては前者の説も後者の説もどちらも支持したい。我々の学習能力は年齢とともに衰えていくし、学習意欲もまた年齢とともに低下する。</p>

<h2 id="スポンジであるということ">スポンジであるということ</h2>

<p>では我々はこれにどう抗ったらよいだろうか？　</p>

<p>前者の年齢とともに不可避的に衰える能力は仕方がないにせよ、せめて後者の学習意欲は高く保ち続けようではないか。新しいものを進んで吸収できるスポンジであろう。弾力を失ってはいけない。柔軟にしなやかであろう。硬直化する脳に抗おう。</p>

<p>スポンジであるということ。これによって学習という困難も楽しみとして享受できるようになるのではないだろうか。</p>

<h2 id="老害になってはいないか">老害になってはいないか</h2>

<p>学習し続ける姿勢、これは老害化するのを防ぐ上でも大切な心がけだと思う。</p>

<p>そもそも老害とはどういう人なのか？ 僕が思う老害とは下記の通りだ。</p>

<p>老害とは自分の過去の栄光や成功体験を元にして、自分の価値観ややり方を周囲（主に若者がターゲットにされやすい）に押し付けるような人のこと。その結果、チーム/個人のパフォーマンスを低下させる。</p>

<p>こういうタイプの人は過去の成功を根拠としてロジックを展開するので、その成功が現代では通用しない時代錯誤なものであったとしても気にせず押し通そうとする。そして新しいことに関しては「よくわからない」などと言って斬り捨てる。</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">「老害になる」というのは、ほんとうは「歳を取ると感覚がオッサンになる」ということではなくて、「どこかのタイミングから思考を停止し始めて、じぶんの価値観のアップデートをサボり続けたせいで、じぶんの感覚がその時代に合わなくなる」ことを言うんですよね。老害とは、変化をやめたひとを言う。</p>&mdash; プロ奢ラレヤー🍣 (@taichinakaj) <a href="https://twitter.com/taichinakaj/status/1030945286917693442?ref_src=twsrc%5Etfw">August 18, 2018</a></blockquote>

<p>そんな老害にはなりたくないと思う。きっとこの文章を読んでいるあなたもそうだろう。だがあなたは <strong>自分が老害になっていないとハッキリ言えるだろうか？</strong></p>

<p>一般的に、歳を取ると価値観は固まっていき保守的になってゆく。あなたは自分の気づかないレベルで無意識に新しいことを拒絶していないだろうか。自分の考えを無意識に他者に押し付けてはいないだろうか。職場で気づいたら老害になってはいないだろうか。</p>

<iframe src="//www.slideshare.net/slideshow/embed_code/key/NWNwslJEgKFtkr" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen=""> </iframe>
<div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/sasakipochi/ss-51445100" title="老害について" target="_blank">老害について</a> </strong> from <strong><a href="https://www.slideshare.net/sasakipochi" target="_blank">Ken SASAKI</a></strong> </div>

<p>:point_up: <strong>老害について簡潔にまとまっている資料</strong></p>

<h2 id="老害回避戦略">老害回避戦略</h2>

<p>エンジニアとして老害にならないための僕なりの老害回避戦略を考えてみたのでまとめてみる。</p>

<h3 id="マサカリを投げるな">マサカリを投げるな</h3>

<p>技術的な厳しい指摘をよく「マサカリを投げる」と表現したりするが<sup id="fnref:4" role="doc-noteref"><a href="#fn:4" class="footnote" rel="footnote">4</a></sup>、マサカリを投げるのは止めよう。</p>

<p>そのマサカリが本当に意味のあるものか今一度考えてみよう。あなたの飛ばしたマサカリは周囲を萎縮させチームの空気を悪くしパフォーマンスを下げている可能性が高い。</p>

<p>あなたがどんなに優れたエンジニアだとしてもそれをマサカリという形で誇示する必要は無い。あなたの優秀さはマサカリではなくコードで示せるはずだ。</p>

<p>剣ではなく弁を。攻撃ではなく教育を。</p>

<h3 id="技術に素直でいよう">技術に素直でいよう</h3>

<p>コンピュータの内部が0か1のバイナリで構成されているの同様に、プログラミングという行為も0か1のように正誤がハッキリするものが多いように感じる。</p>

<p>バグがある挙動、バグが無い挙動であればバグが無い挙動が正しいし、速いコードと遅いコードであれば速いコードが良いし、DRYなコード、そうじゃないコードがあればDRYなコードを選択すべきだし、テストがないコードよりもテストがあるコードが信頼性は高い。</p>

<p>老害であれば技術的正しさを無視して自説を展開するかもしれないが、それではダメだ。常に技術的に正しい世界を目指そう。技術にたいして素直でいよう。</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">個人開発は遊びでいいけど仕事における開発は遊びじゃない。技術的/仕様的正しさは常に追求すべきだしデータ的正しさは検証すべきだしプログラムにはバグが無いように（テストコード書くなどして）努力すべきだし自分のコードにはオーナーシップを持つべきだ。</p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/995968055342649344?ref_src=twsrc%5Etfw">May 14, 2018</a></blockquote>

<p>僕たちが持っている知識は変化する技術の流れの中で明日には変わっているかもしれない。今に凝り固まるのではなく、常に技術的正しさを求めて学習しよう。</p>

<h3 id="フラットでいよう">フラットでいよう</h3>

<p>GitHubのOSSコミュニティで人種・性別・年齢関係なくコラボレーションするように、我々も技術の文脈においてフラットなコミュニケーションを目指そう。</p>

<p>この世界、どんなに自分より歳をとっていてもかなわないなというエンジニアもいるし、逆に自分よりずっと若くても優秀なエンジニアはたくさんいる。「俺の方が人生経験が長いから」「私の方が年齢が高いから」という理由では奢れない（もしそんな理由でエラそうにしているのであればそれは老害だ）。</p>

<p>実際のところ、先輩後輩・上下関係を重んじる日本社会においてこれを実現するのは容易ではないわけだが、技術コミュニケーションにおいてできるだけフラットなコミュニケーションを心がけよう。この姿勢は前述の<技術に素直でいる>ことにも繋がることだと思う。</技術に素直でいる></p>

<h3 id="次の世代を育てる">次の世代を育てる</h3>

<p>老害でないということは同時に若手とうまく付き合うということでもある。今まで述べてきたような老害的な態度を取らなければ、若手が伸び伸びと働ける職場環境にできるのではないだろうか。</p>

<p>次の世代を育てよう。そして彼らが伸び伸びと活躍できるような雰囲気作りを目指そう。</p>

<p>こんなことを言うとたまに「若手に自分のポジションを脅かせれる」「自分の仕事が奪われる」と言って拒否反応を示す人をたまに見かける。その考え方も分からなくはないが、僕はそれは自己保身的で一面的な考え方だと感じる。</p>

<p>次の世代を育てることで得られるメリットは数多くあると思う。</p>

<ul>
  <li>次の世代を育てる過程で自分も育つ: 育てている過程の中で自分もちゃんと理解できていなかった部分が理解できるようになったり、自分の理解が深まる</li>
  <li>次の世代が育つことでチームひいては会社の生産性が高まり自分自身の仕事が相対的に減る</li>
  <li>次の世代が育つと自分一人ではできなかったことが出来るようになるかもしれない: 切磋琢磨出来る仲間が増えるとチームとしてもう一段上のレベルへと上がり、一人では思いつかなかったアイディアやソリューションが発案されるかもしれない</li>
</ul>

<p>自分の立場ばかり考える保身的な老害にはならないようにしよう。どんどん次の世代を育てていき、次の世代とともにステップアップを目指そう。</p>

<h2 id="35歳定年説の嘘">「35歳定年説」の嘘</h2>

<p><a href="https://tech-camp.in/note/engineer/30204/">35歳定年説</a>的な言説を技術界隈で聞くことがある。</p>

<p>この35歳の35の数字の部分は38でも40でもなんだって良いのだが、僕は基本的にこのn歳定年説は間違っていると思う。</p>

<p>これを反証することは簡単で、40歳でバリバリ現役でコードを書き続けている技術者を見つければ良い。僕は40歳でバリバリ前線で頑張っている技術者を知っている。なのでこの説は間違っているとハッキリ言える。</p>

<p>思うに、<strong>コードを書かず学習意欲を失ってしまった35歳のおじさんたちが自分がコードが書けないこと・学ばないことの言い訳として言い出し始めたのがこの「35歳定年説」の真実じゃないだろうか。</strong> 20歳の技術者は35歳定年説なんて言い出さない。それを言い出すのは35を過ぎて自身のパフォーマンスが出なくなったと感じている技術者たちだけだ。もし本当にそんな理由で言っているのであればハッキリ言ってダサすぎだと思う。</p>

<p>年齢を言い訳にするのは止めよう。学習するのに遅すぎるなんてことはないはずだ。</p>

<blockquote>
  <p>You’re never too old to learn</p>
</blockquote>

<h2 id="最後に">最後に</h2>

<p>この文章は僕自身が若手とは言えない年齢となり今後シニアな立場へとなっていく中で「自分は老害化していくのではないか」という危機感から自戒も込めて書いたものである。願わくば五年後十年後自分がここに書いたような老害になっていないことを祈る。</p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>もちろん１つのことに特化して高度な専門性を武器に戦っている技術者もいる。しかしトレンドは常に追っているべきだ。なぜならブレークスルーが起こってその技術が死んだときに自分の食い扶持がなくなるからだ（それでもすぐにその技術がなくなるわけではないのでその技術を使う古い現場で細々と食い扶持を得るのも戦略としてありえるが）。 <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p><a href="https://www.businessinsider.jp/post-100550">集中力は43歳！ 人間の脳のピーク年齢は、能力ごとに違っていた | BUSINESS INSIDER JAPAN</a> <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:3" role="doc-endnote">
      <p><a href="http://www.fukuishimbun.co.jp/articles/-/62618">「加齢で記憶力が低下」は誤解 知能も低下せず、問題は前頭葉老化 | 東洋経済ONLINE | 福井新聞ONLINE</a> <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:4" role="doc-endnote">
      <p><a href="https://qiita.com/kaityo256/items/d7d8f7a0e522895c8f5d">マサカリの起源について - Qiita</a> <a href="#fnref:4" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Toshimaru</name></author><category term="poem" /><category term="tech" /><summary type="html"><![CDATA[エンジニアリングとは常に学習し続けることである。僕がWeb技術者として生計を立てる上で大切にしているモットーだ。 ドッグイヤーな変化の激しいIT業界、変化に取り残されないためには常に学習が必要だ。今僕たちがデファクト・スタンダートとしている技術は一年後もスタンダートであり続けるだろうか？　一年くらいなら大丈夫？　じゃあ三年後は？　五年後は？ 十年後はどうだろう？ 自信をもって技術トレンドは今と変わっていないと言えるだろうか。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/book/books.jpeg" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/book/books.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">boot.fm Podcast に出演しました</title><link href="https://blog.toshimaru.net/bootfm-podcast/" rel="alternate" type="text/html" title="boot.fm Podcast に出演しました" /><published>2016-12-29T00:00:00+09:00</published><updated>2016-12-29T00:00:00+09:00</updated><id>https://blog.toshimaru.net/bootfm-podcast</id><content type="html" xml:base="https://blog.toshimaru.net/bootfm-podcast/"><![CDATA[<p>ちょっと前だが今月<a href="https://bootfm.github.io/">boot.fm</a>というTech系Podcastに出演した。</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">最近流行りのTechポッドキャストに出演しました。分報、フロントエンド技術とどう付き合うか、コードレビュー、mrubyあたりを話してます | Vol.4: Code review as a prior investment <a href="https://t.co/FjRE8HQa4E">https://t.co/FjRE8HQa4E</a></p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/809544891696939009">December 15, 2016</a></blockquote>
<script async="" src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>そのフォローアップや話しきれなかったことなど書いてみます。</p>

<h2 id="slack分報タスク管理について">Slack分報・タスク管理について</h2>

<p>分報の元ネタ: <a href="http://c16e.com/1511101558/">Slackで簡単に「日報」ならぬ「分報」をチームで実現する3ステップ〜Problemが10分で解決するチャットを作ろう | Craftsman Software Inc.</a></p>

<h3 id="僕が思う分報の良い点">僕が思う分報の良い点</h3>

<ul>
  <li>日報より情報発信の敷居がずっと低い
    <ul>
      <li>多分一番分かりやすい喩えは <strong>社内Twitter</strong></li>
    </ul>
  </li>
  <li>カジュアルなコミュニケーションができる
    <ul>
      <li>ハマっていることとかさらっと書いたら誰かが助け舟を出してくれたり</li>
      <li>ゆるーい雑談とかも</li>
    </ul>
  </li>
  <li>リアルタイムなコミュニケーションができる
    <ul>
      <li>Podcast内で紹介した<a href="https://toshi.slack.com/apps/A0HBTUUPK--todo">/todo</a>みたいなSlackインテグレーションアプリと組み合わせることによって、リアルタイムにタスクのWIP/DONEを関係者に共有できる</li>
    </ul>
  </li>
</ul>

<p>基本的に僕は日報を書いていきたいと思っているのだけど、日報真面目に書いているとけっこう時間がかかってしまう。最初は乗り気しなかったけどとりあえずやってみるかと始めた分報だが、日報ハードル高すぎ問題を感じていた僕には丁度良くハマった。</p>

<p>情報発信の対象となる受け手も限られていて、些細なこともカジュアルに書きやすいし読み手を過剰に意識することも少ない。</p>

<h3 id="僕が思う分報の悪い点">僕が思う分報の悪い点</h3>

<ul>
  <li>Slackチャンネル多くなる
    <ul>
      <li>1チャンネル/user なので人数分チャンネルできる</li>
      <li>JOINしすぎると間違いなくノイズになるのでMuteなり加入チャンネル選ぶなりで凌ぐ</li>
    </ul>
  </li>
  <li>知性のない発言が多くなる（かもしれない）
    <ul>
      <li>そういうのも含めて社内Twitterでありカジュアルなコミュニケーションなんだからまぁ良い点ともいえる</li>
    </ul>
  </li>
</ul>

<h3 id="その他slackで便利そうなやつ">その他Slackで便利そうなやつ</h3>

<ul>
  <li><a href="https://toshi.slack.com/apps/category/At0G5YTKU2-analytics">便利な Slack Integration App</a> 使ってKPIとか流してみる</li>
  <li><a href="https://github.com/masuidrive/miyamoto">masuidrive/miyamoto</a> でSlack勤怠管理してみるとか</li>
  <li><a href="https://hubot.github.com/">HUBOT</a>みたいなChatbotを棲ませて自動化実現したり便利機能を提供したりとか</li>
</ul>

<p>便利な Slack Integration App もどんどん増えているのでそういうのはどんどん導入していくと良いと思う。</p>

<p>Chatbot系はアイディア勝負。便利な使い方あればどんどん紹介してほしいと思う。</p>

<h2 id="フロントエンド-vs-バックエンド">フロントエンド vs バックエンド</h2>

<p>僕が最近React書いてて感じている「Railsやりつつフロントエンドのキャッチアップはしきれないし〜自分の書いているコードに自信を持ていないし〜けっこう妥協しちゃってるんですよ〜」という悩み相談みたいな感じになってしまったかもしれない。</p>

<p>お二人ともPodcast内で話したが、結論としては至極まっとうで、プロトタイピングやそもそもJavaScriptヘビーにSPAを作る必要がないのであれば無理してJS書くことないし、Railsのレールに乗っかってけばいいじゃんという感じ。</p>

<p>SPAにすることがプロダクトの価値として高くなるのであればReactなりAngularなり導入に踏み切ればいいじゃん、という感じ。ただそうなってくるとどうしてもRailsのレールから外れて開発を進めていく必要があり、レールを外れる勇気と覚悟が必要でウッ…となる。</p>

<p>とここまで書いてアレですが、Podcast収録した時点ではリリースされていなかった<a href="https://github.com/rails/webpacker">rails/webpacker</a>が現在出てきており、とうとうRailsにもyarn、webpackへの世界へのレールが開かれようとしております。そしてwebpackerの仕組みに乗っかってReactがinstallできるような仕組みも用意されつつある。</p>

<p>そういう流れが整備されていけば多少僕が今抱えている不安感も和らぐだろうと思いました。</p>

<h2 id="コードレビューについて">コードレビューについて</h2>

<p>けっこう自分が今コードレビューに時間をかけているので、コードレビュー質的・時間的にどれくらいやるもんなんって話。</p>

<p>コスト、というとコストかけたくないでござる！みたいなことを暗に思っているのではと思われてしまうかもしれないが、そうではない。基本的にレビューにはコストをかけるべきだし、短期的には時間がかかろうともそれは中長期的にチームの生産性向上につながると思ってる。つまりコードレビューに時間をかけるということはチームへの投資であるということ。</p>

<p>そのコードレビューをどう効率的に回していくかという話もできればよかったけどそれはまた別の機会に。まぁ基本的に丁寧なコードレビューをしようと思うとやっぱり時間はかかる。</p>

<h2 id="mruby">mruby</h2>

<p>mrubyワンチャンある？って話。得られた知見はこうだ。</p>

<ul>
  <li>Rubyのシンタックスはmrubyでもだいぶ動く</li>
  <li>mrubygem エコシステムはまだまだ未成熟</li>
  <li>Cを書く覚悟が必要（mrubygemないときにCを書く場面がある）</li>
  <li>信頼できない mrubygem だとたまに環境がぶっ壊れることある</li>
  <li>デバッグは(現在のところ)printデバッグ</li>
  <li>パフォーマンスが求められる場面だとmrubyよりはgolangが良い</li>
</ul>

<h2 id="参考リンク">参考リンク</h2>

<ul>
  <li><a href="https://bootfm.github.io/">boot.fm</a></li>
  <li><a href="https://roppongirb.connpass.com/event/42633/">Roppongi.rb #2 “Infrastructure x Ruby” - connpass</a></li>
  <li><a href="https://seleck.cc/822">リモートワークは敢えて取り入れない。Gunosyデータ分析部「情報共有」の仕組みとは | SELECK</a></li>
  <li><a href="https://github.com/k0kubun/mitamae">k0kubun/mitamae: Configuration management tool embedding mruby, which is alternative implementation of Itamae</a></li>
  <li><a href="http://qiita.com/k0kubun/items/3995d3b730b63ef67c56">Rubyを評価するCLIツールはCRubyとmrubyのどちらで実装するべきか - Qiita</a></li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="podcast" /><category term="tech" /><summary type="html"><![CDATA[ちょっと前だが今月boot.fmというTech系Podcastに出演した。最近流行りのTechポッドキャストに出演しました。分報、フロントエンド技術とどう付き合うか、コードレビュー、mrubyあたりを話してます | Vol.4: Code review as a prior investment そのフォローアップや話しきれなかったことなど書いてみます。]]></summary></entry><entry><title type="html">ひどいコードを書いてもよいとき</title><link href="https://blog.toshimaru.net/why-you-should-write-shitty-code/" rel="alternate" type="text/html" title="ひどいコードを書いてもよいとき" /><published>2016-02-08T00:00:00+09:00</published><updated>2016-02-08T00:00:00+09:00</updated><id>https://blog.toshimaru.net/why-you-should-write-shitty-code</id><content type="html" xml:base="https://blog.toshimaru.net/why-you-should-write-shitty-code/"><![CDATA[<p><a href="http://hitode909.hatenablog.com/entry/2016/02/08/140232">なぜひどいコードを書いてはいけないか - hitode909の日記</a></p>

<p>ひどいコードを書いてもよいときとは:question:</p>

<ul>
  <li>ひどくないコードを書けるだけの技術力がない</li>
  <li>プロジェクトの生産期間が短い</li>
  <li>プロダクトの寿命が短い</li>
  <li>将来アーキテクチャを作り直すことが決まっている</li>
  <li>自分が近い将来退職する</li>
  <li>技術的負債を残したい</li>
</ul>

<p>良いコード:innocent:と悪いコード:imp:の分別がつかないような<strong>技術力の低い</strong>新卒くんとかは好むと好まざるとにかかわらずひどいコードを書いてしまうときもある。担当メンターはきちんと彼らが良いコードを書けるように導いていかなければならない。</p>

<p><strong>プロジェクトの生産期間が短かったり、プロダクトの寿命が極端に短い</strong> とわかっているものであればひどいコードを書いてもよい。:imp: ひどいコードとわかっていても時間が足りなければ直せないし、たとえ直したとしてもその成果はプロダクトの寿命と共に終わる。ただし長期的にメンテンナンスをしていくのであればこの限りではない。</p>

<p>言語選択とかフレームワーク選定とかデータベース設計とかアーキテクチャレベルで<strong>作り直すことを将来想定しているのであれば</strong>、ひどいコードを書いてもよい。:imp: かの有名なFacebookだって最初はひどいコードから始まってるんだ<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>。そのコードを未来の優秀なエンジニアたちが塗り替えていって綺麗にしていったんだ。そうしてFacebookは大きくなり大成功を収めた。ビジネス :moneybag: を作るのに綺麗なコードは要らない。</p>

<p>あなたは近い将来<strong>退職</strong>することを目論んでいて現在の職場に少ならからずのヘイトを溜めている。さぁ復讐のときだ。技術的負債を目いっぱい残してやろう。:imp:</p>

<h3 id="過去に書いた関連エントリ">過去に書いた関連エントリ</h3>
<ul>
  <li><a href="/mentenability/">メンテナンス性の高いコードを書く意義とは</a></li>
</ul>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><a href="https://gist.github.com/nikcub/3833406">Facebook PHP Source Code from August 2007</a> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Toshimaru</name></author><category term="tech" /><summary type="html"><![CDATA[なぜひどいコードを書いてはいけないか - hitode909の日記 / ひどいコードを書いてもよいときとは？　ひどくないコードを書けるだけの技術力がない プロジェクトの生産期間が短い プロダクトの寿命が短い 将来アーキテクチャを作り直すことが決まっている 自分が近い将来退職する 技術的負債を残したい]]></summary></entry><entry><title type="html">認定スクラムマスター研修に行ってきました</title><link href="https://blog.toshimaru.net/scrum-training/" rel="alternate" type="text/html" title="認定スクラムマスター研修に行ってきました" /><published>2016-01-20T00:00:00+09:00</published><updated>2018-02-08T00:00:00+09:00</updated><id>https://blog.toshimaru.net/scrum-training</id><content type="html" xml:base="https://blog.toshimaru.net/scrum-training/"><![CDATA[<p>昨年末にスクラムマスター研修を受けてきて、認定スクラムマスター (CSM)となりました。スクラムマスター研修で学んだこととして社内で共有した内容を本ブログでも共有してみようと思います。</p>

<h2 id="scrum-vs-agile-歴史から学ぶ">Scrum vs Agile 〜歴史から学ぶ〜</h2>

<ul>
  <li>1993年: スクラム誕生</li>
  <li>2001年: アジャイルソフトウェア開発宣言
    <ul>
      <li>アジャイルマニフェスト: <a href="http://agilemanifesto.org/iso/ja/manifesto.html">アジャイルソフトウェア開発宣言</a></li>
      <li>アジャイル原則:  <a href="http://agilemanifesto.org/iso/ja/principles.html">アジャイル宣言の背後にある原則</a></li>
    </ul>
  </li>
</ul>

<p>アジャイルは「より良い開発/方法を探している」という状態のことです。状態なので原理的には「アジャイル開発をしている」という表現は正しくありません。振り返ってみて「あのプロジェクトはアジャイルだった」と評価できるもの。極端に言うといわゆるウォーターフォール型の開発も１つのアジャイルと定義することもできます。</p>

<p><em>Don’t do agile, be agile</em> （訳: アジャイル開発をするな、アジャイルであれ）</p>

<p>スクラムのほうがアジャイルより歴史的には古く、アジャイルの定義が曖昧な一方、スクラムはきちんと確立された方法論で現在もアップデートされ続けているフレームワークです(年２回)。ただ出版社のマーケティング戦略的に「アジャイル」というバズワードを使わなきゃ本が売れないという理由もあってか、世の中には＜アジャイルという皮を被った何か＞が氾濫しています。「アジャイル」という魔法のコトバに惑わされてはいけないのです。</p>

<h2 id="スクラムとは何か">スクラムとは何か？</h2>

<p>スクラムとは <strong>＜現状を把握するためのフレームワーク＞</strong>。どのプロジェクトにおいても現状を把握した結果、大体において問題はあることから <strong>＜問題を発見するフレームワーク＞</strong> と言われることもあります。</p>

<p>なのでポイント（超重要！）は、スクラムをやったからといって、</p>

<ul>
  <li><strong>生産性は向上しません</strong></li>
  <li><strong>人が成長することはありません</strong></li>
  <li><strong>プロダクトが改善することはありません</strong></li>
</ul>

<p>あくまでもこれらは、現状を把握した結果として期待できるものであって、スクラムをやれば必ず得られる結果というわけではありません。スクラムもまた、銀の弾丸ではないのです。</p>

<p>逆にチームの現状を把握できていないのであれば、それはスクラムとは呼べません。そして「スクラムは優秀な人じゃなければできない」というのも間違いです。優秀じゃない人でも現状を把握してそこそこの成果を出せるようにするのがスクラムというフレームワークです。</p>

<h2 id="スクラムのルール">スクラムのルール</h2>

<p>全部で19個あります。</p>

<p><img src="/images/posts/scrum/scrum1.png" alt="scrum" /></p>

<h3 id="スクラムの三本柱">スクラムの三本柱</h3>

<ol>
  <li><strong>透明性</strong> – Transparency</li>
  <li><strong>検証</strong> – Inspect</li>
  <li><strong>適合</strong> (検証に基づいた適合) – Adapt</li>
</ol>

<h3 id="スクラムの３つの役割">スクラムの３つの役割</h3>

<ol>
  <li><strong>プロダクトオーナー</strong>
    <ul>
      <li>チームのROIを最大化させる（ビジネスのROIではないということに注意）</li>
    </ul>
  </li>
  <li><strong>スクラムマスター</strong>
    <ul>
      <li>開発が Scrum と呼べる状態にする</li>
      <li><strong>スクラムじゃない方法を提案するのもまた、スクラムマスターの役割</strong></li>
    </ul>
  </li>
  <li><strong>チーム</strong></li>
</ol>

<p><strong>7人±2人</strong> が１つのスクラムチームを構成するのがのぞましいとされています。</p>

<h3 id="スクラムの5つのセレモニー">スクラムの5つのセレモニー</h3>

<ol>
  <li><strong>Sprint Planning – スプリント計画</strong>
    <ul>
      <li>短期計画</li>
      <li>何を実現しようとしているのかを明確に</li>
      <li>どの順番（優先順位）で開発を進めるのか</li>
    </ul>
  </li>
  <li><strong>Daily Scrum – デイリースクラム/朝会（朝じゃなくてもよい）</strong>
    <ul>
      <li>15分間</li>
      <li>毎日の学習を共有</li>
      <li>議論は行わない</li>
    </ul>
  </li>
  <li><strong>Product Backlog Refinement – プロダクトバックログ見直し</strong>
    <ul>
      <li>中長期計画（現在のスプリントは含まれないことに注意）</li>
      <li>スプリントの5-10%使って見直しを行う</li>
    </ul>
  </li>
  <li><strong>Sprint Review – スプリントレビュー</strong>
    <ul>
      <li>動くプロダクト・ドキュメントで成果を確認する</li>
      <li>プロダクト触ってもっとプロダクトを良くする</li>
    </ul>
  </li>
  <li><strong>Sprint Retrospective – スプリントレトロスペクティブ/振り返り</strong>
    <ul>
      <li>チームが生産性を高めるために取らなきゃいけないアクションを1つ以上決める</li>
    </ul>
  </li>
</ol>

<p><img src="/images/posts/scrum/scrum2.jpeg" alt="scrum sprint" /></p>

<h3 id="アーチファクト">アーチファクト</h3>

<p>アーティファクト、成果物とでも訳しましょうか。下記４つがそれにあたります。</p>

<ol>
  <li><strong>スプリントバックログ</strong></li>
  <li><strong>プロダクトバックログ</strong></li>
  <li><strong>Impediment List</strong> - 障害リスト</li>
  <li><strong>Acceptance Criteria</strong> - 受け入れ条件</li>
</ol>

<h3 id="その他">その他</h3>

<ul>
  <li><strong>Sprint</strong> - スプリント</li>
  <li><strong>Sprint Stop</strong> - スプリント停止</li>
  <li><strong>DONE</strong> - 製品が完了する</li>
  <li><strong>Potentially shippable product increment</strong> – 出荷可能な製品をリリースする</li>
</ul>

<h2 id="スクラムが適さないシーン">スクラムが適さないシーン</h2>

<ul>
  <li>プロダクトの生産期間が短い
    <ul>
      <li>例) 2ヶ月で終わってしまうプロジェクト</li>
      <li>スクラムはチームビルディングで最低３ヶ月かかる。そしてその３ヶ月を反復してチームを改善させていく。つまり３ヶ月以内のプロジェクトでスクラムを行うのは難しい（やれなくもないが）</li>
    </ul>
  </li>
  <li>要件・技術が単純なプロダクト
    <ul>
      <li>スクラムは要件・技術的要素が複雑な場合に適したアプローチ</li>
    </ul>
  </li>
</ul>

<h2 id="自律的なチームとは">自律的なチームとは</h2>

<ol>
  <li>チームの明確なゴールがある</li>
  <li>チームの明確なバウンダリー（境界線）がある</li>
</ol>

<p>「自律的なチームかどうかの判断基準は何？」への回答は「<strong>個人がチームのゴールを達成するために何をすべきか0.1秒以内に判別し行動できる</strong>」といえます。</p>

<h2 id="見積もり方法">見積もり方法</h2>

<ol>
  <li><strong>相対見積もり</strong>
    <ul>
      <li>一番簡単なタスクのポイントが1だとしてそれに対する相対的な見積もり</li>
      <li>プロダクトバックログアイテムはこちらの見積もり方法が適している</li>
    </ul>
  </li>
  <li><strong>絶対見積もり</strong>
    <ul>
      <li>xx時間とかの見積もり</li>
      <li>スプリントバックログアイテムにはこちらの方法が適している</li>
      <li>1スプリントバックログアイテムが0.5時間〜1時間になるのが理想的な状態</li>
    </ul>
  </li>
</ol>

<p>ここで重要なポイントとしては <strong>スクラムマスターは絶対に計画せずにチームが進むことを許容してはいけません</strong> 。スクラムをやるなら <strong>徹底的に計画してください。妥協は許されません</strong> ここがスクラムをやる上でのチームが持たなければならない＜覚悟＞となります。逆に言うとこの覚悟が持てないならスクラムをやるべきではありません。</p>

<h2 id="done">DONE</h2>

<p>DONEはDefinition of doneのことです。そしてDefinition of doneには doneとundoneの２つが含まれます。</p>

<p>どういうことでしょうか。例えば「ログイン機能を作る」というタスクを考えてみましょう。ログイン機能のDONEとして何をイメージするでしょうか？「フォームに正しい値を入力して正しくログインできること」「間違った値を入力してログインできないこと」「変な値でバリデーションエラーメッセージがでること」などが簡単に思い浮かぶと思います。</p>

<p>ではそれで本当にログイン機能はDONEと言えるのでしょうか。違います、DONEにはログイン機能の単体テストやその結合テスト、さらにはセキュリティテスト、負荷テスト、またはその機能のドキュメンテーションも全て含まれてのDONEです。そしてDONEにはそれで完了しているdoneとそれで完了しなかった、例えばこのケースで言うと「テストは後でかこう」「セキュリティ試験は全ての機能が完成してから実施」などのundoneも含まれています。</p>

<p>このundoneが後回しになって積み上がった状態がプロジェクトの炎上状態であり、スクラムとして不健全な状態といえます。健全なスクラムは１スプリント毎にこのundoneを着実に消化していきます。</p>

<h2 id="プロダクトバックログの書き方">プロダクトバックログの書き方</h2>

<p>研修ではユーザーストーリーとAcceptance Criteriaの２つを書いて１つのプロダクトバックログアイテムとしました。</p>

<ul>
  <li><strong>ユーザーストーリー</strong>: {who}として {what}がほしい なぜなら{why}だから</li>
  <li><strong>Acceptance Criteria</strong>: 受け入れ条件 ユーザーストーリーが達成できたといえる <strong>誰が見てもわかる明確な条件</strong></li>
</ul>

<h2 id="ベロシティ">ベロシティ</h2>

<p>これらのプロダクトバックログアイテムに対して先ほどの見積もりのポイントを付けていきます。そして <strong>1スプリント中にチームが消化できるポイント数のことをベロシティ</strong> といいます。</p>

<p>このベロシティは安定させるべきです。もしベロシティが安定していないのならばそれはポイントの付け方が間違っているか、チームに何かしら問題がある可能性が高いです。</p>

<h2 id="スクラムが成功している状態とは">スクラムが成功している状態とは？</h2>

<p>スクラムチームとして <strong>3ヶ月で46%生産性が向上している状態</strong> がスクラムが成功している状態です。じゃあ46%向上している状態とはどう測ったらよいかというと、スクラム講師曰く、先ほど言及したundoneが3ヶ月というスパンで1つでも消化できていれば46%生産性が上がったと言っていいとのことでした。</p>

<p>しかしこれは非常に難しいことで、どんなに成功しているスクラムチームでも1年に1回でもそれが達成できていればうまくできているほうだとのことでした。</p>

<h2 id="スクラムマスター役割スキル">スクラムマスター役割・スキル</h2>

<ul>
  <li><strong>状況分析</strong>: シチュエーショニング</li>
  <li><strong>ティーチング</strong></li>
  <li><strong>ファシリテーティング</strong></li>
  <li><strong>メンタリング</strong></li>
  <li><strong>コーチング</strong></li>
</ul>

<p>そしてスクラムマスターはこれらの行為をやるだけで満足してはいけません。やった上で <strong>結果が出ないと意味がありません。</strong> つまりティーチングをやったからスクラムマスターの役割を果たしたとはいえず、ティーチングをやった結果、それを受けた者の行動が変わることも含めてスクラムマスターの役割ということです。</p>

<p>「謙虚さ」と同時に「屈強さ」がスクラムマスターには必要です。</p>

<h2 id="受講してみての感想">受講してみての感想</h2>

<p>今回のスクラムマスター研修では「スクラムとは何か」を原理的な立場から学びました。</p>

<p>受講してわかったことは世の開発現場には似非スクラムが溢れているなーってことでした。スプリント回しているからスクラムですとか、カンバンでタスク管理して朝会やってスクラムですとか、リソース足りないのでうちは開発チームメンバーとスクラムマスターをの２つのロールを兼任してますとか…。</p>

<p>スクラムの基本原則から言うと役割の兼任はNGですし、スクラムは具体的なタスク管理手法は規定していないのでカンバンでやろうとJIRAでやろうとGithub Issueでやろうとそれはスクラムの原理原則とは関係ありません。</p>

<p>朝会以外にもスクラムの大事なセレモニーはあって必ずそれらはスキップしてはいけないものとなってます。スプリントを回すにしても、ちゃんとそのスプリントは計画とあっていたのかとか、ちゃんと受け入れ条件をクリアする品質でスプリントの成果物が上がってるかとか、スプリント間に差し込みタスクがなかったかとかいろいろやらなきゃいけないことや考えることはあります。</p>

<p>そして感じたこととしては、スタートアップのアーリーフェーズだとなかなか原理的な意味でのスクラムは難しいのではということでした。スクラムやりたくともリソースが全然足りないのでスクラムマスター、プロダクトオーナーはそもそも置けないとか、スクラムのロールを兼任せざるを得ないとか。</p>

<p>またアーリーフェーズだと人の出入り（特に新しいメンバーを迎えるケース）も激しいと思うのでそうなるとスクラムチームは再度チームビルディングからやり直さなければなりません（このチームビルディングで1 Sprintは消費すると言われています）。</p>

<p>なのでこういった開発現場で出来ることとしてはスクラムのフレームワークの中で良いと思うもの、有効だと思うものを選択して組織に有効な＜スクラムエッセンスを取り入れた開発＞を実践することではないでしょうか。</p>

<p>一方で上記に書いたように「スクラムじゃない別の方法を提案するのもスクラムマスターの役割」と書きました。なのでスクラムにこだわる必要は全然なくて、スクラムがチームにマッチしないと思うならスクラムマスターは別の手法を提案できなきゃダメです。例えばそれがウォーターフォールでもいいしDDDでもいいしリーンスタートアップだっていいのです。</p>

<p>そういう意味でスクラムマスターは(おそらく皆が)思っている以上にその役割を全うすることが難しいものだと感じました。</p>

<h2 id="参考になりそうな他の人の体験記">参考になりそうな他の人の体験記</h2>

<p>スクラムマスター研修に行かれた他の方の体験記を紹介します。</p>

<ul>
  <li><a href="http://makopi23.blog.fc2.com/blog-entry-155.html">makopi23のブログ 認定スクラムマスター研修（CSM）を振り返る</a></li>
  <li><a href="http://qiita.com/kara_i/items/fab490c08bb467d2c842">認定スクラムマスター研修のメモ書き - Qiita</a></li>
  <li><a href="https://www.slideshare.net/yangiYa/csm2014-1114">認定スクラムマスター研修に行ってきました</a></li>
</ul>

<h2 id="こちらも参考にどうぞ">こちらも参考にどうぞ</h2>

<ul>
  <li><a href="https://www.scrumguides.org/download.html">公式スクラムガイド</a> Japanese を選択してもらえれば日本語バージョンが閲覧できます</li>
  <li><a href="https://www.slideshare.net/zaruhiroyukisakuraba/ss-77861697">スクラム導入に向けて：スクラムは救世主となるのか？</a></li>
  <li><a href="http://www.ryuzee.com/contents/blog/7120">スクラムプロジェクト開始のベストプラクティス | Ryuzee.com</a></li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="scrum" /><category term="management" /><category term="tech" /><summary type="html"><![CDATA[昨年末にスクラムマスター研修を受けてきて、認定スクラムマスター (CSM)となりました。スクラムマスター研修で学んだこととして社内で共有した内容を本ブログでも共有してみようと思います。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/scrum/scrum.jpg" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/scrum/scrum.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">YAPC::Asia 2015で心に残ったトーク&amp;amp;スライド #yapcasia</title><link href="https://blog.toshimaru.net/yapc-2015/" rel="alternate" type="text/html" title="YAPC::Asia 2015で心に残ったトーク&amp;amp;スライド #yapcasia" /><published>2015-08-23T00:00:00+09:00</published><updated>2015-08-23T00:00:00+09:00</updated><id>https://blog.toshimaru.net/yapc-2015</id><content type="html" xml:base="https://blog.toshimaru.net/yapc-2015/"><![CDATA[<p>YAPC2015に行ってきました。その中で心に残ったトーク＆スライドのみを抜粋（直接トークを聴いたものもあるしそうでないものもある）。Perlは書けないのでPerl成分は少なめです。</p>

<p>まだ公開していないスライドもあるので後からさらに追加するかも。あと<strong>スライドの読み込みでページロードが遅くなっているのであしからず。</strong></p>

<h2 id="es6">ES6</h2>

<iframe src="//www.slideshare.net/slideshow/embed_code/key/3aH36zv6gKAOcy" width="425" height="355" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen=""> </iframe>
<div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/teppeis/effective-es6" title="Effective ES6" target="_blank">Effective ES6</a> </strong> from <strong><a href="//www.slideshare.net/teppeis" target="_blank">teppeis </a></strong> </div>

<ul>
  <li>ES6には未来があると思った</li>
  <li>PCでメモを取るには立ち見はツラい。せめて床座りだ</li>
</ul>

<h2 id="frontend-technology">Frontend Technology</h2>

<script async="" class="speakerdeck-embed" data-id="4d78b0afe4fa4e078544e80db2eb8bd1" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>

<ul>
  <li>時系列にフロントエンドのテクノロジーがまとめられていてわかりやすい :angel:</li>
</ul>

<h2 id="http2">HTTP2</h2>

<iframe src="//www.slideshare.net/slideshow/embed_code/key/xPIDup4I1Z0fS6" width="425" height="355" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen=""> </iframe>
<div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/kazuho/http2-51888328" title="HTTP/2時代のウェブサイト設計" target="_blank">HTTP/2時代のウェブサイト設計</a> </strong> from <strong><a href="//www.slideshare.net/kazuho" target="_blank">Kazuho Oku</a></strong> </div>

<iframe src="//www.slideshare.net/slideshow/embed_code/key/GiEBiNl1oDDHKz" width="425" height="355" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen=""> </iframe>
<div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/Jxck/http2-web-web-over-http2-51943080" title="HTTP2 時代の Web - web over http2" target="_blank">HTTP2 時代の Web - web over http2</a> </strong> from <strong><a href="//www.slideshare.net/Jxck" target="_blank">Jxck :)</a></strong> </div>

<h2 id="リモートワーク">リモートワーク</h2>

<script async="" class="speakerdeck-embed" data-id="5313f1eadabd46a4a4596b6cbe8fb0de" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script>

<ul>
  <li>この言葉が非常に印象的だった: <em>The health and the qualilty of your product will be a direct reflection of the health and qualilty of your organization</em></li>
  <li>Conway’s law: <em>Organizations produce designs which are copies of the communication structures of these organizations</em></li>
</ul>

<h2 id="aws">AWS</h2>

<script async="" class="speakerdeck-embed" data-id="d890ef1876c54ee1b0470c1293db1cd7" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>

<ul>
  <li>良い知見がまとまっている</li>
</ul>

<h2 id="consul">Consul</h2>

<script async="" class="speakerdeck-embed" data-id="26bad8a4879b4be6a6b166d05a1f1c91" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>

<script async="" class="speakerdeck-embed" data-id="cde37ad797ab49dd92584770e9798d9a" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>

<h2 id="サービス運用">サービス運用</h2>

<script async="" class="speakerdeck-embed" data-id="4e5572293cef4fa8beabfaa16d70344b" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>

<script async="" class="speakerdeck-embed" data-id="b07a8c18db9444db891ff477fa860274" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>

<iframe src="//www.slideshare.net/slideshow/embed_code/key/bVx5ctVFAPXH6h" width="425" height="355" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen=""> </iframe>
<div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/shunsukekozawa5/ss-51890590" title="はてなブックマークのトピックページの裏側 in YAPC::Asia Tokyo 2015" target="_blank">はてなブックマークのトピックページの裏側 in YAPC::Asia Tokyo 2015</a> </strong> from <strong><a href="//www.slideshare.net/shunsukekozawa5" target="_blank">Shunsuke Kozawa</a></strong> </div>

<ul>
  <li><a href="http://songmu.github.io/slides/yapc-asia2015/#0">Mackerel開発におけるScalaとGo、そしてPerl</a></li>
  <li>はてな勢つよし…</li>
</ul>

<h2 id="oss">OSS</h2>

<iframe src="//www.slideshare.net/slideshow/embed_code/key/3Q3IdJJc6HDWfW" width="425" height="355" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen=""> </iframe>
<div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/tagomoris/how-to-createimprove-oss-products-and-its-community" title="How to create/improve OSS products and its community" target="_blank">How to create/improve OSS products and its community</a> </strong> from <strong><a href="//www.slideshare.net/tagomoris" target="_blank">SATOSHI TAGOMORI</a></strong> </div>

<ul>
  <li>OSSとのつきあいかた。OSSやっていく上で大事なことが書かれてる</li>
</ul>

<h2 id="ブログによる情報発信">ブログによる情報発信</h2>

<p><a href="http://yuuki.hatenablog.com/entry/the-art-of-blogging-technologies">YAPC::Asia 2015で技術ブログを書くことについて発表しました - ゆううきブログ</a></p>

<blockquote>
  <p>読みやすさを追求するために、文章自体を書くときに結構細かいことを意識しています。 意識しているのは以下のような内容です。</p>

  <ul>
    <li>段落のトピックセンテンスを意識する。その段落で述べることの概略を述べた一文を含める</li>
    <li>文をなるべく短くする。とはいえやり過ぎは返って流れにそって読みにくくなるため、きれいに読み下せるなら多少長くなってもよい</li>
    <li>箇条書きに頼らない。箇条書きは文と文とつなぐことに向いていないため、あくまで強調したいものを列挙するだけにとどめる</li>
    <li>「〜を行う」は冗長な表現なので使わない。大抵は「〜する」でシュッと言い切れる</li>
    <li>文の格を揃える。主語と述語が対応しているかを常に意識する</li>
    <li>不自然な体言止めを控える。小説やエッセイのようなものには向いているかもしれない</li>
    <li>適度にひらがなを混ぜる。漢字ばかりだと日本人には読みにくい。文の密度のバランスをとる</li>
    <li>同じ言い回しの連続を避ける。例えば、「〜だと思う」が連続しないようにする</li>
    <li>事実と意見を区別する。意見を述べた文の末尾は「〜だと考える。」「〜だと思う。」でくくる</li>
    <li>「〜だと考えられる」という表現を避ける。「考えられる」は考えている主体は自分なのに受け身になっていて、考えている主体を曖昧にしている</li>
  </ul>

  <p>曖昧な部分やわかりにくかったりぼかしたり部分は突っ込まれることもあるので、細部までこだわって丁寧に書こうとしています。</p>
</blockquote>

<h2 id="エンジニアの健康">エンジニアの健康</h2>

<script async="" class="speakerdeck-embed" data-id="5248d18195884b3f9bf89e631302cbef" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>

<ul>
  <li>きちんとした姿勢と適度な運動、大事。</li>
</ul>

<h2 id="google">Google</h2>

<blockquote>
  <p><a href="https://speakerdeck.com/googlecloudjapan/deep-dive-into-google-cloud-technology">スライドはここ</a>に上げてありますが、これだけ見ても意味不明と思われるので、話した内容の要約をまとめブログ代わりに書こうかな、と思ったらかなり長文となってしまいました。</p>
</blockquote>

<ul>
  <li><a href="http://qiita.com/kazunori279/items/3ce0ba40e83c8cc6e580">GoogleCloudPlatform - YAPC Asia 2015「Google Cloud Platformの謎テクノロジーを掘り下げる」のまとめ - Qiita</a></li>
  <li>スライド参照するよりも上のQiitaの記事のほうが良さ気</li>
</ul>

<h2 id="isucon">ISUCON</h2>

<iframe src="//www.slideshare.net/slideshow/embed_code/key/a9AbEpcmNp1vxX" width="425" height="355" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen=""> </iframe>
<div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/kazeburo/isucon-yapcasia-tokyo-2015" title="ISUCONの勝ち方 YAPC::Asia Tokyo 2015" target="_blank">ISUCONの勝ち方 YAPC::Asia Tokyo 2015</a> </strong> from <strong><a href="//www.slideshare.net/kazeburo" target="_blank">Masahiro Nagano</a></strong> </div>

<h3 id="参考">参考</h3>

<ul>
  <li>YouTubeに動画あります: <a href="https://www.youtube.com/playlist?list=PLzT643y4OYZp0K4YhPmmaLtnZzlVrbz0G">YAPC::Asia Tokyo 2015 - YouTube</a></li>
  <li>その他YAPCレポートがまとめられています <a href="http://yapcasia.org/2015/news/08/yapcasia-tokyo-2015-blog-entries.html">【随時更新中】YAPC::Asia Tokyo 2015 感想エントリまとめ | YAPC::Asia Tokyo 2015</a></li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="tech" /><summary type="html"><![CDATA[YAPC2015に行ってきました。その中で心に残ったトーク＆スライドのみを抜粋（直接トークを聴いたものもあるしそうでないものもある）。 まだ公開していないスライドもあるので後からさらに追加するかも。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/yapc2015.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/yapc2015.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">2013年に参加したAdventCalendar、そしてAdventCalendar参加の意義</title><link href="https://blog.toshimaru.net/2013-advent-calendar/" rel="alternate" type="text/html" title="2013年に参加したAdventCalendar、そしてAdventCalendar参加の意義" /><published>2013-12-29T00:00:00+09:00</published><updated>2013-12-29T00:00:00+09:00</updated><id>https://blog.toshimaru.net/2013-advent-calendar</id><content type="html" xml:base="https://blog.toshimaru.net/2013-advent-calendar/"><![CDATA[<p>2013年のAdvent Calendarは下記の記事にて参加しました。</p>

<ul>
  <li><a href="http://blog.toshimaru.net/php-force-property/">PHPのプロパティをStrictに定義する</a> (<a href="http://www.adventar.org/calendars/101">PHP Advent Calendar 2013</a>)</li>
  <li><a href="http://blog.toshimaru.net/one-thing-you-should-know-about-asahikawa/">旭川にある有名な動物園についてあなたが知るべきたった１つのこと</a> (<a href="http://www.adventar.org/calendars/77">道民部 Advent Calendar 2013</a>)</li>
  <li><a href="http://blog.toshimaru.net/php-trait/">PHP5.4のtrait機能を理解する</a> (<a href="http://www.adventar.org/calendars/101">PHP Advent Calendar 2013</a>)</li>
  <li><a href="http://blog.toshimaru.net/canadian-beers/">カナディアンビールの紹介</a> (<a href="http://www.adventar.org/calendars/86">ビール Advent Calendar 2013</a>)</li>
  <li><a href="http://blog.toshimaru.net/css-animation/">CSS3アニメーションを使ってサイトをリッチに</a> (<a href="http://www.adventar.org/calendars/57">CSS Property Advent Calendar 2013</a>)</li>
  <li><a href="http://blog.toshimaru.net/chrome-dev-tool/">細かすぎて伝わりにくいChrome Developerツールを使いこなそう！</a> (<a href="http://www.adventar.org/calendars/62">Frontrend Advent Calendar 2013</a>)</li>
  <li><a href="http://blog.toshimaru.net/jquery-8-tips/">jQuery使いが知っておくべきjQueryテクニック8選</a> (<a href="http://www.adventar.org/calendars/135">jQuery Advent Calendar 2013</a>)</li>
</ul>

<p>合計７本。思ったよりも多く書くことができました。</p>

<h2 id="advent-calendar参加意義">Advent Calendar参加意義</h2>

<p>Advent Calendarに参加する意義とは何でしょうか？　僕は下記のように考えています。</p>

<ul>
  <li>ブログを書くきっかけになる</li>
  <li>ブログを書くモチベーションになる</li>
  <li>普段より多くの人に読んでもらえる</li>
  <li>他の人のブログを知る・読むきっかけになる</li>
</ul>

<h2 id="ブログを書くきっかけになる">ブログを書くきっかけになる</h2>

<p>自分の場合、「これブログに書こうかなー」とネタだけ書き留めておいてあるのですが、面倒で＜下書き＞状態のまま保存されている記事がいくつかあります。Advent Calendarはそれを掃き出すいいきっかけとなります。例えばPHPについてブログを書こうかなと思っていることがあるのであれば、思い切ってPHP Advent Calendarに参加して書くきっかけとしちゃいましょう。</p>

<p>Advent Calendarは12月という時期もあり2013年を総括する良いきっかけでもあります。エンジニアであれば2013年の間に学んだ新しい技術、面白い技術、紹介したい技術を2013年総括の意味も込めて書いてみましょう。ブログに残すことにより自分が2013年に何を学んだのかを振り返る良いきっかけにもなりますし、「書く」ことにより自分自身の知識の整理にもなり良い事尽くしです。</p>

<h2 id="ブログを書くモチベーションになる">ブログを書くモチベーションになる</h2>

<p>ブログを書くモチベーションになるのもAdvent Calendarの良いところです。１人で書いているとブログを書こうと思い立ってもどうしても「別に後でいいか」「今度時間あるときに更新しようか」と放置気味になってしまうのが怠惰な人間の性（さが）であります。</p>

<p>しかしAdvent Calendarの場合はみんなでやっているので、「みんなも更新してるし俺も頑張るか」って気になります。あと更新する日付も事前に決定されているので「○○日までには記事を書いてアップデートしなきゃ！」というある意味締め切り的な役割もあります。</p>

<p>逆にこれを利用して、書くネタはないけどとりあえず参加だけポチっておいて＜更新しなきゃいけない状況＞を作ることでブログ記事を書くことができるって作戦もありかと思います。</p>

<p>あと<a href="http://dic.nicovideo.jp/a/%E9%A0%93%E6%8C%AB%E3%81%97%E3%81%9F%E6%8A%80%E8%A1%93%E7%B3%BB%E3%82%A2%E3%83%89%E3%83%99%E3%83%B3%E3%83%88%E3%82%AB%E3%83%AC%E3%83%B3%E3%83%80%E3%83%BC%E3%81%AE%E4%B8%80%E8%A6%A7(2013%E5%B9%B4)">こんな</a>のもネタ記事として存在していますが、Advent Calendarを書かない人の抑止力として働いてて悪くないネタ記事だと思ってます。「俺が記事更新しなかったから＜頓挫＞とか言われた！」なんてなりたくないですもんね。</p>

<h2 id="普段より多くの人に読んでもらえる">普段より多くの人に読んでもらえる</h2>

<p>これも良いことです。Advent Calendarの記事にたどり着く流れとしては下記のような可能性があるかと思います。</p>

<ol>
  <li>普段からのブログの読者</li>
  <li>Advent Calendarのサイトからたどり着く</li>
  <li>バズったAdvent Calendarから同じAdvent Calendarの別の記事を読みに行く</li>
</ol>

<p>普段ブログでリーチできる読者というのは1のみかと思います。例えばRSSでブログを購読しているとかTwitterでフォローしていてそこから記事にたどり着くとか。1の読者は普段からそのブログを読んでいるので、Advent Calendarとして書こうが書かまいがあまり影響はないと言えます。</p>

<p>しかしAdvent Calendarに書くことにより、普段ブログに訪れないであろう2や3の人までリーチできるのは良いことです。つまり、Advent Calendarというメディアを利用するということです。最新技術にアンテナ張っているエンジニアであれば、自分の興味ある技術のAdvent Calendarは全部とは言わずとも、それなりにチェックしているかと思います。これらのエンジニアは大手のAdvent Calendarサイト（<a href="http://www.adventar.org/">Adventar</a>とか<a href="http://qiita.com/advent-calendar">Advent Calendar (qiita)</a>）であればチェックしているかと思うのでそこからのブログの流入が見込めます。</p>

<p>また3のようにバズった記事からの流入の可能性も見込めますね。例えば下記の記事は技術界隈にとどまらず、多くの人に読まれたようです。</p>

<p><a href="http://blog.jugyo.org/post/70240698465">◯ックパッドの面接に落ちたことを社員の高◯さんに言いふらされた話</a> from <a href="http://www.adventar.org/calendars/252">闇 Advent Calendar 2013</a></p>

<p>この記事を読んだ人の中には「闇Advent Calendarにはこの記事の他にどんな闇があるのだろう？」と興味を持ち他の記事も読みに行ったのではないでしょうか。このように普段読まれない読者からもブログを読んでもらえてAdvent Calendarは素晴らしいです。</p>

<h2 id="他の人のブログを知る読むきっかけになる">他の人のブログを知る・読むきっかけになる</h2>

<p>他の人のブログを知ったり、読んだりするきっかけにもなるのも良いです。上記に書いたような普段からのブログ読者、あるいはバズった記事でないとなかなか新たなブログを知ったりするのは難しいです。自分も今回参加したAdvent Calendarのその他の記事を読んだのをきっかけにTwitterをフォローしたり、そこから同ブログの別の記事をディグったりしました。</p>

<p>わりとブログ上でのエンジニア有名人はAdvent Calendarに参加しているケースも多いので、PHPのカレンダーであればPHP界隈のエンジニア、フロントエンドのカレンダーであればフロントエンド界隈のエンジニア、GoのカレンダーであればGo界隈のエンジニアにどんな人がいるのかを知ることができます。例えばGoなんかは最近ホットになっている言語でもあるのでAdvent Calendarに参加しているエンジニアの方々をフォローしていれば、Go言語の最新動向もフォローできると思います。</p>

<h2 id="advent-calendarを終えて">Advent Calendarを終えて</h2>

<p>このようにAdvent Calendarはエンジニアにとって良い事尽くしですので、来年のAdvent Calendarも参加したいなーと考えている所存です。これを読んでいるエンジニアの方でAdvent Calendarに参加したことないという方は来年のカレンダーにチャレンジしてみてはいかがでしょうか？</p>

<h3 id="反省">反省</h3>

<p>前半の記事は参加表明した後に当日になる前に準備をすることができたのでちゃんと日本時間で更新することができましたが、後半の方は日本との時差もあり日本時間で1日遅れての更新となってしまった記事がありました。それが今回の反省点。</p>]]></content><author><name>Toshimaru</name></author><category term="tech" /><summary type="html"><![CDATA[Advent Calendarに参加する意義とは何でしょうか？　僕は下記のように考えています。 ブログを書くきっかけになる ブログを書くモチベーションになる 普段より多くの人に読んでもらえる 他の人のブログを知る・読むきっかけになる]]></summary></entry><entry><title type="html">「フロントエンドデベロッパー面接時の質問事項」日本語訳しました</title><link href="https://blog.toshimaru.net/Front-end-Developer-Interview-Questions-Japanese/" rel="alternate" type="text/html" title="「フロントエンドデベロッパー面接時の質問事項」日本語訳しました" /><published>2013-08-06T00:00:00+09:00</published><updated>2013-08-06T00:00:00+09:00</updated><id>https://blog.toshimaru.net/Front-end-Developer-Interview-Questions-Japanese</id><content type="html" xml:base="https://blog.toshimaru.net/Front-end-Developer-Interview-Questions-Japanese/"><![CDATA[<p><a href="https://github.com/h5bp/Front-end-Developer-Interview-Questions">Front-end Job Interview Questions(Github)</a>を日本語訳しました。</p>

<p><a href="https://github.com/h5bp/Front-end-Developer-Interview-Questions/tree/master/Translations/Japanese">日本語訳はこちら</a> <a href="https://b.hatena.ne.jp/entry/https://github.com/darcyclarke/Front-end-Developer-Interview-Questions/tree/master/Japanese"><img src="https://b.hatena.ne.jp/entry/image/https://github.com/darcyclarke/Front-end-Developer-Interview-Questions/tree/master/Japanese" /></a></p>

<p>質問項目としては下記のようになります。</p>

<ul>
  <li>一般的な質問事項</li>
  <li>HTMLに関する質問事項</li>
  <li>JSに関する質問事項</li>
  <li>jQueryに関する質問事項</li>
  <li>CSSに関する質問事項</li>
</ul>

<p>フロントエンドデベロッパーの方は自分の実力試し、あるいは知識の復習として回答を考えてみてはいかがでしょうか？  自分もやってみましたが案外知らないこと、うろ覚えになっていることが多かったです。</p>]]></content><author><name>Toshimaru</name></author><category term="tech" /><summary type="html"><![CDATA[Front-end Job Interview Questions(Github)を日本語訳しました。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/front-end-q.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/front-end-q.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>