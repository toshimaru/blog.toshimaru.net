<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://blog.toshimaru.net/feed/by_tag/tech.xml" rel="self" type="application/atom+xml" /><link href="https://blog.toshimaru.net/" rel="alternate" type="text/html" /><updated>2020-10-25T21:46:22+09:00</updated><id>https://blog.toshimaru.net/feed/by_tag/tech.xml</id><title type="html">Hack Your Design!</title><subtitle>toshimaruの技術系なブログ</subtitle><author><name>Toshimaru</name></author><entry><title type="html">【レビュー】HHKB Hybrid Type-S をしばらく使ってみた感想</title><link href="https://blog.toshimaru.net/hhkb-hybrid-type-s/" rel="alternate" type="text/html" title="【レビュー】HHKB Hybrid Type-S をしばらく使ってみた感想" /><published>2020-05-02T00:00:00+09:00</published><updated>2020-05-16T00:00:00+09:00</updated><id>https://blog.toshimaru.net/hhkb-hybrid-type-s</id><content type="html" xml:base="https://blog.toshimaru.net/hhkb-hybrid-type-s/">&lt;p&gt;&lt;a href=&quot;https://happyhackingkb.com/jp/products/hybrid_types/&quot;&gt;HHKB Professional
HYBRID Type-S&lt;/a&gt; を購入してしばらく経ったので使ってみた感想を書いてみます。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;例のブツです &lt;a href=&quot;https://twitter.com/hashtag/HHKB?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#HHKB&lt;/a&gt; &lt;a href=&quot;https://t.co/agDV1Hol5Z&quot;&gt;pic.twitter.com/agDV1Hol5Z&lt;/a&gt;&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/1206387903632248833?ref_src=twsrc%5Etfw&quot;&gt;December 16, 2019&lt;/a&gt;&lt;/blockquote&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=toshimaru-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B082TXLC2B&amp;amp;linkId=c5256b54070710d4ccbe87264a98553d&quot;&gt;&lt;/iframe&gt;
&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=toshimaru-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B082TSZ27D&amp;amp;linkId=06db5d4f52a7b49dce985f7445194cbb&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;購入モチベーション&quot;&gt;購入モチベーション&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;not Type-SなHHKBはややうるさい&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;自分でタイピングしているときは気にならないけど、隣でバシバシ叩かれているのを体験するとやや音が耳障りなときがある。ノイズを気にせずタイピングできるように静音性のある Type-S が欲しかった&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Type-C接続&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;mini USB接続で macbook の Type-C と接続しているのがどうも時代遅れ感があってイヤだった&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Bluetooth接続&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;BT無線接続でもキーボードを接続したかった&lt;/li&gt;
      &lt;li&gt;⚠️ Bluetooth接続できるのは、macOS 10.15（Catalina）以降&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;その他
    &lt;ul&gt;
      &lt;li&gt;（&lt;a href=&quot;https://medpeer.co.jp/recruit/workplace/development.html&quot;&gt;会社の補助&lt;/a&gt;が出る 😏）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;購入したモデル&quot;&gt;購入したモデル&lt;/h2&gt;

&lt;p&gt;カラーは白、日本語配列を購入しました。&lt;/p&gt;

&lt;p&gt;今までは中二心をくすぐる墨カラーを使用していましたが、キーの視認性が悪く不便と気づいてしまったので白をセレクトしました（大人になったのね、私）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/hhkb/white-hhkb.jpg&quot; alt=&quot;白、日本語配列HHKB&quot; /&gt;&lt;/p&gt;

&lt;p&gt;下記エントリで紹介した通り、尊師スタイルで利用しています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/macbook-hhkb-sonshi-style/&quot;&gt;俺流 MacBook+HHKB 最強尊師スタイル&lt;/a&gt;&lt;/p&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=toshimaru-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B077ZSGQDH&amp;amp;linkId=254fa7761170460244a7a889534107de&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;hhkb-hybrid-特徴&quot;&gt;HHKB Hybrid 特徴&lt;/h2&gt;

&lt;h3 id=&quot;無線接続有線接続&quot;&gt;無線接続/有線接続&lt;/h3&gt;

&lt;p&gt;名前のHybridというのはどうやら無線接続・有線接続のハイブリッド接続が可能、という意味っぽいです。&lt;/p&gt;

&lt;p&gt;これにより、シーンに合わせて下記のように使い分けできるのは便利かもしれません。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;自宅メインで接続するときは有線接続&lt;/li&gt;
  &lt;li&gt;持ち運び利用するときは無線接続&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;なお、無線の給電がバッテリーではなく乾電池なのは「HHKBを長く使ってもらうため」とのこと。バッテリーだと確かにヘタってしまうので、乾電池の採用はPFUらしい設計思想と言えるかもしれません。&lt;/p&gt;

&lt;h3 id=&quot;usb-type-c&quot;&gt;USB Type-C&lt;/h3&gt;

&lt;p&gt;HHKB Hybrid ではUSB Type-Cによる接続が可能です。&lt;/p&gt;

&lt;p&gt;上述の通り僕は尊師スタイルでHHKBを使っているのでディスプレイとHHKB接続面がぶつからないように下記のL字のUSB Type-Cケーブルを購入しておきました。&lt;/p&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=toshimaru-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B07PLRNWQ7&amp;amp;linkId=012378bddd1c67b23ef7468a9f50f430&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/hhkb/hhkbcover.jpg&quot; alt=&quot;キーボードルーフ&quot; /&gt;&lt;/p&gt;

&lt;p&gt;☝️キャンペーンで無料で付いてきたキーボードルーフ。キーボード隙間に入り込むホコリを防げて地味に便利。&lt;/p&gt;

&lt;h2 id=&quot;しばらく使ってみた感想&quot;&gt;しばらく使ってみた感想&lt;/h2&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;Type-S、静かだし打ち心地もソフトで気持ちいい&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/1207643044020801538?ref_src=twsrc%5Etfw&quot;&gt;December 19, 2019&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3 id=&quot;静音性&quot;&gt;静音性&lt;/h3&gt;

&lt;p&gt;キータイプしてまず驚くのは、その静音性。&lt;/p&gt;

&lt;p&gt;not Type-SなHHKBを使ったことのなかった僕にとってType-Sを触ったのはこれが初でした。Type-SじゃなくともHHKBは十分に静かだと感じていたのですが、いざType-Sを使ってみると無印HHKBに比してやはり静か。&lt;/p&gt;

&lt;p&gt;更に静音性を極めたい方であれば、PFU公式のHHKB吸振マットがあるのでこちらを購入すると良さそうです。&lt;/p&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=toshimaru-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B08344W1DY&amp;amp;linkId=2671483c8c0b7897242464be48511332&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;これだけの静音性であれば、HHKB使用時の同僚や家族からの「（うるせーな、こいつのキーボード…）」と思われる恐怖からは、いくばくか逃れることができると思います。&lt;/p&gt;

&lt;h2 id=&quot;キータッチ&quot;&gt;キータッチ&lt;/h2&gt;

&lt;p&gt;静音性とあわせて、キータッチもType-Sはだいぶソフトな印象があります。&lt;/p&gt;

&lt;p&gt;これに関しては好みが分かれると思っていて「確かな打鍵感や音が好み」という方はType-Sではないほうが、好みではないかと思いました。&lt;/p&gt;

&lt;p&gt;かくいう僕もそっちのタイプで、カチャカチャ鳴っているほうが＜俺仕事してる感＞が出て好きなんですよね（笑）。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;Type-SなHHKB, not Type-SなHHKBを両方使った結果、not Type-SなHHKBのほうが好きということがわかった。「ｶﾁｬｶﾁｬ...ｯターン!!!」したい僕のような人間にとっては確かな打鍵感や打鍵時のフィードバックがあったほうが嬉しいのだ&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/1222712303713312770?ref_src=twsrc%5Etfw&quot;&gt;January 30, 2020&lt;/a&gt;&lt;/blockquote&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Type-C・Bluetooth接続は良いぞ&lt;/li&gt;
  &lt;li&gt;Type-S は静かで良い
    &lt;ul&gt;
      &lt;li&gt;周囲に人がいる職場や家庭で使う場合はType-Sが良いのではないでしょうか&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;キータッチの感触は not Type-S のほうが個人的には好き&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=toshimaru-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B082TXLC2B&amp;amp;linkId=c5256b54070710d4ccbe87264a98553d&quot;&gt;&lt;/iframe&gt;
&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=toshimaru-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B082TSZ27D&amp;amp;linkId=06db5d4f52a7b49dce985f7445194cbb&quot;&gt;&lt;/iframe&gt;
&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=toshimaru-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B082TQK2SB&amp;amp;linkId=666af27170fbdef39da1b8d2de31e88d&quot;&gt;&lt;/iframe&gt;
&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=toshimaru-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B082TYNNL2&amp;amp;linkId=70759e0c4f584e35a0935d040fa17d96&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;おまけ&quot;&gt;おまけ&lt;/h2&gt;

&lt;p&gt;HHKBの持ち運びに100均のペットボトルクッションケースがシンデレラ・フィットという噂を聞いて試してみたらたしかにいい感じにフィットしました。公式ケースだとけっこういいお値段するのでオススメです。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;もしお知り合いに、「HHKBの新型を買って、持ち歩きたいけど安いクッションケースないんだよなー」という人がいたら、100均で売ってたペットボトルクッションケースがシンデレラフィットですよ、と伝えてあげてください。&lt;br /&gt; &lt;a href=&quot;https://twitter.com/hashtag/HHKB?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#HHKB&lt;/a&gt; &lt;a href=&quot;https://t.co/zgopIDk2vJ&quot;&gt;pic.twitter.com/zgopIDk2vJ&lt;/a&gt;&lt;/p&gt;&amp;mdash; いちのせさん (@yuhkiichinose) &lt;a href=&quot;https://twitter.com/yuhkiichinose/status/1206531899209863168?ref_src=twsrc%5Etfw&quot;&gt;December 16, 2019&lt;/a&gt;&lt;/blockquote&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=toshimaru-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B073XGWYVH&amp;amp;linkId=1cfa8610e160a15364c222146ccca7cd&quot;&gt;&lt;/iframe&gt;
&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=toshimaru-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B07DC5732N&amp;amp;linkId=743a7be3aa6974683f9ad656223c2d8d&quot;&gt;&lt;/iframe&gt;</content><author><name>Toshimaru</name></author><category term="tech" /><summary type="html">HHKB Professional HYBRID Type-S を購入してしばらく経ったので使ってみた感想を書いてみます。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/hhkb/hhkb-hybrid.jpg" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/hhkb/hhkb-hybrid.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">俺流 MacBook+HHKB 最強尊師スタイル</title><link href="https://blog.toshimaru.net/macbook-hhkb-sonshi-style/" rel="alternate" type="text/html" title="俺流 MacBook+HHKB 最強尊師スタイル" /><published>2019-09-15T00:00:00+09:00</published><updated>2019-09-15T00:00:00+09:00</updated><id>https://blog.toshimaru.net/macbook-hhkb-sonshi-style</id><content type="html" xml:base="https://blog.toshimaru.net/macbook-hhkb-sonshi-style/">&lt;p&gt;俺の中での  MacBook+HHKB 尊師スタイルの最終形が完成したので紹介してみる。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;俺流MacBook+HHKB尊師スタイルの最終型が完成した &lt;a href=&quot;https://t.co/HEW9luH8t3&quot;&gt;pic.twitter.com/HEW9luH8t3&lt;/a&gt;&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/1169423113982865410?ref_src=twsrc%5Etfw&quot;&gt;September 5, 2019&lt;/a&gt;&lt;/blockquote&gt;

&lt;h2 id=&quot;hhkb-professional-jp&quot;&gt;HHKB Professional JP&lt;/h2&gt;

&lt;p&gt;僕は日本語配列派で矢印キーを使いたい人間なので、日本語配列なHHKBを使っている。また、Bluetooth版はレイテンシが気になるという噂を聞いたりしたのでUSB版を使っている。&lt;/p&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=toshimaru-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B001KWJTD6&amp;amp;linkId=b7e6e472633ae6784805f395f31f6eea&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;キートップカスタマイズ&quot;&gt;キートップカスタマイズ&lt;/h2&gt;

&lt;p&gt;デザイン的に真っ黒だとつまらないので、公式のカラーキートップセットでキーボードにアクセント色を入れている。&lt;/p&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=toshimaru-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B00HC2W0FC&amp;amp;linkId=f2649f32c781880d763e29ed9dc40b61&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;usb接続&quot;&gt;USB接続&lt;/h2&gt;

&lt;p&gt;そのままのUSB接続だとHHKB本体の接続部分とMacBookの画面がぶつかってしまうため、L型のUSB変換コネクタを使っている。あと、USB-Cにそのまま繋ぎたかったので、miniB → USB-Cな短めのケーブルを購入した。&lt;/p&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=toshimaru-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B06VW4GKX9&amp;amp;linkId=dc659d537db9a8f40e58270e306bb201&quot;&gt;&lt;/iframe&gt;
&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=toshimaru-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B0197AP76U&amp;amp;linkId=1b545d1b6282899c8ec9d78f6bbca88b&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;キーボードブリッジ&quot;&gt;キーボードブリッジ&lt;/h2&gt;

&lt;p&gt;素のMacBookにHHKBを載せただけではHHKBの重みでMacBook本体のキーボードが反応してしまうという問題がある。これを解決するのがキーボードブリッジである。&lt;/p&gt;

&lt;p&gt;ただのプラスチックの板に4000円はなかなか高い買い物だが、サイズが丁度良かったり滑らないように設計されていたりとモノとしては満足している。&lt;/p&gt;

&lt;p&gt;中には&lt;a href=&quot;https://pqrs.org/osx/karabiner/&quot;&gt;Karabiner&lt;/a&gt;を使って外付けキーボードが接続された際に&lt;a href=&quot;https://qiita.com/Jung0/items/df811a68bc704117f577&quot;&gt;本体側のキーボードを無効化をするような設定&lt;/a&gt;を入れている人もいるようだが、Karabinerを常用していない僕にとっては本製品が都合が良かった。&lt;/p&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=toshimaru-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B077ZSGQDH&amp;amp;linkId=6dee09e1347120c915dddce4a42185ac&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;尊師スタイルじゃないとき&quot;&gt;尊師スタイルじゃないとき&lt;/h2&gt;

&lt;p&gt;たまに尊師スタイルせずクラムシェルモードでディスプレイと向き合うときはこんな感じでやっている。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/hhkb/hhkb.jpg&quot; alt=&quot;hhkb clamshell&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ARCHISSのリストレスト&lt;strong&gt;S&lt;/strong&gt;サイズが安価でHHKBサイズにも丁度よくて気に入っている。&lt;/p&gt;

&lt;p&gt;あとMacBookを閉じた状態でもトラックパッドのジェスチャを使いたいので外部マウスはMagic Trackpadを使っている（古いトラックパッドなのはご愛嬌）。&lt;/p&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=toshimaru-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B01LYYULYJ&amp;amp;linkId=0f940b9d95cd1dc9ce3ba6952992f506&quot;&gt;&lt;/iframe&gt;
&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=toshimaru-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B016ZE7K8O&amp;amp;linkId=0d04ab048365f77de34f243b1e96a079&quot;&gt;&lt;/iframe&gt;</content><author><name>Toshimaru</name></author><category term="tech" /><summary type="html">俺の中での MacBook+HHKB 尊師スタイルの最終形が完成したので紹介してみる。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/hhkb/og.jpg" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/hhkb/og.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">SmartHR社に体験入社してきた</title><link href="https://blog.toshimaru.net/smarthr-job-trial/" rel="alternate" type="text/html" title="SmartHR社に体験入社してきた" /><published>2019-07-22T00:00:00+09:00</published><updated>2019-07-22T00:00:00+09:00</updated><id>https://blog.toshimaru.net/smarthr-job-trial</id><content type="html" xml:base="https://blog.toshimaru.net/smarthr-job-trial/">&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;体験入社してます &lt;a href=&quot;https://t.co/f2Ga5LE5Es&quot;&gt;pic.twitter.com/f2Ga5LE5Es&lt;/a&gt;&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/1149139455657119744?ref_src=twsrc%5Etfw&quot;&gt;July 11, 2019&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;SmartHR社の体験入社に参加してきました。同社の体験入社制度に関しては下記の記事に詳しいです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://tech.smarthr.jp/entry/2018/09/20/120000&quot;&gt;エンジニア向けの体験入社制度ができました - SmartHR Tech Blog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;今回は体験入社を１スプリント分の一週間、営業日換算で４日間体験入社させてもらいました。&lt;/p&gt;

&lt;h2 id=&quot;なぜ参加したか&quot;&gt;なぜ参加したか？&lt;/h2&gt;

&lt;p&gt;SmartHR社のことは&lt;a href=&quot;https://blog.shojimiyata.com/entry/2018/06/01/112424&quot;&gt;RubyKaigi&lt;/a&gt;や&lt;a href=&quot;https://speakerdeck.com/miyasho88/we-are-hiring&quot;&gt;会社紹介資料&lt;/a&gt;などを通して知っており、傍目から良い会社そうだなぁという印象は持っていました。実際にSmartHRの中の人たちとも面談を通して直接話す中で、SmartHR社での働き方に興味が湧き、今回「体験入社をしてみたい！」という僕の申し出を受け入れてもらったかたちとなります。&lt;/p&gt;

&lt;p&gt;僕が特にSmartHR社に関して良いと思った点、興味があった点は下記です。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;オープンな社風&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;会社として＜オープンな社風＞が根付いているように見受けられ、良いと思った&lt;/li&gt;
      &lt;li&gt;このオープンな社風というトピックに関しては下記のブログに詳しいです
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;https://blog.shojimiyata.com/entry/2018/02/15/125904&quot;&gt;SmartHR が組織運営で一番大切にしていること - 宮田昇始のブログ&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;スタートアップ企業としてはありえない退職率の低さ&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;僕自身、30人くらいの規模から数百人規模になっていく組織のスケール過程を身をもって体験しましたが、こういうスタートアップ企業は端的に言って＜激動の時代＞となります。その荒波の中にあっては振り落とされる人がいたり、いわゆる音楽性の違いによって退出していく人も多くいるはずですが、SmartHR社の場合はそんなことになっておらず、単純にその雰囲気および組織運営の手法に興味がありました&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;なにをやったか&quot;&gt;なにをやったか？&lt;/h2&gt;

&lt;p&gt;体験入社としてJoinしたチームはSmartHR本体の開発をするチームでした。なので今回はSmartHR本体のいくつかの機能改修やバグ修正をやりました。&lt;/p&gt;

&lt;p&gt;初日に行われたスプリント計画に一緒に参加して、Jiraのチケットをいくつかアサインしてもらいました。アサインされたチケットは下記のようなものです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.e-gov.go.jp/shinsei/&quot;&gt;e-Gov電子申請&lt;/a&gt;まわりの改修&lt;/li&gt;
  &lt;li&gt;小さなバグ修正&lt;/li&gt;
  &lt;li&gt;APIの改修&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;また上記とは別に一通りのスクラムセレモニーや全社員を対象に行っている経営会議共有会にも参加させてもらいました。&lt;/p&gt;

&lt;h2 id=&quot;成果&quot;&gt;成果&lt;/h2&gt;

&lt;h3 id=&quot;一日目&quot;&gt;一日目&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;開発環境セットアップ&lt;/li&gt;
  &lt;li&gt;経営会議共有会参加&lt;/li&gt;
  &lt;li&gt;スプリントレビュー、スプリントレトロスペクティブ、スプリント計画に参加&lt;/li&gt;
  &lt;li&gt;開発成果: 1 PR&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;二日目&quot;&gt;二日目&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;負債返済のためのモブプロ会に参加&lt;/li&gt;
  &lt;li&gt;開発成果: 2PR&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;三日目&quot;&gt;三日目&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;バックログリファインメントに参加&lt;/li&gt;
  &lt;li&gt;開発成果: 2PR, 1Merge&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;四日目&quot;&gt;四日目&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;開発成果: 3PR 4Merge&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;総評&quot;&gt;総評&lt;/h3&gt;

&lt;p&gt;一部未マージなPRを残すことになってしまったものの、当初にアサインされたチケットはすべて着手することができた点は良かったです💪。結果としては、受け入れチームの期待値と同等かそれ以上の成果は残せたようで良かったです😄。&lt;/p&gt;

&lt;h2 id=&quot;体験入社してみての感想&quot;&gt;体験入社してみての感想&lt;/h2&gt;

&lt;h3 id=&quot;開発編&quot;&gt;開発編&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;開発環境セットアップはWikiにまとめられておりWiki通りの手順で進めていけばすんなり構築することができた
    &lt;ul&gt;
      &lt;li&gt;Rails以外のバックエンドはDocker化されておりバージョンまわりでハマることも無いようになっていて良かった&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;教科書通りのスクラムセレモニーを実施しており、きちんとスクラム回してて偉いなぁという印象でした（僕がスクラムマスターっぽい立ち回りするときはけっこうスクラムセレモニーサボっているので…）&lt;/li&gt;
  &lt;li&gt;良い意味で粛々とプロダクト開発を進めている印象だった
    &lt;ul&gt;
      &lt;li&gt;いわゆるスタートアップなキラキラ系イケイケWeb開発という感じではなかった（決して悪い意味ではないです）&lt;/li&gt;
      &lt;li&gt;一人ひとりがプロダクトに向き合い、オーナーシップをもって開発に取り組んでいる&lt;/li&gt;
      &lt;li&gt;大人な人が多くきちんと協調して開発を進めている印象&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;＜個人＞ではなく、＜チーム＞で課題を解決する姿勢が素晴らしいと思いました&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;例えばデスク（サービスデスク/ヘルプデスク）対応、コードレビューの対応、リリース作業など忙しくて手を付けられそうな人がいれば、手が空いている人が「（私が）やりますよ」と自然に手を挙げて対応をデリゲーションしていっている雰囲気は素晴らしいと感じました
        &lt;ul&gt;
          &lt;li&gt;これをチームで自然にできるようになるのはそう簡単なことではないので、チームとして成熟している証だと感じました&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;僕はもうエンジニアとしてはシニアレベルだしタスクは丸投げでも全然構わなかったけど、きちんと計画の時点で開発方針まである程度あたりをつけて落とし込んでくれたお陰で、とても開発がスムーズに進められました。受け入れメンバーの皆さまには感謝です&lt;/li&gt;
  &lt;li&gt;開発の中できちんと技術負債を減らすことにも尽力されていて良いなぁと思いました
    &lt;ul&gt;
      &lt;li&gt;技術負債担当チームがあったり技術負債返済モブプロ（with &lt;a href=&quot;https://twitter.com/netwillnet&quot;&gt;willnet&lt;/a&gt;さん）みたいな取り組みをしていたり&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;現在の規模でもCTOの芹澤さんがバリバリコード書いている雰囲気があり意外でした&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;開発以外編&quot;&gt;開発以外編&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;退職率の低さについて
    &lt;ul&gt;
      &lt;li&gt;やはり第一に採用でカルチャーマッチする人のみをきちんと選んで採っている点が大きそうです
        &lt;ul&gt;
          &lt;li&gt;参考: &lt;a href=&quot;https://smarthr.co.jp/vision&quot;&gt;Mission | 株式会社SmartHR&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;良いところも悪いところもすべてオープンにする姿勢が社員に響いているのではないでしょうか
        &lt;ul&gt;
          &lt;li&gt;経営会議共有会では出せる数値は詳らかに全部出す&lt;/li&gt;
          &lt;li&gt;経営会議共有会の最後には代表・宮田さんへのAMA（Ask Me Anything）コーナーみたいなのもあって良かった&lt;/li&gt;
          &lt;li&gt;都合の悪いことも含めて情報を隠さない → 現場の不安が変に増幅することもない&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;普段、自分が受け入れチーム側としてオンボーディングを実施することが多かったけど、今回受け入れてもらう側として参加できて新鮮だった&lt;/li&gt;
  &lt;li&gt;今回の体験入社で初めてSmartHRを実際に使わせてもらったけど、とても便利でした。一度使うとたぶん紙での提出とか面倒くさくなりますね。
    &lt;ul&gt;
      &lt;li&gt;各社、SmartHRの導入よろしく頼む🙏&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;smarthr社にマッチしそうな人について&quot;&gt;SmartHR社にマッチしそうな人について&lt;/h2&gt;

&lt;p&gt;体験入社してみてSmartHR社にマッチしそうな人、逆にマッチしなそうと感じる人を書いてみます。&lt;/p&gt;

&lt;h3 id=&quot;マッチしそうな人&quot;&gt;マッチしそうな人&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;SmartHR というサービスが好きな人&lt;/li&gt;
  &lt;li&gt;会社・チーム一丸となってプロダクト作りをしたい人&lt;/li&gt;
  &lt;li&gt;Railsでのサービス作りが好きな人&lt;/li&gt;
  &lt;li&gt;チームワークが得意、好きな人&lt;/li&gt;
  &lt;li&gt;オープンな社風に共感できる人&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;マッチしなそうな人&quot;&gt;マッチしなそうな人&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;プロダクトよりもエッジな技術をひたすら突き詰めたいという人&lt;/li&gt;
  &lt;li&gt;チームワークよりも孤独な作業が好きな人&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;smarthr社への応募はこちらから&quot;&gt;SmartHR社への応募はこちらから&lt;/h3&gt;

&lt;p&gt;上記の「マッチしそうな人」にピンときた方は応募してみると良いかと思います！&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://smarthr.co.jp/recruit&quot;&gt;Recruit | 株式会社SmartHR&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;子会社創業メンバーも募集しているようです。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;そろそろ起業しようかな？と思ってるけど「共同創業者がいない」「ネタがない」というエンジニアさん、SmartHRの子会社の創業メンバーとして一発当てませんか？&lt;br /&gt;&lt;br /&gt;いま2つの会社があなたを求めてます！お金の心配なく、事業とプロダクトに集中できます。興味ある方ぜひDMください！&lt;br /&gt;&lt;br /&gt;（続く&lt;/p&gt;&amp;mdash; 宮田 昇始 (@miyasho88) &lt;a href=&quot;https://twitter.com/miyasho88/status/1151047024613236736?ref_src=twsrc%5Etfw&quot;&gt;July 16, 2019&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3 id=&quot;smarthrについてもっと知りたい&quot;&gt;SmartHRについてもっと知りたい！&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;「SmartHRについてもっと知りたい！」&lt;/strong&gt;という方はこちらもどうぞ。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://shanaiho.smarthr.co.jp/&quot;&gt;SmartHRオープン社内報&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tech.smarthr.jp/&quot;&gt;SmartHR Tech Blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.shojimiyata.com/&quot;&gt;宮田昇始のブログ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;最後に&quot;&gt;最後に&lt;/h2&gt;

&lt;p&gt;他社のスクラム・スプリントを経験するのはなかなかない貴重な機会なので、それを一通り体験できたのはとても良かったです。受け入れていただいたSmartHRさん、ありがとうございました！&lt;/p&gt;</content><author><name>Toshimaru</name></author><category term="tech" /><category term="rails" /><summary type="html">体験入社してます pic.twitter.com/f2Ga5LE5Es&amp;mdash; toshimaru (@toshimaru_e) July 11, 2019</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/smarthr.jpeg" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/smarthr.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">技術者としてスポンジであり続けること　あるいは老害回避戦略の話</title><link href="https://blog.toshimaru.net/like-a-sponge-as-an-engineer/" rel="alternate" type="text/html" title="技術者としてスポンジであり続けること　あるいは老害回避戦略の話" /><published>2017-12-04T00:00:00+09:00</published><updated>2018-08-31T00:00:00+09:00</updated><id>https://blog.toshimaru.net/like-a-sponge-as-an-engineer</id><content type="html" xml:base="https://blog.toshimaru.net/like-a-sponge-as-an-engineer/">&lt;h2 id=&quot;エンジニアリングとは常に学習し続けることである&quot;&gt;エンジニアリングとは常に学習し続けることである&lt;/h2&gt;

&lt;p&gt;エンジニアリングとは常に学習し続けることである。僕がWeb技術者として生計を立てる上で大切にしているモットーだ。&lt;/p&gt;

&lt;p&gt;ドッグイヤーな変化の激しいIT業界、変化に取り残されないためには常に学習が必要だ。今僕たちがデファクト・スタンダートとしている技術は一年後もスタンダートであり続けるだろうか？　一年くらいなら大丈夫？　じゃあ三年後は？　五年後は？ 十年後はどうだろう？ 自信をもって技術トレンドは今と変わっていないと言えるだろうか。&lt;/p&gt;

&lt;h2 id=&quot;変化する技術トレンド&quot;&gt;変化する技術トレンド&lt;/h2&gt;

&lt;p&gt;Web業界の技術トレンド変化を見るにしてもその変化が激しいことは明らかだ。古くは掲示板を動かしていたPerl CGIの時代から、最強のPHP製CMS・Wordpress、継続的にバージョンアップを重ね進化を続けるWebアプリケーションフレームワーク・Ruby on Rails…。近年だとサーバーサイドJavaScirpt・Node.js、Erlang VM上で動くRubyライクなシンタックスを持つElixir、Twitterでも運用実績を持つScala、Googleが作った爆速言語Go、Mozillaの開発したRustなどもよく聞く。お硬い感じなところだとJavaのSpring Frameworkであったり（最近はKotlin対応もしたと聞く）オープンソース化もされているMicrosoftの.NETなど。&lt;/p&gt;

&lt;p&gt;サーバーサイド技術だけじゃなく、フロントエンド技術の変化も大きい。HTMLはHTML5になり、CSSはCSS3になってWebでリッチな表現が可能になった。貧弱な言語であったJavaScriptはES6(ES2015),ES7(ES2016)へと進化し言語として洗練されてきている（Bebelなどのトランスパイラーの進化の力も大きい）。便利な関数群を多く含みブラウザ間の挙動の差異を吸収してくれるjQueryはそこそこ長い間フロントエンドのデファクト・ライブラリだったが、フロントエンドコードの複雑化・巨大化に伴いその座をReactやAngularへと譲りつつある（React/Angularにたどり着くまでの紆余曲折はここでは省略）。&lt;/p&gt;

&lt;p&gt;開発ワークフローもずいぶん進化した。開発者にとって一番大きかったのはGitHubの台頭だ。OSSを加速度的に推し進めエンジニアリング業界にソーシャルコーディングという概念を普及させた。これによりVCSはGitを利用しRemoteにはGithub（あるいはGithubライクなプロダクト）を使うのが当たり前となった。&lt;/p&gt;

&lt;p&gt;テストももちろん書く。テストを書くと次はCIがしたくなる。Jenkins？ 今ならTravisCI、CircleCIなどのCIサービス使ったほうが良さそうだ。&lt;/p&gt;

&lt;p&gt;アプリケーションのデプロイ先となるインフラはどうだ。オンプレ？ いや、今はクラウドの時代だ。IaaS業者ならAWS（Amazon Web Service）か。いや、GCP（Google Cloud Platform）も最近頑張っているようだ。そこまでインフラ面倒見る余裕なんてない？ならばHerokuなどのPaaSを選択することもできる。&lt;/p&gt;

&lt;p&gt;モバイルアプリ開発はどうだろう？ iOS？ Objective-Cじゃなくて今はSwiftなんだっけ。Android？ 古き良きJava…ではなく最近はKotlinで書けるらしい。最近はReact Nativeという技術もあるらしい。Reactに慣れたWeb開発者にとって取っ付きやすそうだ。&lt;/p&gt;

&lt;h2 id=&quot;我々は学習し続けられるか&quot;&gt;我々は学習し続けられるか？&lt;/h2&gt;

&lt;p&gt;Web技術に限定してザッと思いつくだけ列挙してもこれだけあるのだ。これでもなお「１つの技術だけで今後も戦い続けることができる！」と自信を持って言えるだろうか。&lt;/p&gt;

&lt;p&gt;あなたは言う。いいや、俺はこの技術一筋で勝負するんだ！なるほど、けっこうけっこう。あなたが変わらなくても世界は変わる。世界はあなたを待ってはくれない&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;学習を止めた時から変化の波に取り残され、気付いた頃にはもう手遅れ…、そんな事態は避けなければならない。&lt;/p&gt;

&lt;p&gt;では問おう。&lt;strong&gt;我々は学習し続けられるのか？&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;学習の壁&quot;&gt;学習の壁&lt;/h2&gt;

&lt;p&gt;我々に立ちはだかる学習の壁。この学習の壁を乗り越える続けることは難しい。&lt;/p&gt;

&lt;p&gt;そしてこれは歳を重ねれば重ねるほどに難しくなっていく。一般的に記憶力や集中力は年齢とともに衰えていくと言われるからだ&lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;一方で学習能力は年齢とは関係ないとする説もある&lt;sup id=&quot;fnref:3&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;。記憶力そのものに年齢は関係なく、老化とともに記憶力が低下したと感じる理由は＜学習意欲の低下＞に起因しているとする説だ。&lt;/p&gt;

&lt;p&gt;僕の考えとしては前者の説も後者の説もどちらも支持したい。我々の学習能力は年齢とともに衰えていくし、学習意欲もまた年齢とともに低下する。&lt;/p&gt;

&lt;h2 id=&quot;スポンジであるということ&quot;&gt;スポンジであるということ&lt;/h2&gt;

&lt;p&gt;では我々はこれにどう抗ったらよいだろうか？　&lt;/p&gt;

&lt;p&gt;前者の年齢とともに不可避的に衰える能力は仕方がないにせよ、せめて後者の学習意欲は高く保ち続けようではないか。新しいものを進んで吸収できるスポンジであろう。弾力を失ってはいけない。柔軟にしなやかであろう。硬直化する脳に抗おう。&lt;/p&gt;

&lt;p&gt;スポンジであるということ。これによって学習という困難も楽しみとして享受できるようになるのではないだろうか。&lt;/p&gt;

&lt;h2 id=&quot;老害になってはいないか&quot;&gt;老害になってはいないか&lt;/h2&gt;

&lt;p&gt;学習し続ける姿勢、これは老害化するのを防ぐ上でも大切な心がけだと思う。&lt;/p&gt;

&lt;p&gt;そもそも老害とはどういう人なのか？ 僕が思う老害とは下記の通りだ。&lt;/p&gt;

&lt;p&gt;老害とは自分の過去の栄光や成功体験を元にして、自分の価値観ややり方を周囲（主に若者がターゲットにされやすい）に押し付けるような人のこと。その結果、チーム/個人のパフォーマンスを低下させる。&lt;/p&gt;

&lt;p&gt;こういうタイプの人は過去の成功を根拠としてロジックを展開するので、その成功が現代では通用しない時代錯誤なものであったとしても気にせず押し通そうとする。そして新しいことに関しては「よくわからない」などと言って斬り捨てる。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;「老害になる」というのは、ほんとうは「歳を取ると感覚がオッサンになる」ということではなくて、「どこかのタイミングから思考を停止し始めて、じぶんの価値観のアップデートをサボり続けたせいで、じぶんの感覚がその時代に合わなくなる」ことを言うんですよね。老害とは、変化をやめたひとを言う。&lt;/p&gt;&amp;mdash; プロ奢ラレヤー🍣 (@taichinakaj) &lt;a href=&quot;https://twitter.com/taichinakaj/status/1030945286917693442?ref_src=twsrc%5Etfw&quot;&gt;August 18, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;そんな老害にはなりたくないと思う。きっとこの文章を読んでいるあなたもそうだろう。だがあなたは &lt;strong&gt;自分が老害になっていないとハッキリ言えるだろうか？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一般的に、歳を取ると価値観は固まっていき保守的になってゆく。あなたは自分の気づかないレベルで無意識に新しいことを拒絶していないだろうか。自分の考えを無意識に他者に押し付けてはいないだろうか。職場で気づいたら老害になってはいないだろうか。&lt;/p&gt;

&lt;iframe src=&quot;//www.slideshare.net/slideshow/embed_code/key/NWNwslJEgKFtkr&quot; width=&quot;595&quot; height=&quot;485&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen=&quot;&quot;&gt; &lt;/iframe&gt;
&lt;div style=&quot;margin-bottom:5px&quot;&gt; &lt;strong&gt; &lt;a href=&quot;//www.slideshare.net/sasakipochi/ss-51445100&quot; title=&quot;老害について&quot; target=&quot;_blank&quot;&gt;老害について&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;https://www.slideshare.net/sasakipochi&quot; target=&quot;_blank&quot;&gt;Ken SASAKI&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;

&lt;p&gt;:point_up: &lt;strong&gt;老害について簡潔にまとまっている資料&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;老害回避戦略&quot;&gt;老害回避戦略&lt;/h2&gt;

&lt;p&gt;エンジニアとして老害にならないための僕なりの老害回避戦略を考えてみたのでまとめてみる。&lt;/p&gt;

&lt;h3 id=&quot;マサカリを投げるな&quot;&gt;マサカリを投げるな&lt;/h3&gt;

&lt;p&gt;技術的な厳しい指摘をよく「マサカリを投げる」と表現したりするが&lt;sup id=&quot;fnref:4&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;、マサカリを投げるのは止めよう。&lt;/p&gt;

&lt;p&gt;そのマサカリが本当に意味のあるものか今一度考えてみよう。あなたの飛ばしたマサカリは周囲を萎縮させチームの空気を悪くしパフォーマンスを下げている可能性が高い。&lt;/p&gt;

&lt;p&gt;あなたがどんなに優れたエンジニアだとしてもそれをマサカリという形で誇示する必要は無い。あなたの優秀さはマサカリではなくコードで示せるはずだ。&lt;/p&gt;

&lt;p&gt;剣ではなく弁を。攻撃ではなく教育を。&lt;/p&gt;

&lt;h3 id=&quot;技術に素直でいよう&quot;&gt;技術に素直でいよう&lt;/h3&gt;

&lt;p&gt;コンピュータの内部が0か1のバイナリで構成されているの同様に、プログラミングという行為も0か1のように正誤がハッキリするものが多いように感じる。&lt;/p&gt;

&lt;p&gt;バグがある挙動、バグが無い挙動であればバグが無い挙動が正しいし、速いコードと遅いコードであれば速いコードが良いし、DRYなコード、そうじゃないコードがあればDRYなコードを選択すべきだし、テストがないコードよりもテストがあるコードが信頼性は高い。&lt;/p&gt;

&lt;p&gt;老害であれば技術的正しさを無視して自説を展開するかもしれないが、それではダメだ。常に技術的に正しい世界を目指そう。技術にたいして素直でいよう。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;個人開発は遊びでいいけど仕事における開発は遊びじゃない。技術的/仕様的正しさは常に追求すべきだしデータ的正しさは検証すべきだしプログラムにはバグが無いように（テストコード書くなどして）努力すべきだし自分のコードにはオーナーシップを持つべきだ。&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/995968055342649344?ref_src=twsrc%5Etfw&quot;&gt;May 14, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;僕たちが持っている知識は変化する技術の流れの中で明日には変わっているかもしれない。今に凝り固まるのではなく、常に技術的正しさを求めて学習しよう。&lt;/p&gt;

&lt;h3 id=&quot;フラットでいよう&quot;&gt;フラットでいよう&lt;/h3&gt;

&lt;p&gt;GitHubのOSSコミュニティで人種・性別・年齢関係なくコラボレーションするように、我々も技術の文脈においてフラットなコミュニケーションを目指そう。&lt;/p&gt;

&lt;p&gt;この世界、どんなに自分より歳をとっていてもかなわないなというエンジニアもいるし、逆に自分よりずっと若くても優秀なエンジニアはたくさんいる。「俺の方が人生経験が長いから」「私の方が年齢が高いから」という理由では奢れない（もしそんな理由でエラそうにしているのであればそれは老害だ）。&lt;/p&gt;

&lt;p&gt;実際のところ、先輩後輩・上下関係を重んじる日本社会においてこれを実現するのは容易ではないわけだが、技術コミュニケーションにおいてできるだけフラットなコミュニケーションを心がけよう。この姿勢は前述の&lt;技術に素直でいる&gt;ことにも繋がることだと思う。&lt;/技術に素直でいる&gt;&lt;/p&gt;

&lt;h3 id=&quot;次の世代を育てる&quot;&gt;次の世代を育てる&lt;/h3&gt;

&lt;p&gt;老害でないということは同時に若手とうまく付き合うということでもある。今まで述べてきたような老害的な態度を取らなければ、若手が伸び伸びと働ける職場環境にできるのではないだろうか。&lt;/p&gt;

&lt;p&gt;次の世代を育てよう。そして彼らが伸び伸びと活躍できるような雰囲気作りを目指そう。&lt;/p&gt;

&lt;p&gt;こんなことを言うとたまに「若手に自分のポジションを脅かせれる」「自分の仕事が奪われる」と言って拒否反応を示す人をたまに見かける。その考え方も分からなくはないが、僕はそれは自己保身的で一面的な考え方だと感じる。&lt;/p&gt;

&lt;p&gt;次の世代を育てることで得られるメリットは数多くあると思う。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;次の世代を育てる過程で自分も育つ: 育てている過程の中で自分もちゃんと理解できていなかった部分が理解できるようになったり、自分の理解が深まる&lt;/li&gt;
  &lt;li&gt;次の世代が育つことでチームひいては会社の生産性が高まり自分自身の仕事が相対的に減る&lt;/li&gt;
  &lt;li&gt;次の世代が育つと自分一人ではできなかったことが出来るようになるかもしれない: 切磋琢磨出来る仲間が増えるとチームとしてもう一段上のレベルへと上がり、一人では思いつかなかったアイディアやソリューションが発案されるかもしれない&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;自分の立場ばかり考える保身的な老害にはならないようにしよう。どんどん次の世代を育てていき、次の世代とともにステップアップを目指そう。&lt;/p&gt;

&lt;h2 id=&quot;35歳定年説の嘘&quot;&gt;「35歳定年説」の嘘&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://tech-camp.in/note/engineer/30204/&quot;&gt;35歳定年説&lt;/a&gt;的な言説を技術界隈で聞くことがある。&lt;/p&gt;

&lt;p&gt;この35歳の35の数字の部分は38でも40でもなんだって良いのだが、僕は基本的にこのn歳定年説は間違っていると思う。&lt;/p&gt;

&lt;p&gt;これを反証することは簡単で、40歳でバリバリ現役でコードを書き続けている技術者を見つければ良い。僕は40歳でバリバリ前線で頑張っている技術者を知っている。なのでこの説は間違っているとハッキリ言える。&lt;/p&gt;

&lt;p&gt;思うに、&lt;strong&gt;コードを書かず学習意欲を失ってしまった35歳のおじさんたちが自分がコードが書けないこと・学ばないことの言い訳として言い出し始めたのがこの「35歳定年説」の真実じゃないだろうか。&lt;/strong&gt; 20歳の技術者は35歳定年説なんて言い出さない。それを言い出すのは35を過ぎて自身のパフォーマンスが出なくなったと感じている技術者たちだけだ。もし本当にそんな理由で言っているのであればハッキリ言ってダサすぎだと思う。&lt;/p&gt;

&lt;p&gt;年齢を言い訳にするのは止めよう。学習するのに遅すぎるなんてことはないはずだ。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You’re never too old to learn&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;最後に&quot;&gt;最後に&lt;/h2&gt;

&lt;p&gt;この文章は僕自身が若手とは言えない年齢となり今後シニアな立場へとなっていく中で「自分は老害化していくのではないか」という危機感から自戒も込めて書いたものである。願わくば五年後十年後自分がここに書いたような老害になっていないことを祈る。&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;もちろん１つのことに特化して高度な専門性を武器に戦っている技術者もいる。しかしトレンドは常に追っているべきだ。なぜならブレークスルーが起こってその技術が死んだときに自分の食い扶持がなくなるからだ（それでもすぐにその技術がなくなるわけではないのでその技術を使う古い現場で細々と食い扶持を得るのも戦略としてありえるが）。 &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.businessinsider.jp/post-100550&quot;&gt;集中力は43歳！ 人間の脳のピーク年齢は、能力ごとに違っていた | BUSINESS INSIDER JAPAN&lt;/a&gt; &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://www.fukuishimbun.co.jp/articles/-/62618&quot;&gt;「加齢で記憶力が低下」は誤解 知能も低下せず、問題は前頭葉老化 | 東洋経済ONLINE | 福井新聞ONLINE&lt;/a&gt; &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://qiita.com/kaityo256/items/d7d8f7a0e522895c8f5d&quot;&gt;マサカリの起源について - Qiita&lt;/a&gt; &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Toshimaru</name></author><category term="poem" /><category term="tech" /><summary type="html">エンジニアリングとは常に学習し続けることである</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/book/books.jpeg" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/book/books.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">boot.fm Podcast に出演しました</title><link href="https://blog.toshimaru.net/bootfm-podcast/" rel="alternate" type="text/html" title="boot.fm Podcast に出演しました" /><published>2016-12-29T00:00:00+09:00</published><updated>2016-12-29T00:00:00+09:00</updated><id>https://blog.toshimaru.net/bootfm-podcast</id><content type="html" xml:base="https://blog.toshimaru.net/bootfm-podcast/">&lt;p&gt;ちょっと前だが今月&lt;a href=&quot;https://bootfm.github.io/&quot;&gt;boot.fm&lt;/a&gt;というTech系Podcastに出演した。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;最近流行りのTechポッドキャストに出演しました。分報、フロントエンド技術とどう付き合うか、コードレビュー、mrubyあたりを話してます | Vol.4: Code review as a prior investment &lt;a href=&quot;https://t.co/FjRE8HQa4E&quot;&gt;https://t.co/FjRE8HQa4E&lt;/a&gt;&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/809544891696939009&quot;&gt;December 15, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;そのフォローアップや話しきれなかったことなど書いてみます。&lt;/p&gt;

&lt;h2 id=&quot;slack分報タスク管理について&quot;&gt;Slack分報・タスク管理について&lt;/h2&gt;

&lt;p&gt;分報の元ネタ: &lt;a href=&quot;http://c16e.com/1511101558/&quot;&gt;Slackで簡単に「日報」ならぬ「分報」をチームで実現する3ステップ〜Problemが10分で解決するチャットを作ろう | Craftsman Software Inc.&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;僕が思う分報の良い点&quot;&gt;僕が思う分報の良い点&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;日報より情報発信の敷居がずっと低い
    &lt;ul&gt;
      &lt;li&gt;多分一番分かりやすい喩えは &lt;strong&gt;社内Twitter&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;カジュアルなコミュニケーションができる
    &lt;ul&gt;
      &lt;li&gt;ハマっていることとかさらっと書いたら誰かが助け舟を出してくれたり&lt;/li&gt;
      &lt;li&gt;ゆるーい雑談とかも&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;リアルタイムなコミュニケーションができる
    &lt;ul&gt;
      &lt;li&gt;Podcast内で紹介した&lt;a href=&quot;https://toshi.slack.com/apps/A0HBTUUPK--todo&quot;&gt;/todo&lt;/a&gt;みたいなSlackインテグレーションアプリと組み合わせることによって、リアルタイムにタスクのWIP/DONEを関係者に共有できる&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;基本的に僕は日報を書いていきたいと思っているのだけど、日報真面目に書いているとけっこう時間がかかってしまう。最初は乗り気しなかったけどとりあえずやってみるかと始めた分報だが、日報ハードル高すぎ問題を感じていた僕には丁度良くハマった。&lt;/p&gt;

&lt;p&gt;情報発信の対象となる受け手も限られていて、些細なこともカジュアルに書きやすいし読み手を過剰に意識することも少ない。&lt;/p&gt;

&lt;h3 id=&quot;僕が思う分報の悪い点&quot;&gt;僕が思う分報の悪い点&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Slackチャンネル多くなる
    &lt;ul&gt;
      &lt;li&gt;1チャンネル/user なので人数分チャンネルできる&lt;/li&gt;
      &lt;li&gt;JOINしすぎると間違いなくノイズになるのでMuteなり加入チャンネル選ぶなりで凌ぐ&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;知性のない発言が多くなる（かもしれない）
    &lt;ul&gt;
      &lt;li&gt;そういうのも含めて社内Twitterでありカジュアルなコミュニケーションなんだからまぁ良い点ともいえる&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;その他slackで便利そうなやつ&quot;&gt;その他Slackで便利そうなやつ&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://toshi.slack.com/apps/category/At0G5YTKU2-analytics&quot;&gt;便利な Slack Integration App&lt;/a&gt; 使ってKPIとか流してみる&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/masuidrive/miyamoto&quot;&gt;masuidrive/miyamoto&lt;/a&gt; でSlack勤怠管理してみるとか&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hubot.github.com/&quot;&gt;HUBOT&lt;/a&gt;みたいなChatbotを棲ませて自動化実現したり便利機能を提供したりとか&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;便利な Slack Integration App もどんどん増えているのでそういうのはどんどん導入していくと良いと思う。&lt;/p&gt;

&lt;p&gt;Chatbot系はアイディア勝負。便利な使い方あればどんどん紹介してほしいと思う。&lt;/p&gt;

&lt;h2 id=&quot;フロントエンド-vs-バックエンド&quot;&gt;フロントエンド vs バックエンド&lt;/h2&gt;

&lt;p&gt;僕が最近React書いてて感じている「Railsやりつつフロントエンドのキャッチアップはしきれないし〜自分の書いているコードに自信を持ていないし〜けっこう妥協しちゃってるんですよ〜」という悩み相談みたいな感じになってしまったかもしれない。&lt;/p&gt;

&lt;p&gt;お二人ともPodcast内で話したが、結論としては至極まっとうで、プロトタイピングやそもそもJavaScriptヘビーにSPAを作る必要がないのであれば無理してJS書くことないし、Railsのレールに乗っかってけばいいじゃんという感じ。&lt;/p&gt;

&lt;p&gt;SPAにすることがプロダクトの価値として高くなるのであればReactなりAngularなり導入に踏み切ればいいじゃん、という感じ。ただそうなってくるとどうしてもRailsのレールから外れて開発を進めていく必要があり、レールを外れる勇気と覚悟が必要でウッ…となる。&lt;/p&gt;

&lt;p&gt;とここまで書いてアレですが、Podcast収録した時点ではリリースされていなかった&lt;a href=&quot;https://github.com/rails/webpacker&quot;&gt;rails/webpacker&lt;/a&gt;が現在出てきており、とうとうRailsにもyarn、webpackへの世界へのレールが開かれようとしております。そしてwebpackerの仕組みに乗っかってReactがinstallできるような仕組みも用意されつつある。&lt;/p&gt;

&lt;p&gt;そういう流れが整備されていけば多少僕が今抱えている不安感も和らぐだろうと思いました。&lt;/p&gt;

&lt;h2 id=&quot;コードレビューについて&quot;&gt;コードレビューについて&lt;/h2&gt;

&lt;p&gt;けっこう自分が今コードレビューに時間をかけているので、コードレビュー質的・時間的にどれくらいやるもんなんって話。&lt;/p&gt;

&lt;p&gt;コスト、というとコストかけたくないでござる！みたいなことを暗に思っているのではと思われてしまうかもしれないが、そうではない。基本的にレビューにはコストをかけるべきだし、短期的には時間がかかろうともそれは中長期的にチームの生産性向上につながると思ってる。つまりコードレビューに時間をかけるということはチームへの投資であるということ。&lt;/p&gt;

&lt;p&gt;そのコードレビューをどう効率的に回していくかという話もできればよかったけどそれはまた別の機会に。まぁ基本的に丁寧なコードレビューをしようと思うとやっぱり時間はかかる。&lt;/p&gt;

&lt;h2 id=&quot;mruby&quot;&gt;mruby&lt;/h2&gt;

&lt;p&gt;mrubyワンチャンある？って話。得られた知見はこうだ。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Rubyのシンタックスはmrubyでもだいぶ動く&lt;/li&gt;
  &lt;li&gt;mrubygem エコシステムはまだまだ未成熟&lt;/li&gt;
  &lt;li&gt;Cを書く覚悟が必要（mrubygemないときにCを書く場面がある）&lt;/li&gt;
  &lt;li&gt;信頼できない mrubygem だとたまに環境がぶっ壊れることある&lt;/li&gt;
  &lt;li&gt;デバッグは(現在のところ)printデバッグ&lt;/li&gt;
  &lt;li&gt;パフォーマンスが求められる場面だとmrubyよりはgolangが良い&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;参考リンク&quot;&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://bootfm.github.io/&quot;&gt;boot.fm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://roppongirb.connpass.com/event/42633/&quot;&gt;Roppongi.rb #2 “Infrastructure x Ruby” - connpass&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://seleck.cc/822&quot;&gt;リモートワークは敢えて取り入れない。Gunosyデータ分析部「情報共有」の仕組みとは | SELECK&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/k0kubun/mitamae&quot;&gt;k0kubun/mitamae: Configuration management tool embedding mruby, which is alternative implementation of Itamae&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://qiita.com/k0kubun/items/3995d3b730b63ef67c56&quot;&gt;Rubyを評価するCLIツールはCRubyとmrubyのどちらで実装するべきか - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Toshimaru</name></author><category term="podcast" /><category term="tech" /><summary type="html">ちょっと前だが今月boot.fmというTech系Podcastに出演した。</summary></entry><entry><title type="html">ひどいコードを書いてもよいとき</title><link href="https://blog.toshimaru.net/why-you-should-write-shitty-code/" rel="alternate" type="text/html" title="ひどいコードを書いてもよいとき" /><published>2016-02-08T00:00:00+09:00</published><updated>2016-02-08T00:00:00+09:00</updated><id>https://blog.toshimaru.net/why-you-should-write-shitty-code</id><content type="html" xml:base="https://blog.toshimaru.net/why-you-should-write-shitty-code/">&lt;p&gt;&lt;a href=&quot;http://hitode909.hatenablog.com/entry/2016/02/08/140232&quot;&gt;なぜひどいコードを書いてはいけないか - hitode909の日記&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ひどいコードを書いてもよいときとは:question:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ひどくないコードを書けるだけの技術力がない&lt;/li&gt;
  &lt;li&gt;プロジェクトの生産期間が短い&lt;/li&gt;
  &lt;li&gt;プロダクトの寿命が短い&lt;/li&gt;
  &lt;li&gt;将来アーキテクチャを作り直すことが決まっている&lt;/li&gt;
  &lt;li&gt;自分が近い将来退職する&lt;/li&gt;
  &lt;li&gt;技術的負債を残したい&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;良いコード:innocent:と悪いコード:imp:の分別がつかないような&lt;strong&gt;技術力の低い&lt;/strong&gt;新卒くんとかは好むと好まざるとにかかわらずひどいコードを書いてしまうときもある。担当メンターはきちんと彼らが良いコードを書けるように導いていかなければならない。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;プロジェクトの生産期間が短かったり、プロダクトの寿命が極端に短い&lt;/strong&gt; とわかっているものであればひどいコードを書いてもよい。:imp: ひどいコードとわかっていても時間が足りなければ直せないし、たとえ直したとしてもその成果はプロダクトの寿命と共に終わる。ただし長期的にメンテンナンスをしていくのであればこの限りではない。&lt;/p&gt;

&lt;p&gt;言語選択とかフレームワーク選定とかデータベース設計とかアーキテクチャレベルで&lt;strong&gt;作り直すことを将来想定しているのであれば&lt;/strong&gt;、ひどいコードを書いてもよい。:imp: かの有名なFacebookだって最初はひどいコードから始まってるんだ&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;。そのコードを未来の優秀なエンジニアたちが塗り替えていって綺麗にしていったんだ。そうしてFacebookは大きくなり大成功を収めた。ビジネス :moneybag: を作るのに綺麗なコードは要らない。&lt;/p&gt;

&lt;p&gt;あなたは近い将来&lt;strong&gt;退職&lt;/strong&gt;することを目論んでいて現在の職場に少ならからずのヘイトを溜めている。さぁ復讐のときだ。技術的負債を目いっぱい残してやろう。:imp:&lt;/p&gt;

&lt;h3 id=&quot;過去に書いた関連エントリ&quot;&gt;過去に書いた関連エントリ&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/mentenability/&quot;&gt;メンテナンス性の高いコードを書く意義とは&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://gist.github.com/nikcub/3833406&quot;&gt;Facebook PHP Source Code from August 2007&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Toshimaru</name></author><category term="tech" /><summary type="html">なぜひどいコードを書いてはいけないか - hitode909の日記</summary></entry><entry><title type="html">認定スクラムマスター研修に行ってきました</title><link href="https://blog.toshimaru.net/scrum-training/" rel="alternate" type="text/html" title="認定スクラムマスター研修に行ってきました" /><published>2016-01-20T00:00:00+09:00</published><updated>2018-02-08T00:00:00+09:00</updated><id>https://blog.toshimaru.net/scrum-training</id><content type="html" xml:base="https://blog.toshimaru.net/scrum-training/">&lt;p&gt;昨年末にスクラムマスター研修を受けてきて、認定スクラムマスター (CSM)となりました。スクラムマスター研修で学んだこととして社内で共有した内容を本ブログでも共有してみようと思います。&lt;/p&gt;

&lt;h2 id=&quot;scrum-vs-agile-歴史から学ぶ&quot;&gt;Scrum vs Agile 〜歴史から学ぶ〜&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;1993年: スクラム誕生&lt;/li&gt;
  &lt;li&gt;2001年: アジャイルソフトウェア開発宣言
    &lt;ul&gt;
      &lt;li&gt;アジャイルマニフェスト: &lt;a href=&quot;http://agilemanifesto.org/iso/ja/manifesto.html&quot;&gt;アジャイルソフトウェア開発宣言&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;アジャイル原則:  &lt;a href=&quot;http://agilemanifesto.org/iso/ja/principles.html&quot;&gt;アジャイル宣言の背後にある原則&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;アジャイルは「より良い開発/方法を探している」という状態のことです。状態なので原理的には「アジャイル開発をしている」という表現は正しくありません。振り返ってみて「あのプロジェクトはアジャイルだった」と評価できるもの。極端に言うといわゆるウォーターフォール型の開発も１つのアジャイルと定義することもできます。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Don’t do agile, be agile&lt;/em&gt; （訳: アジャイル開発をするな、アジャイルであれ）&lt;/p&gt;

&lt;p&gt;スクラムのほうがアジャイルより歴史的には古く、アジャイルの定義が曖昧な一方、スクラムはきちんと確立された方法論で現在もアップデートされ続けているフレームワークです(年２回)。ただ出版社のマーケティング戦略的に「アジャイル」というバズワードを使わなきゃ本が売れないという理由もあってか、世の中には＜アジャイルという皮を被った何か＞が氾濫しています。「アジャイル」という魔法のコトバに惑わされてはいけないのです。&lt;/p&gt;

&lt;h2 id=&quot;スクラムとは何か&quot;&gt;スクラムとは何か？&lt;/h2&gt;

&lt;p&gt;スクラムとは &lt;strong&gt;＜現状を把握するためのフレームワーク＞&lt;/strong&gt;。どのプロジェクトにおいても現状を把握した結果、大体において問題はあることから &lt;strong&gt;＜問題を発見するフレームワーク＞&lt;/strong&gt; と言われることもあります。&lt;/p&gt;

&lt;p&gt;なのでポイント（超重要！）は、スクラムをやったからといって、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;生産性は向上しません&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;人が成長することはありません&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;プロダクトが改善することはありません&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あくまでもこれらは、現状を把握した結果として期待できるものであって、スクラムをやれば必ず得られる結果というわけではありません。スクラムもまた、銀の弾丸ではないのです。&lt;/p&gt;

&lt;p&gt;逆にチームの現状を把握できていないのであれば、それはスクラムとは呼べません。そして「スクラムは優秀な人じゃなければできない」というのも間違いです。優秀じゃない人でも現状を把握してそこそこの成果を出せるようにするのがスクラムというフレームワークです。&lt;/p&gt;

&lt;h2 id=&quot;スクラムのルール&quot;&gt;スクラムのルール&lt;/h2&gt;

&lt;p&gt;全部で19個あります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/scrum/scrum1.png&quot; alt=&quot;scrum&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;スクラムの三本柱&quot;&gt;スクラムの三本柱&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;透明性&lt;/strong&gt; – Transparency&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;検証&lt;/strong&gt; – Inspect&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;適合&lt;/strong&gt; (検証に基づいた適合) – Adapt&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;スクラムの３つの役割&quot;&gt;スクラムの３つの役割&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;プロダクトオーナー&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;チームのROIを最大化させる（ビジネスのROIではないということに注意）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;スクラムマスター&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;開発が Scrum と呼べる状態にする&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;スクラムじゃない方法を提案するのもまた、スクラムマスターの役割&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;チーム&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;7人±2人&lt;/strong&gt; が１つのスクラムチームを構成するのがのぞましいとされています。&lt;/p&gt;

&lt;h3 id=&quot;スクラムの5つのセレモニー&quot;&gt;スクラムの5つのセレモニー&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Sprint Planning – スプリント計画&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;短期計画&lt;/li&gt;
      &lt;li&gt;何を実現しようとしているのかを明確に&lt;/li&gt;
      &lt;li&gt;どの順番（優先順位）で開発を進めるのか&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Daily Scrum – デイリースクラム/朝会（朝じゃなくてもよい）&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;15分間&lt;/li&gt;
      &lt;li&gt;毎日の学習を共有&lt;/li&gt;
      &lt;li&gt;議論は行わない&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Product Backlog Refinement – プロダクトバックログ見直し&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;中長期計画（現在のスプリントは含まれないことに注意）&lt;/li&gt;
      &lt;li&gt;スプリントの5-10%使って見直しを行う&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sprint Review – スプリントレビュー&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;動くプロダクト・ドキュメントで成果を確認する&lt;/li&gt;
      &lt;li&gt;プロダクト触ってもっとプロダクトを良くする&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sprint Retrospective – スプリントレトロスペクティブ/振り返り&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;チームが生産性を高めるために取らなきゃいけないアクションを1つ以上決める&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/scrum/scrum2.jpeg&quot; alt=&quot;scrum sprint&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;アーチファクト&quot;&gt;アーチファクト&lt;/h3&gt;

&lt;p&gt;アーティファクト、成果物とでも訳しましょうか。下記４つがそれにあたります。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;スプリントバックログ&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;プロダクトバックログ&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Impediment List&lt;/strong&gt; - 障害リスト&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Acceptance Criteria&lt;/strong&gt; - 受け入れ条件&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;その他&quot;&gt;その他&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Sprint&lt;/strong&gt; - スプリント&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sprint Stop&lt;/strong&gt; - スプリント停止&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;DONE&lt;/strong&gt; - 製品が完了する&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Potentially shippable product increment&lt;/strong&gt; – 出荷可能な製品をリリースする&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;スクラムが適さないシーン&quot;&gt;スクラムが適さないシーン&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;プロダクトの生産期間が短い
    &lt;ul&gt;
      &lt;li&gt;例) 2ヶ月で終わってしまうプロジェクト&lt;/li&gt;
      &lt;li&gt;スクラムはチームビルディングで最低３ヶ月かかる。そしてその３ヶ月を反復してチームを改善させていく。つまり３ヶ月以内のプロジェクトでスクラムを行うのは難しい（やれなくもないが）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;要件・技術が単純なプロダクト
    &lt;ul&gt;
      &lt;li&gt;スクラムは要件・技術的要素が複雑な場合に適したアプローチ&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;自律的なチームとは&quot;&gt;自律的なチームとは&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;チームの明確なゴールがある&lt;/li&gt;
  &lt;li&gt;チームの明確なバウンダリー（境界線）がある&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;「自律的なチームかどうかの判断基準は何？」への回答は「&lt;strong&gt;個人がチームのゴールを達成するために何をすべきか0.1秒以内に判別し行動できる&lt;/strong&gt;」といえます。&lt;/p&gt;

&lt;h2 id=&quot;見積もり方法&quot;&gt;見積もり方法&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;相対見積もり&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;一番簡単なタスクのポイントが1だとしてそれに対する相対的な見積もり&lt;/li&gt;
      &lt;li&gt;プロダクトバックログアイテムはこちらの見積もり方法が適している&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;絶対見積もり&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;xx時間とかの見積もり&lt;/li&gt;
      &lt;li&gt;スプリントバックログアイテムにはこちらの方法が適している&lt;/li&gt;
      &lt;li&gt;1スプリントバックログアイテムが0.5時間〜1時間になるのが理想的な状態&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ここで重要なポイントとしては &lt;strong&gt;スクラムマスターは絶対に計画せずにチームが進むことを許容してはいけません&lt;/strong&gt; 。スクラムをやるなら &lt;strong&gt;徹底的に計画してください。妥協は許されません&lt;/strong&gt; ここがスクラムをやる上でのチームが持たなければならない＜覚悟＞となります。逆に言うとこの覚悟が持てないならスクラムをやるべきではありません。&lt;/p&gt;

&lt;h2 id=&quot;done&quot;&gt;DONE&lt;/h2&gt;

&lt;p&gt;DONEはDefinition of doneのことです。そしてDefinition of doneには doneとundoneの２つが含まれます。&lt;/p&gt;

&lt;p&gt;どういうことでしょうか。例えば「ログイン機能を作る」というタスクを考えてみましょう。ログイン機能のDONEとして何をイメージするでしょうか？「フォームに正しい値を入力して正しくログインできること」「間違った値を入力してログインできないこと」「変な値でバリデーションエラーメッセージがでること」などが簡単に思い浮かぶと思います。&lt;/p&gt;

&lt;p&gt;ではそれで本当にログイン機能はDONEと言えるのでしょうか。違います、DONEにはログイン機能の単体テストやその結合テスト、さらにはセキュリティテスト、負荷テスト、またはその機能のドキュメンテーションも全て含まれてのDONEです。そしてDONEにはそれで完了しているdoneとそれで完了しなかった、例えばこのケースで言うと「テストは後でかこう」「セキュリティ試験は全ての機能が完成してから実施」などのundoneも含まれています。&lt;/p&gt;

&lt;p&gt;このundoneが後回しになって積み上がった状態がプロジェクトの炎上状態であり、スクラムとして不健全な状態といえます。健全なスクラムは１スプリント毎にこのundoneを着実に消化していきます。&lt;/p&gt;

&lt;h2 id=&quot;プロダクトバックログの書き方&quot;&gt;プロダクトバックログの書き方&lt;/h2&gt;

&lt;p&gt;研修ではユーザーストーリーとAcceptance Criteriaの２つを書いて１つのプロダクトバックログアイテムとしました。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;ユーザーストーリー&lt;/strong&gt;: {who}として {what}がほしい なぜなら{why}だから&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Acceptance Criteria&lt;/strong&gt;: 受け入れ条件 ユーザーストーリーが達成できたといえる &lt;strong&gt;誰が見てもわかる明確な条件&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ベロシティ&quot;&gt;ベロシティ&lt;/h2&gt;

&lt;p&gt;これらのプロダクトバックログアイテムに対して先ほどの見積もりのポイントを付けていきます。そして &lt;strong&gt;1スプリント中にチームが消化できるポイント数のことをベロシティ&lt;/strong&gt; といいます。&lt;/p&gt;

&lt;p&gt;このベロシティは安定させるべきです。もしベロシティが安定していないのならばそれはポイントの付け方が間違っているか、チームに何かしら問題がある可能性が高いです。&lt;/p&gt;

&lt;h2 id=&quot;スクラムが成功している状態とは&quot;&gt;スクラムが成功している状態とは？&lt;/h2&gt;

&lt;p&gt;スクラムチームとして &lt;strong&gt;3ヶ月で46%生産性が向上している状態&lt;/strong&gt; がスクラムが成功している状態です。じゃあ46%向上している状態とはどう測ったらよいかというと、スクラム講師曰く、先ほど言及したundoneが3ヶ月というスパンで1つでも消化できていれば46%生産性が上がったと言っていいとのことでした。&lt;/p&gt;

&lt;p&gt;しかしこれは非常に難しいことで、どんなに成功しているスクラムチームでも1年に1回でもそれが達成できていればうまくできているほうだとのことでした。&lt;/p&gt;

&lt;h2 id=&quot;スクラムマスター役割スキル&quot;&gt;スクラムマスター役割・スキル&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;状況分析&lt;/strong&gt;: シチュエーショニング&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ティーチング&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ファシリテーティング&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;メンタリング&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;コーチング&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;そしてスクラムマスターはこれらの行為をやるだけで満足してはいけません。やった上で &lt;strong&gt;結果が出ないと意味がありません。&lt;/strong&gt; つまりティーチングをやったからスクラムマスターの役割を果たしたとはいえず、ティーチングをやった結果、それを受けた者の行動が変わることも含めてスクラムマスターの役割ということです。&lt;/p&gt;

&lt;p&gt;「謙虚さ」と同時に「屈強さ」がスクラムマスターには必要です。&lt;/p&gt;

&lt;h2 id=&quot;受講してみての感想&quot;&gt;受講してみての感想&lt;/h2&gt;

&lt;p&gt;今回のスクラムマスター研修では「スクラムとは何か」を原理的な立場から学びました。&lt;/p&gt;

&lt;p&gt;受講してわかったことは世の開発現場には似非スクラムが溢れているなーってことでした。スプリント回しているからスクラムですとか、カンバンでタスク管理して朝会やってスクラムですとか、リソース足りないのでうちは開発チームメンバーとスクラムマスターをの２つのロールを兼任してますとか…。&lt;/p&gt;

&lt;p&gt;スクラムの基本原則から言うと役割の兼任はNGですし、スクラムは具体的なタスク管理手法は規定していないのでカンバンでやろうとJIRAでやろうとGithub Issueでやろうとそれはスクラムの原理原則とは関係ありません。&lt;/p&gt;

&lt;p&gt;朝会以外にもスクラムの大事なセレモニーはあって必ずそれらはスキップしてはいけないものとなってます。スプリントを回すにしても、ちゃんとそのスプリントは計画とあっていたのかとか、ちゃんと受け入れ条件をクリアする品質でスプリントの成果物が上がってるかとか、スプリント間に差し込みタスクがなかったかとかいろいろやらなきゃいけないことや考えることはあります。&lt;/p&gt;

&lt;p&gt;そして感じたこととしては、スタートアップのアーリーフェーズだとなかなか原理的な意味でのスクラムは難しいのではということでした。スクラムやりたくともリソースが全然足りないのでスクラムマスター、プロダクトオーナーはそもそも置けないとか、スクラムのロールを兼任せざるを得ないとか。&lt;/p&gt;

&lt;p&gt;またアーリーフェーズだと人の出入り（特に新しいメンバーを迎えるケース）も激しいと思うのでそうなるとスクラムチームは再度チームビルディングからやり直さなければなりません（このチームビルディングで1 Sprintは消費すると言われています）。&lt;/p&gt;

&lt;p&gt;なのでこういった開発現場で出来ることとしてはスクラムのフレームワークの中で良いと思うもの、有効だと思うものを選択して組織に有効な＜スクラムエッセンスを取り入れた開発＞を実践することではないでしょうか。&lt;/p&gt;

&lt;p&gt;一方で上記に書いたように「スクラムじゃない別の方法を提案するのもスクラムマスターの役割」と書きました。なのでスクラムにこだわる必要は全然なくて、スクラムがチームにマッチしないと思うならスクラムマスターは別の手法を提案できなきゃダメです。例えばそれがウォーターフォールでもいいしDDDでもいいしリーンスタートアップだっていいのです。&lt;/p&gt;

&lt;p&gt;そういう意味でスクラムマスターは(おそらく皆が)思っている以上にその役割を全うすることが難しいものだと感じました。&lt;/p&gt;

&lt;h2 id=&quot;参考になりそうな他の人の体験記&quot;&gt;参考になりそうな他の人の体験記&lt;/h2&gt;

&lt;p&gt;スクラムマスター研修に行かれた他の方の体験記を紹介します。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://makopi23.blog.fc2.com/blog-entry-155.html&quot;&gt;makopi23のブログ 認定スクラムマスター研修（CSM）を振り返る&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://qiita.com/kara_i/items/fab490c08bb467d2c842&quot;&gt;認定スクラムマスター研修のメモ書き - Qiita&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.slideshare.net/yangiYa/csm2014-1114&quot;&gt;認定スクラムマスター研修に行ってきました&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;こちらも参考にどうぞ&quot;&gt;こちらも参考にどうぞ&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.scrumguides.org/download.html&quot;&gt;公式スクラムガイド&lt;/a&gt; Japanese を選択してもらえれば日本語バージョンが閲覧できます&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.slideshare.net/zaruhiroyukisakuraba/ss-77861697&quot;&gt;スクラム導入に向けて：スクラムは救世主となるのか？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ryuzee.com/contents/blog/7120&quot;&gt;スクラムプロジェクト開始のベストプラクティス | Ryuzee.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Toshimaru</name></author><category term="scrum" /><category term="management" /><category term="tech" /><summary type="html">昨年末にスクラムマスター研修を受けてきて、認定スクラムマスター (CSM)となりました。スクラムマスター研修で学んだこととして社内で共有した内容を本ブログでも共有してみようと思います。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/scrum/scrum.jpg" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/scrum/scrum.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">YAPC::Asia 2015で心に残ったトーク&amp;amp;スライド #yapcasia</title><link href="https://blog.toshimaru.net/yapc-2015/" rel="alternate" type="text/html" title="YAPC::Asia 2015で心に残ったトーク&amp;amp;スライド #yapcasia" /><published>2015-08-23T00:00:00+09:00</published><updated>2015-08-23T00:00:00+09:00</updated><id>https://blog.toshimaru.net/yapc-2015</id><content type="html" xml:base="https://blog.toshimaru.net/yapc-2015/">&lt;p&gt;YAPC2015に行ってきました。その中で心に残ったトーク＆スライドのみを抜粋（直接トークを聴いたものもあるしそうでないものもある）。Perlは書けないのでPerl成分は少なめです。&lt;/p&gt;

&lt;p&gt;まだ公開していないスライドもあるので後からさらに追加するかも。あと&lt;strong&gt;スライドの読み込みでページロードが遅くなっているのであしからず。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;es6&quot;&gt;ES6&lt;/h2&gt;

&lt;iframe src=&quot;//www.slideshare.net/slideshow/embed_code/key/3aH36zv6gKAOcy&quot; width=&quot;425&quot; height=&quot;355&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen=&quot;&quot;&gt; &lt;/iframe&gt;
&lt;div style=&quot;margin-bottom:5px&quot;&gt; &lt;strong&gt; &lt;a href=&quot;//www.slideshare.net/teppeis/effective-es6&quot; title=&quot;Effective ES6&quot; target=&quot;_blank&quot;&gt;Effective ES6&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;//www.slideshare.net/teppeis&quot; target=&quot;_blank&quot;&gt;teppeis &lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;ES6には未来があると思った&lt;/li&gt;
  &lt;li&gt;PCでメモを取るには立ち見はツラい。せめて床座りだ&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;frontend-technology&quot;&gt;Frontend Technology&lt;/h2&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;4d78b0afe4fa4e078544e80db2eb8bd1&quot; data-ratio=&quot;1.33333333333333&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;時系列にフロントエンドのテクノロジーがまとめられていてわかりやすい :angel:&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;http2&quot;&gt;HTTP2&lt;/h2&gt;

&lt;iframe src=&quot;//www.slideshare.net/slideshow/embed_code/key/xPIDup4I1Z0fS6&quot; width=&quot;425&quot; height=&quot;355&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen=&quot;&quot;&gt; &lt;/iframe&gt;
&lt;div style=&quot;margin-bottom:5px&quot;&gt; &lt;strong&gt; &lt;a href=&quot;//www.slideshare.net/kazuho/http2-51888328&quot; title=&quot;HTTP/2時代のウェブサイト設計&quot; target=&quot;_blank&quot;&gt;HTTP/2時代のウェブサイト設計&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;//www.slideshare.net/kazuho&quot; target=&quot;_blank&quot;&gt;Kazuho Oku&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;

&lt;iframe src=&quot;//www.slideshare.net/slideshow/embed_code/key/GiEBiNl1oDDHKz&quot; width=&quot;425&quot; height=&quot;355&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen=&quot;&quot;&gt; &lt;/iframe&gt;
&lt;div style=&quot;margin-bottom:5px&quot;&gt; &lt;strong&gt; &lt;a href=&quot;//www.slideshare.net/Jxck/http2-web-web-over-http2-51943080&quot; title=&quot;HTTP2 時代の Web - web over http2&quot; target=&quot;_blank&quot;&gt;HTTP2 時代の Web - web over http2&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;//www.slideshare.net/Jxck&quot; target=&quot;_blank&quot;&gt;Jxck :)&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;

&lt;h2 id=&quot;リモートワーク&quot;&gt;リモートワーク&lt;/h2&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;5313f1eadabd46a4a4596b6cbe8fb0de&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;この言葉が非常に印象的だった: &lt;em&gt;The health and the qualilty of your product will be a direct reflection of the health and qualilty of your organization&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Conway’s law: &lt;em&gt;Organizations produce designs which are copies of the communication structures of these organizations&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;aws&quot;&gt;AWS&lt;/h2&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;d890ef1876c54ee1b0470c1293db1cd7&quot; data-ratio=&quot;1.33333333333333&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;良い知見がまとまっている&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;consul&quot;&gt;Consul&lt;/h2&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;26bad8a4879b4be6a6b166d05a1f1c91&quot; data-ratio=&quot;1.33333333333333&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;cde37ad797ab49dd92584770e9798d9a&quot; data-ratio=&quot;1.33333333333333&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;サービス運用&quot;&gt;サービス運用&lt;/h2&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;4e5572293cef4fa8beabfaa16d70344b&quot; data-ratio=&quot;1.33333333333333&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;b07a8c18db9444db891ff477fa860274&quot; data-ratio=&quot;1.33333333333333&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;iframe src=&quot;//www.slideshare.net/slideshow/embed_code/key/bVx5ctVFAPXH6h&quot; width=&quot;425&quot; height=&quot;355&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen=&quot;&quot;&gt; &lt;/iframe&gt;
&lt;div style=&quot;margin-bottom:5px&quot;&gt; &lt;strong&gt; &lt;a href=&quot;//www.slideshare.net/shunsukekozawa5/ss-51890590&quot; title=&quot;はてなブックマークのトピックページの裏側 in YAPC::Asia Tokyo 2015&quot; target=&quot;_blank&quot;&gt;はてなブックマークのトピックページの裏側 in YAPC::Asia Tokyo 2015&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;//www.slideshare.net/shunsukekozawa5&quot; target=&quot;_blank&quot;&gt;Shunsuke Kozawa&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://songmu.github.io/slides/yapc-asia2015/#0&quot;&gt;Mackerel開発におけるScalaとGo、そしてPerl&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;はてな勢つよし…&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;oss&quot;&gt;OSS&lt;/h2&gt;

&lt;iframe src=&quot;//www.slideshare.net/slideshow/embed_code/key/3Q3IdJJc6HDWfW&quot; width=&quot;425&quot; height=&quot;355&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen=&quot;&quot;&gt; &lt;/iframe&gt;
&lt;div style=&quot;margin-bottom:5px&quot;&gt; &lt;strong&gt; &lt;a href=&quot;//www.slideshare.net/tagomoris/how-to-createimprove-oss-products-and-its-community&quot; title=&quot;How to create/improve OSS products and its community&quot; target=&quot;_blank&quot;&gt;How to create/improve OSS products and its community&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;//www.slideshare.net/tagomoris&quot; target=&quot;_blank&quot;&gt;SATOSHI TAGOMORI&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;OSSとのつきあいかた。OSSやっていく上で大事なことが書かれてる&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ブログによる情報発信&quot;&gt;ブログによる情報発信&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://yuuki.hatenablog.com/entry/the-art-of-blogging-technologies&quot;&gt;YAPC::Asia 2015で技術ブログを書くことについて発表しました - ゆううきブログ&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;読みやすさを追求するために、文章自体を書くときに結構細かいことを意識しています。 意識しているのは以下のような内容です。&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;段落のトピックセンテンスを意識する。その段落で述べることの概略を述べた一文を含める&lt;/li&gt;
    &lt;li&gt;文をなるべく短くする。とはいえやり過ぎは返って流れにそって読みにくくなるため、きれいに読み下せるなら多少長くなってもよい&lt;/li&gt;
    &lt;li&gt;箇条書きに頼らない。箇条書きは文と文とつなぐことに向いていないため、あくまで強調したいものを列挙するだけにとどめる&lt;/li&gt;
    &lt;li&gt;「〜を行う」は冗長な表現なので使わない。大抵は「〜する」でシュッと言い切れる&lt;/li&gt;
    &lt;li&gt;文の格を揃える。主語と述語が対応しているかを常に意識する&lt;/li&gt;
    &lt;li&gt;不自然な体言止めを控える。小説やエッセイのようなものには向いているかもしれない&lt;/li&gt;
    &lt;li&gt;適度にひらがなを混ぜる。漢字ばかりだと日本人には読みにくい。文の密度のバランスをとる&lt;/li&gt;
    &lt;li&gt;同じ言い回しの連続を避ける。例えば、「〜だと思う」が連続しないようにする&lt;/li&gt;
    &lt;li&gt;事実と意見を区別する。意見を述べた文の末尾は「〜だと考える。」「〜だと思う。」でくくる&lt;/li&gt;
    &lt;li&gt;「〜だと考えられる」という表現を避ける。「考えられる」は考えている主体は自分なのに受け身になっていて、考えている主体を曖昧にしている&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;曖昧な部分やわかりにくかったりぼかしたり部分は突っ込まれることもあるので、細部までこだわって丁寧に書こうとしています。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;エンジニアの健康&quot;&gt;エンジニアの健康&lt;/h2&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;5248d18195884b3f9bf89e631302cbef&quot; data-ratio=&quot;1.33333333333333&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;きちんとした姿勢と適度な運動、大事。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;google&quot;&gt;Google&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/googlecloudjapan/deep-dive-into-google-cloud-technology&quot;&gt;スライドはここ&lt;/a&gt;に上げてありますが、これだけ見ても意味不明と思われるので、話した内容の要約をまとめブログ代わりに書こうかな、と思ったらかなり長文となってしまいました。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://qiita.com/kazunori279/items/3ce0ba40e83c8cc6e580&quot;&gt;GoogleCloudPlatform - YAPC Asia 2015「Google Cloud Platformの謎テクノロジーを掘り下げる」のまとめ - Qiita&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;スライド参照するよりも上のQiitaの記事のほうが良さ気&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;isucon&quot;&gt;ISUCON&lt;/h2&gt;

&lt;iframe src=&quot;//www.slideshare.net/slideshow/embed_code/key/a9AbEpcmNp1vxX&quot; width=&quot;425&quot; height=&quot;355&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen=&quot;&quot;&gt; &lt;/iframe&gt;
&lt;div style=&quot;margin-bottom:5px&quot;&gt; &lt;strong&gt; &lt;a href=&quot;//www.slideshare.net/kazeburo/isucon-yapcasia-tokyo-2015&quot; title=&quot;ISUCONの勝ち方 YAPC::Asia Tokyo 2015&quot; target=&quot;_blank&quot;&gt;ISUCONの勝ち方 YAPC::Asia Tokyo 2015&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;//www.slideshare.net/kazeburo&quot; target=&quot;_blank&quot;&gt;Masahiro Nagano&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;

&lt;h3 id=&quot;参考&quot;&gt;参考&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;YouTubeに動画あります: &lt;a href=&quot;https://www.youtube.com/playlist?list=PLzT643y4OYZp0K4YhPmmaLtnZzlVrbz0G&quot;&gt;YAPC::Asia Tokyo 2015 - YouTube&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;その他YAPCレポートがまとめられています &lt;a href=&quot;http://yapcasia.org/2015/news/08/yapcasia-tokyo-2015-blog-entries.html&quot;&gt;【随時更新中】YAPC::Asia Tokyo 2015 感想エントリまとめ | YAPC::Asia Tokyo 2015&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Toshimaru</name></author><category term="tech" /><summary type="html">YAPC2015に行ってきました。その中で心に残ったトーク＆スライドのみを抜粋（直接トークを聴いたものもあるしそうでないものもある）。Perlは書けないのでPerl成分は少なめです。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/yapc2015.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/yapc2015.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">2013年に参加したAdventCalendar、そしてAdventCalendar参加の意義</title><link href="https://blog.toshimaru.net/2013-advent-calendar/" rel="alternate" type="text/html" title="2013年に参加したAdventCalendar、そしてAdventCalendar参加の意義" /><published>2013-12-29T00:00:00+09:00</published><updated>2013-12-29T00:00:00+09:00</updated><id>https://blog.toshimaru.net/2013-advent-calendar</id><content type="html" xml:base="https://blog.toshimaru.net/2013-advent-calendar/">&lt;p&gt;2013年のAdvent Calendarは下記の記事にて参加しました。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/php-force-property/&quot;&gt;PHPのプロパティをStrictに定義する&lt;/a&gt; (&lt;a href=&quot;http://www.adventar.org/calendars/101&quot;&gt;PHP Advent Calendar 2013&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/one-thing-you-should-know-about-asahikawa/&quot;&gt;旭川にある有名な動物園についてあなたが知るべきたった１つのこと&lt;/a&gt; (&lt;a href=&quot;http://www.adventar.org/calendars/77&quot;&gt;道民部 Advent Calendar 2013&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/php-trait/&quot;&gt;PHP5.4のtrait機能を理解する&lt;/a&gt; (&lt;a href=&quot;http://www.adventar.org/calendars/101&quot;&gt;PHP Advent Calendar 2013&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/canadian-beers/&quot;&gt;カナディアンビールの紹介&lt;/a&gt; (&lt;a href=&quot;http://www.adventar.org/calendars/86&quot;&gt;ビール Advent Calendar 2013&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/css-animation/&quot;&gt;CSS3アニメーションを使ってサイトをリッチに&lt;/a&gt; (&lt;a href=&quot;http://www.adventar.org/calendars/57&quot;&gt;CSS Property Advent Calendar 2013&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/chrome-dev-tool/&quot;&gt;細かすぎて伝わりにくいChrome Developerツールを使いこなそう！&lt;/a&gt; (&lt;a href=&quot;http://www.adventar.org/calendars/62&quot;&gt;Frontrend Advent Calendar 2013&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/jquery-8-tips/&quot;&gt;jQuery使いが知っておくべきjQueryテクニック8選&lt;/a&gt; (&lt;a href=&quot;http://www.adventar.org/calendars/135&quot;&gt;jQuery Advent Calendar 2013&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;合計７本。思ったよりも多く書くことができました。&lt;/p&gt;

&lt;h2 id=&quot;advent-calendar参加意義&quot;&gt;Advent Calendar参加意義&lt;/h2&gt;

&lt;p&gt;Advent Calendarに参加する意義とは何でしょうか？　僕は下記のように考えています。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ブログを書くきっかけになる&lt;/li&gt;
  &lt;li&gt;ブログを書くモチベーションになる&lt;/li&gt;
  &lt;li&gt;普段より多くの人に読んでもらえる&lt;/li&gt;
  &lt;li&gt;他の人のブログを知る・読むきっかけになる&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ブログを書くきっかけになる&quot;&gt;ブログを書くきっかけになる&lt;/h2&gt;

&lt;p&gt;自分の場合、「これブログに書こうかなー」とネタだけ書き留めておいてあるのですが、面倒で＜下書き＞状態のまま保存されている記事がいくつかあります。Advent Calendarはそれを掃き出すいいきっかけとなります。例えばPHPについてブログを書こうかなと思っていることがあるのであれば、思い切ってPHP Advent Calendarに参加して書くきっかけとしちゃいましょう。&lt;/p&gt;

&lt;p&gt;Advent Calendarは12月という時期もあり2013年を総括する良いきっかけでもあります。エンジニアであれば2013年の間に学んだ新しい技術、面白い技術、紹介したい技術を2013年総括の意味も込めて書いてみましょう。ブログに残すことにより自分が2013年に何を学んだのかを振り返る良いきっかけにもなりますし、「書く」ことにより自分自身の知識の整理にもなり良い事尽くしです。&lt;/p&gt;

&lt;h2 id=&quot;ブログを書くモチベーションになる&quot;&gt;ブログを書くモチベーションになる&lt;/h2&gt;

&lt;p&gt;ブログを書くモチベーションになるのもAdvent Calendarの良いところです。１人で書いているとブログを書こうと思い立ってもどうしても「別に後でいいか」「今度時間あるときに更新しようか」と放置気味になってしまうのが怠惰な人間の性（さが）であります。&lt;/p&gt;

&lt;p&gt;しかしAdvent Calendarの場合はみんなでやっているので、「みんなも更新してるし俺も頑張るか」って気になります。あと更新する日付も事前に決定されているので「○○日までには記事を書いてアップデートしなきゃ！」というある意味締め切り的な役割もあります。&lt;/p&gt;

&lt;p&gt;逆にこれを利用して、書くネタはないけどとりあえず参加だけポチっておいて＜更新しなきゃいけない状況＞を作ることでブログ記事を書くことができるって作戦もありかと思います。&lt;/p&gt;

&lt;p&gt;あと&lt;a href=&quot;http://dic.nicovideo.jp/a/%E9%A0%93%E6%8C%AB%E3%81%97%E3%81%9F%E6%8A%80%E8%A1%93%E7%B3%BB%E3%82%A2%E3%83%89%E3%83%99%E3%83%B3%E3%83%88%E3%82%AB%E3%83%AC%E3%83%B3%E3%83%80%E3%83%BC%E3%81%AE%E4%B8%80%E8%A6%A7(2013%E5%B9%B4)&quot;&gt;こんな&lt;/a&gt;のもネタ記事として存在していますが、Advent Calendarを書かない人の抑止力として働いてて悪くないネタ記事だと思ってます。「俺が記事更新しなかったから＜頓挫＞とか言われた！」なんてなりたくないですもんね。&lt;/p&gt;

&lt;h2 id=&quot;普段より多くの人に読んでもらえる&quot;&gt;普段より多くの人に読んでもらえる&lt;/h2&gt;

&lt;p&gt;これも良いことです。Advent Calendarの記事にたどり着く流れとしては下記のような可能性があるかと思います。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;普段からのブログの読者&lt;/li&gt;
  &lt;li&gt;Advent Calendarのサイトからたどり着く&lt;/li&gt;
  &lt;li&gt;バズったAdvent Calendarから同じAdvent Calendarの別の記事を読みに行く&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;普段ブログでリーチできる読者というのは1のみかと思います。例えばRSSでブログを購読しているとかTwitterでフォローしていてそこから記事にたどり着くとか。1の読者は普段からそのブログを読んでいるので、Advent Calendarとして書こうが書かまいがあまり影響はないと言えます。&lt;/p&gt;

&lt;p&gt;しかしAdvent Calendarに書くことにより、普段ブログに訪れないであろう2や3の人までリーチできるのは良いことです。つまり、Advent Calendarというメディアを利用するということです。最新技術にアンテナ張っているエンジニアであれば、自分の興味ある技術のAdvent Calendarは全部とは言わずとも、それなりにチェックしているかと思います。これらのエンジニアは大手のAdvent Calendarサイト（&lt;a href=&quot;http://www.adventar.org/&quot;&gt;Adventar&lt;/a&gt;とか&lt;a href=&quot;http://qiita.com/advent-calendar&quot;&gt;Advent Calendar (qiita)&lt;/a&gt;）であればチェックしているかと思うのでそこからのブログの流入が見込めます。&lt;/p&gt;

&lt;p&gt;また3のようにバズった記事からの流入の可能性も見込めますね。例えば下記の記事は技術界隈にとどまらず、多くの人に読まれたようです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.jugyo.org/post/70240698465&quot;&gt;◯ックパッドの面接に落ちたことを社員の高◯さんに言いふらされた話&lt;/a&gt; from &lt;a href=&quot;http://www.adventar.org/calendars/252&quot;&gt;闇 Advent Calendar 2013&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;この記事を読んだ人の中には「闇Advent Calendarにはこの記事の他にどんな闇があるのだろう？」と興味を持ち他の記事も読みに行ったのではないでしょうか。このように普段読まれない読者からもブログを読んでもらえてAdvent Calendarは素晴らしいです。&lt;/p&gt;

&lt;h2 id=&quot;他の人のブログを知る読むきっかけになる&quot;&gt;他の人のブログを知る・読むきっかけになる&lt;/h2&gt;

&lt;p&gt;他の人のブログを知ったり、読んだりするきっかけにもなるのも良いです。上記に書いたような普段からのブログ読者、あるいはバズった記事でないとなかなか新たなブログを知ったりするのは難しいです。自分も今回参加したAdvent Calendarのその他の記事を読んだのをきっかけにTwitterをフォローしたり、そこから同ブログの別の記事をディグったりしました。&lt;/p&gt;

&lt;p&gt;わりとブログ上でのエンジニア有名人はAdvent Calendarに参加しているケースも多いので、PHPのカレンダーであればPHP界隈のエンジニア、フロントエンドのカレンダーであればフロントエンド界隈のエンジニア、GoのカレンダーであればGo界隈のエンジニアにどんな人がいるのかを知ることができます。例えばGoなんかは最近ホットになっている言語でもあるのでAdvent Calendarに参加しているエンジニアの方々をフォローしていれば、Go言語の最新動向もフォローできると思います。&lt;/p&gt;

&lt;h2 id=&quot;advent-calendarを終えて&quot;&gt;Advent Calendarを終えて&lt;/h2&gt;

&lt;p&gt;このようにAdvent Calendarはエンジニアにとって良い事尽くしですので、来年のAdvent Calendarも参加したいなーと考えている所存です。これを読んでいるエンジニアの方でAdvent Calendarに参加したことないという方は来年のカレンダーにチャレンジしてみてはいかがでしょうか？&lt;/p&gt;

&lt;h3 id=&quot;反省&quot;&gt;反省&lt;/h3&gt;

&lt;p&gt;前半の記事は参加表明した後に当日になる前に準備をすることができたのでちゃんと日本時間で更新することができましたが、後半の方は日本との時差もあり日本時間で1日遅れての更新となってしまった記事がありました。それが今回の反省点。&lt;/p&gt;</content><author><name>Toshimaru</name></author><category term="tech" /><summary type="html">2013年のAdvent Calendarは下記の記事にて参加しました。</summary></entry><entry><title type="html">「フロントエンドデベロッパー面接時の質問事項」日本語訳しました</title><link href="https://blog.toshimaru.net/Front-end-Developer-Interview-Questions-Japanese/" rel="alternate" type="text/html" title="「フロントエンドデベロッパー面接時の質問事項」日本語訳しました" /><published>2013-08-06T00:00:00+09:00</published><updated>2013-08-06T00:00:00+09:00</updated><id>https://blog.toshimaru.net/Front-end-Developer-Interview-Questions-Japanese</id><content type="html" xml:base="https://blog.toshimaru.net/Front-end-Developer-Interview-Questions-Japanese/">&lt;p&gt;&lt;a href=&quot;https://github.com/h5bp/Front-end-Developer-Interview-Questions&quot;&gt;Front-end Job Interview Questions(Github)&lt;/a&gt;を日本語訳しました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/h5bp/Front-end-Developer-Interview-Questions/tree/master/Translations/Japanese&quot;&gt;日本語訳はこちら&lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/https://github.com/darcyclarke/Front-end-Developer-Interview-Questions/tree/master/Japanese&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/https://github.com/darcyclarke/Front-end-Developer-Interview-Questions/tree/master/Japanese&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;質問項目としては下記のようになります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;一般的な質問事項&lt;/li&gt;
  &lt;li&gt;HTMLに関する質問事項&lt;/li&gt;
  &lt;li&gt;JSに関する質問事項&lt;/li&gt;
  &lt;li&gt;jQueryに関する質問事項&lt;/li&gt;
  &lt;li&gt;CSSに関する質問事項&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;フロントエンドデベロッパーの方は自分の実力試し、あるいは知識の復習として回答を考えてみてはいかがでしょうか？  自分もやってみましたが案外知らないこと、うろ覚えになっていることが多かったです。&lt;/p&gt;</content><author><name>Toshimaru</name></author><category term="tech" /><summary type="html">Front-end Job Interview Questions(Github)を日本語訳しました。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/front-end-q.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/front-end-q.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>