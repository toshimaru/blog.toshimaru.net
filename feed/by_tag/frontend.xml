<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://blog.toshimaru.net/feed/by_tag/frontend.xml" rel="self" type="application/atom+xml" /><link href="https://blog.toshimaru.net/" rel="alternate" type="text/html" /><updated>2022-06-22T10:09:46+09:00</updated><id>https://blog.toshimaru.net/feed/by_tag/frontend.xml</id><title type="html">Hack Your Design!</title><subtitle>toshimaruの技術系なブログ</subtitle><author><name>Toshimaru</name></author><entry><title type="html">Railsフロントエンド技術の今とこれから</title><link href="https://blog.toshimaru.net/rails-frontend/" rel="alternate" type="text/html" title="Railsフロントエンド技術の今とこれから" /><published>2017-05-22T00:00:00+09:00</published><updated>2017-05-22T00:00:00+09:00</updated><id>https://blog.toshimaru.net/rails-frontend</id><content type="html" xml:base="https://blog.toshimaru.net/rails-frontend/"><![CDATA[<p>待望されたYarnサポートの入ったRails5.1が2017年4月にリリースされました。</p>

<p><a href="http://edgeguides.rubyonrails.org/5_1_release_notes.html">Ruby on Rails 5.1 Release Notes — Ruby on Rails Guides</a></p>

<p>他にもjQueryがデフォルトdependencyから外されたり、Optionalでwebpackサポートが入ったりしており、Railsのフロントエンドは大きな転換点を迎えたと言ってよいでしょう。本エントリではRailsのフロントエンド技術の今を振り返り、今後どうなっていくかをまとめてみたいと思います。</p>

<h2 id="disられてきたrailsフロントエンド-no_good">DisられてきたRailsフロントエンド :no_good:</h2>

<p>Railsのフロントエンド技術スタックは、フロントエンドを専業とするエンジニアにDisられるものでした。具体的には下記の技術要素です。</p>

<ul>
  <li>jQuery</li>
  <li>CoffeeScript</li>
  <li>Assets Pipeline (sprockets)</li>
  <li>gemのエコシステムに乗ったJSライブラリ(jquery-railsなど)</li>
</ul>

<p>複雑化するWebアプリケーションにおいてjQueryはもう時代遅れとされてますし、CoffeeScriptよりも時代はES6、AltJS使うにしても今はTypeScriptが有力候補でしょうか。gemのエコシステムに乗っかっているJSライブラリがAsset Pipelineを通して各環境にシップされるていることも嫌われます。なぜならJSにはnpmというエコシステムがあるからです。</p>

<h2 id="railsのフロントエンド刷新の歩み-walking">Railsのフロントエンド刷新の歩み :walking:</h2>

<p>しかし2016年春頃<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>からRailsの作者・<a href="https://github.com/dhh">DHH</a>の上げたIssueを皮切りに、フロントエンド技術刷新の歩みが始まります。その歴史・経緯を追ってみましょう。</p>

<h3 id="2016年5月">2016年5月</h3>
<ul>
  <li>Rails v5.1 で jQueryを依存性としてDropしようというIssueをDHHが上げる
    <ul>
      <li><a href="https://github.com/rails/rails/issues/25208">Drop jQuery as a dependency · Issue #25208 · rails/rails</a></li>
    </ul>
  </li>
</ul>

<h3 id="2016年10月">2016年10月</h3>
<ul>
  <li>Railsにnpm supportを追加するPRが上げられる
    <ul>
      <li><a href="https://github.com/rails/rails/pull/26836">Add Yarn support in new apps using –yarn option by Liceth · Pull Request #26836 · rails/rails</a></li>
    </ul>
  </li>
  <li>Sprockets 側でNPMをsupportするPRが上げられる
    <ul>
      <li><a href="https://github.com/rails/sprockets/pull/405">NPM support: Add support for resolving main from npm’s package.json by guilleiguaran · Pull Request #405 · rails/sprockets</a></li>
    </ul>
  </li>
</ul>

<h3 id="2016年11月">2016年11月</h3>
<ul>
  <li>npm support PRにてnpmではなくyarnを採用することが決められる
    <ul>
      <li><a href="https://github.com/rails/rails/pull/26836#issuecomment-257426850">https://github.com/rails/rails/pull/26836#issuecomment-257426850</a></li>
    </ul>
  </li>
  <li>jquery-rails をRailsから外すPRが上げられる
    <ul>
      <li><a href="https://github.com/rails/rails/pull/27113">Drop jQuery as a dependency by guilleiguaran · Pull Request #27113 · rails/rails</a></li>
    </ul>
  </li>
</ul>

<h3 id="2016年12月">2016年12月</h3>
<ul>
  <li>DHH自らwebpacker gemを作成開始、v0.1としてgemを公開
    <ul>
      <li><a href="https://github.com/rails/webpacker/commit/f4cc31d">FIRST!1! · rails/webpacker@f4cc31d</a></li>
    </ul>
  </li>
  <li>同gemをRails本体の機能に取り込む
    <ul>
      <li><a href="https://github.com/rails/rails/pull/27288">Basic –webpack delegation to new webpacker gem by dhh · Pull Request #27288 · rails/rails</a></li>
    </ul>
  </li>
</ul>

<h3 id="2017年2月">2017年2月</h3>
<ul>
  <li>Rails 5.1.beta1 リリース
    <ul>
      <li><a href="http://weblog.rubyonrails.org/2017/2/23/Rails-5-1-beta1/">Rails 5.1.0.beta1: Loving JavaScript, System Tests, Encrypted Secrets, and more | Riding Rails</a></li>
    </ul>
  </li>
  <li>webpacker 1.0 リリース
    <ul>
      <li><a href="https://rubygems.org/gems/webpacker/versions/1.0">https://rubygems.org/gems/webpacker/versions/1.0</a></li>
    </ul>
  </li>
  <li>jQueryに依存しないujsである rails-ujs が actionview の一機能としてRails本体に取り込まれる
    <ul>
      <li><a href="https://github.com/rails/rails/commit/41c33bd4b2ec3f4a482e6030b6fda15091d81e4a">https://github.com/rails/rails/commit/41c33bd4b2ec3f4a482e6030b6fda15091d81e4a</a></li>
    </ul>
  </li>
</ul>

<h3 id="2017年4月">2017年4月</h3>
<ul>
  <li>:tada: Rails 5.1 リリース
    <ul>
      <li><a href="http://weblog.rubyonrails.org/2017/4/27/Rails-5-1-final/">Rails 5.1: Loving JavaScript, System Tests, Encrypted Secrets, and more | Riding Rails</a></li>
    </ul>
  </li>
</ul>

<p>以上が現在に至るRailsフロントエンド進化の軌跡となります。2016年5月のDHHの問題提起からわずか(?)一年足らずでここまで進化したのは純粋にすごいなーと思いました。</p>

<h2 id="railsのフロントエンド実装の選択肢">Railsのフロントエンド実装の選択肢</h2>

<p>Rails5.1のフロントエンド刷新以降、<strong>今Railsにはどんなフロントエンド実装の選択肢があるのか</strong>、ざっと見てみます。</p>

<h3 id="1-asset-pipeline">1. <a href="https://railsguides.jp/asset_pipeline.html">Asset Pipeline</a></h3>
<ul>
  <li>Sprockets + CoffeeScript, SASS, jQuery</li>
  <li>今まで通りの古き良きassets管理</li>
  <li>知見も多く転がっており、枯れているのでハマりにくい</li>
</ul>

<h3 id="2-sprockets-4">2. <a href="https://github.com/rails/sprockets">Sprockets 4</a></h3>
<ul>
  <li>ES6 support <a href="https://github.com/rails/sprockets/blob/master/UPGRADING.md#es6-support">https://github.com/rails/sprockets/blob/master/UPGRADING.md#es6-support</a></li>
  <li>Sprockets4の開発自体は停滞気味 <a href="https://github.com/rails/sprockets/blob/master/CHANGELOG.md">https://github.com/rails/sprockets/blob/master/CHANGELOG.md</a></li>
</ul>

<h3 id="3-browserify-rails">3. <a href="https://github.com/browserify-rails/browserify-rails">browserify-rails</a></h3>
<ul>
  <li>sprockets のコールバックとして動作
    <ul>
      <li>つまりsprocketsに依存している</li>
    </ul>
  </li>
  <li>導入のための参考記事: <a href="http://techlife.cookpad.com/entry/2015/12/14/130041">モダンJavaScript開発環境 on Rails - クックパッド開発者ブログ</a></li>
</ul>

<h3 id="4-webpacker">4. <a href="https://github.com/rails/webpacker">webpacker</a></h3>
<ul>
  <li>絶賛開発中
    <ul>
      <li>活発に変更が入っているので導入に際しては現時点ではREADMEを参考にするのが良さそう</li>
      <li>まだ小慣れていない印象</li>
    </ul>
  </li>
  <li>最初はwebpack+railsのシームレスな統合のための薄い実装だと思ったが、現在ゴテゴテな実装…
    <ul>
      <li>react, angular, elm, vue などの初期インストールタスクが１つのレポジトリに全部のっている
        <ul>
          <li><a href="https://github.com/rails/webpacker/issues/20#issuecomment-266347480">plugable にしようぜ</a>という話はあるが現在そうはなっていない</li>
        </ul>
      </li>
      <li>初回インストール時の生成ファイル・パッケージ構成はたぶんフロントエンドガチ勢からみたら<a href="https://github.com/rails/webpacker/blob/5003a5de0222c1f5b0f3c2b887064039e06f7eae/lib/install/template.rb#L25-L30">クソの山っぽい</a></li>
      <li>レールにのったwebpack利用という意味のカジュアルな利用だったら良いかもしれない</li>
    </ul>
  </li>
</ul>

<h3 id="5-webpack-rails">5. <a href="https://github.com/mipearson/webpack-rails">webpack-rails</a></h3>
<ul>
  <li>Sprockets 非依存</li>
  <li>webpack利用のための薄い実装
    <ul>
      <li>初期のwebpackerに似てる印象</li>
      <li>個人的にはwebpackerよりは筋が良い印象を受けた</li>
    </ul>
  </li>
</ul>

<h3 id="6-react_on_rails">6. <a href="https://github.com/shakacode/react_on_rails">react_on_rails</a></h3>
<ul>
  <li>SSRサポート</li>
  <li><a href="https://github.com/sstephenson/execjs">execjs</a> 依存</li>
  <li>webpacker integration アリ
    <ul>
      <li>webpackerの薄い実装も登場 <a href="https://github.com/shakacode/webpacker_lite">shakacode/webpacker_lite</a></li>
    </ul>
  </li>
  <li>参考記事: <a href="http://r7kamura.hatenablog.com/entry/2016/10/10/173610">Ruby on Rails on React on SSR on SPA - ✘╹◡╹✘</a></li>
</ul>

<h3 id="7-react-rails">7. <a href="https://github.com/reactjs/react-rails">react-rails</a></h3>
<ul>
  <li>SSRサポート</li>
  <li><a href="https://github.com/sstephenson/execjs">execjs</a> 依存</li>
  <li>react_on_railsと異なる点は、integration の選択肢として Rails Assets Pipline もしくは webpacker が選べること
    <ul>
      <li>Asset Pipelineにのりたかったらこちらを選択</li>
    </ul>
  </li>
</ul>

<h3 id="8-独自に導入">8. 独自に導入</h3>
<ul>
  <li>独自にJSアプリケーションをRailsに統合させる構成を考えRails上にのっける</li>
  <li>例: <a href="http://techlife.cookpad.com/entry/2016/07/27/101015">webpackを使った Rails上でのReact開発 - クックパッド開発者ブログ</a></li>
</ul>

<h3 id="9-sprockets-commoner">9. <a href="https://github.com/Shopify/sprockets-commoner">sprockets-commoner</a></h3>
<ul>
  <li>Shopify製</li>
  <li>コンセプトとしてはRails Wayを壊さずにBabelを利用すること</li>
  <li>Sprocketsに依存</li>
  <li>導入に際してはitkrt2yさんのこちらの記事を参考に: <a href="http://qiita.com/itkrt2y/items/18ea41828e1c22fc31e3">顧客が本当に求めていたsprockets、sprockets-commonerの紹介 - Qiita</a></li>
</ul>

<h2 id="どうすべきか">どうすべきか</h2>

<p>上記に紹介したように様々な実装があるわけですが、我々はどれをどのように選択すべきでしょうか。僕なりにまとめてみました。</p>

<p><img src="/images/posts/roppongirb3/flowchart.png" alt="chart" /></p>

<p>まず最初にあるのが、Railsが嫌い/宗教的にあわない/フロントエンドをレールにのらせたくないのであれば無理してRailsを使うことはないと思っています。Railsをやめる、あるいはRailsはWebAPIに徹して独立したフロントエンドの世界観を築くのもアリだと思ってます。</p>

<p>また現状のAsset管理に満足していて、かつビジネス上の要件としてリッチなJS実装が求められないのであれば無理してモダンなフロントエンド機構を構築する必要はありません。無理してwebpackだのbrowserifyだの導入せずに、古き良きAsset Pipelineでいいのです（技術そのものが目的な場合はこの限りではない）。</p>

<h2 id="今後どうなるか">今後どうなるか</h2>

<p>Railsコミュニティの流れとして、<strong>今後どうなっていくか</strong> も考えてみたいと思います。</p>

<h3 id="1-gemからnpmへ">1. gemからnpmへ</h3>

<p><img src="/images/posts/roppongirb3/rails-npm.png" alt="bridge" /></p>

<p>RailsからNPM(yarn)のブリッジがRailsのコア機能の１つとして提供されたことはとても意義深いことだと思っています。その結果起こりうることとしては以下でしょうか。</p>

<ul>
  <li>jquery-rails, underscore-rails のような Asset Pipeline に載せるタイプのgemは廃れていく(npm管理に移っていく)</li>
  <li>Railsエンジニアがnpmライブラリを今後どんどん活用することによって、RailsエンジニアのJS界隈進出が増えるかも…?
    <ul>
      <li>railsコミュニティにとってもnpmコミュニティにとっても良い事</li>
    </ul>
  </li>
</ul>

<h3 id="2-reactへの大潮流">2. Reactへの大潮流</h3>

<p>今までJSライブラリのデファクトと言ったらjQueryでしたが、フロントエンド実装の複雑化にともないReactを採用する企業が増えその状況が変わってきました（少なくとも僕の観測範囲内では）。jQueryを使っての複雑なDOM操作のコードは破綻しがちですし限界があります。その結果のReact採用なのでしょう。</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">反省会というからReact導入が一般的に浸透し導入後一巡したってことだろうなぁ<br />Twitterトレンド入り！ 「<a href="https://twitter.com/hashtag/React%E5%8F%8D%E7%9C%81%E4%BC%9A?src=hash">#React反省会</a>」登壇資料一挙公開！ | Wantedly Engineer Blog <a href="https://t.co/PbG49aclqa">https://t.co/PbG49aclqa</a></p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/862817538022883328">May 11, 2017</a></blockquote>

<p>上記のようにReactが導入されやすい環境が整ってきている昨今、今後ますますRails+Reactの採用事例は増えていくと思われます<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup>。</p>

<h3 id="3-turbolinks-がますます下火に">3. Turbolinks がますます下火に</h3>

<p><del>黙って無効化すべし</del> 無効化されることの多いturbolinks機能ですがますます下火になっていくと思われます。</p>

<p><img src="/images/posts/roppongirb3/turbolinks.png" alt="" /></p>

<p>リッチなレンダリングUXを提供するためのRailsチーム(DHH)の苦肉の策がTurbolinksという理解でいますが、上述したようにフロントエンド開発の機構が整ってきている今、わざわざturbolinksを使う必要性もなくなってきました。</p>

<p>とはいえ、絶対にJS書きたくないでござる！というJS書きたくないマンなRailsエンジニアの選択肢の１つとしてはアリだと思います。</p>

<h2 id="フロントエンドというマイクロサービスがもたらす複雑性">フロントエンドというマイクロサービスがもたらす複雑性</h2>

<p>と、ここまでRailsとフロントエンドの話をしてきましたが、一方で安易なフロントエンド技術の導入は負債を生み出す危険性もあることも付しておきます。</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">このツラミわかるなぁ | ReactSPAをRailsに戻している話 // Speaker Deck <a href="https://t.co/G3Ln3NbmCQ">https://t.co/G3Ln3NbmCQ</a></p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/857758278830350337">April 28, 2017</a></blockquote>

<p>このケースのように複雑なフロントエンド実装が逆に負債となり足かせとなる場合もあります。<a href="http://anond.hatelabo.jp/20170501085956">全くメンテされないクソJSコードの塊を作る</a>ような状況は避けなければなりません。</p>

<p>高度に専業化したフロントエンド技術はもはやいちサーバーサイドエンジニアが片手間に開発・メンテナンスできるレベルのものでもなくなってきています。うまく作ったとしてもその後のアップデートに追従していくのは至難の業でしょう。</p>

<blockquote class="twitter-tweet" data-conversation="none" data-cards="hidden" data-lang="en"><p lang="ja" dir="ltr">紹介されているこっちのスライドもよくわかるなぁ。「フロントエンドは一個のマイクロサービス(ただのViewじゃない)」「マイクロサービス作っているのだから辛いの当然」 <a href="https://t.co/YqkrIYSXxf">https://t.co/YqkrIYSXxf</a></p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/857790990496616448">April 28, 2017</a></blockquote>

<p>このようにフロントエンドを１つのマイクロサービスと捉える見方もあります。マイクロサービスであるからこそ、モノリシックサービスよりもアーキテクチャ・実装が複雑になりがちです。高度なフロントエンド技術導入の際はチームとしてその複雑性を受け入れる覚悟が必要でしょう。</p>

<h2 id="イベント告知">イベント告知</h2>

<p>そんなわけで随分と長い前置きでしたが、次回のRoppongi.rb#3のテーマは”Rails x Frontend”で開催します。</p>

<p><a href="https://roppongirb.connpass.com/event/56456/">Roppongi.rb #3 “Rails x Frontend-Tech”</a></p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">Roppongi.rb #3 &quot;Rails x Frontend-Tech&quot; 〜これからのRails Frontendの話をしよう〜 を公開しました！ <a href="https://t.co/hOjXX7J8dC">https://t.co/hOjXX7J8dC</a> <a href="https://twitter.com/hashtag/roppongirb?src=hash">#roppongirb</a></p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/861725918552707072">May 8, 2017</a></blockquote>

<p>既に参加枠（抽選）は埋まっており参加登録いただいた方を全員ご案内できないのが恐縮ですが、もしよければ登録して遊びにきてください。</p>

<h2 id="参考リンク">参考リンク</h2>

<ul>
  <li><a href="http://qiita.com/itkrt2y/items/7e999836f460fb9c005d">Rails5.1に向けてフロントエンド周りで起こっている革命まとめ - Qiita</a></li>
  <li><a href="http://qiita.com/yuroyoro/items/a29e39989f4469ef5e41">Rails5.1から導入されるwebpacker.gemは本当にRailsのフロントエンド開発に福音をもたらすのか? - Qiita</a></li>
</ul>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>ちょうど<a href="http://railsconf.com/2016">RailsConf 2016</a>の後くらいのタイミングでしょうか。 <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>一方で、複雑でないアプリケーションに対しReactを導入するのはオーバーキルなのでごく一部分の小さなイベント制御JSコードであればjQueryで十分な場面も未だ多くあると思います。 <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Toshimaru</name></author><category term="rails" /><category term="frontend" /><category term="roppongirb" /><summary type="html"><![CDATA[待望されたYarnサポートの入ったRails5.1が2017年4月にリリースされました。他にもjQueryがデフォルトdependencyから外されたり、Optionalでwebpackサポートが入ったりしており、Railsのフロントエンドは大きな転換点を迎えたと言ってよいでしょう。本エントリではRailsのフロントエンド技術の今を振り返り、今後どうなっていくかをまとめてみたいと思います。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/roppongirb3/roppongirb-3.jpg" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/roppongirb3/roppongirb-3.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>