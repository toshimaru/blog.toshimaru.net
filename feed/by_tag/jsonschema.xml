<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://blog.toshimaru.net/feed/by_tag/jsonschema.xml" rel="self" type="application/atom+xml" /><link href="https://blog.toshimaru.net/" rel="alternate" type="text/html" /><updated>2024-02-06T13:03:33+09:00</updated><id>https://blog.toshimaru.net/feed/by_tag/jsonschema.xml</id><title type="html">Hack Your Design!</title><subtitle>toshimaruの技術系なブログ</subtitle><author><name>Toshimaru</name></author><entry><title type="html">JSON Schemaについて発表しました</title><link href="https://blog.toshimaru.net/json-schema-collaboration/" rel="alternate" type="text/html" title="JSON Schemaについて発表しました" /><published>2015-12-09T00:00:00+09:00</published><updated>2015-12-09T00:00:00+09:00</updated><id>https://blog.toshimaru.net/json-schema-collaboration</id><content type="html" xml:base="https://blog.toshimaru.net/json-schema-collaboration/"><![CDATA[<p>「JSON Schemaでバックエンドエンジニアとフロントエンドエンジニアがコラボする」と題して<a href="http://gunosy-beer.connpass.com/event/22825/">エムスリー x Gunosy Beer bash</a>で発表してきました。</p>

<p>当日ハッシュタグ: <a href="https://twitter.com/hashtag/gunosybeer?src=hash">#gunosybeer hashtag on Twitter</a></p>

<h2 id="発表資料point_down">発表資料:point_down:</h2>

<script async="" class="speakerdeck-embed" data-id="ddf8953b3746496a848dd7e4038ece4e" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script>

<h1 id="2-types-of-json-schema">2 Types of JSON Schema</h1>

<p><a href="http://json-schema.org/">JSON Schema and Hyper-Schema</a></p>

<ul>
  <li>JSON Schema</li>
  <li>JSON Hyper-Schema</li>
</ul>

<p><img src="/images/posts/jsonschema/json-schema.png" alt="" /></p>

<h2 id="json-schema">JSON Schema</h2>
<ul>
  <li>JSONの <strong>データフォーマット</strong> を記述する</li>
  <li>人間にも機械にもわかりやすいドキュメント</li>
  <li>フォームでサブミットするデータのバリデーションに使える</li>
  <li>自動テストにも使える</li>
</ul>

<h2 id="json-hyper-schema">JSON Hyper-Schema</h2>
<ul>
  <li><strong>Web APIの仕様</strong> を記述する</li>
  <li>APIで期待するデータをJSON Schemaの形式で記述</li>
  <li>日本ではこっちの方がポピュラー？</li>
</ul>

<p>観測範囲内だと日本のコミュニティでJSON Schemaといったときにこちらを指すことが多い気がする。</p>

<h2 id="コラボレーション図">コラボレーション図</h2>

<p>JSON Schemaでコラボレーションした事例を紹介するよ。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>+------------------+
|                  |
|  Client-side JS  |
|     (React)      |
|                  |
+---+--------+-----+
    |        ^
    |        |            +---------------+
    |  JSON  |  &lt;-------- |  JSON Schema  |
    |        |            +---------------+
    v        |
+---+--------+-----+
|                  |
| Server-side API  |
|     (Rails)      |
|                  |
+------------------+
</code></pre></div></div>

<h2 id="json-schema-for-us">JSON Schema for us</h2>
<ul>
  <li>For Humans
    <ul>
      <li>Clear specification</li>
    </ul>
  </li>
  <li>For Apps
    <ul>
      <li>useful for Validation</li>
      <li>useful for Test</li>
      <li>etc.</li>
    </ul>
  </li>
</ul>

<h2 id="repositories">Repositories</h2>
<ul>
  <li>:point_down: Rails API Repo :point_down:</li>
  <li>:point_right: <strong>JSON Schema Repo</strong> :point_left:</li>
  <li>:point_up_2: Frontend Repo :point_up_2:</li>
</ul>

<p>バックエンドAPIのレポジトリ、フロントエンドのJSレポジトリ、共通で使うJSON Schemaのためのレポジトリ、これら３つを用意した。</p>

<h2 id="workflow">Workflow</h2>

<ol>
  <li>必要なAPIとそこに含まれるべきデータを洗い出し</li>
  <li>1をJSON Schemaに落としこむ</li>
  <li>プルリク！</li>
</ol>

<p>1は仕様・ワイヤーをもとにマークダウンでもスプレッドシートでも荒くアウトプット出す。</p>

<p>バックエンドエンジニアとフロントエンドエンジニアが共通認識を深めながらJSON Schemaレポジトリを育てていく。</p>

<p><img src="/images/posts/jsonschema/schema-pr.png" alt="" /></p>

<h2 id="get-usersid">GET /users/{id}</h2>

<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="c1"># user.schema.yml</span>
<span class="na">$schema</span><span class="pi">:</span> <span class="s">http://json-schema.org/draft-04/schema#</span>
<span class="na">title</span><span class="pi">:</span> <span class="s">User</span>
<span class="na">description</span><span class="pi">:</span> <span class="s">An User</span>
<span class="na">type</span><span class="pi">:</span> <span class="s">object</span>
<span class="na">properties</span><span class="pi">:</span>
  <span class="na">id</span><span class="pi">:</span>
    <span class="na">type</span><span class="pi">:</span> <span class="s">integer</span>
  <span class="na">email</span><span class="pi">:</span>
    <span class="na">type</span><span class="pi">:</span> <span class="s">string</span>
    <span class="na">format</span><span class="pi">:</span> <span class="s">email</span>
  <span class="na">name</span><span class="pi">:</span>
    <span class="na">type</span><span class="pi">:</span> <span class="s">string</span>
    <span class="na">minLength</span><span class="pi">:</span> <span class="m">1</span>
    <span class="na">maxLength</span><span class="pi">:</span> <span class="m">32</span>
<span class="na">required</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">id</span>
  <span class="pi">-</span> <span class="s">email</span>
  <span class="pi">-</span> <span class="s">name</span></code></pre></figure>

<p><code class="language-plaintext highlighter-rouge">PUT /users/{id}</code>とかもスキーマ使いまわせる。</p>

<h2 id="json-schema-validation">JSON Schema Validation</h2>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="nb">require</span> <span class="s1">'json-schema'</span>

<span class="n">schema</span> <span class="o">=</span> <span class="p">{</span>
  <span class="s2">"type"</span> <span class="o">=&gt;</span> <span class="s2">"object"</span><span class="p">,</span>
  <span class="s2">"required"</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s2">"a"</span><span class="p">],</span>
  <span class="s2">"properties"</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="s2">"a"</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="s2">"type"</span> <span class="o">=&gt;</span> <span class="s2">"integer"</span><span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="n">data</span> <span class="o">=</span> <span class="p">{</span>
  <span class="s2">"a"</span> <span class="o">=&gt;</span> <span class="mi">5</span>
<span class="p">}</span>

<span class="no">JSON</span><span class="o">::</span><span class="no">Validator</span><span class="p">.</span><span class="nf">validate</span><span class="p">(</span><span class="n">schema</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span></code></pre></figure>

<h2 id="rspec-json-schema-matcher">RSpec JSON Schema Matcher</h2>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">describe</span> <span class="s2">"Fetching the current user"</span> <span class="k">do</span>
  <span class="n">context</span> <span class="s2">"with valid auth token"</span> <span class="k">do</span>
    <span class="n">it</span> <span class="s2">"returns the current user"</span> <span class="k">do</span>
      <span class="n">user</span> <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span>
      <span class="n">auth_header</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">"Auth-Token"</span> <span class="o">=&gt;</span> <span class="n">user</span><span class="p">.</span><span class="nf">auth_token</span> <span class="p">}</span>

      <span class="n">get</span> <span class="n">v1_current_user_url</span><span class="p">,</span> <span class="p">{},</span> <span class="n">auth_header</span>

      <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="nf">status</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span> <span class="mi">200</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">).</span><span class="nf">to</span> <span class="n">match_response_schema</span><span class="p">(</span><span class="s2">"user"</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></figure>

<p>参考: <a href="https://robots.thoughtbot.com/validating-json-schemas-with-an-rspec-matcher">Validating JSON Schemas with an RSpec Matcher</a></p>

<h2 id="ruby-json-schema-library">Ruby JSON Schema Library</h2>
<ul>
  <li><a href="https://github.com/ruby-json-schema/json-schema">ruby-json-schema/json-schema</a></li>
  <li><a href="https://github.com/brandur/json_schema">brandur/json_schema</a></li>
</ul>

<p>ダッシュとアンダースコア！ わかりにくい！！</p>

<h2 id="json-schema-vs-json_schema">json-schema vs json_schema</h2>
<ul>
  <li>depending on <code class="language-plaintext highlighter-rouge">json-schema</code>:
    <ul>
      <li><a href="https://github.com/airbrake/airbrake">airbrake/airbrake</a></li>
      <li><a href="https://github.com/square/fdoc">square/fdoc</a></li>
    </ul>
  </li>
</ul>

<h2 id="json-schema-vs-json_schema-1">json-schema vs json_schema</h2>
<ul>
  <li>depending on <code class="language-plaintext highlighter-rouge">json_schema</code>:
    <ul>
      <li><a href="https://github.com/interagent/committee">interagent/committee</a></li>
      <li><a href="https://github.com/interagent/prmd">interagent/prmd</a></li>
      <li><a href="https://github.com/increments/qiita-rb">increments/qiita-rb</a></li>
      <li><a href="https://github.com/r7kamura/rack-json_schema">r7kamura/rack-json_schema</a></li>
      <li><a href="https://github.com/r7kamura/jdoc">r7kamura/jdoc</a></li>
    </ul>
  </li>
</ul>

<h2 id="javascript-json-schema-library">JavaScript JSON Schema Library</h2>

<p>弊社フロンエンドエンジニアのオススメ2つ。</p>

<ul>
  <li><a href="https://github.com/mafintosh/is-my-json-valid">mafintosh/is-my-json-valid</a></li>
  <li><a href="https://github.com/epoberezkin/ajv">epoberezkin/ajv</a></li>
</ul>

<h2 id="json書くのツラい問題">JSON書くのツラい問題</h2>
<ul>
  <li>「閉じカッコがー!!」</li>
  <li>「カンマがー!!!!」</li>
  <li>「コメントがー!!!!!!」</li>
  <li>「クオテーションがー!!!!!!」</li>
</ul>

<p><strong>黙ってYAMLで書こう。</strong> こっちのが可読性もよいしミスも少ないし書きやすいです。</p>

<h2 id="json-schemaの今とこれから">JSON Schemaの今とこれから</h2>
<ul>
  <li><a href="https://github.com/json-schema/json-schema">json-schema/json-schema</a></li>
</ul>

<p><img src="/images/posts/jsonschema/ima.png" alt="" /></p>

<ul>
  <li><a href="https://github.com/json-schema/json-schema/wiki/v5-Proposals">JSON Schema v5 Proposals</a>が出されている段階</li>
  <li><a href="https://github.com/json-schema/json-schema/issues">Issue</a>や<a href="https://groups.google.com/forum/#!forum/json-schema">Google Groups</a>を追うとよさげ</li>
  <li>v5への具体的なロードマップは引かれていない模様</li>
</ul>

<p><img src="/images/posts/jsonschema/korekara.png" alt="" /></p>

<h2 id="json-schemaコラボでよかったこと">JSON Schemaコラボでよかったこと</h2>
<ul>
  <li>バックエンドエンジニアとフロントエンドエンジニアの仕様の共通認識</li>
  <li>JSON Schemaを先に定義しておくことでバックエンドエンジニアとフロントエンドエンジニアが疎に開発できる</li>
  <li>JSON Schemaでバグの混入を防ぐ</li>
</ul>

<hr />

<h2 id="所感">所感</h2>
<p>時間にシビアなLT形式だったので発表途中でぶった切られた。もう少し簡潔にすべきだったかもしれない。</p>]]></content><author><name>Toshimaru</name></author><category term="jsonschema" /><category term="json" /><category term="presentation" /><summary type="html"><![CDATA[「JSON Schemaでバックエンドエンジニアとフロントエンドエンジニアがコラボする」と題してエムスリー x Gunosy Beer bashで発表してきました。]]></summary></entry></feed>