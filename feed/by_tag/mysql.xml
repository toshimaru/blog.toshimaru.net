<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="https://blog.toshimaru.net/feed/by_tag/mysql.xml" rel="self" type="application/atom+xml" /><link href="https://blog.toshimaru.net/" rel="alternate" type="text/html" /><updated>2023-01-17T09:45:03+09:00</updated><id>https://blog.toshimaru.net/feed/by_tag/mysql.xml</id><title type="html">Hack Your Design!</title><subtitle>toshimaruの技術系なブログ</subtitle><author><name>Toshimaru</name></author><entry><title type="html">docker-compose で Rails6 + MySQL な環境を構築する</title><link href="https://blog.toshimaru.net/rails-on-docker-compose/" rel="alternate" type="text/html" title="docker-compose で Rails6 + MySQL な環境を構築する" /><published>2019-12-31T00:00:00+09:00</published><updated>2020-01-02T00:00:00+09:00</updated><id>https://blog.toshimaru.net/rails-on-docker-compose</id><content type="html" xml:base="https://blog.toshimaru.net/rails-on-docker-compose/"><![CDATA[<p>docker-compose を使って Ruby 2.7 + Rails 6.0 + MySQL 8.0 の環境を構築してみたいと思います。</p>

<h2 id="ゴール">ゴール</h2>

<p>ゴールはRailsのデフォルトホーム画面を表示させるところまでです。</p>

<h2 id="手順">手順</h2>

<p>下記の手順をベースに進めていきます‥</p>

<p><a href="https://docs.docker.com/compose/rails/">Quickstart: Compose and Rails | Docker Documentation</a></p>

<h3 id="dockerfile">Dockerfile</h3>

<p>適当なディレクトリを用意して、<code class="language-plaintext highlighter-rouge">Dockerfile</code>を下記の通り用意します。</p>

<div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">FROM</span><span class="s"> ruby:2.7</span>
<span class="k">RUN </span>apt-get update <span class="nt">-qq</span> <span class="o">&amp;&amp;</span> apt-get <span class="nb">install</span> <span class="nt">-y</span> nodejs yarnpkg
<span class="k">RUN </span><span class="nb">ln</span> <span class="nt">-s</span> /usr/bin/yarnpkg /usr/bin/yarn
<span class="k">RUN </span><span class="nb">mkdir</span> /app
<span class="k">WORKDIR</span><span class="s"> /app</span>
<span class="k">COPY</span><span class="s"> Gemfile /app/Gemfile</span>
<span class="k">COPY</span><span class="s"> Gemfile.lock /app/Gemfile.lock</span>
<span class="k">RUN </span>bundle <span class="nb">install</span>
<span class="k">COPY</span><span class="s"> . /app</span>

<span class="c"># Add a script to be executed every time the container starts.</span>
<span class="k">COPY</span><span class="s"> entrypoint.sh /usr/bin/</span>
<span class="k">RUN </span><span class="nb">chmod</span> +x /usr/bin/entrypoint.sh
<span class="k">ENTRYPOINT</span><span class="s"> ["entrypoint.sh"]</span>
<span class="k">EXPOSE</span><span class="s"> 3000</span>

<span class="c"># Start the main process.</span>
<span class="k">CMD</span><span class="s"> ["rails", "server", "-b", "0.0.0.0"]</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">yarnpkg</code>でyarnを入れると、yarn という実行ファイルではなく <code class="language-plaintext highlighter-rouge">yarnpkg</code> という実行ファイルになってしまうので、シンボリックリンクを作成している点に留意。</li>
</ul>

<h3 id="初期gemfile">初期Gemfile</h3>

<p>下記の通り<code class="language-plaintext highlighter-rouge">Gemfile</code>と<code class="language-plaintext highlighter-rouge">Gemfile.lock</code>を用意します。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">source</span> <span class="s1">'https://rubygems.org'</span>
<span class="n">gem</span> <span class="s1">'rails'</span><span class="p">,</span> <span class="s1">'~&gt;6'</span>
</code></pre></div></div>

<ul>
  <li>今回は Rails v6 （現時点の最新バージョン）を使います</li>
</ul>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">touch </span>Gemfile.lock
</code></pre></div></div>

<ul>
  <li>現段階では <code class="language-plaintext highlighter-rouge">Gemfile.lock</code> は空でOK</li>
</ul>

<h3 id="entrypointsh">entrypoint.sh</h3>

<p><code class="language-plaintext highlighter-rouge">Dockerfile</code>で<code class="language-plaintext highlighter-rouge">ENTRYPOINT</code>として定義している <code class="language-plaintext highlighter-rouge">entrypoint.sh</code> です。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="nb">set</span> <span class="nt">-e</span>

<span class="c"># Remove a potentially pre-existing server.pid for Rails.</span>
<span class="nb">rm</span> <span class="nt">-f</span> /app/tmp/pids/server.pid

<span class="c"># Then exec the container's main process (what's set as CMD in the Dockerfile).</span>
<span class="nb">exec</span> <span class="s2">"</span><span class="nv">$@</span><span class="s2">"</span>
</code></pre></div></div>

<h3 id="docker-composeyml">docker-compose.yml</h3>

<p><code class="language-plaintext highlighter-rouge">docker-compose.yml</code>を下記の通り用意します。</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">3'</span>
<span class="na">services</span><span class="pi">:</span>
  <span class="na">db</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">mysql:8.0</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">./tmp/db:/var/lib/mysql</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">MYSQL_ALLOW_EMPTY_PASSWORD=1</span>
  <span class="na">web</span><span class="pi">:</span>
    <span class="na">build</span><span class="pi">:</span> <span class="s">.</span>
    <span class="na">command</span><span class="pi">:</span> <span class="s">bash -c "rm -f tmp/pids/server.pid &amp;&amp; bundle exec rails s -p 3000 -b '0.0.0.0'"</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">.:/app</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">3000:3000"</span>
    <span class="na">depends_on</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">db</span>
</code></pre></div></div>

<ul>
  <li>MySQL は 8.0 （現時点の最新バージョン）を使用</li>
  <li><code class="language-plaintext highlighter-rouge">MYSQL_ALLOW_EMPTY_PASSWORD</code> を設定することで <code class="language-plaintext highlighter-rouge">password</code> が空でもrootで接続できるようにしておく</li>
</ul>

<h3 id="rails-new">rails new</h3>

<p><code class="language-plaintext highlighter-rouge">rails new</code> のコマンドをwebコンテナ上で実行してRailsのファイル群を生成します。</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>docker-compose run web bundle <span class="nb">exec </span>rails new <span class="nb">.</span> <span class="nt">--force</span> <span class="nt">--database</span><span class="o">=</span>mysql
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">--force</code> で既存ファイルを上書き</li>
  <li>DBはmysqlを指定</li>
</ul>

<p>Railsのファイル群が <code class="language-plaintext highlighter-rouge">rails new</code> コマンドによって出来上がったので build します。</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>docker-compose build
</code></pre></div></div>

<h3 id="dbホスト名変更">DBホスト名変更</h3>

<p>このままではDBに接続できません。なぜならば host 名を変更する必要があるからです。</p>

<p>下記の通り <code class="language-plaintext highlighter-rouge">config/database.yml</code> のhostの部分を <code class="language-plaintext highlighter-rouge">db</code> に置き換えましょう。</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">default</span><span class="pi">:</span> <span class="nl">&amp;default</span>
  <span class="na">adapter</span><span class="pi">:</span> <span class="s">mysql2</span>
  <span class="na">encoding</span><span class="pi">:</span> <span class="s">utf8mb4</span>
  <span class="na">pool</span><span class="pi">:</span> <span class="s">&lt;%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %&gt;</span>
  <span class="na">username</span><span class="pi">:</span> <span class="s">root</span>
  <span class="na">password</span><span class="pi">:</span>
  <span class="na">host</span><span class="pi">:</span> <span class="s">db</span>
<span class="na">development</span><span class="pi">:</span>
  <span class="na">&lt;&lt;</span><span class="pi">:</span> <span class="nv">*default</span>
  <span class="na">database</span><span class="pi">:</span> <span class="s">app_development</span>
<span class="na">test</span><span class="pi">:</span>
  <span class="na">&lt;&lt;</span><span class="pi">:</span> <span class="nv">*default</span>
  <span class="na">database</span><span class="pi">:</span> <span class="s">app_test</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">host</code> に <code class="language-plaintext highlighter-rouge">db</code> を設定
    <ul>
      <li><code class="language-plaintext highlighter-rouge">db</code> はコンテナ名になります</li>
    </ul>
  </li>
</ul>

<p>build後に docker-compose up します。</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>docker-compose up
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">localhost:3000</code> でRailsが立ち上がるのでアクセスしてみましょう。</p>

<h2 id="error-caching_sha2_password-could-not-be-loaded">Error: caching_sha2_password could not be loaded</h2>

<p>しかしここでRailsに接続すると、下記のようなエラーが発生します。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ActiveRecord::NoDatabaseError

Plugin caching_sha2_password could not be loaded: /usr//usr/lib/x86_64-linux-gnu/mariadb19/plugin/caching_sha2_password.so: cannot open shared object file: No such file or directory
</code></pre></div></div>

<p>これはwebコンテナが mysql 8.0 の<code class="language-plaintext highlighter-rouge">caching_sha2_password</code>認証方式に対応していないためです。</p>

<p>下記の手順で <code class="language-plaintext highlighter-rouge">caching_sha2_password</code> を <code class="language-plaintext highlighter-rouge">mysql_native_password</code>（旧来の認証方式）に変更しましょう。</p>

<h3 id="dbコンテナでmysqlクライアント起動">DBコンテナでmysqlクライアント起動</h3>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>docker-compose <span class="nb">exec </span>db bash
</code></pre></div></div>

<p>dbコンテナのbashを起動後にmysqlコマンドで接続します。</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">#</span><span class="w"> </span>mysql <span class="nt">-u</span> root
<span class="gp">Welcome to the MySQL monitor.  Commands end with ;</span><span class="w"> </span>or <span class="se">\g</span><span class="nb">.</span>
<span class="go">Your MySQL connection id is 9
Server version: 8.0.18 MySQL Community Server - GPL

</span><span class="c">...
</span></code></pre></div></div>

<h3 id="認証方式変更sql">認証方式変更SQL</h3>

<p>下記のクエリでユーザー一覧とその認証方式が閲覧できます。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mysql&gt; select User,Host,plugin from mysql.user;
+------------------+-----------+-----------------------+
| User             | Host      | plugin                |
+------------------+-----------+-----------------------+
| root             | %         | caching_sha2_password |
| mysql.infoschema | localhost | caching_sha2_password |
| mysql.session    | localhost | caching_sha2_password |
| mysql.sys        | localhost | caching_sha2_password |
| root             | localhost | caching_sha2_password |
+------------------+-----------+-----------------------+
5 rows in set (0.00 sec)
</code></pre></div></div>

<p>全て <code class="language-plaintext highlighter-rouge">caching_sha2_password</code> に設定されています。これを<code class="language-plaintext highlighter-rouge">mysql_native_password</code>に変更します。</p>

<p>今回対象となる <code class="language-plaintext highlighter-rouge">root@%</code> のユーザー設定を <code class="language-plaintext highlighter-rouge">ALTER USER</code> を使って変更しましょう。</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">ALTER</span> <span class="k">USER</span> <span class="s1">'root'</span><span class="o">@</span><span class="s1">'%'</span> <span class="n">IDENTIFIED</span> <span class="k">WITH</span> <span class="n">mysql_native_password</span> <span class="k">BY</span> <span class="s1">''</span><span class="p">;</span>
<span class="c1">-- Query OK, 0 rows affected (0.02 sec)</span>
</code></pre></div></div>

<p>変更されました。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mysql&gt; select User,Host,plugin from mysql.user;
+------------------+-----------+-----------------------+
| User             | Host      | plugin                |
+------------------+-----------+-----------------------+
| root             | %         | mysql_native_password |
| mysql.infoschema | localhost | caching_sha2_password |
| mysql.session    | localhost | caching_sha2_password |
| mysql.sys        | localhost | caching_sha2_password |
| root             | localhost | caching_sha2_password |
+------------------+-----------+-----------------------+
5 rows in set (0.00 sec)
</code></pre></div></div>

<h2 id="yay-youre-on-rails">“Yay! You’re on Rails!”</h2>

<p>DBが作成されていないよ、というメッセージが出るので <code class="language-plaintext highlighter-rouge">db:prepare</code> でテーブルを作成します。</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>docker-compose <span class="nb">exec </span>web bundle <span class="nb">exec </span>rails db:prepare
</code></pre></div></div>

<p>これでRailsのホーム画面が表示されるようになります。</p>

<p><img src="/images/posts/docker/railshome.png" alt="rails home" /></p>

<h2 id="参考">参考</h2>

<ul>
  <li>過去に同じことをやったときのエントリ: <a href="docker-compose-rails/">docker-compose で Rails 環境を構築する</a></li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="docker" /><category term="mysql" /><category term="rails" /><summary type="html"><![CDATA[docker-compose を使って Ruby 2.7 + Rails 6.0 + MySQL 8.0 の環境を構築してみたいと思います。ゴールはRailsのデフォルトホーム画面を表示させるところまでです。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/docker/yaml.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/docker/yaml.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">[MySQL]日付が歯抜けのデータを結合して日付毎に整理されたテーブルを作る</title><link href="https://blog.toshimaru.net/join-with-date-virtual-table/" rel="alternate" type="text/html" title="[MySQL]日付が歯抜けのデータを結合して日付毎に整理されたテーブルを作る" /><published>2018-10-07T00:00:00+09:00</published><updated>2018-10-07T00:00:00+09:00</updated><id>https://blog.toshimaru.net/join-with-date-virtual-table</id><content type="html" xml:base="https://blog.toshimaru.net/join-with-date-virtual-table/"><![CDATA[<h2 id="やりたいこと">やりたいこと</h2>

<p>下記の日付が歯抜けになっている2つのテーブル（テーブル1, テーブル2）のデータを日付毎に整理してテーブル3のようなデータを生成したい。</p>

<p><strong>テーブル1</strong></p>

<table>
  <thead>
    <tr>
      <th>日付</th>
      <th>商品販売数</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>2018-01-02</td>
      <td>10</td>
    </tr>
    <tr>
      <td>2018-01-04</td>
      <td>8</td>
    </tr>
    <tr>
      <td>2018-01-05</td>
      <td>3</td>
    </tr>
    <tr>
      <td>2018-01-07</td>
      <td>4</td>
    </tr>
    <tr>
      <td>2018-01-08</td>
      <td>5</td>
    </tr>
    <tr>
      <td>2018-01-10</td>
      <td>1</td>
    </tr>
  </tbody>
</table>

<p><strong>テーブル2</strong></p>

<table>
  <thead>
    <tr>
      <th>日付</th>
      <th>商品入荷数</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>2018-01-03</td>
      <td>20</td>
    </tr>
    <tr>
      <td>2018-01-05</td>
      <td>30</td>
    </tr>
    <tr>
      <td>2018-01-10</td>
      <td>10</td>
    </tr>
  </tbody>
</table>

<p><strong>テーブル3</strong></p>

<table>
  <thead>
    <tr>
      <th>日付</th>
      <th>商品入荷数</th>
      <th>商品販売数</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>2018-01-01</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <td>2018-01-02</td>
      <td>0</td>
      <td>10</td>
    </tr>
    <tr>
      <td>2018-01-03</td>
      <td>20</td>
      <td>0</td>
    </tr>
    <tr>
      <td>2018-01-04</td>
      <td>0</td>
      <td>8</td>
    </tr>
    <tr>
      <td>2018-01-05</td>
      <td>30</td>
      <td>3</td>
    </tr>
    <tr>
      <td>2018-01-06</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <td>2018-01-07</td>
      <td>0</td>
      <td>4</td>
    </tr>
    <tr>
      <td>2018-01-08</td>
      <td>0</td>
      <td>5</td>
    </tr>
    <tr>
      <td>2018-01-09</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <td>2018-01-10</td>
      <td>10</td>
      <td>1</td>
    </tr>
  </tbody>
</table>

<h2 id="前提環境">前提環境</h2>

<ul>
  <li>MySQL 5.7</li>
</ul>

<h2 id="方法">方法</h2>

<p>以前紹介した連番の仮想表を作るテクニックを駆使すればやりたいことが実現可能です。</p>

<p><a href="/mysql-virtual-table/">MySQLで連番の仮想表を作る</a></p>

<h3 id="日付だけのテーブルを作る">日付だけのテーブルを作る</h3>

<p>対象期間、つまり2018年1月1日〜2018年1月10日までのデータを生成します。</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="s1">'2018-01-01'</span> <span class="o">+</span> <span class="n">INTERVAL</span> <span class="n">seq_no</span> <span class="k">DAY</span> <span class="k">AS</span> <span class="nb">date</span>
<span class="k">FROM</span> <span class="p">(</span><span class="k">SELECT</span> <span class="o">@</span><span class="n">seq_no</span> <span class="p">:</span><span class="o">=</span> <span class="mi">0</span> <span class="k">AS</span> <span class="n">seq_no</span>
      <span class="k">UNION</span>
      <span class="k">SELECT</span> <span class="o">@</span><span class="n">seq_no</span> <span class="p">:</span><span class="o">=</span> <span class="o">@</span><span class="n">seq_no</span> <span class="o">+</span> <span class="mi">1</span> <span class="k">AS</span> <span class="n">seq_no</span> <span class="k">FROM</span> <span class="n">information_schema</span><span class="p">.</span><span class="n">COLUMNS</span>
      <span class="k">LIMIT</span> <span class="mi">10</span><span class="p">)</span> <span class="n">tmp</span><span class="p">;</span>
</code></pre></div></div>

<table>
  <thead>
    <tr>
      <th>date</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>2018-01-01</td>
    </tr>
    <tr>
      <td>2018-01-02</td>
    </tr>
    <tr>
      <td>2018-01-03</td>
    </tr>
    <tr>
      <td>2018-01-04</td>
    </tr>
    <tr>
      <td>2018-01-05</td>
    </tr>
    <tr>
      <td>2018-01-06</td>
    </tr>
    <tr>
      <td>2018-01-07</td>
    </tr>
    <tr>
      <td>2018-01-08</td>
    </tr>
    <tr>
      <td>2018-01-09</td>
    </tr>
    <tr>
      <td>2018-01-10</td>
    </tr>
  </tbody>
</table>

<h3 id="日付テーブルにデータをjoinする">日付テーブルにデータをJOINする</h3>

<p>上記の日付テーブルに実データをJOINしてやればうまくデータが生成できます。</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span>
    <span class="n">date_table</span><span class="p">.</span><span class="nb">date</span> <span class="k">AS</span> <span class="s1">'日付'</span><span class="p">,</span>
    <span class="n">IFNULL</span><span class="p">(</span><span class="n">table2</span><span class="p">.</span><span class="err">商品入荷数</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="k">AS</span> <span class="s1">'入荷数'</span><span class="p">,</span>
    <span class="n">IFNULL</span><span class="p">(</span><span class="n">table1</span><span class="p">.</span><span class="err">商品販売数</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="k">AS</span> <span class="s1">'販売数'</span>
<span class="k">FROM</span> <span class="p">(</span><span class="k">SELECT</span> <span class="s1">'2018-01-01'</span> <span class="o">+</span> <span class="n">INTERVAL</span> <span class="n">seq_no</span> <span class="k">DAY</span> <span class="k">AS</span> <span class="nb">date</span>
      <span class="k">FROM</span> <span class="p">(</span><span class="k">SELECT</span> <span class="o">@</span><span class="n">seq_no</span> <span class="p">:</span><span class="o">=</span> <span class="mi">0</span> <span class="k">AS</span> <span class="n">seq_no</span>
            <span class="k">UNION</span>
            <span class="k">SELECT</span> <span class="o">@</span><span class="n">seq_no</span> <span class="p">:</span><span class="o">=</span> <span class="o">@</span><span class="n">seq_no</span> <span class="o">+</span> <span class="mi">1</span> <span class="k">AS</span> <span class="n">seq_no</span> <span class="k">FROM</span> <span class="n">information_schema</span><span class="p">.</span><span class="n">COLUMNS</span>
            <span class="k">LIMIT</span> <span class="mi">10</span><span class="p">)</span> <span class="n">tmp</span><span class="p">)</span> <span class="n">date_table</span>
<span class="k">LEFT</span> <span class="k">JOIN</span> <span class="n">table1</span> <span class="k">ON</span> <span class="n">table1</span><span class="p">.</span><span class="err">日付</span> <span class="o">=</span> <span class="n">date_table</span><span class="p">.</span><span class="nb">date</span>
<span class="k">LEFT</span> <span class="k">JOIN</span> <span class="n">table2</span> <span class="k">ON</span> <span class="n">table2</span><span class="p">.</span><span class="err">日付</span> <span class="o">=</span> <span class="n">date_table</span><span class="p">.</span><span class="nb">date</span>
</code></pre></div></div>

<p>これで無事、得たかったデータを得ることができました。</p>

<table>
  <thead>
    <tr>
      <th>日付</th>
      <th>入荷数</th>
      <th>販売数</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>2018-01-01</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <td>2018-01-02</td>
      <td>0</td>
      <td>10</td>
    </tr>
    <tr>
      <td>2018-01-03</td>
      <td>20</td>
      <td>0</td>
    </tr>
    <tr>
      <td>2018-01-04</td>
      <td>0</td>
      <td>8</td>
    </tr>
    <tr>
      <td>2018-01-05</td>
      <td>30</td>
      <td>3</td>
    </tr>
    <tr>
      <td>2018-01-06</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <td>2018-01-07</td>
      <td>0</td>
      <td>4</td>
    </tr>
    <tr>
      <td>2018-01-08</td>
      <td>0</td>
      <td>5</td>
    </tr>
    <tr>
      <td>2018-01-09</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <td>2018-01-10</td>
      <td>10</td>
      <td>1</td>
    </tr>
  </tbody>
</table>

<h2 id="利用シーン">利用シーン</h2>

<p>日付毎にデータをグラフにプロットして可視化したいときにこのテクニックを使うと便利。</p>]]></content><author><name>Toshimaru</name></author><category term="mysql" /><summary type="html"><![CDATA[下記の日付が歯抜けになっている2つのテーブル（テーブル1, テーブル2）のデータを日付毎に整理してテーブル3のようなデータを生成したい。 テーブル1 テーブル2 テーブル3 以前紹介した連番の仮想表を作るテクニックを駆使すればやりたいことが実現可能です。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/sql1.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/sql1.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">MySQLで連番の仮想表を作る</title><link href="https://blog.toshimaru.net/mysql-virtual-table/" rel="alternate" type="text/html" title="MySQLで連番の仮想表を作る" /><published>2018-09-25T00:00:00+09:00</published><updated>2018-09-25T00:00:00+09:00</updated><id>https://blog.toshimaru.net/mysql-virtual-table</id><content type="html" xml:base="https://blog.toshimaru.net/mysql-virtual-table/"><![CDATA[<h2 id="やりたいこと">やりたいこと</h2>

<p>MySQLで実テーブルを参照せずに連番のデータを生成したい。</p>

<h2 id="前提環境">前提環境</h2>

<ul>
  <li>MySQL 5.7</li>
</ul>

<h2 id="方法">方法</h2>

<p>下記のようなSQLでやりたいことが実現できます。</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="o">@</span><span class="n">seq_no</span> <span class="p">:</span><span class="o">=</span> <span class="mi">1</span> <span class="k">AS</span> <span class="n">seq_no</span>
<span class="k">UNION</span>
<span class="k">SELECT</span> <span class="o">@</span><span class="n">seq_no</span> <span class="p">:</span><span class="o">=</span> <span class="o">@</span><span class="n">seq_no</span> <span class="o">+</span> <span class="mi">1</span> <span class="k">AS</span> <span class="n">seq_no</span>
<span class="k">FROM</span> <span class="n">information_schema</span><span class="p">.</span><span class="n">COLUMNS</span>
<span class="k">LIMIT</span> <span class="mi">10</span><span class="p">;</span>
</code></pre></div></div>

<p>ポイントとしては下記の通り。</p>

<ul>
  <li>全体の構成としては、2つの<code class="language-plaintext highlighter-rouge">SELECT</code>文を<code class="language-plaintext highlighter-rouge">UNION</code>を使って結合しているというもの</li>
  <li><code class="language-plaintext highlighter-rouge">@seq_no</code>という変数を用意</li>
  <li>１つ目の<code class="language-plaintext highlighter-rouge">SELECT</code>文で変数を初期化する</li>
  <li>２つ目の<code class="language-plaintext highlighter-rouge">SELECT</code>文で初期化した変数のインクリメントの処理を行う
    <ul>
      <li>その際にデータ件数を確保するために、MySQLで最初に用意されている<code class="language-plaintext highlighter-rouge">information_schema.COLUMNS</code>を参照する（中身のデータは実際には使わない）</li>
      <li><code class="language-plaintext highlighter-rouge">LIMIT</code>で取得したいデータ件数を指定する</li>
    </ul>
  </li>
</ul>

<p>このSQLで得られる結果は下記の通り。</p>

<table>
  <thead>
    <tr>
      <th>seq_no</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
    </tr>
    <tr>
      <td>2</td>
    </tr>
    <tr>
      <td>3</td>
    </tr>
    <tr>
      <td>4</td>
    </tr>
    <tr>
      <td>5</td>
    </tr>
    <tr>
      <td>6</td>
    </tr>
    <tr>
      <td>7</td>
    </tr>
    <tr>
      <td>8</td>
    </tr>
    <tr>
      <td>9</td>
    </tr>
    <tr>
      <td>10</td>
    </tr>
  </tbody>
</table>

<p>これで1から10までの連番のデータをSQLだけで得ることができました。</p>

<h2 id="応用編">応用編</h2>

<p>上記で紹介したテクニックを使えばいろいろなことがSQLで実現できます。</p>

<h3 id="0からデクリメント">0からデクリメント</h3>

<p>まずはインクリメントの逆、デクリメント。</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="o">@</span><span class="n">seq_no</span> <span class="p">:</span><span class="o">=</span> <span class="mi">0</span> <span class="k">AS</span> <span class="n">seq_no</span>
<span class="k">UNION</span>
<span class="k">SELECT</span> <span class="o">@</span><span class="n">seq_no</span> <span class="p">:</span><span class="o">=</span> <span class="o">@</span><span class="n">seq_no</span> <span class="o">-</span> <span class="mi">1</span> <span class="k">AS</span> <span class="n">seq_no</span>
<span class="k">FROM</span> <span class="n">information_schema</span><span class="p">.</span><span class="n">COLUMNS</span>
<span class="k">LIMIT</span> <span class="mi">5</span><span class="p">;</span>
</code></pre></div></div>

<p><strong>結果</strong></p>

<table>
  <thead>
    <tr>
      <th>seq_no</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
    </tr>
    <tr>
      <td>-1</td>
    </tr>
    <tr>
      <td>-2</td>
    </tr>
    <tr>
      <td>-3</td>
    </tr>
    <tr>
      <td>-4</td>
    </tr>
  </tbody>
</table>

<h3 id="値を倍加させる">値を倍加させる</h3>

<p>値を倍々にしていってみます。</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="o">@</span><span class="n">seq_no</span> <span class="p">:</span><span class="o">=</span> <span class="mi">1</span> <span class="k">AS</span> <span class="n">seq_no</span>
<span class="k">UNION</span>
<span class="k">SELECT</span> <span class="o">@</span><span class="n">seq_no</span> <span class="p">:</span><span class="o">=</span> <span class="o">@</span><span class="n">seq_no</span> <span class="o">*</span> <span class="mi">2</span> <span class="k">AS</span> <span class="n">seq_no</span>
<span class="k">FROM</span> <span class="n">information_schema</span><span class="p">.</span><span class="n">COLLATIONS</span>
<span class="k">LIMIT</span> <span class="mi">10</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">information_schema.COLUMNS</code> を使うと<code class="language-plaintext highlighter-rouge">seq_no</code>値が大きくなりすぎてしまい<code class="language-plaintext highlighter-rouge">DOUBLE value is out of range</code>というエラーが発生するので<code class="language-plaintext highlighter-rouge">information_schema.COLLATIONS</code>を使用</li>
</ul>

<p><strong>結果</strong></p>

<table>
  <thead>
    <tr>
      <th>seq_no</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
    </tr>
    <tr>
      <td>2</td>
    </tr>
    <tr>
      <td>4</td>
    </tr>
    <tr>
      <td>8</td>
    </tr>
    <tr>
      <td>16</td>
    </tr>
    <tr>
      <td>32</td>
    </tr>
    <tr>
      <td>64</td>
    </tr>
    <tr>
      <td>128</td>
    </tr>
    <tr>
      <td>256</td>
    </tr>
    <tr>
      <td>512</td>
    </tr>
  </tbody>
</table>

<h3 id="直近30日間の日付をリストアップ">直近30日間の日付をリストアップ</h3>

<p>直近30日間の日付をリストアップしてみる。</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">CURDATE</span><span class="p">()</span> <span class="o">-</span> <span class="n">INTERVAL</span> <span class="n">seq_no</span> <span class="k">DAY</span> <span class="k">AS</span> <span class="nb">date</span>
<span class="k">FROM</span> <span class="p">(</span><span class="k">SELECT</span> <span class="o">@</span><span class="n">seq_no</span> <span class="p">:</span><span class="o">=</span> <span class="mi">0</span> <span class="k">AS</span> <span class="n">seq_no</span>
      <span class="k">UNION</span>
      <span class="k">SELECT</span> <span class="o">@</span><span class="n">seq_no</span> <span class="p">:</span><span class="o">=</span> <span class="o">@</span><span class="n">seq_no</span> <span class="o">+</span> <span class="mi">1</span> <span class="k">AS</span> <span class="n">seq_no</span> <span class="k">FROM</span> <span class="n">information_schema</span><span class="p">.</span><span class="n">COLUMNS</span>
      <span class="k">LIMIT</span> <span class="mi">30</span><span class="p">)</span> <span class="n">tmp</span><span class="p">;</span>
</code></pre></div></div>

<p><strong>結果</strong></p>

<table>
  <thead>
    <tr>
      <th>date</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>2018-09-24</td>
    </tr>
    <tr>
      <td>2018-09-23</td>
    </tr>
    <tr>
      <td>2018-09-22</td>
    </tr>
    <tr>
      <td>2018-09-21</td>
    </tr>
    <tr>
      <td>（…省略…）</td>
    </tr>
    <tr>
      <td>2018-08-27</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>執筆時点の今日の日付は<code class="language-plaintext highlighter-rouge">2018-09-25</code></li>
  <li><code class="language-plaintext highlighter-rouge">CURDATE()</code>から<code class="language-plaintext highlighter-rouge">seq_no</code>日分を引き算して日付を出力</li>
</ul>

<h2 id="注意点">注意点</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">information_schema.COLUMNS</code>を使った場合、<code class="language-plaintext highlighter-rouge">LIMIT</code>で指定できる値は<code class="language-plaintext highlighter-rouge">information_schema.COLUMNS</code>のMAX値までという成約がある</li>
  <li>MySQL7から導入された<a href="https://dev.mysql.com/doc/refman/8.0/en/with.html">WITH syntax</a>でCTEすればもっとシンプルにクエリが書けそう</li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="mysql" /><summary type="html"><![CDATA[MySQLで実テーブルを参照せずに連番のデータを生成したい。 前提環境 MySQL 5.7 方法 下記のようなSQLでやりたいことが実現できます。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/virtual-table-og.jpg" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/virtual-table-og.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Rails でトランザクション分離レベルを設定する方法</title><link href="https://blog.toshimaru.net/rails-4-transaction-isolation/" rel="alternate" type="text/html" title="Rails でトランザクション分離レベルを設定する方法" /><published>2015-01-19T00:00:00+09:00</published><updated>2019-09-21T00:00:00+09:00</updated><id>https://blog.toshimaru.net/rails-4-transaction-isolation</id><content type="html" xml:base="https://blog.toshimaru.net/rails-4-transaction-isolation/"><![CDATA[<div class="info">
  <h5>追記</h5>
  <p>Rails5, Rails6 向けに記事の内容をアップデートしました（2019/09/21）</p>
</div>

<h2 id="mysqlのトランザクション分離レベル">MySQLのトランザクション分離レベル</h2>

<p>突然ですが問題です。MySQLのデフォルトのトランザクション分離レベルは何でしょうか？</p>

<blockquote>
  <p><strong>REPEATABLE READ</strong></p>

  <p>This is the default isolation level for InnoDB.</p>
</blockquote>

<p>via. <a href="https://dev.mysql.com/doc/refman/8.0/en/innodb-transaction-isolation-levels.html#isolevel_repeatable-read">MySQL :: MySQL 8.0 Reference Manual :: 15.7.2.1 Transaction Isolation Levels</a></p>

<p>ハイ、答えは「<strong>REPEATABLE READ</strong>」ですネ。</p>

<h2 id="railsでトランザクション分離レベルを設定">Railsでトランザクション分離レベルを設定</h2>

<p>続いての問題です。Railsにおいてトランザクション分離レベルを設定するにはどうしたらよいでしょうか？ 実は Rails 3 と Rails 4 と Rails 5 以降ではトランザクション分離レベルの設定方法はそれぞれ異なっています。</p>

<h3 id="rails-3">Rails 3</h3>

<p>Rails 3の時代では <code class="language-plaintext highlighter-rouge">execute</code> で直接トランザクション分離レベルを設定する必要がありました。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="p">.</span><span class="nf">connection</span><span class="p">.</span><span class="nf">execute</span><span class="p">(</span><span class="s1">'SET TRANSACTION ISOLATION LEVEL READ COMMITTED'</span><span class="p">)</span>
<span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="p">.</span><span class="nf">transaction</span> <span class="k">do</span>
  <span class="c1"># ...</span>
<span class="k">end</span>
</code></pre></div></div>

<h3 id="rails-4x">Rails 4.x</h3>

<p>Rails 4からは<code class="language-plaintext highlighter-rouge">transaction</code>のオプションとしてトランザクション分離レベルを設定可能になりました。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="p">.</span><span class="nf">transaction</span><span class="p">(</span><span class="ss">isolation: :read_committed</span><span class="p">)</span> <span class="k">do</span>
  <span class="c1"># ...</span>
<span class="k">end</span>
</code></pre></div></div>

<h3 id="rails-5-以降">Rails 5 以降</h3>

<p>Rails 5からは <code class="language-plaintext highlighter-rouge">ActiveRecord::Base</code> の代わりに <code class="language-plaintext highlighter-rouge">ApplicationRecord</code> が使うことができます。</p>

<blockquote>
  <p>ApplicationRecord is a new superclass for all app models</p>
</blockquote>

<p>via. <a href="https://edgeguides.rubyonrails.org/5_0_release_notes.html">Ruby on Rails 5.0 Release Notes — Ruby on Rails Guides</a></p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">ApplicationRecord</span><span class="p">.</span><span class="nf">transaction</span><span class="p">(</span><span class="ss">isolation: :read_committed</span><span class="p">)</span> <span class="k">do</span> 
  <span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="p">.</span><span class="nf">lock</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
  <span class="n">user</span><span class="p">.</span><span class="nf">update!</span> <span class="ss">name: </span><span class="s2">"TEST"</span>
<span class="k">end</span>
</code></pre></div></div>

<p>上記のコードを pry で実行した際に流れるクエリは下記の通りです。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   (0.5ms)  SET TRANSACTION ISOLATION LEVEL READ COMMITTED
   (0.3ms)  BEGIN
  User Load (0.9ms)  SELECT  `users`.* FROM `users` WHERE `users`.`id` = 1 LIMIT 1 FOR UPDATE
  User Update (0.4ms)  UPDATE `users` SET `name` = 'TEST', `updated_at` = '2019-09-20 16:34:31' WHERE `users`.`id` = 1
   (1.5ms)  COMMIT
=&gt; true
</code></pre></div></div>

<h2 id="有効なトランザクション分離レベル">有効なトランザクション分離レベル</h2>

<p>Railsで設定可能かつ有効な<code class="language-plaintext highlighter-rouge">isolation</code>レベルは何でしょうか？　答えは下記４つになります。</p>

<blockquote>
  <p>Valid isolation levels are:</p>

  <ul>
    <li><code class="language-plaintext highlighter-rouge">:read_uncommitted</code></li>
    <li><code class="language-plaintext highlighter-rouge">:read_committed</code></li>
    <li><code class="language-plaintext highlighter-rouge">:repeatable_read</code></li>
    <li><code class="language-plaintext highlighter-rouge">:serializable</code></li>
  </ul>
</blockquote>

<p>via. <a href="https://railsdoc.github.io/classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-transaction-label-Transaction+isolation">ActiveRecord::ConnectionAdapters::DatabaseStatements | RailsDoc</a></p>

<h2 id="分離レベルとダーティリードファジーリードファントムリードの関係">分離レベルとダーティリード、ファジーリード、ファントムリードの関係</h2>

<p>分離レベルとダーティリード、ファジーリード、ファントムリードそれぞれの関係性は以下の通り。</p>

<table>
  <thead>
    <tr>
      <th>トランザクション分離レベル</th>
      <th>ダーティリード</th>
      <th>ファジーリード</th>
      <th>ファントムリード</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>READ UNCOMMITTED</strong></td>
      <td>💀発生する</td>
      <td>💀発生する</td>
      <td>💀発生する</td>
    </tr>
    <tr>
      <td><strong>READ COMMITTED</strong></td>
      <td>発生しない</td>
      <td>💀発生する</td>
      <td>💀発生する</td>
    </tr>
    <tr>
      <td><strong>REPEATABLE READ</strong></td>
      <td>発生しない</td>
      <td>発生しない</td>
      <td>💀発生する</td>
    </tr>
    <tr>
      <td><strong>SERIALIZABLE</strong></td>
      <td>発生しない</td>
      <td>発生しない</td>
      <td>発生しない</td>
    </tr>
  </tbody>
</table>

<p>via. <a href="https://qiita.com/PruneMazui/items/4135fcf7621869726b4b">[RDBMS][SQL]トランザクション分離レベルについて極力分かりやすく解説 - Qiita</a></p>

<h2 id="最後に">最後に</h2>

<p>適切なトランザクション分離レベルで適切なトランザクション処理をしましょう！</p>

<h2 id="参考">参考</h2>

<ul>
  <li><a href="https://tkrd.hatenadiary.org/entry/20131121/1385044179">Rails &amp; MySQL: トランザクション分離レベルをグローバルに設定する</a></li>
  <li><a href="https://railsdoc.github.io/classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-transaction-label-Transaction+isolation">ActiveRecord::ConnectionAdapters::DatabaseStatements | RailsDoc</a></li>
  <li><a href="https://qiita.com/PruneMazui/items/4135fcf7621869726b4b">[RDBMS][SQL]トランザクション分離レベルについて極力分かりやすく解説 - Qiita</a></li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="rails" /><category term="activerecord" /><category term="mysql" /><summary type="html"><![CDATA[突然ですが問題です。MySQLのデフォルトのトランザクション分離レベルは何でしょうか？　続いての問題です。Railsにおいてトランザクション分離レベルを設定するにはどうしたらよいでしょうか？ 実は Rails 3 と Rails 4 と Rails 5 以降ではトランザクション分離レベルの設定方法はそれぞれ異なっています。]]></summary></entry><entry><title type="html">MySQL での日付の範囲指定</title><link href="https://blog.toshimaru.net/mysql/" rel="alternate" type="text/html" title="MySQL での日付の範囲指定" /><published>2011-11-08T00:00:00+09:00</published><updated>2011-11-08T00:00:00+09:00</updated><id>https://blog.toshimaru.net/mysql</id><content type="html" xml:base="https://blog.toshimaru.net/mysql/"><![CDATA[<p>MySQL での日付の範囲指定は、 <code class="language-plaintext highlighter-rouge">between</code> を使うのがインデックスも効いてGOODな感じ.</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">items</span>
<span class="k">where</span> 
    <span class="n">created_at</span> <span class="k">between</span> <span class="s1">'2010-01-01'</span> <span class="k">and</span> <span class="s1">'2010-01-01'</span> <span class="o">+</span> <span class="n">interval</span> <span class="mi">30</span> <span class="k">day</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="参考">参考</h3>

<ul>
  <li><a href="http://sj6.org/mysql_datetime_index_faster/">datetime型のカラムから日付データを引っ張ってくる際の高速化</a></li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="mysql" /><summary type="html"><![CDATA[MySQL での日付の範囲指定は between を使うのがインデックスも効いてGOODな感じ。]]></summary></entry></feed>