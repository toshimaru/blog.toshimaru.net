<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="https://blog.toshimaru.net/feed/by_tag/web.xml" rel="self" type="application/atom+xml" /><link href="https://blog.toshimaru.net/" rel="alternate" type="text/html" /><updated>2023-04-21T11:44:23+09:00</updated><id>https://blog.toshimaru.net/feed/by_tag/web.xml</id><title type="html">Hack Your Design!</title><subtitle>toshimaruの技術系なブログ</subtitle><author><name>Toshimaru</name></author><entry><title type="html">SEOという言葉の醜悪さ、SEOではなくクローラー・人間のための最適化を</title><link href="https://blog.toshimaru.net/goodbye-seo-hello-gco/" rel="alternate" type="text/html" title="SEOという言葉の醜悪さ、SEOではなくクローラー・人間のための最適化を" /><published>2016-11-29T00:00:00+09:00</published><updated>2016-11-29T00:00:00+09:00</updated><id>https://blog.toshimaru.net/goodbye-seo-hello-gco</id><content type="html" xml:base="https://blog.toshimaru.net/goodbye-seo-hello-gco/"><![CDATA[<p>SEOという言葉が嫌いだ。そこにはビジネスがあり、カネがあり、カネの匂いを嗅ぎつけたSEO業者たちがいる。</p>

<p>最近、DeNAの運営するキュレーションメディア、<a href="https://welq.jp/">WELQ</a>でこんなニュースがあった。</p>

<ul>
  <li><a href="http://www.itmedia.co.jp/news/articles/1610/26/news117.html">「死にたい」検索トップの「welq」の記事、DeNAが広告削除　「不適切」指摘受け - ITmedia ニュース</a></li>
  <li><a href="https://www.landerblue.co.jp/blog/?p=30141">DeNAがやってるウェルク（Welq）っていうのが企業としてやってはいけない一線を完全に越えてる件（第１回）</a></li>
</ul>

<p>このような指摘を受け、DeNAは下記のような発表を出した。</p>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">【WELQからのお知らせ】「専門家による記事確認および記事内容に関する通報フォームの設置」について<a href="https://t.co/73waKiYTpg">https://t.co/73waKiYTpg</a> <a href="https://t.co/0TvY7psRlu">https://t.co/0TvY7psRlu</a></p>&mdash; WELQ - ウェルク (@welq_pr) <a href="https://twitter.com/welq_pr/status/802082119552004096">November 25, 2016</a></blockquote>

<p>僕はこの一連の件に関してあれこれうるさく言うつもりもないしその言葉も持ち合わせてないが、SEOについて最近ぼんやり考えていることを再考するきっかけとなったのでそこらへんを書いてみるとする。</p>

<h2 id="seoという言葉の醜悪さ">SEOという言葉の醜悪さ</h2>

<p>SEO、サーチエンジン最適化という言葉にどことなく醜悪さを感じてしまうのは僕だけだろうか。</p>

<p>サーチエンジン最適化という行為そのものは必要なことだ。Googleに適切にページを評価してもらうために最適化を行う。Webサイト運営者であれば誰もがすべきことであろう。しかしその最適化のテクニックが逆手に取られ＜招かれざるページ＞が検索順位の上位に上がってしまうことが往々にしてある。</p>

<p>あなたもこんな経験はないだろうか。あなたは検索したい物事があってキーワードを検索フォームに入れて検索する。一番上に出てくるそれらしき見出しをクリックする。しかしそのページは広告、アフィリエイト、外部リンクで埋め尽くされている。まともに読めるコンテンツはファーストビューには全くない。スクロールを進める。どうやらここから本文だ、とあなたは読み進める。そのコンテンツは内容スカスカの低品質記事だった。</p>

<p>このように上がってくるページはいわゆる<a href="https://ja.wikipedia.org/wiki/%E6%A4%9C%E7%B4%A2%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%B3%E3%82%B9%E3%83%91%E3%83%A0">検索エンジンスパム</a>と呼ばれユーザーから忌み嫌われるものだ。</p>

<p>もちろんこういった低品質ページを弾くためのアルゴリズム改善にGoogleは日々心血注いでいる。そしてそのアルゴリズムのアップデート・スパム対策は一定の効果をもたらしている（参考: <a href="https://www.google.com/intl/ja_ALL/insidesearch/howsearchworks/fighting-spam.html">スパム対策 – 検索サービス – Google</a>）。</p>

<p>一方でアルゴリズムで全てのスパムを弾くことはできていないのが現実だ。今でもGoogleの検索結果上位にスパムページが上がってくることは散見される事象だ。このようなGoogleのアルゴリズムの隙間を縫ってページを上げることを<a href="https://ferret-plus.com/1924">ブラックハットSEO</a>という（反対語はホワイトハットSEO）。</p>

<p>このようなブラックハットSEOが横行すると、低品質ページが検索結果の上位を占めることとなり、検索の主体としてのユーザーがヘイトを溜めていくこととなる。そしてユーザーはSEOという行為にある種の悪どさを感じてしまう。</p>

<h2 id="google-crawler-optimization">Google Crawler Optimization</h2>

<p>僕はそのどことなく小賢しい響きのあるSEOに代えて別な言葉を提唱したい。<strong>Google Crawler Optimization</strong>（以下GCO）、つまりGoogleクローラのための最適化だ。といっても表面的に言っていることはSEOと同じである。</p>

<p>SEOの文脈でサーチエンジンといった場合、たいていの場合がGoogleの検索エンジンのことを指すので、サーチエンジン最適化はGoogle検索エンジン最適化とも言える。そして検索エンジン最適化のためにはサイトを巡回してくるクローラー（Googlebot）を相手に最適化をするのでそれはクローラー最適化とも言える。</p>

<p>ではなぜSEOとGCO区別したいかというと、それぞれが目指すゴール・目的をはっきりと分けたかったからだ。</p>

<h2 id="seoとgcoの違い">SEOとGCOの違い</h2>

<p>SEOとGCOの違いはこうだ<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>。</p>

<table>
  <thead>
    <tr>
      <th> </th>
      <th>SEO</th>
      <th>GCO</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>目的</strong></td>
      <td>ページの順位を上げること</td>
      <td>ページを適切にGoolgeクローラーに適切に解釈させること<br />（その結果として順位が上がろうが下がろうが関係ない）</td>
    </tr>
    <tr>
      <td><strong>やり方</strong></td>
      <td>1. 正攻法なホワイトハットSEOによって順位を上げる<br />2. 不正なブラックハットSEOによって順位を上げる</td>
      <td>- ホワイトハットSEOの手法のみを許容する<br />- Googleの公式ガイドライン（<a href="https://static.googleusercontent.com/media/www.Google.com/ja//intl/ja/webmasters/docs/search-engine-optimization-starter-guide-ja.pdf">検索エンジン最適化スターターガイド</a>, <a href="https://support.google.com/webmasters/answer/35769?hl=ja">ウェブマスター向けガイドライン</a>）を忠実に実施、その他世に溢れるSEOテクニック情報などは無視<br />- クローラー最適化の一環としてTwitterクローラ最適化・Facebookクローラ最適化なども行う（OGタグなどの各種タグ設定）</td>
    </tr>
  </tbody>
</table>

<p>僕も本ブログなどはそれなりにSEOを意識して作っている。しかしその目的はサイトランクを上げることではない。サイトを適切にGoogleに評価してもらうためだ。評価の結果別にランクが下になろうとあまり気にしない。それがGoogleの下した評価であり勝負の結果だからだ<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup>。</p>

<p>みんながGoogleの推奨する最適化を行って同じ土俵に立った上で勝敗はGoogleのアルゴリズムに任せようね、ってスタンスが僕は一番スッキリする。</p>

<p>とは言っても全ての人が土俵に立てるわけでもないし、土俵の立ち方がわからない人もいる。そういう人たちをサポートするためにSEOビジネスは今後も必要だし、生き続けていく必要があるだろう。</p>

<h2 id="ユーザーファーストを貫こう">ユーザーファーストを貫こう</h2>

<p>最終的にGoogleが見据えるのはユーザーだ。ユーザーにとって価値のある記事を届けるためのアルゴリズムだ。なので我々もGoogleのための最適化を行うならば、基本的にはその先にいるユーザーのことを考え、ユーザーファーストを貫くべきだろう。</p>

<p>「<strong>HTTPS化するとページランク上がるらしいから、HTTPSにしとこうぜ</strong>」</p>

<p>違う。ユーザーの通信をよりセキュアなものにするためにHTTPS化をするのであって、順位を上げるためではない。</p>

<p>日本ではあまり大きな声で言う人は少ないが、スノーデン事件以降、HTTPS/TLSでユーザーの通信内容を守るということは個人情報保護において極めて重要だ。</p>

<p>「<strong>検索結果に露出増えるらしいからAMP対応しようぜ</strong>」</p>

<p>違う。高速なWebブラウジング体験を実現するためにAMPというフォーマットを使うのであって、検索結果への露出は副次的効果だ。</p>

<p>Googleは高速なWeb体験を重要視する。なぜならGoogleはWebページのレスポンスが遅くなると多くのユーザーがページを離脱することを数字的なエビデンスをもとに知っているからだ。そして世界を見渡せば通信環境が劣悪な国・地域に住むユーザーがたくさんいることも知っている。彼らのためな高速なHTMLサブセットがAMPだ。</p>

<p>そう考えるとAMPだけ速ければ良いという考えにはならず、AMP以外の通常ページだってユーザー・ファーストという点で速くあるべきだ。</p>

<h2 id="正しいseoへと向かうために">正しいSEOへと向かうために</h2>

<p>真摯にSEOと向き合いきちんとSEOが良い方向にいくように情報発信しているSEOの専門家の方もいる。名前を挙げるとたとえば<a href="https://twitter.com/tsuj">@tsuj</a>さんだ。</p>

<p>辻さんのような方がSEO専門家という立場から、モラルのないSEO業者を監視・批判していくことでSEO業界全体が適切な良い方向に向かうことを期待したい。</p>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">昔、医師監修に関わった事がありますし、いまやっている人の話も聞きますが、大変。専門医監修を十分な品質で行うのは大きなコストがかかりますし、医師不足ですのでそもそも困難です。<br />記事の大量掲載をするサイトで十分な品質での医師監修の体制を作るのは、無理な気がします。</p>&mdash; 辻正浩 | Masahiro Tsuji (@tsuj) <a href="https://twitter.com/tsuj/status/802472803983179776">November 26, 2016</a></blockquote>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">Googleで行われる全検索の5%は健康関係というのは周知の事実なのでそこに金脈があることは明らかでしたがモラルの壁があったのですよね。<br />ですが大手がその壁を無視して大儲けしたので今は二匹目のドジョウ狙いが次々と産まれている所。このままだと悪質な医療情報が更にネットに蔓延します。</p>&mdash; 辻正浩 | Masahiro Tsuji (@tsuj) <a href="https://twitter.com/tsuj/status/802477361555849216">November 26, 2016</a></blockquote>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">医療情報関連の問題の大きさを認識していない人たちが作った劣化welqみたいなサイトも既にあるみたいですけど。welqだけで終わる問題ではないはずなので、早めに諦めて撤退しちゃったほうがいいんじゃないですかね。最低でもwelqと同程度かそれ以下の品質の所は。</p>&mdash; 辻正浩 | Masahiro Tsuji (@tsuj) <a href="https://twitter.com/tsuj/status/802480245202792449">November 26, 2016</a></blockquote>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">独立してから5年間、わたしは健康・医療関連の仕事は色々と判断が難しいので全部断ってきた位ですので、気軽にやっちゃう人／会社が信じられないのですが。医療関連の情報に関わるのは本当に怖いし覚悟が必要と思っていますし、逸脱したところがうまくいくべきとは思えません。</p>&mdash; 辻正浩 | Masahiro Tsuji (@tsuj) <a href="https://twitter.com/tsuj/status/802481887545462784">November 26, 2016</a></blockquote>

<p>またライターという立場から朽木さん（<a href="twitter.com/amanojerk">@amanojerk</a>）も積極的に本件に関して情報発信・問題提起をしている。</p>

<p><a class="twitter-moment" href="https://twitter.com/i/moments/803077459264450562">【随時更新】信頼性の高い医療情報サイトまとめ</a></p>

<p>朽木さんのようにしっかりとライティング活動をしている方もいるので、本件によって変にライターが貶められないことを祈るばかりだ。</p>

<h2 id="よりよいwebへと向かうために">よりよいWEBへと向かうために</h2>

<p>インターネットの海にある情報は今も昔も玉石混交だ。それをGoogleが圧倒的なテクノロジーを武器に情報フィルタリングをかけてくれている。Googleのふるいが正しく機能している限りにおいて、情報の絶対量が多くなることは良い事だ。問題は玉に混じった石ころたちで、これにどう対処していくべきか。</p>

<p><img src="/images/posts/google-result.jpg" alt="google result" /></p>

<p>:point_up:<strong>ページに遷移する手前の検索結果画面でGoogleがユーザーへ情報を提供するケースも増えてきている</strong></p>

<p>正直言うと検索エンジンスパムに関しては僕は楽観的だ。アルファ碁やGoogle Photo、Google翻訳でご存字の通り、昨今のGoogleのディープラーニング技術の進化は目を見張るものがある。人間にしかできなかった行為が次々に機械に置き換えられていく。スパムも結局精度の問題でしっかり機械が学習してスパム判定精度が上がっていけばスパムは適切に弾けるだろう。</p>

<p>ただ今回のWELQの記事はどうかというとちょっと疑問で、WELQの提供する圧倒的な分量で一部の専門家にしかその真偽がわからないような内容をGoogleが正しく真偽も含めてランク付けできるか？というと僕にはよくわからない（剽窃行為は判定できそうだが）。</p>

<p>そうなると、情報発信者としてのモラルの問題になってくる。適当な情報は発信しない、引用と自分の文章を区別する、きちんと一次情報に当たる、情報ソースを明記する、など。そこはやっぱり、ビジネスという軸とは別に情報発信者としてモラルが必要だ。</p>

<p>より良いWEBへと向かうためにキュレーションメディア各位には石な情報を量産するのではなく、きちんと玉な情報を発信していってもらいたいと願います。</p>

<h2 id="welqについて">WELQについて</h2>

<p>まぁここまで書いたのでWELQについて一言いっておくと、DeNAくらいの規模の会社がSEOノウハウ・人・モノ・金を総動員させてパワープレイすればそりゃページのランクは上がる。しかし医療・健康というテーマ・分野においては人の命がかかわってくる場合もあるので、そこは情報発信の立場として慎重になるべきでしょう。<a href="http://dena-palette.jp/">DeNAパレットメディア</a>含め、良い情報がウェブに増えていくことは良いことですので頑張ってください。</p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>あくまでも上定義は僕個人が考えた定義であって一般的なSEOの定義とは異なる点に留意 <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>とはいえ気合を入れて書いた記事が他のページに負けたりするのはちょっと悔しい <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Toshimaru</name></author><category term="seo" /><category term="web" /><summary type="html"><![CDATA[SEOという言葉が嫌いだ。そこにはビジネスがあり、カネがあり、カネの匂いを嗅ぎつけたSEO業者たちがいる。最近、DeNAの運営するキュレーションメディア、WELQでこんなニュースがあった。 「死にたい」検索トップの「welq」の記事、DeNAが広告削除　「不適切」指摘受け - ITmedia ニュース DeNAがやってるウェルク（Welq）っていうのが企業としてやってはいけない一線を完全に越えてる件（第１回） このような指摘を受け、DeNAは下記のような発表を出した。僕はこの一連の件に関してあれこれうるさく言うつもりもないしその言葉も持ち合わせてないが、SEOについて最近ぼんやり考えていることを再考するきっかけとなったのでそこらへんを書いてみるとする。]]></summary></entry><entry><title type="html">Roppongi.rbで「Rails高速化戦略」を発表しました</title><link href="https://blog.toshimaru.net/roppongirb-speeding-up-rails/" rel="alternate" type="text/html" title="Roppongi.rbで「Rails高速化戦略」を発表しました" /><published>2016-07-19T00:00:00+09:00</published><updated>2016-07-19T00:00:00+09:00</updated><id>https://blog.toshimaru.net/roppongirb-speeding-up-rails</id><content type="html" xml:base="https://blog.toshimaru.net/roppongirb-speeding-up-rails/"><![CDATA[<p>自分がオーガナイザーを務めた <a href="http://roppongirb.connpass.com/event/33502/">Roppongi.rb #1</a>で「Rails高速化戦略」という題で発表してきました。スライドは下記になります。</p>

<script async="" class="speakerdeck-embed" data-id="37881a2ec2214ef39d85820f3327bbc2" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>

<p>発表内容をこちらのブログでも文章形式でざっとまとめてみたいと思います。</p>

<h2 id="rails-ruby-遅いよね">Rails (Ruby) 遅いよね</h2>

<p>RailsないしRubyはプログラミング言語の中では速くはない言語であることは言うまでもないと思う<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>。 実際に「Rails/Ruby遅いよねって今まで思ったことある方どれくらいいますか？」と会場でも聞いてみたところ、予想では半数以上手を挙げてくれると思ったのだけど、実際は30人中3~4人くらい。あまりにも意外な結果だったので自分なりに理由を分析してみると２つあるかなと思う。</p>

<h3 id="パフォーマンスを求められないから">パフォーマンスを求められないから</h3>

<p>例えば社内の数人が使うような管理画面の場合。この場合、パフォーマンスよりも機能性（ちゃんと検索・閲覧できるかとかCRUD操作ができるかとか）などが優先されると思う。数人だけが使うのでアクセススパイクもないし、パフォーマンスが問題にもなりにくい。</p>

<h3 id="railsをフレームワークとして使っていないから">Railsをフレームワークとして使っていないから</h3>

<p>すごくパフォーマンスを求められるWebアプリの場合、それが事前にわかっているならまずは言語選択レベルでRailsを選択しないかもしれない。今ならGoとかElixirとかScalaとか代替言語もあるのでそちらを選択した場合はRailsは使わないことになるのでRailsの遅さで困ることもない。</p>

<h2 id="それでもやっぱりrailsだ">それでもやっぱりRailsだ…!</h2>

<p>それでもやっぱりRuby好きのRubyっ子であれば、Rubyは使いたい… ということで、Railsの高速化をする上での戦略を紹介。</p>

<h2 id="ruby-version-up">Ruby Version Up</h2>

<p>まずはRubyバージョンアップ。Rubyバージョンの歴史はこんな感じになっている。</p>

<ul>
  <li>2013.2: Ruby 2.0</li>
  <li>2013.12: Ruby 2.1</li>
  <li>2014.12: Ruby 2.2</li>
  <li>2015.12: Ruby 2.3</li>
  <li>20xx: Ruby 3.0</li>
</ul>

<p>去年matzの口からRuby3のコンセプトが発表された。その驚くべき内容が <strong>Ruby 3 x 3</strong> 。</p>

<p><img src="/images/posts/roppongirb/ruby3x3.png" alt="ruby 3 x 3" /></p>

<p>via. <a href="https://www.youtube.com/watch?v=E9bO1uqs4Oc">Ruby3 challenges - RubyKaigi 2015 Keynote - YouTube</a></p>

<h2 id="とあるrailsアプリの場合">とあるRailsアプリの場合</h2>

<p>会社で取り組んでいるプロダクトのRubyのバージョンは基本的に最新バージョンを使うようにしているものの、中にはレガシーな環境もある。下記はあるプロダクトでRuby2.0 から Ruby2.1に上げた例。結果としては、Ruby 2.0 =&gt; 2.1 Ruby Version Up だけで レスポンス速度が約2倍向上した。</p>

<p><img src="/images/posts/roppongirb/ruby2_0-to-2_1.png" alt="" /></p>

<p>このようにRubyバージョンアップによりアプリケーションコード変更ゼロでも<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup>、速度改善が期待できる。古いRubyお使いの方は今すぐRubyのバージョンアップ！</p>

<h2 id="what-about-rails">What about Rails?</h2>

<p>じゃあRailsはどうだろうか。下記は<a href="https://github.com/amatsuda">amatsuda</a>さんのmatzのRuby 3x3 を受けての発表。</p>

<p><img src="/images/posts/roppongirb/rails3x.png" alt="" /></p>

<p><a href="https://speakerdeck.com/a_matsuda/3x-rails">3x Rails // Speaker Deck</a></p>

<p><code class="language-plaintext highlighter-rouge">?</code>が付いていることで分かる通り3倍速くなるという発表というより、まだまだRailsは速くするために工夫の余地があるよ、というような発表。</p>

<p>下記は同じ<a href="https://github.com/amatsuda">amatsuda</a>さんが発表された<a href="http://togetter.com/li/955629">Rails Upgrade Casual Talks</a>での資料です。</p>

<p><img src="/images/posts/roppongirb/rails-verup1.png" alt="" /></p>

<p>via. <a href="https://speakerdeck.com/a_matsuda/rails-upgrade-casual-talks">Rails Upgrade Casual Talks // Speaker Deck</a></p>

<p>たしかに色んな機能が追加されている中、Railsが劇的に速くなることは考えにくい。解決策は…?</p>

<p><img src="/images/posts/roppongirb/rails-verup2.png" alt="" /></p>

<p><strong>歯を食いしばってRails/Rubyをバージョンアップ</strong> :innocent:</p>

<p>Rails 遅くなってもRuby は速くなっているので、どちらも最新版をしっかり追っかけていけば、遅くなることなくRailsの機能拡張も追っかけていけるのでOK.</p>

<h2 id="ボトルネックを潰す">ボトルネックを潰す</h2>

<p>Railsアプリをどうボトルネックを発見し潰していくか？</p>

<h3 id="推測するな計測せよ">推測するな、計測せよ　</h3>

<p>ボトルネックは計測して数値で示すもの。ボトルネックを発見するためのサービス・ツールをいくつか紹介。</p>

<ul>
  <li><a href="https://newrelic.com/">New Relic</a>: 無料で使えて導入もラクでよい</li>
  <li><a href="https://github.com/MiniProfiler/rack-mini-profiler">rack-mini-profiler</a>: 開発環境導入する。クエリやpartialレンダー時間を表示。</li>
  <li><a href="https://github.com/kainosnoema/rack-lineprof">rack-lineprof</a>: Rubyのコードを行単位で計測したい場合に有効</li>
</ul>

<p>ツールを使った結果ボトルネックになりやすい箇所というとRDBまわり。それを解決するgem・機能を紹介。</p>

<h2 id="activerecord-optimization">ActiveRecord Optimization</h2>

<h3 id="mag_right-問題発見型">:mag_right: 問題発見型</h3>

<ul>
  <li><a href="https://github.com/flyerhzm/bullet">bullet</a>: Kill <code class="language-plaintext highlighter-rouge">N+1</code> issue!</li>
  <li><a href="https://github.com/joker1007/activerecord-cause">activerecord-cause</a>: Logs where ActiveRecord actually loads record</li>
</ul>

<h3 id="key-dbスキーマ最適化型">:key: DBスキーマ最適化型</h3>

<ul>
  <li><a href="https://github.com/pboling/flag_shih_tzu">flag_shih_tzu</a>: Bit fields for ActiveRecord</li>
  <li><a href="http://guides.rubyonrails.org/association_basics.html#counter-cache">counter-cache</a>: cacheing count query result
    <ul>
      <li><a href="https://github.com/magnusvk/counter_culture">counter_culture</a>: Better counter-cache</li>
    </ul>
  </li>
</ul>

<h3 id="zap-クエリ効率化型">:zap: クエリ効率化型</h3>

<ul>
  <li><a href="https://github.com/k0kubun/activerecord-precount">activerecord-precount</a>: Yet another counter_cache alternative.</li>
  <li><a href="https://github.com/zdennis/activerecord-import">activerecord-import</a>: bulk inserting data</li>
</ul>

<h2 id="クエリを意識してactiverecord使いこなそう">クエリを意識してActiveRecord使いこなそう</h2>

<p>ActiveRecordもといORマッパの良さってDBを意識しなくて済むところ。でも高速化を行う上でクエリは避けられない壁。DBを意識せずコードを書いている最近のワカモノはもっとクエリを意識しよう！ <del>老害っぽい発言だ</del></p>

<h2 id="パーシャルレンダリングを減らす">パーシャルレンダリングを減らす</h2>

<h3 id="n1-partial-rendering">N+1 partial rendering</h3>

<p>データN個分<code class="language-plaintext highlighter-rouge">render</code>処理が走ってしまうのを、個人的に <strong>N+1 rendering</strong> と呼んでいる。データの数N+親のビュー1回で <code class="language-plaintext highlighter-rouge">N+1</code>. 例えばこんなコード。</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- views/items/index --&gt;</span>
<span class="cp">&lt;%</span> <span class="vi">@items</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span> <span class="cp">%&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">render</span> <span class="n">item</span> <span class="cp">%&gt;</span>
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
</code></pre></div></div>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- views/items/_item --&gt;</span>
<span class="nt">&lt;tr&gt;</span>
  <span class="nt">&lt;td&gt;</span><span class="cp">&lt;%=</span> <span class="n">item</span><span class="p">.</span><span class="nf">name</span> <span class="cp">%&gt;</span><span class="nt">&lt;/td&gt;</span>
  <span class="nt">&lt;td&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s1">'Show'</span><span class="p">,</span> <span class="n">item</span> <span class="cp">%&gt;</span><span class="nt">&lt;/td&gt;</span>
  <span class="nt">&lt;td&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s1">'Edit'</span><span class="p">,</span> <span class="n">edit_item_path</span><span class="p">(</span><span class="n">item</span><span class="p">)</span> <span class="cp">%&gt;</span><span class="nt">&lt;/td&gt;</span>
  <span class="nt">&lt;td&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s1">'Destroy'</span><span class="p">,</span> <span class="n">item</span><span class="p">,</span> <span class="ss">method: :delete</span> <span class="cp">%&gt;</span><span class="nt">&lt;/td&gt;</span>
<span class="nt">&lt;/tr&gt;</span>
</code></pre></div></div>

<p>この場合のログはこうなる。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Processing by ItemsController#index as HTML
  Rendering items/index.html.erb within layouts/application
  Item Load (0.3ms)  SELECT "items".* FROM "items"
  Rendered items/_item.html.erb (0.5ms)
  Rendered items/_item.html.erb (0.3ms)
  ...snip...
  Rendered items/_item.html.erb (0.5ms)
  Rendered items/_item.html.erb (0.3ms)
  Rendered items/index.html.erb within layouts/application (57.7ms)
Completed 200 OK in 80ms (Views: 77.1ms | ActiveRecord: 0.3ms)
</code></pre></div></div>

<p>Viewで80msくらいかかっている。</p>

<h3 id="collection-rendering">Collection rendering</h3>

<p>上記の場合、Collectionレンダーの機能を使えばもっと効率的にrenderできる。</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- views/items/index --&gt;</span>
<span class="cp">&lt;%=</span> <span class="n">render</span> <span class="vi">@items</span> <span class="cp">%&gt;</span>
</code></pre></div></div>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- views/items/_item --&gt;</span>
<span class="nt">&lt;tr&gt;</span>
  <span class="nt">&lt;td&gt;</span><span class="cp">&lt;%=</span> <span class="n">item</span><span class="p">.</span><span class="nf">name</span> <span class="cp">%&gt;</span><span class="nt">&lt;/td&gt;</span>
  <span class="nt">&lt;td&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s1">'Show'</span><span class="p">,</span> <span class="n">item</span> <span class="cp">%&gt;</span><span class="nt">&lt;/td&gt;</span>
  <span class="nt">&lt;td&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s1">'Edit'</span><span class="p">,</span> <span class="n">edit_item_path</span><span class="p">(</span><span class="n">item</span><span class="p">)</span> <span class="cp">%&gt;</span><span class="nt">&lt;/td&gt;</span>
  <span class="nt">&lt;td&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s1">'Destroy'</span><span class="p">,</span> <span class="n">item</span><span class="p">,</span> <span class="ss">method: :delete</span> <span class="cp">%&gt;</span><span class="nt">&lt;/td&gt;</span>
<span class="nt">&lt;/tr&gt;</span>
</code></pre></div></div>

<p>この場合のログはこうなる。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Processing by ItemsController#index as HTML
  Rendering items/index.html.erb within layouts/application
  Item Load (0.4ms)  SELECT "items".* FROM "items"
  Rendered collection of items/_item.html.erb [29 times] (6.9ms)
  Rendered items/index.html.erb within layouts/application (10.3ms)
Completed 200 OK in 29ms (Views: 26.4ms | ActiveRecord: 0.4ms)
</code></pre></div></div>

<p>ビューで25msくらい。だいたい上記の例と比べると1/3くらいになっている。</p>

<h2 id="rails-caching">Rails caching</h2>

<p>RailsのCacheの仕組みとして<a href="http://guides.rubyonrails.org/caching_with_rails.html">公式ガイド</a>で3つ紹介されているのだが、ご存知だろうか。</p>

<ol>
  <li><strong>Fragment Cache</strong>: View fragment caching.</li>
  <li><strong>Action Cache</strong>: Controller’s action caching (removed in Rails4).</li>
  <li><strong>Page Cache</strong>: Static page caching (removed in Rails4).</li>
</ol>

<h3 id="1-fragment-cache">1. Fragment Cache</h3>

<p><img src="/images/posts/roppongirb/cache-fragment.png" alt="" /></p>

<ul>
  <li>グローバルナビ・サイドバーなどの多く呼ばれる共通コンテンツに有効</li>
  <li>重い処理が走るビューの一部分であればあるほど高速化が期待できる</li>
  <li>Advanced Usage: <strong>Russian Doll Caching</strong></li>
</ul>

<h3 id="2-action-cache">2. Action Cache</h3>

<p><img src="/images/posts/roppongirb/action-cache.png" alt="" /></p>

<ul>
  <li>Rails4で削除されてgem化: <a href="https://github.com/rails/actionpack-action_caching">actionpack-action_caching</a></li>
  <li>Viewの手前のControllerのAction自体の処理が重い場合に有効</li>
  <li><code class="language-plaintext highlighter-rouge">cache_path</code> でキャッシュキーをカスタマイズ可能
    <ul>
      <li>モデルのupdated_at を組み込んだり、PC/スマフォでキャッシュビュー出し分け可能</li>
    </ul>
  </li>
</ul>

<h3 id="3-page-cache">3. Page Cache</h3>
<ul>
  <li>Rails4で削除されてgem化: <a href="https://github.com/rails/actionpack-page_caching">actionpack-page_caching</a></li>
  <li>キャッシュ対象となるControllerのActionの生成するHTMLをまるっと静的ファイルに吐き出す</li>
  <li>その静的ファイルをNGINXなどのWeb Server/Reverse Proxyでハンドリング</li>
</ul>

<h2 id="railsのキャッシュ戦略">Railsのキャッシュ戦略</h2>
<ol>
  <li>Railsデフォルトの FragmentCache を使ってビューのレンダリングを高速化</li>
  <li>それでもダメな場合や Controller 自体の処理が重い場合なら、ActionCache/PageCache を検討</li>
</ol>

<h3 id="warning-注意">:warning: 注意</h3>
<ul>
  <li>キャッシュしても根っこの問題は消えない</li>
  <li>キャッシュのライフサイクル管理</li>
  <li>用法用量を守って正しくお使いください</li>
</ul>

<p>キャッシュしても根っこの問題はバイパスされるだけでそれ自体が解決されるわけではないので、本質的にはその根っこの問題を潰すほうがキャッシュより優先すべき。キャッシュによって<strong>臭いものには蓋</strong>をしていないか。キャッシュによって大きなボトルネックが隠蔽されていないか。本質的な問題を潰した上でなお高速化したい場合にキャッシュを利用するのが筋の良いキャッシュ戦略だと思う。</p>

<p>またキャッシュを行うことでそのライフサイクル管理も必要になってくることはアタマに入れておきたい。どういう場合にキャッシュがexpireすべきなのか(あるいはexpireすべきでないのか)、updateすべきなのか、削除すべきなのか。この辺もきちんと考えた上でキャッシュに取り組みたい。</p>

<h2 id="静的ファイル配信">静的ファイル配信</h2>

<h3 id="nginx">NGINX</h3>

<p>プロダクション運用においては実際Railsが静的ファイルまでサーブすることはなくて、下記のようにNGINXに静的ファイルをサーブさせることが多い。</p>

<p><img src="/images/posts/roppongirb/nginx.png" alt="" /></p>

<h3 id="cdn">CDN</h3>

<p>さらに言うと、Railsの吐く assets:precompile の成果物は、CDNに乗せちゃって配信を最適化してやるともっとよい。</p>

<p><img src="/images/posts/roppongirb/nginx-cdn.png" alt="" /></p>

<h2 id="レイテンシに負けないプロトコル--http2">レイテンシに負けないプロトコル = HTTP/2</h2>

<p>バンド幅大きくなってもページロード時間は大きく変わらない。<strong>光の速度はこれ以上速くならない</strong>。じゃあどうするか。解決策がHTTP/2.</p>

<p><img src="/images/posts/roppongirb/http2-latency.png" alt="" /></p>

<p><img src="/images/posts/roppongirb/http2.png" alt="" /></p>

<p>via. <a href="http://www.slideshare.net/kazuho/dena-http2">ウェブを速くするためにDeNAがやっていること - HTTP/2と、さらにその先</a></p>

<p>下記のBEFORE/AFTERは画像の配信をHTTPからHTTP/2に変更した場合のリクエストをキャプチャしたもの。</p>

<h3 id="before-http2">Before HTTP/2</h3>

<p>HTTP/2前の状態。リクエストが順番に走っていることが見て取れる。</p>

<p><img src="/images/posts/roppongirb/before-http2.png" alt="" /></p>

<h3 id="after-http2">After HTTP/2</h3>

<p>HTTP/2後の状態。リクエストが見事に多重化されている。</p>

<p><img src="/images/posts/roppongirb/after-http2.png" alt="" /></p>

<p><a href="https://www.httpvshttps.com/">こちらのページ</a>ではHTTPSの画像ロードの速度の速さを体感できる。</p>

<p><img src="/images/posts/roppongirb/HTTP_vs_HTTPS.png" alt="" /></p>

<h2 id="ユーザーの体感速度--サーバーサイドレスポンス--クライアントサイドスピード">ユーザーの体感速度 = サーバーサイドレスポンス + クライアントサイド・スピード</h2>

<p>仮にサーバーレスポンスタイムを<code class="language-plaintext highlighter-rouge">1ms</code>にしたとしても、十分に速くなったとはいえない。なぜなら最終的にユーザーが感じるであろうウェブページの体感速度はサーバーサイドのレスポンス速度とクライアントサイドでのページロードのスピードを足し合わせたものだから。サーバーが0msでレスポンス返しても10秒間クライアントサイドの画面が真っ白だったら、ユーザーにとってはそれは10秒待たされてるのと一緒。</p>

<h3 id="rails-helloworld-app-の場合">Rails HelloWorld App の場合</h3>

<p>Rails5をほぼ素の状態でHello Worldという文字列を出力するアプリをHerokuにデプロイして<a href="https://developers.google.com/speed/pagespeed/insights/">Google PageSpeed Insights</a>で計測してみた。</p>

<p>結果は80点以下… :weary:</p>

<p><img src="/images/posts/roppongirb/render-block-js.png" alt="" /></p>

<p><code class="language-plaintext highlighter-rouge">Should Fix</code>として報告されているのは、headタグ内にあるJS読み込みが Render Blocking してますよ、という内容のもの。Webの高速化はサーバーサイドだけで済むようなラクなもんじゃない。</p>

<h2 id="amp-zap">AMP :zap:</h2>

<p>AMPはWeb高速化のベストプラクティスを詰め込んだ仕様/制限のこと。詳しくは下記が参考になる。</p>

<ul>
  <li><a href="https://medium.com/@cramforce/why-amp-is-fast-7d2ff1f48597#.tcozirlt5">Why AMP is fast — Medium</a></li>
  <li><a href="https://mozaic.fm/episodes/22/amp.html">ep22 AMP | mozaic.fm</a></li>
</ul>

<p>またAMPに対応するとページが速くなる他にもおいしいことがあって、GoogleがAMPページをキャッシュしてコンテンツ配信を肩代わりしてくれるのだ。いうなればAMPのためのGoogle無料CDN。これでオーガニック検索のトラフィックはだいぶラクになるかも？</p>

<p>僕も自分の<a href="http://blog.toshima.ru/">英語Tipsブログ</a>をAMP化してみたが非常に高速にページが表示できている。(完全にAMP化はできていないのだけど) まだAMP試していない人は、AMPすげーはやいのでぜひその速さを体感してみてほしい。そしてWebの高速化にまっすぐ向き合ってもらいたいと思う。</p>

<h2 id="その他の参考資料">その他の参考資料</h2>
<ul>
  <li><a href="https://speakerdeck.com/mirakui/high-performance-rails-long-edition">High Performance Rails (long edition) // Speaker Deck</a></li>
  <li><a href="https://speakerdeck.com/joker1007/railspahuomansuji-ben-falseki">Railsパフォーマンス基本のキ // Speaker Deck</a></li>
  <li><a href="http://parashuto.com/rriver/development/page-speed-optimization">デザイナーやディレクターも知っておきたい、ページ表示速度の高速化の基本 – Rriver</a></li>
</ul>

<h2 id="roppongirb-イベントについて">Roppongi.rb イベントについて</h2>
<ul>
  <li><a href="https://twitter.com/hashtag/roppongirb?f=tweets&amp;vertical=default">#roppongirb hashtag on Twitter</a></li>
  <li>イベント発表資料: <a href="http://roppongirb.connpass.com/event/33502/presentation/">Roppongi.rb 資料一覧 - connpass</a></li>
  <li><a href="http://morizyun.github.io/blog/roppongi-rb-ruby-rails/">Roppongi.rb #1 発表の密度が濃くて楽しかったYO! - 酒と泪とRubyとRailsと</a></li>
</ul>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><a href="https://www.techempower.com/benchmarks/">Round 12 results - TechEmpower Framework Benchmarks</a> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>ただしRubyバージョン差異による非互換性を解消するための変更は必要だけどね。 <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Toshimaru</name></author><category term="rails" /><category term="ruby" /><category term="roppongirb" /><category term="presentation" /><category term="web" /><summary type="html"><![CDATA[自分がオーガナイザーを務めた Roppongi.rb #1で「Rails高速化戦略」という題で発表してきました。スライドは下記になります。発表内容をこちらのブログでも文章形式でざっとまとめてみたいと思います。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/roppongirb/title.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/roppongirb/title.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>