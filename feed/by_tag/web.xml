<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://blog.toshimaru.net/feed/by_tag/web.xml" rel="self" type="application/atom+xml" /><link href="https://blog.toshimaru.net/" rel="alternate" type="text/html" /><updated>2021-03-16T08:57:00+09:00</updated><id>https://blog.toshimaru.net/feed/by_tag/web.xml</id><title type="html">Hack Your Design!</title><subtitle>toshimaruの技術系なブログ</subtitle><author><name>Toshimaru</name></author><entry><title type="html">SEOという言葉の醜悪さ、SEOではなくクローラー・人間のための最適化を</title><link href="https://blog.toshimaru.net/goodbye-seo-hello-gco/" rel="alternate" type="text/html" title="SEOという言葉の醜悪さ、SEOではなくクローラー・人間のための最適化を" /><published>2016-11-29T00:00:00+09:00</published><updated>2016-11-29T00:00:00+09:00</updated><id>https://blog.toshimaru.net/goodbye-seo-hello-gco</id><content type="html" xml:base="https://blog.toshimaru.net/goodbye-seo-hello-gco/">&lt;p&gt;SEOという言葉が嫌いだ。そこにはビジネスがあり、カネがあり、カネの匂いを嗅ぎつけたSEO業者たちがいる。&lt;/p&gt;

&lt;p&gt;最近、DeNAの運営するキュレーションメディア、&lt;a href=&quot;https://welq.jp/&quot;&gt;WELQ&lt;/a&gt;でこんなニュースがあった。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.itmedia.co.jp/news/articles/1610/26/news117.html&quot;&gt;「死にたい」検索トップの「welq」の記事、DeNAが広告削除　「不適切」指摘受け - ITmedia ニュース&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.landerblue.co.jp/blog/?p=30141&quot;&gt;DeNAがやってるウェルク（Welq）っていうのが企業としてやってはいけない一線を完全に越えてる件（第１回）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このような指摘を受け、DeNAは下記のような発表を出した。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;【WELQからのお知らせ】「専門家による記事確認および記事内容に関する通報フォームの設置」について&lt;a href=&quot;https://t.co/73waKiYTpg&quot;&gt;https://t.co/73waKiYTpg&lt;/a&gt; &lt;a href=&quot;https://t.co/0TvY7psRlu&quot;&gt;https://t.co/0TvY7psRlu&lt;/a&gt;&lt;/p&gt;&amp;mdash; WELQ - ウェルク (@welq_pr) &lt;a href=&quot;https://twitter.com/welq_pr/status/802082119552004096&quot;&gt;November 25, 2016&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;僕はこの一連の件に関してあれこれうるさく言うつもりもないしその言葉も持ち合わせてないが、SEOについて最近ぼんやり考えていることを再考するきっかけとなったのでそこらへんを書いてみるとする。&lt;/p&gt;

&lt;h2 id=&quot;seoという言葉の醜悪さ&quot;&gt;SEOという言葉の醜悪さ&lt;/h2&gt;

&lt;p&gt;SEO、サーチエンジン最適化という言葉にどことなく醜悪さを感じてしまうのは僕だけだろうか。&lt;/p&gt;

&lt;p&gt;サーチエンジン最適化という行為そのものは必要なことだ。Googleに適切にページを評価してもらうために最適化を行う。Webサイト運営者であれば誰もがすべきことであろう。しかしその最適化のテクニックが逆手に取られ＜招かれざるページ＞が検索順位の上位に上がってしまうことが往々にしてある。&lt;/p&gt;

&lt;p&gt;あなたもこんな経験はないだろうか。あなたは検索したい物事があってキーワードを検索フォームに入れて検索する。一番上に出てくるそれらしき見出しをクリックする。しかしそのページは広告、アフィリエイト、外部リンクで埋め尽くされている。まともに読めるコンテンツはファーストビューには全くない。スクロールを進める。どうやらここから本文だ、とあなたは読み進める。そのコンテンツは内容スカスカの低品質記事だった。&lt;/p&gt;

&lt;p&gt;このように上がってくるページはいわゆる&lt;a href=&quot;https://ja.wikipedia.org/wiki/%E6%A4%9C%E7%B4%A2%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%B3%E3%82%B9%E3%83%91%E3%83%A0&quot;&gt;検索エンジンスパム&lt;/a&gt;と呼ばれユーザーから忌み嫌われるものだ。&lt;/p&gt;

&lt;p&gt;もちろんこういった低品質ページを弾くためのアルゴリズム改善にGoogleは日々心血注いでいる。そしてそのアルゴリズムのアップデート・スパム対策は一定の効果をもたらしている（参考: &lt;a href=&quot;https://www.google.com/intl/ja_ALL/insidesearch/howsearchworks/fighting-spam.html&quot;&gt;スパム対策 – 検索サービス – Google&lt;/a&gt;）。&lt;/p&gt;

&lt;p&gt;一方でアルゴリズムで全てのスパムを弾くことはできていないのが現実だ。今でもGoogleの検索結果上位にスパムページが上がってくることは散見される事象だ。このようなGoogleのアルゴリズムの隙間を縫ってページを上げることを&lt;a href=&quot;https://ferret-plus.com/1924&quot;&gt;ブラックハットSEO&lt;/a&gt;という（反対語はホワイトハットSEO）。&lt;/p&gt;

&lt;p&gt;このようなブラックハットSEOが横行すると、低品質ページが検索結果の上位を占めることとなり、検索の主体としてのユーザーがヘイトを溜めていくこととなる。そしてユーザーはSEOという行為にある種の悪どさを感じてしまう。&lt;/p&gt;

&lt;h2 id=&quot;google-crawler-optimization&quot;&gt;Google Crawler Optimization&lt;/h2&gt;

&lt;p&gt;僕はそのどことなく小賢しい響きのあるSEOに代えて別な言葉を提唱したい。&lt;strong&gt;Google Crawler Optimization&lt;/strong&gt;（以下GCO）、つまりGoogleクローラのための最適化だ。といっても表面的に言っていることはSEOと同じである。&lt;/p&gt;

&lt;p&gt;SEOの文脈でサーチエンジンといった場合、たいていの場合がGoogleの検索エンジンのことを指すので、サーチエンジン最適化はGoogle検索エンジン最適化とも言える。そして検索エンジン最適化のためにはサイトを巡回してくるクローラー（Googlebot）を相手に最適化をするのでそれはクローラー最適化とも言える。&lt;/p&gt;

&lt;p&gt;ではなぜSEOとGCO区別したいかというと、それぞれが目指すゴール・目的をはっきりと分けたかったからだ。&lt;/p&gt;

&lt;h2 id=&quot;seoとgcoの違い&quot;&gt;SEOとGCOの違い&lt;/h2&gt;

&lt;p&gt;SEOとGCOの違いはこうだ&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;SEO&lt;/th&gt;
      &lt;th&gt;GCO&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;目的&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;ページの順位を上げること&lt;/td&gt;
      &lt;td&gt;ページを適切にGoolgeクローラーに適切に解釈させること&lt;br /&gt;（その結果として順位が上がろうが下がろうが関係ない）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;やり方&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;1. 正攻法なホワイトハットSEOによって順位を上げる&lt;br /&gt;2. 不正なブラックハットSEOによって順位を上げる&lt;/td&gt;
      &lt;td&gt;- ホワイトハットSEOの手法のみを許容する&lt;br /&gt;- Googleの公式ガイドライン（&lt;a href=&quot;https://static.googleusercontent.com/media/www.Google.com/ja//intl/ja/webmasters/docs/search-engine-optimization-starter-guide-ja.pdf&quot;&gt;検索エンジン最適化スターターガイド&lt;/a&gt;, &lt;a href=&quot;https://support.google.com/webmasters/answer/35769?hl=ja&quot;&gt;ウェブマスター向けガイドライン&lt;/a&gt;）を忠実に実施、その他世に溢れるSEOテクニック情報などは無視&lt;br /&gt;- クローラー最適化の一環としてTwitterクローラ最適化・Facebookクローラ最適化なども行う（OGタグなどの各種タグ設定）&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;僕も本ブログなどはそれなりにSEOを意識して作っている。しかしその目的はサイトランクを上げることではない。サイトを適切にGoogleに評価してもらうためだ。評価の結果別にランクが下になろうとあまり気にしない。それがGoogleの下した評価であり勝負の結果だからだ&lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;みんながGoogleの推奨する最適化を行って同じ土俵に立った上で勝敗はGoogleのアルゴリズムに任せようね、ってスタンスが僕は一番スッキリする。&lt;/p&gt;

&lt;p&gt;とは言っても全ての人が土俵に立てるわけでもないし、土俵の立ち方がわからない人もいる。そういう人たちをサポートするためにSEOビジネスは今後も必要だし、生き続けていく必要があるだろう。&lt;/p&gt;

&lt;h2 id=&quot;ユーザーファーストを貫こう&quot;&gt;ユーザーファーストを貫こう&lt;/h2&gt;

&lt;p&gt;最終的にGoogleが見据えるのはユーザーだ。ユーザーにとって価値のある記事を届けるためのアルゴリズムだ。なので我々もGoogleのための最適化を行うならば、基本的にはその先にいるユーザーのことを考え、ユーザーファーストを貫くべきだろう。&lt;/p&gt;

&lt;p&gt;「&lt;strong&gt;HTTPS化するとページランク上がるらしいから、HTTPSにしとこうぜ&lt;/strong&gt;」&lt;/p&gt;

&lt;p&gt;違う。ユーザーの通信をよりセキュアなものにするためにHTTPS化をするのであって、順位を上げるためではない。&lt;/p&gt;

&lt;p&gt;日本ではあまり大きな声で言う人は少ないが、スノーデン事件以降、HTTPS/TLSでユーザーの通信内容を守るということは個人情報保護において極めて重要だ。&lt;/p&gt;

&lt;p&gt;「&lt;strong&gt;検索結果に露出増えるらしいからAMP対応しようぜ&lt;/strong&gt;」&lt;/p&gt;

&lt;p&gt;違う。高速なWebブラウジング体験を実現するためにAMPというフォーマットを使うのであって、検索結果への露出は副次的効果だ。&lt;/p&gt;

&lt;p&gt;Googleは高速なWeb体験を重要視する。なぜならGoogleはWebページのレスポンスが遅くなると多くのユーザーがページを離脱することを数字的なエビデンスをもとに知っているからだ。そして世界を見渡せば通信環境が劣悪な国・地域に住むユーザーがたくさんいることも知っている。彼らのためな高速なHTMLサブセットがAMPだ。&lt;/p&gt;

&lt;p&gt;そう考えるとAMPだけ速ければ良いという考えにはならず、AMP以外の通常ページだってユーザー・ファーストという点で速くあるべきだ。&lt;/p&gt;

&lt;h2 id=&quot;正しいseoへと向かうために&quot;&gt;正しいSEOへと向かうために&lt;/h2&gt;

&lt;p&gt;真摯にSEOと向き合いきちんとSEOが良い方向にいくように情報発信しているSEOの専門家の方もいる。名前を挙げるとたとえば&lt;a href=&quot;https://twitter.com/tsuj&quot;&gt;@tsuj&lt;/a&gt;さんだ。&lt;/p&gt;

&lt;p&gt;辻さんのような方がSEO専門家という立場から、モラルのないSEO業者を監視・批判していくことでSEO業界全体が適切な良い方向に向かうことを期待したい。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;昔、医師監修に関わった事がありますし、いまやっている人の話も聞きますが、大変。専門医監修を十分な品質で行うのは大きなコストがかかりますし、医師不足ですのでそもそも困難です。&lt;br /&gt;記事の大量掲載をするサイトで十分な品質での医師監修の体制を作るのは、無理な気がします。&lt;/p&gt;&amp;mdash; 辻正浩 | Masahiro Tsuji (@tsuj) &lt;a href=&quot;https://twitter.com/tsuj/status/802472803983179776&quot;&gt;November 26, 2016&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;Googleで行われる全検索の5%は健康関係というのは周知の事実なのでそこに金脈があることは明らかでしたがモラルの壁があったのですよね。&lt;br /&gt;ですが大手がその壁を無視して大儲けしたので今は二匹目のドジョウ狙いが次々と産まれている所。このままだと悪質な医療情報が更にネットに蔓延します。&lt;/p&gt;&amp;mdash; 辻正浩 | Masahiro Tsuji (@tsuj) &lt;a href=&quot;https://twitter.com/tsuj/status/802477361555849216&quot;&gt;November 26, 2016&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;医療情報関連の問題の大きさを認識していない人たちが作った劣化welqみたいなサイトも既にあるみたいですけど。welqだけで終わる問題ではないはずなので、早めに諦めて撤退しちゃったほうがいいんじゃないですかね。最低でもwelqと同程度かそれ以下の品質の所は。&lt;/p&gt;&amp;mdash; 辻正浩 | Masahiro Tsuji (@tsuj) &lt;a href=&quot;https://twitter.com/tsuj/status/802480245202792449&quot;&gt;November 26, 2016&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;独立してから5年間、わたしは健康・医療関連の仕事は色々と判断が難しいので全部断ってきた位ですので、気軽にやっちゃう人／会社が信じられないのですが。医療関連の情報に関わるのは本当に怖いし覚悟が必要と思っていますし、逸脱したところがうまくいくべきとは思えません。&lt;/p&gt;&amp;mdash; 辻正浩 | Masahiro Tsuji (@tsuj) &lt;a href=&quot;https://twitter.com/tsuj/status/802481887545462784&quot;&gt;November 26, 2016&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;またライターという立場から朽木さん（&lt;a href=&quot;twitter.com/amanojerk&quot;&gt;@amanojerk&lt;/a&gt;）も積極的に本件に関して情報発信・問題提起をしている。&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;twitter-moment&quot; href=&quot;https://twitter.com/i/moments/803077459264450562&quot;&gt;【随時更新】信頼性の高い医療情報サイトまとめ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;朽木さんのようにしっかりとライティング活動をしている方もいるので、本件によって変にライターが貶められないことを祈るばかりだ。&lt;/p&gt;

&lt;h2 id=&quot;よりよいwebへと向かうために&quot;&gt;よりよいWEBへと向かうために&lt;/h2&gt;

&lt;p&gt;インターネットの海にある情報は今も昔も玉石混交だ。それをGoogleが圧倒的なテクノロジーを武器に情報フィルタリングをかけてくれている。Googleのふるいが正しく機能している限りにおいて、情報の絶対量が多くなることは良い事だ。問題は玉に混じった石ころたちで、これにどう対処していくべきか。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/google-result.jpg&quot; alt=&quot;google result&quot; /&gt;&lt;/p&gt;

&lt;p&gt;:point_up:&lt;strong&gt;ページに遷移する手前の検索結果画面でGoogleがユーザーへ情報を提供するケースも増えてきている&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;正直言うと検索エンジンスパムに関しては僕は楽観的だ。アルファ碁やGoogle Photo、Google翻訳でご存字の通り、昨今のGoogleのディープラーニング技術の進化は目を見張るものがある。人間にしかできなかった行為が次々に機械に置き換えられていく。スパムも結局精度の問題でしっかり機械が学習してスパム判定精度が上がっていけばスパムは適切に弾けるだろう。&lt;/p&gt;

&lt;p&gt;ただ今回のWELQの記事はどうかというとちょっと疑問で、WELQの提供する圧倒的な分量で一部の専門家にしかその真偽がわからないような内容をGoogleが正しく真偽も含めてランク付けできるか？というと僕にはよくわからない（剽窃行為は判定できそうだが）。&lt;/p&gt;

&lt;p&gt;そうなると、情報発信者としてのモラルの問題になってくる。適当な情報は発信しない、引用と自分の文章を区別する、きちんと一次情報に当たる、情報ソースを明記する、など。そこはやっぱり、ビジネスという軸とは別に情報発信者としてモラルが必要だ。&lt;/p&gt;

&lt;p&gt;より良いWEBへと向かうためにキュレーションメディア各位には石な情報を量産するのではなく、きちんと玉な情報を発信していってもらいたいと願います。&lt;/p&gt;

&lt;h2 id=&quot;welqについて&quot;&gt;WELQについて&lt;/h2&gt;

&lt;p&gt;まぁここまで書いたのでWELQについて一言いっておくと、DeNAくらいの規模の会社がSEOノウハウ・人・モノ・金を総動員させてパワープレイすればそりゃページのランクは上がる。しかし医療・健康というテーマ・分野においては人の命がかかわってくる場合もあるので、そこは情報発信の立場として慎重になるべきでしょう。&lt;a href=&quot;http://dena-palette.jp/&quot;&gt;DeNAパレットメディア&lt;/a&gt;含め、良い情報がウェブに増えていくことは良いことですので頑張ってください。&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;あくまでも上定義は僕個人が考えた定義であって一般的なSEOの定義とは異なる点に留意 &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;とはいえ気合を入れて書いた記事が他のページに負けたりするのはちょっと悔しい &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Toshimaru</name></author><category term="seo" /><category term="web" /><summary type="html">SEOという言葉が嫌いだ。そこにはビジネスがあり、カネがあり、カネの匂いを嗅ぎつけたSEO業者たちがいる。</summary></entry><entry><title type="html">Roppongi.rbで「Rails高速化戦略」を発表しました</title><link href="https://blog.toshimaru.net/roppongirb-speeding-up-rails/" rel="alternate" type="text/html" title="Roppongi.rbで「Rails高速化戦略」を発表しました" /><published>2016-07-19T00:00:00+09:00</published><updated>2016-07-19T00:00:00+09:00</updated><id>https://blog.toshimaru.net/roppongirb-speeding-up-rails</id><content type="html" xml:base="https://blog.toshimaru.net/roppongirb-speeding-up-rails/">&lt;p&gt;自分がオーガナイザーを務めた &lt;a href=&quot;http://roppongirb.connpass.com/event/33502/&quot;&gt;Roppongi.rb #1&lt;/a&gt;で「Rails高速化戦略」という題で発表してきました。スライドは下記になります。&lt;/p&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;37881a2ec2214ef39d85820f3327bbc2&quot; data-ratio=&quot;1.33333333333333&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;発表内容をこちらのブログでも文章形式でざっとまとめてみたいと思います。&lt;/p&gt;

&lt;h2 id=&quot;rails-ruby-遅いよね&quot;&gt;Rails (Ruby) 遅いよね&lt;/h2&gt;

&lt;p&gt;RailsないしRubyはプログラミング言語の中では速くはない言語であることは言うまでもないと思う&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;。 実際に「Rails/Ruby遅いよねって今まで思ったことある方どれくらいいますか？」と会場でも聞いてみたところ、予想では半数以上手を挙げてくれると思ったのだけど、実際は30人中3~4人くらい。あまりにも意外な結果だったので自分なりに理由を分析してみると２つあるかなと思う。&lt;/p&gt;

&lt;h3 id=&quot;パフォーマンスを求められないから&quot;&gt;パフォーマンスを求められないから&lt;/h3&gt;

&lt;p&gt;例えば社内の数人が使うような管理画面の場合。この場合、パフォーマンスよりも機能性（ちゃんと検索・閲覧できるかとかCRUD操作ができるかとか）などが優先されると思う。数人だけが使うのでアクセススパイクもないし、パフォーマンスが問題にもなりにくい。&lt;/p&gt;

&lt;h3 id=&quot;railsをフレームワークとして使っていないから&quot;&gt;Railsをフレームワークとして使っていないから&lt;/h3&gt;

&lt;p&gt;すごくパフォーマンスを求められるWebアプリの場合、それが事前にわかっているならまずは言語選択レベルでRailsを選択しないかもしれない。今ならGoとかElixirとかScalaとか代替言語もあるのでそちらを選択した場合はRailsは使わないことになるのでRailsの遅さで困ることもない。&lt;/p&gt;

&lt;h2 id=&quot;それでもやっぱりrailsだ&quot;&gt;それでもやっぱりRailsだ…!&lt;/h2&gt;

&lt;p&gt;それでもやっぱりRuby好きのRubyっ子であれば、Rubyは使いたい… ということで、Railsの高速化をする上での戦略を紹介。&lt;/p&gt;

&lt;h2 id=&quot;ruby-version-up&quot;&gt;Ruby Version Up&lt;/h2&gt;

&lt;p&gt;まずはRubyバージョンアップ。Rubyバージョンの歴史はこんな感じになっている。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;2013.2: Ruby 2.0&lt;/li&gt;
  &lt;li&gt;2013.12: Ruby 2.1&lt;/li&gt;
  &lt;li&gt;2014.12: Ruby 2.2&lt;/li&gt;
  &lt;li&gt;2015.12: Ruby 2.3&lt;/li&gt;
  &lt;li&gt;20xx: Ruby 3.0&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;去年matzの口からRuby3のコンセプトが発表された。その驚くべき内容が &lt;strong&gt;Ruby 3 x 3&lt;/strong&gt; 。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb/ruby3x3.png&quot; alt=&quot;ruby 3 x 3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;via. &lt;a href=&quot;https://www.youtube.com/watch?v=E9bO1uqs4Oc&quot;&gt;Ruby3 challenges - RubyKaigi 2015 Keynote - YouTube&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;とあるrailsアプリの場合&quot;&gt;とあるRailsアプリの場合&lt;/h2&gt;

&lt;p&gt;会社で取り組んでいるプロダクトのRubyのバージョンは基本的に最新バージョンを使うようにしているものの、中にはレガシーな環境もある。下記はあるプロダクトでRuby2.0 から Ruby2.1に上げた例。結果としては、Ruby 2.0 =&amp;gt; 2.1 Ruby Version Up だけで レスポンス速度が約2倍向上した。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb/ruby2_0-to-2_1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;このようにRubyバージョンアップによりアプリケーションコード変更ゼロでも&lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;、速度改善が期待できる。古いRubyお使いの方は今すぐRubyのバージョンアップ！&lt;/p&gt;

&lt;h2 id=&quot;what-about-rails&quot;&gt;What about Rails?&lt;/h2&gt;

&lt;p&gt;じゃあRailsはどうだろうか。下記は&lt;a href=&quot;https://github.com/amatsuda&quot;&gt;amatsuda&lt;/a&gt;さんのmatzのRuby 3x3 を受けての発表。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb/rails3x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/a_matsuda/3x-rails&quot;&gt;3x Rails // Speaker Deck&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?&lt;/code&gt;が付いていることで分かる通り3倍速くなるという発表というより、まだまだRailsは速くするために工夫の余地があるよ、というような発表。&lt;/p&gt;

&lt;p&gt;下記は同じ&lt;a href=&quot;https://github.com/amatsuda&quot;&gt;amatsuda&lt;/a&gt;さんが発表された&lt;a href=&quot;http://togetter.com/li/955629&quot;&gt;Rails Upgrade Casual Talks&lt;/a&gt;での資料です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb/rails-verup1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;via. &lt;a href=&quot;https://speakerdeck.com/a_matsuda/rails-upgrade-casual-talks&quot;&gt;Rails Upgrade Casual Talks // Speaker Deck&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;たしかに色んな機能が追加されている中、Railsが劇的に速くなることは考えにくい。解決策は…?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb/rails-verup2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;歯を食いしばってRails/Rubyをバージョンアップ&lt;/strong&gt; :innocent:&lt;/p&gt;

&lt;p&gt;Rails 遅くなってもRuby は速くなっているので、どちらも最新版をしっかり追っかけていけば、遅くなることなくRailsの機能拡張も追っかけていけるのでOK.&lt;/p&gt;

&lt;h2 id=&quot;ボトルネックを潰す&quot;&gt;ボトルネックを潰す&lt;/h2&gt;

&lt;p&gt;Railsアプリをどうボトルネックを発見し潰していくか？&lt;/p&gt;

&lt;h3 id=&quot;推測するな計測せよ&quot;&gt;推測するな、計測せよ　&lt;/h3&gt;

&lt;p&gt;ボトルネックは計測して数値で示すもの。ボトルネックを発見するためのサービス・ツールをいくつか紹介。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://newrelic.com/&quot;&gt;New Relic&lt;/a&gt;: 無料で使えて導入もラクでよい&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/MiniProfiler/rack-mini-profiler&quot;&gt;rack-mini-profiler&lt;/a&gt;: 開発環境導入する。クエリやpartialレンダー時間を表示。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/kainosnoema/rack-lineprof&quot;&gt;rack-lineprof&lt;/a&gt;: Rubyのコードを行単位で計測したい場合に有効&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ツールを使った結果ボトルネックになりやすい箇所というとRDBまわり。それを解決するgem・機能を紹介。&lt;/p&gt;

&lt;h2 id=&quot;activerecord-optimization&quot;&gt;ActiveRecord Optimization&lt;/h2&gt;

&lt;h3 id=&quot;mag_right-問題発見型&quot;&gt;:mag_right: 問題発見型&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/flyerhzm/bullet&quot;&gt;bullet&lt;/a&gt;: Kill &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;N+1&lt;/code&gt; issue!&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/joker1007/activerecord-cause&quot;&gt;activerecord-cause&lt;/a&gt;: Logs where ActiveRecord actually loads record&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;key-dbスキーマ最適化型&quot;&gt;:key: DBスキーマ最適化型&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/pboling/flag_shih_tzu&quot;&gt;flag_shih_tzu&lt;/a&gt;: Bit fields for ActiveRecord&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://guides.rubyonrails.org/association_basics.html#counter-cache&quot;&gt;counter-cache&lt;/a&gt;: cacheing count query result
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/magnusvk/counter_culture&quot;&gt;counter_culture&lt;/a&gt;: Better counter-cache&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;zap-クエリ効率化型&quot;&gt;:zap: クエリ効率化型&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/k0kubun/activerecord-precount&quot;&gt;activerecord-precount&lt;/a&gt;: Yet another counter_cache alternative.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/zdennis/activerecord-import&quot;&gt;activerecord-import&lt;/a&gt;: bulk inserting data&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;クエリを意識してactiverecord使いこなそう&quot;&gt;クエリを意識してActiveRecord使いこなそう&lt;/h2&gt;

&lt;p&gt;ActiveRecordもといORマッパの良さってDBを意識しなくて済むところ。でも高速化を行う上でクエリは避けられない壁。DBを意識せずコードを書いている最近のワカモノはもっとクエリを意識しよう！ &lt;del&gt;老害っぽい発言だ&lt;/del&gt;&lt;/p&gt;

&lt;h2 id=&quot;パーシャルレンダリングを減らす&quot;&gt;パーシャルレンダリングを減らす&lt;/h2&gt;

&lt;h3 id=&quot;n1-partial-rendering&quot;&gt;N+1 partial rendering&lt;/h3&gt;

&lt;p&gt;データN個分&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;render&lt;/code&gt;処理が走ってしまうのを、個人的に &lt;strong&gt;N+1 rendering&lt;/strong&gt; と呼んでいる。データの数N+親のビュー1回で &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;N+1&lt;/code&gt;. 例えばこんなコード。&lt;/p&gt;

&lt;div class=&quot;language-erb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- views/items/index --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;%&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-erb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- views/items/_item --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link_to&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;Show&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link_to&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;Edit&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edit_item_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link_to&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;Destroy&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;method: :delete&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;この場合のログはこうなる。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Processing by ItemsController#index as HTML
  Rendering items/index.html.erb within layouts/application
  Item Load (0.3ms)  SELECT &quot;items&quot;.* FROM &quot;items&quot;
  Rendered items/_item.html.erb (0.5ms)
  Rendered items/_item.html.erb (0.3ms)
  ...snip...
  Rendered items/_item.html.erb (0.5ms)
  Rendered items/_item.html.erb (0.3ms)
  Rendered items/index.html.erb within layouts/application (57.7ms)
Completed 200 OK in 80ms (Views: 77.1ms | ActiveRecord: 0.3ms)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Viewで80msくらいかかっている。&lt;/p&gt;

&lt;h3 id=&quot;collection-rendering&quot;&gt;Collection rendering&lt;/h3&gt;

&lt;p&gt;上記の場合、Collectionレンダーの機能を使えばもっと効率的にrenderできる。&lt;/p&gt;

&lt;div class=&quot;language-erb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- views/items/index --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@items&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-erb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- views/items/_item --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link_to&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;Show&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link_to&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;Edit&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edit_item_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link_to&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;Destroy&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;method: :delete&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;この場合のログはこうなる。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Processing by ItemsController#index as HTML
  Rendering items/index.html.erb within layouts/application
  Item Load (0.4ms)  SELECT &quot;items&quot;.* FROM &quot;items&quot;
  Rendered collection of items/_item.html.erb [29 times] (6.9ms)
  Rendered items/index.html.erb within layouts/application (10.3ms)
Completed 200 OK in 29ms (Views: 26.4ms | ActiveRecord: 0.4ms)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ビューで25msくらい。だいたい上記の例と比べると1/3くらいになっている。&lt;/p&gt;

&lt;h2 id=&quot;rails-caching&quot;&gt;Rails caching&lt;/h2&gt;

&lt;p&gt;RailsのCacheの仕組みとして&lt;a href=&quot;http://guides.rubyonrails.org/caching_with_rails.html&quot;&gt;公式ガイド&lt;/a&gt;で3つ紹介されているのだが、ご存知だろうか。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Fragment Cache&lt;/strong&gt;: View fragment caching.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Action Cache&lt;/strong&gt;: Controller’s action caching (removed in Rails4).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Page Cache&lt;/strong&gt;: Static page caching (removed in Rails4).&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;1-fragment-cache&quot;&gt;1. Fragment Cache&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb/cache-fragment.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;グローバルナビ・サイドバーなどの多く呼ばれる共通コンテンツに有効&lt;/li&gt;
  &lt;li&gt;重い処理が走るビューの一部分であればあるほど高速化が期待できる&lt;/li&gt;
  &lt;li&gt;Advanced Usage: &lt;strong&gt;Russian Doll Caching&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-action-cache&quot;&gt;2. Action Cache&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb/action-cache.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Rails4で削除されてgem化: &lt;a href=&quot;https://github.com/rails/actionpack-action_caching&quot;&gt;actionpack-action_caching&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Viewの手前のControllerのAction自体の処理が重い場合に有効&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cache_path&lt;/code&gt; でキャッシュキーをカスタマイズ可能
    &lt;ul&gt;
      &lt;li&gt;モデルのupdated_at を組み込んだり、PC/スマフォでキャッシュビュー出し分け可能&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;3-page-cache&quot;&gt;3. Page Cache&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Rails4で削除されてgem化: &lt;a href=&quot;https://github.com/rails/actionpack-page_caching&quot;&gt;actionpack-page_caching&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;キャッシュ対象となるControllerのActionの生成するHTMLをまるっと静的ファイルに吐き出す&lt;/li&gt;
  &lt;li&gt;その静的ファイルをNGINXなどのWeb Server/Reverse Proxyでハンドリング&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;railsのキャッシュ戦略&quot;&gt;Railsのキャッシュ戦略&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Railsデフォルトの FragmentCache を使ってビューのレンダリングを高速化&lt;/li&gt;
  &lt;li&gt;それでもダメな場合や Controller 自体の処理が重い場合なら、ActionCache/PageCache を検討&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;warning-注意&quot;&gt;:warning: 注意&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;キャッシュしても根っこの問題は消えない&lt;/li&gt;
  &lt;li&gt;キャッシュのライフサイクル管理&lt;/li&gt;
  &lt;li&gt;用法用量を守って正しくお使いください&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;キャッシュしても根っこの問題はバイパスされるだけでそれ自体が解決されるわけではないので、本質的にはその根っこの問題を潰すほうがキャッシュより優先すべき。キャッシュによって&lt;strong&gt;臭いものには蓋&lt;/strong&gt;をしていないか。キャッシュによって大きなボトルネックが隠蔽されていないか。本質的な問題を潰した上でなお高速化したい場合にキャッシュを利用するのが筋の良いキャッシュ戦略だと思う。&lt;/p&gt;

&lt;p&gt;またキャッシュを行うことでそのライフサイクル管理も必要になってくることはアタマに入れておきたい。どういう場合にキャッシュがexpireすべきなのか(あるいはexpireすべきでないのか)、updateすべきなのか、削除すべきなのか。この辺もきちんと考えた上でキャッシュに取り組みたい。&lt;/p&gt;

&lt;h2 id=&quot;静的ファイル配信&quot;&gt;静的ファイル配信&lt;/h2&gt;

&lt;h3 id=&quot;nginx&quot;&gt;NGINX&lt;/h3&gt;

&lt;p&gt;プロダクション運用においては実際Railsが静的ファイルまでサーブすることはなくて、下記のようにNGINXに静的ファイルをサーブさせることが多い。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb/nginx.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;cdn&quot;&gt;CDN&lt;/h3&gt;

&lt;p&gt;さらに言うと、Railsの吐く assets:precompile の成果物は、CDNに乗せちゃって配信を最適化してやるともっとよい。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb/nginx-cdn.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;レイテンシに負けないプロトコル--http2&quot;&gt;レイテンシに負けないプロトコル = HTTP/2&lt;/h2&gt;

&lt;p&gt;バンド幅大きくなってもページロード時間は大きく変わらない。&lt;strong&gt;光の速度はこれ以上速くならない&lt;/strong&gt;。じゃあどうするか。解決策がHTTP/2.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb/http2-latency.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb/http2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;via. &lt;a href=&quot;http://www.slideshare.net/kazuho/dena-http2&quot;&gt;ウェブを速くするためにDeNAがやっていること - HTTP/2と、さらにその先&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下記のBEFORE/AFTERは画像の配信をHTTPからHTTP/2に変更した場合のリクエストをキャプチャしたもの。&lt;/p&gt;

&lt;h3 id=&quot;before-http2&quot;&gt;Before HTTP/2&lt;/h3&gt;

&lt;p&gt;HTTP/2前の状態。リクエストが順番に走っていることが見て取れる。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb/before-http2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;after-http2&quot;&gt;After HTTP/2&lt;/h3&gt;

&lt;p&gt;HTTP/2後の状態。リクエストが見事に多重化されている。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb/after-http2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.httpvshttps.com/&quot;&gt;こちらのページ&lt;/a&gt;ではHTTPSの画像ロードの速度の速さを体感できる。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb/HTTP_vs_HTTPS.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;ユーザーの体感速度--サーバーサイドレスポンス--クライアントサイドスピード&quot;&gt;ユーザーの体感速度 = サーバーサイドレスポンス + クライアントサイド・スピード&lt;/h2&gt;

&lt;p&gt;仮にサーバーレスポンスタイムを&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1ms&lt;/code&gt;にしたとしても、十分に速くなったとはいえない。なぜなら最終的にユーザーが感じるであろうウェブページの体感速度はサーバーサイドのレスポンス速度とクライアントサイドでのページロードのスピードを足し合わせたものだから。サーバーが0msでレスポンス返しても10秒間クライアントサイドの画面が真っ白だったら、ユーザーにとってはそれは10秒待たされてるのと一緒。&lt;/p&gt;

&lt;h3 id=&quot;rails-helloworld-app-の場合&quot;&gt;Rails HelloWorld App の場合&lt;/h3&gt;

&lt;p&gt;Rails5をほぼ素の状態でHello Worldという文字列を出力するアプリをHerokuにデプロイして&lt;a href=&quot;https://developers.google.com/speed/pagespeed/insights/&quot;&gt;Google PageSpeed Insights&lt;/a&gt;で計測してみた。&lt;/p&gt;

&lt;p&gt;結果は80点以下… :weary:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb/render-block-js.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Should Fix&lt;/code&gt;として報告されているのは、headタグ内にあるJS読み込みが Render Blocking してますよ、という内容のもの。Webの高速化はサーバーサイドだけで済むようなラクなもんじゃない。&lt;/p&gt;

&lt;h2 id=&quot;amp-zap&quot;&gt;AMP :zap:&lt;/h2&gt;

&lt;p&gt;AMPはWeb高速化のベストプラクティスを詰め込んだ仕様/制限のこと。詳しくは下記が参考になる。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@cramforce/why-amp-is-fast-7d2ff1f48597#.tcozirlt5&quot;&gt;Why AMP is fast — Medium&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mozaic.fm/episodes/22/amp.html&quot;&gt;ep22 AMP | mozaic.fm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;またAMPに対応するとページが速くなる他にもおいしいことがあって、GoogleがAMPページをキャッシュしてコンテンツ配信を肩代わりしてくれるのだ。いうなればAMPのためのGoogle無料CDN。これでオーガニック検索のトラフィックはだいぶラクになるかも？&lt;/p&gt;

&lt;p&gt;僕も自分の&lt;a href=&quot;http://blog.toshima.ru/&quot;&gt;英語Tipsブログ&lt;/a&gt;をAMP化してみたが非常に高速にページが表示できている。(完全にAMP化はできていないのだけど) まだAMP試していない人は、AMPすげーはやいのでぜひその速さを体感してみてほしい。そしてWebの高速化にまっすぐ向き合ってもらいたいと思う。&lt;/p&gt;

&lt;h2 id=&quot;その他の参考資料&quot;&gt;その他の参考資料&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/mirakui/high-performance-rails-long-edition&quot;&gt;High Performance Rails (long edition) // Speaker Deck&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/joker1007/railspahuomansuji-ben-falseki&quot;&gt;Railsパフォーマンス基本のキ // Speaker Deck&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://parashuto.com/rriver/development/page-speed-optimization&quot;&gt;デザイナーやディレクターも知っておきたい、ページ表示速度の高速化の基本 – Rriver&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;roppongirb-イベントについて&quot;&gt;Roppongi.rb イベントについて&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/hashtag/roppongirb?f=tweets&amp;amp;vertical=default&quot;&gt;#roppongirb hashtag on Twitter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;イベント発表資料: &lt;a href=&quot;http://roppongirb.connpass.com/event/33502/presentation/&quot;&gt;Roppongi.rb 資料一覧 - connpass&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://morizyun.github.io/blog/roppongi-rb-ruby-rails/&quot;&gt;Roppongi.rb #1 発表の密度が濃くて楽しかったYO! - 酒と泪とRubyとRailsと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.techempower.com/benchmarks/&quot;&gt;Round 12 results - TechEmpower Framework Benchmarks&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;ただしRubyバージョン差異による非互換性を解消するための変更は必要だけどね。 &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Toshimaru</name></author><category term="rails" /><category term="ruby" /><category term="roppongirb" /><category term="presentation" /><category term="web" /><summary type="html">自分がオーガナイザーを務めた Roppongi.rb #1で「Rails高速化戦略」という題で発表してきました。スライドは下記になります。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/roppongirb/title.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/roppongirb/title.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>