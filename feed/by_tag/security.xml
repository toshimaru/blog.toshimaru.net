<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://blog.toshimaru.net/feed/by_tag/security.xml" rel="self" type="application/atom+xml" /><link href="https://blog.toshimaru.net/" rel="alternate" type="text/html" /><updated>2021-02-22T09:01:15+09:00</updated><id>https://blog.toshimaru.net/feed/by_tag/security.xml</id><title type="html">Hack Your Design!</title><subtitle>toshimaruの技術系なブログ</subtitle><author><name>Toshimaru</name></author><entry><title type="html">本ブログが完全HTTPS化されました</title><link href="https://blog.toshimaru.net/https-is-now-supported/" rel="alternate" type="text/html" title="本ブログが完全HTTPS化されました" /><published>2018-05-06T00:00:00+09:00</published><updated>2019-08-08T00:00:00+09:00</updated><id>https://blog.toshimaru.net/https-is-now-supported</id><content type="html" xml:base="https://blog.toshimaru.net/https-is-now-supported/">&lt;p&gt;本ブログが完全HTTPS化されましたのでお知らせ致します。&lt;/p&gt;

&lt;h2 id=&quot;github-pages-https-support&quot;&gt;GitHub Pages HTTPS Support&lt;/h2&gt;

&lt;p&gt;といっても別に何をやったというわけではなく、朝起きたら突然GitHub PagesがHTTPSをサポートしてくれてました。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-cards=&quot;hidden&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Today, custom domains on GitHub Pages are gaining support for HTTPS via &lt;a href=&quot;https://twitter.com/letsencrypt?ref_src=twsrc%5Etfw&quot;&gt;@letsencrypt&lt;/a&gt;. It&amp;#39;s another step towards making the web more secure for everyone. &lt;a href=&quot;https://t.co/MbB7Jjd3EE&quot;&gt;https://t.co/MbB7Jjd3EE&lt;/a&gt;&lt;/p&gt;&amp;mdash; GitHub (@github) &lt;a href=&quot;https://twitter.com/github/status/991366832421523456?ref_src=twsrc%5Etfw&quot;&gt;May 1, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;HTTPSで配信するために特段こちら側で何か設定が必要というわけではなく、GitHubがよしなに全て設定してくれているので本当に朝起きたら&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http&lt;/code&gt;を&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https&lt;/code&gt;に変えてアクセスするただけで大丈夫でした。&lt;/p&gt;

&lt;p&gt;ちなみに僕は数年くらい前から「Github Pagesカスタムドメインでhttps対応してほしい！」とGitHubサポートチームに訴え続けておりましたが、この度はやっと対応してくれたということでありがたい気持ちでいっぱいです。（これでやっと同僚エンジニアから「ブログがセキュアじゃないですね！」と煽られることもなくなる…）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/https/https-github.png&quot; alt=&quot;github config&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;:point_up:GitHubのhttps設定画面&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/https/lets-encrypt.png&quot; alt=&quot;let&apos;s encrypt certification&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;:point_up:HTTPS対応に際してはLet’s Encryptの証明書が使われています&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;はてぶurl変わっちゃうよ問題&quot;&gt;はてぶURL変わっちゃうよ問題&lt;/h2&gt;

&lt;p&gt;&lt;del&gt;はてなブックマークではhttpとhttpsをURLとして区別するので、今回のhttps化に伴い今までのはてなブックマーク数がリセットされることになります。ちょっと勿体無い気もしますが致し方ないですね。&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;追記&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;現在はhttpのページとhttpsのブックマークページは統合されております。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;同一ページでURLが複数存在する（例：httpとhttpsの混在、異なるパラメーターを複数持ったページなど）場合にブックマーク数やコメント一覧ページがそれぞれに分散していた仕様を、同一ページへのブックマークとして統合されるよう変更いたします。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;via. &lt;a href=&quot;https://bookmark.hatenastaff.com/entry/2019/02/13/105009&quot;&gt;URLが複数存在する同一ページでコメント一覧ページが分散する仕様を、統合されるよう変更します - はてなブックマーク開発ブログ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;せっかくなので今まで本ブログに蓄積されたはてブ人気エントリ（5user以上）の現時点でのスナップショットを取っておいたので下記に一覧として公開いたします。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;人気エントリ5ブクマ以上一覧&quot;&gt;人気エントリ(5ブクマ以上)一覧&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/cool-ui/&quot;&gt;UIの進化を止めるうんこユーザーに我々はどう立ち向かうべ…&lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/cool-ui/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/cool-ui/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/rails-frontend/&quot;&gt;Railsフロントエンド技術の今とこれから&lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/rails-frontend/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/rails-frontend/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/jquery-ajaxdeferredajax&quot;&gt;jQuery モダンAjaxな書き方を目指して　〜deferredを使ったAJAX〜…&lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/jquery-ajaxdeferredajax&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/jquery-ajaxdeferredajax&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/jquery-ajaxdeferredajax/&quot;&gt;jQuery モダンAjaxな書き方を目指して　〜deferredを使ったAJAX〜…&lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/jquery-ajaxdeferredajax/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/jquery-ajaxdeferredajax/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/jquery-8-tips/&quot;&gt;jQuery使いが知っておくべき8つのjQueryテクニック &lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/jquery-8-tips/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/jquery-8-tips/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/rails-batch-optimization/&quot;&gt;Rails/ActiveRecord バッチ処理の最適化&lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/rails-batch-optimization/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/rails-batch-optimization/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/rails-http-status-symbols/&quot;&gt;RailsのHTTPステータスのシンボル表現まとめ&lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/rails-http-status-symbols/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/rails-http-status-symbols/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/git-log-graph/&quot;&gt;美しき git log –graph のエイリアス&lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/git-log-graph/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/git-log-graph/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/gunosy-rails-way/&quot;&gt;GunosyでのRails開発フロー&lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/gunosy-rails-way/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/gunosy-rails-way/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/scrum-training/&quot;&gt;認定スクラムマスター研修に行ってきました&lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/scrum-training/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/scrum-training/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/roppongirb-speeding-up-rails/&quot;&gt;Roppongi.rbで「Rails高速化戦略」を発表しました &lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/roppongirb-speeding-up-rails/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/roppongirb-speeding-up-rails/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/belongs_to-through/&quot;&gt;【Rails】has_many, throughの逆の関連はdelegate, toかhas_one, through&lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/belongs_to-through/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/belongs_to-through/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/php-trait/&quot;&gt;PHP5.4のtrait機能を理解する&lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/php-trait/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/php-trait/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/git-pushgithub/&quot;&gt;github に git pushした変更の取り消し&lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/git-pushgithub/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/git-pushgithub/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/rails-pry-byebug/&quot;&gt;pry-byebug を使ってRailsアプリをステップ実行する &lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/rails-pry-byebug/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/rails-pry-byebug/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/jquery-bottom-scroll/&quot;&gt;jQueryでページ最下部のスクロール時のイベントをキャッチ…&lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/jquery-bottom-scroll/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/jquery-bottom-scroll/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/how-to-find-job-in-Vancouver/&quot;&gt;僕が単身海外（バンクーバー）に来て仕事を見つけるまで…&lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/how-to-find-job-in-Vancouver/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/how-to-find-job-in-Vancouver/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/play-m3u8-video-in-browser/&quot;&gt;video.js で m3u8 形式の動画ファイルをブラウザで再生する &lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/play-m3u8-video-in-browser/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/play-m3u8-video-in-browser/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/rails-find_each/&quot;&gt;Railsのfind_eachの挙動を調べた&lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/rails-find_each/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/rails-find_each/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/job-hunting-6/&quot;&gt;就活日記(6) KAIZEN platform Inc.&lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/job-hunting-6/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/job-hunting-6/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/s3-cloudfront-cors-setting/&quot;&gt;AWS S3 + CloudFront のCORS設定手順&lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/s3-cloudfront-cors-setting/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/s3-cloudfront-cors-setting/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/jquerydeferred-is-most-important-client/&quot;&gt;DeferredはjQueryにおける最も重要なクライアントサイドツール…&lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/jquerydeferred-is-most-important-client/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/jquerydeferred-is-most-important-client/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/Front-end-Developer-Interview-Questions-Japanese/&quot;&gt;「フロントエンドデベロッパー面接時の質問事項」日本語…&lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/Front-end-Developer-Interview-Questions-Japanese/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/Front-end-Developer-Interview-Questions-Japanese/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/8/&quot;&gt;ダメエンジニアの8つの特徴&lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/8/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/8/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/docker-compose-rails/&quot;&gt;docker-compose で Rails 環境を構築する&lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/docker-compose-rails/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/docker-compose-rails/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/css-animation/&quot;&gt;CSS3アニメーションを使ってサイトをリッチに &lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/css-animation/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/css-animation/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/opsworks-rails/&quot;&gt;Amazon OpsWorksでRailsアプリを簡単Chefプロビジョニング &lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/opsworks-rails/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/opsworks-rails/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/active-record-callbacks/&quot;&gt;ActiveRecordのコールバックの順番・コールバック内のロール…&lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/active-record-callbacks/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/active-record-callbacks/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/ruby-percent-notation/&quot;&gt;Rubyの%の記法まとめ&lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/ruby-percent-notation/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/ruby-percent-notation/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/ruby-standard-error/&quot;&gt;Rubyで独自例外を定義するときはStandardErrorを継承する &lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/ruby-standard-error/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/ruby-standard-error/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/like-a-sponge-as-an-engineer/&quot;&gt;技術者としてスポンジであり続けること　あるいは老害回…&lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/like-a-sponge-as-an-engineer/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/like-a-sponge-as-an-engineer/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/linux/&quot;&gt;プロセス毎のメモリ使用量を調べるコマンド&lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/linux/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/linux/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/json-schema-collaboration/&quot;&gt;JSON Schemaについて発表した&lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/json-schema-collaboration/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/json-schema-collaboration/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/php-is-not-bad-language/&quot;&gt;PHPって言うほど悪い言語じゃない&lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/php-is-not-bad-language/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/php-is-not-bad-language/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/job-hunting-fin/&quot;&gt;就活日記(完) 就職&lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/job-hunting-fin/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/job-hunting-fin/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/rdm2018-active-record-anti-patterns/&quot;&gt;railsdm2018で「ActiveRecordデータ処理アンチパターン」を発表し…&lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/rdm2018-active-record-anti-patterns/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/rdm2018-active-record-anti-patterns/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/cool-ui-after/&quot;&gt;「UIの進化を止めるうんこユーザーに我々はどう立ち向かう…&lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/cool-ui-after/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/cool-ui-after/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/phpurl-safe-base64-encode/&quot;&gt;[PHP]URL safe な base64 encode メソッド&lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/phpurl-safe-base64-encode/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/phpurl-safe-base64-encode/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/&quot;&gt;Hack Your Design! - Home&lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/ruby-immutable-string/&quot;&gt;Ruby2.3 で導入された frozen_string_literal オプションで Immutable St…&lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/ruby-immutable-string/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/ruby-immutable-string/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/rails-4-transaction-isolation/&quot;&gt;Rails4 でトランザクション分離レベルを設定する &lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/rails-4-transaction-isolation/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/rails-4-transaction-isolation/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/jqueryhidden-inputjquery/&quot;&gt;【jQuery】hidden inputタグをjQueryで追加&lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/jqueryhidden-inputjquery/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/jqueryhidden-inputjquery/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/manage-schema-with-sql-in-rails/&quot;&gt;SQLファイルでRailsのスキーマ情報管理&lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/manage-schema-with-sql-in-rails/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/manage-schema-with-sql-in-rails/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/chrome-dev-tool/&quot;&gt;細かすぎて伝わりにくいChrome Developerツールを使いこなそう…&lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/chrome-dev-tool/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/chrome-dev-tool/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/git-29764/&quot;&gt;Git のコミットメッセージの書き方&lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/git-29764/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/git-29764/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/job-hunting-0/&quot;&gt;就活日記(0) エントリー&lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/job-hunting-0/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/job-hunting-0/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/publish-rails-app-in-lan/&quot;&gt;RailsアプリケーションをLAN内に公開する&lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/publish-rails-app-in-lan/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/publish-rails-app-in-lan/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/git-revert-mainline/&quot;&gt;Gitのrevertの-m(mainline)オプションについて&lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/git-revert-mainline/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/git-revert-mainline/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/vimsublime-text-2&quot;&gt;Vimから３日で乗り換えた、次世代モテエディタ「Sublime Text 2…&lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/vimsublime-text-2&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/vimsublime-text-2&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/rfc/&quot;&gt;メールアドレスにはRFC的に使用可能な文字(!#$%&amp;amp;’*+-/=?^_`{|}~)…&lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/rfc/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/rfc/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/how-to-use-composer-autoload/&quot;&gt;Composerで始める PHPのライブラリ管理&lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/how-to-use-composer-autoload/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/how-to-use-composer-autoload/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/rspec-occasional-fail/&quot;&gt;RSpecが通ったり落ちたりしたときに&lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/rspec-occasional-fail/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/rspec-occasional-fail/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/vimsublime-text-2/&quot;&gt;Vimから３日で乗り換えた、次世代モテエディタ「Sublime Text 2…&lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/vimsublime-text-2/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/vimsublime-text-2/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/job-hunting-3/&quot;&gt;就活日記(3) Quipper&lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/job-hunting-3/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/job-hunting-3/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/yapc-2015/&quot;&gt;YAPC::Asia 2015で心に残ったトーク&amp;amp;スライド #yapcasia &lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/yapc-2015/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/yapc-2015/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/macgiterror-there-was-a-problem-with-the-edit/&quot;&gt;[Mac][git]error: There was a problem with the editor ‘vi’.&lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/macgiterror-there-was-a-problem-with-the-edit/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/macgiterror-there-was-a-problem-with-the-edit/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/coverage-with-codeclimate/&quot;&gt;カバレッジ率計測サービスをCoverallsからCodeClimateに乗り換え…&lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/coverage-with-codeclimate/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/coverage-with-codeclimate/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/ruby-inject/&quot;&gt;Rubyのinjectを使いこなす&lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/ruby-inject/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/ruby-inject/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/windows-s3-sync/&quot;&gt;WindowsコマンドでAmazon S3上にバックアップする &lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/windows-s3-sync/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/windows-s3-sync/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/digital-ocean-vagrant-puppet/&quot;&gt;1円クラウド、DigitalOceanのインスタンスをVagrant upして、puppet…&lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/digital-ocean-vagrant-puppet/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/digital-ocean-vagrant-puppet/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/ruby-vs-go/&quot;&gt;Ruby vs Golang でパフォーマンス比較してみた&lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/ruby-vs-go/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/ruby-vs-go/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/why-you-should-write-shitty-code/&quot;&gt;ひどいコードを書いてもよいとき&lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/why-you-should-write-shitty-code/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/why-you-should-write-shitty-code/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/backbone-learn/&quot;&gt;Backbone.jsをそろそろ学習したい人のための学習リソース集（…&lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/backbone-learn/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/backbone-learn/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/git-pushgithub&quot;&gt;github に git pushした変更の取り消し&lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/git-pushgithub&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/git-pushgithub&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/ruby-on-google-app-engine/&quot;&gt;Ruby on Rails を Google App Engine 上で動かしてみる&lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/ruby-on-google-app-engine/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/ruby-on-google-app-engine/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/rails-new-options/&quot;&gt;rails new するときによく使うオプション&lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/rails-new-options/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/rails-new-options/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/job-hunting-2/&quot;&gt;就活日記(2) freee&lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/job-hunting-2/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/job-hunting-2/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/php-force-property/&quot;&gt;PHPのプロパティをStrictに定義する&lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/php-force-property/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/php-force-property/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/new-xhr-fetch-asyncawait/&quot;&gt;JavaScriptのXHRの送り方いろいろ: XMLHttpRequest, fetch, async/await &lt;/a&gt; &lt;a href=&quot;https://b.hatena.ne.jp/entry/blog.toshimaru.net/new-xhr-fetch-asyncawait/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/new-xhr-fetch-asyncawait/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;最後に&quot;&gt;最後に&lt;/h2&gt;

&lt;p&gt;今後とも本ブログにて、有用な情報をぼちぼち発信していけたら良いな〜と思っておりますので引き続きよろしくお願いします。&lt;/p&gt;</content><author><name>Toshimaru</name></author><category term="https" /><category term="security" /><summary type="html">本ブログが完全HTTPS化されましたのでお知らせ致します。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/https/https.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/https/https.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PHPで文字列をマスキングする関数〜パスワードのマスキングは必要？〜</title><link href="https://blog.toshimaru.net/php-44439/" rel="alternate" type="text/html" title="PHPで文字列をマスキングする関数〜パスワードのマスキングは必要？〜" /><published>2012-09-18T00:00:00+09:00</published><updated>2012-09-18T00:00:00+09:00</updated><id>https://blog.toshimaru.net/php-44439</id><content type="html" xml:base="https://blog.toshimaru.net/php-44439/">&lt;p&gt;PHP一発ネタ。半角英数を「*」でマスキングする。&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/3486237.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;余談だけど、パスワードマスキングという行為はユーザビリティ権威であるヤコブ先生が「ユーザビリティを低下させる」といっております。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Password masking has proven to be a particularly nasty usability problem&lt;br /&gt;&lt;a href=&quot;http://www.useit.com/alertbox/passwords.html&quot;&gt;Stop Password Masking&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;たしかにマスキングという行為がどれほどパスワードをセキュアにしているかは議論の余地があるところ。一方、ユーザはどう感じているかというと、マスキング賛成派が多数。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;入力したパスワードが「*」などと表示された経験があるのは、入力経験者の98.8％とほぼ全員。「*」表示経験者にこのような表示についてどう思うか聞いたところ、「パスワードが見えないほうがいい」が44.1％と最も多く、「どちらかというと見えないほうがいい（23.8％）」とあわせて『肯定派』は67.9％。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://release.center.jp/2009/07/2401.html&quot;&gt;パスワード見たい？「****」表示の肯定派が7割&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;個人的にも慣れの問題があるにしろ、マスキングされたほうが安心かなぁという方に一票。&lt;/p&gt;</content><author><name>Toshimaru</name></author><category term="php" /><category term="security" /><summary type="html">PHP一発ネタ。半角英数を「*」でマスキングする。 余談だけど、パスワードマスキングという行為はユーザビリティ権威であるヤコブ先生が「ユーザビリティを低下させる」といっております。 Password masking has proven to be a particularly nasty usability problemStop Password Masking たしかにマスキングという行為がどれほどパスワードをセキュアにしているかは議論の余地があるところ。一方、ユーザはどう感じているかというと、マスキング賛成派が多数。 入力したパスワードが「*」などと表示された経験があるのは、入力経験者の98.8％とほぼ全員。「*」表示経験者にこのような表示についてどう思うか聞いたところ、「パスワードが見えないほうがいい」が44.1％と最も多く、「どちらかというと見えないほうがいい（23.8％）」とあわせて『肯定派』は67.9％。 パスワード見たい？「****」表示の肯定派が7割 個人的にも慣れの問題があるにしろ、マスキングされたほうが安心かなぁという方に一票。</summary></entry><entry><title type="html">XSS脆弱性のあるPHPコード簡易サンプル</title><link href="https://blog.toshimaru.net/xssphp/" rel="alternate" type="text/html" title="XSS脆弱性のあるPHPコード簡易サンプル" /><published>2011-12-11T00:00:00+09:00</published><updated>2011-12-11T00:00:00+09:00</updated><id>https://blog.toshimaru.net/xssphp</id><content type="html" xml:base="https://blog.toshimaru.net/xssphp/">&lt;p&gt;検証時に検証担当者に「XSSもチェックお願いしますね。」というと「？？？」という返答が帰ってきましたので、簡単なプログラムを作ってその検証担当者に教えました。 その際に使った簡単なコードサンプルです。&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;form action=&amp;quot;&amp;quot; method=&amp;quot;post&amp;quot; accept-charset=&amp;quot;utf-8&amp;quot;&amp;gt;
        &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;xss_text&amp;quot; value=&amp;quot;&amp;quot;&amp;gt;
        &amp;lt;p&amp;gt;&amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;submit&amp;quot;&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;/form&amp;gt;
    value: &amp;lt;?php echo $_POST[&apos;xss_text&apos;]; ?&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;見た目はテキストボックスの内容をそのまま出力するだけの簡単なPHPプログラム。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2011/12/xss.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;しかし、ここに下記の文字列を入れてみます。&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&amp;lt;script&amp;gt;alert(&apos;XSS&apos;);&amp;lt;/script&amp;gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/images/2011/12/xss1.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;見事にスクリプトが実行されました。&lt;/p&gt;
&lt;p&gt;このデータがDBに登録されていて、それを上サンプルのように出力させていると考えると、、、ゾッとしますね。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;XSSの具体的な対策方法や詳細については下記をご参照ください。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.asahi-net.or.jp/~wv7y-kmr/memo/php_security.html#XSS&quot;&gt;http://www.asahi-net.or.jp/~wv7y-kmr/memo/php_security.html#XSS&lt;/a&gt;&lt;/p&gt;</content><author><name>Toshimaru</name></author><category term="php" /><category term="security" /><summary type="html">検証時に検証担当者に「XSSもチェックお願いしますね。」というと「？？？」という返答が帰ってきましたので、簡単なプログラムを作ってその検証担当者に教えました。 その際に使った簡単なコードサンプルです。 &amp;lt;html&amp;gt; &amp;lt;body&amp;gt; &amp;lt;form action=&amp;quot;&amp;quot; method=&amp;quot;post&amp;quot; accept-charset=&amp;quot;utf-8&amp;quot;&amp;gt; &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;xss_text&amp;quot; value=&amp;quot;&amp;quot;&amp;gt; &amp;lt;p&amp;gt;&amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;submit&amp;quot;&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;/form&amp;gt; value: &amp;lt;?php echo $_POST[&apos;xss_text&apos;]; ?&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;</summary></entry><entry><title type="html">john the ripper を使用してパスワードクラッキング</title><link href="https://blog.toshimaru.net/john-the-ripper/" rel="alternate" type="text/html" title="john the ripper を使用してパスワードクラッキング" /><published>2011-12-10T00:00:00+09:00</published><updated>2011-12-10T00:00:00+09:00</updated><id>https://blog.toshimaru.net/john-the-ripper</id><content type="html" xml:base="https://blog.toshimaru.net/john-the-ripper/">&lt;p&gt;簡単で想像しやすいパスワードをLinuxで設定すると簡単にクラックできちゃいますよ、ということを確かめるためにも、今日は&lt;a href=&quot;http://www.openwall.com/john/&quot;&gt;john the ripper&lt;/a&gt;というツールを使ってパスワードを解析してみます。&lt;/p&gt;
&lt;p&gt;まずはインストール。&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;$ sudo apt-get install john&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;クラックするユーザーを作成。&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;$ useradd test
$ passwd test&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;ここでは、ユーザー名を&quot;test&quot;,パスワードも&quot;test&quot;という単純なアカウントを作成します。&lt;/p&gt;
&lt;p&gt;まずはパスワードとshadowファイルを統合させたファイルを作成。&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;$ sudo unshadow /etc/passwd /etc/shadow &amp;gt; /tmp/passfile&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;単純なアカウントなのでシングルモードで解析できます。&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;$ john --single /tmp/passfile
test:test:1001:1001::/home/test:/bin/sh&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;ということでパスワードは解析完了。 他にも辞書ファイルを使ったり、総当たりで当たっていったりもできるようです。&lt;/p&gt;</content><author><name>Toshimaru</name></author><category term="linux" /><category term="security" /><summary type="html">簡単で想像しやすいパスワードをLinuxで設定すると簡単にクラックできちゃいますよ、ということを確かめるためにも、今日はjohn the ripperというツールを使ってパスワードを解析してみます。 まずはインストール。 $ sudo apt-get install john</summary></entry></feed>