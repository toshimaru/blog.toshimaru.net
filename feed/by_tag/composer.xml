<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="https://blog.toshimaru.net/feed/by_tag/composer.xml" rel="self" type="application/atom+xml" /><link href="https://blog.toshimaru.net/" rel="alternate" type="text/html" /><updated>2022-03-08T10:36:29+09:00</updated><id>https://blog.toshimaru.net/feed/by_tag/composer.xml</id><title type="html">Hack Your Design!</title><subtitle>toshimaruの技術系なブログ</subtitle><author><name>Toshimaru</name></author><entry><title type="html">Composerで始める PHPのライブラリ管理</title><link href="https://blog.toshimaru.net/how-to-use-composer-autoload/" rel="alternate" type="text/html" title="Composerで始める PHPのライブラリ管理" /><published>2013-10-24T00:00:00+09:00</published><updated>2013-10-24T00:00:00+09:00</updated><id>https://blog.toshimaru.net/how-to-use-composer-autoload</id><content type="html" xml:base="https://blog.toshimaru.net/how-to-use-composer-autoload/"><![CDATA[<p>PHPも<a href="http://getcomposer.org/">Composer</a>の登場によりライブラリのインストール、依存性管理が格段に楽になりました。既にPHPのライブラリ管理のスタンダードになっていますが、改めてComposerの導入手順について紹介してみたいと思います。</p>

<h2 id="composerのインストール">Composerのインストール</h2>

<p>PHPのバージョンは5.3以降が必要です。PHP5.2以前はさっさと捨てるべし！</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ curl -s https://getcomposer.org/installer | php
</code></pre></div></div>

<p>さてこれで<code class="language-plaintext highlighter-rouge">composer.phar</code>が手に入りました。<code class="language-plaintext highlighter-rouge">composer</code>コマンドを使えるようにするためにパスの通った場所に<code class="language-plaintext highlighter-rouge">composer.phar</code>を移動しましょう。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sudo mv composer.phar /usr/local/bin/composer
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">composer</code>コマンド準備完了です。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ composer
   ______
  / ____/___  ____ ___  ____  ____  ________  _____
 / /   / __ \/ __ `__ \/ __ \/ __ \/ ___/ _ \/ ___/
/ /___/ /_/ / / / / / / /_/ / /_/ (__  )  __/ /
\____/\____/_/ /_/ /_/ .___/\____/____/\___/_/
                    /_/
Composer version b482ebe0ca18321d9322bd913af73c1c55adebf1 2013-09-23 09:55:49
</code></pre></div></div>

<h2 id="依存関係の記述">依存関係の記述</h2>

<p>composerはプロジェクトルートの <code class="language-plaintext highlighter-rouge">composer.json</code> ファイルにライブラリを記述することで依存関係の管理を行います。（composer.jsonはnpmにおけるpackage.jsonみたいなものです）早速ファイルを作ってライブラリを記述してみましょう。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ touch composer.json
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">composer.json</code>ファイルに下記のように記述します。ここではPHPUnitをインストールしてみます。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
    "require": {
        "phpunit/phpunit": "3.7.*"
    }
}
</code></pre></div></div>

<h2 id="ライブラリのインストール">ライブラリのインストール</h2>

<p><code class="language-plaintext highlighter-rouge">composer.json</code>ファイルを記述し終えたら、composerコマンドでライブラリのインストールを行います。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ composer install
Loading composer repositories with package information
Installing dependencies (including require-dev)
  - Installing symfony/yaml (v2.3.6)
    Loading from cache

  - ..............

  - Installing phpunit/phpunit (3.7.28)
    Loading from cache

phpunit/phpunit suggests installing phpunit/php-invoker (&gt;=1.1.0,&lt;1.2.0)
Writing lock file
Generating autoload files
</code></pre></div></div>

<p>うまいこといきました。ライブラリは<code class="language-plaintext highlighter-rouge">vendor</code>ディレクトリ下に格納されます。この時同時にバージョン情報が書かれた<code class="language-plaintext highlighter-rouge">composer.lock</code>ファイルも生成します。</p>

<h2 id="ライブラリのアップデート">ライブラリのアップデート</h2>

<p>ライブラリのアップデートに関しては下記のコマンドでOK.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ composer update
</code></pre></div></div>

<h2 id="まとめ">まとめ</h2>

<p>モダンなPHPパッケージ管理であればComposer一択でしょう。PEARとの使い分けに関しては<a href="http://ja.phptherightway.com/#依存関係の管理">PHP Right Way</a>にはこのように書いてあります。</p>

<blockquote>
  <ul>
    <li>Composer を使うのは、ひとつのプロジェクトにおける依存関係を管理するとき。</li>
    <li>PEAR を使うのは、システム全体の PHP 環境の依存関係を管理するとき。</li>
  </ul>
</blockquote>

<p>大抵の場合、後者のようにシステム全体で依存性管理をしなきゃならん理由はないと思うのでComposerで依存管理を行いましょう！</p>]]></content><author><name>Toshimaru</name></author><category term="php" /><category term="composer" /><summary type="html"><![CDATA[PHPもComposerの登場によりライブラリのインストール、依存性管理が格段に楽になりました。既にPHPのライブラリ管理のスタンダードになっていますが、改めてComposerの導入手順について紹介してみたいと思います。]]></summary></entry></feed>