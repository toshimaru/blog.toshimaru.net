<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://blog.toshimaru.net/feed/by_tag/management.xml" rel="self" type="application/atom+xml" /><link href="https://blog.toshimaru.net/" rel="alternate" type="text/html" /><updated>2020-11-24T01:09:01+09:00</updated><id>https://blog.toshimaru.net/feed/by_tag/management.xml</id><title type="html">Hack Your Design!</title><subtitle>toshimaruの技術系なブログ</subtitle><author><name>Toshimaru</name></author><entry><title type="html">VOYAGE GROUPの『公開技術力評価会』に行ってエンジニア評価と給与設定について本気出して考えた</title><link href="https://blog.toshimaru.net/vg-tech-assessment/" rel="alternate" type="text/html" title="VOYAGE GROUPの『公開技術力評価会』に行ってエンジニア評価と給与設定について本気出して考えた" /><published>2019-02-08T00:00:00+09:00</published><updated>2019-02-08T00:00:00+09:00</updated><id>https://blog.toshimaru.net/vg-tech-assessment</id><content type="html" xml:base="https://blog.toshimaru.net/vg-tech-assessment/">&lt;p&gt;先日&lt;a href=&quot;https://voyagegroup.connpass.com/event/111412/&quot;&gt;VOYAGE GROUP エンジニアの公開ガチ評価会&lt;/a&gt;というイベントに行ってきた。イベントの細かな内容まとめは&lt;a href=&quot;https://shinkufencer.hateblo.jp/entry/2019/01/30/235537&quot;&gt;他の方のブログ&lt;/a&gt;に譲るとして、エンジニアの評価についていろいろ考える良いきっかけとなったので書いてみる。&lt;/p&gt;

&lt;h2 id=&quot;人の評価は難しい&quot;&gt;人の評価は難しい&lt;/h2&gt;

&lt;p&gt;（エンジニアに限らず）&lt;strong&gt;人の評価は難しい&lt;/strong&gt;。自分も人を評価する立場になって改めて思う。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;付与できる昇給額やインセンティブに対して使える原資は限られている。加えて、本人の高い自己評価に対して組織の求める期待値との乖離や、他のメンバーとの相対評価の間にミスマッチがあるケースだって少なくない。&lt;/p&gt;

  &lt;p&gt;良い評価を伝えられる人と残念な結果を伝えなければならない人のことを考え、与えられた予算の中で精一杯納得感のある評価を伝えたいと思い悩む日々。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://note.mu/kazukomati/n/nd02cbddf40f5&quot;&gt;マネージャーの視点から見える向こう側の景色｜Kazutaka Irie｜note&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;僕自身、評価では苦い思いをしてきた。所属するチームの上長・部の上長ともに高い評価を貰ったのに天の意思によりランク・お給料ともに無風だった経験。自らの技術力を総動員してプロジェクトのイニシャルリリースを成功に導いたが、その後プロジェクト自体が失敗したために社内的にその功績は全く評価されなかった経験。市場価値より低く買い叩かれているなという経験&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;そんな僕自身の苦い経験から「&lt;strong&gt;自分が評価するメンバーにはできる限り納得感のある評価をしたい&lt;/strong&gt;」という強い思いがあり、今回のイベント参加に至った。&lt;/p&gt;

&lt;h2 id=&quot;納得感のある評価&quot;&gt;納得感のある評価&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;評価は納得感があればなんだっていい&lt;/strong&gt; と個人的に思っている。&lt;/p&gt;

&lt;p&gt;極論、そこに納得感があるのであればじゃんけんで評価を決めても良い。例えば組織の全員が自他ともに「みんながんばっているよ、優劣はとくにないよ」という認識で評価が画一化されているのであれば「じゃあ今期の評価はじゃんけんで」という提案はもしかしたら受け入れてもらえるかもしれない&lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;。たとえじゃんけんだとしてもそれにメンバー全員が納得し不満が全く無いのであれば、それは立派な評価だ。&lt;/p&gt;

&lt;p&gt;だが実際問題、全員が納得できるような評価を行うのは極めて難しい。全ての評価が良いものになるとは限らないし、自己評価と会社からの評価が必ずしも一致はしないからだ。その齟齬が生じていたときに評価者は被評価者にいかに納得できる理由を提示できるかが重要だ。&lt;/p&gt;

&lt;h2 id=&quot;技術力評価会&quot;&gt;技術力評価会&lt;/h2&gt;

&lt;p&gt;そういう意味でVOYAGEさんのエンジニア技術評価会はエンジニアにとって納得感のある評価が可能な評価制度になっていると感じた。具体的には下記のポイントである。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;定量化しない&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;オープンな評価&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;揚げ足取りをしない&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;複数人の専門家による評価&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;社外評価者&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ビジネス指向&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;e35aab51031244dd9ed3aaeac157871b&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;h3 id=&quot;定量化しない&quot;&gt;定量化しない&lt;/h3&gt;

&lt;p&gt;まず面白いなと思ったのは技術力評価会では &lt;strong&gt;評価を定量化しない&lt;/strong&gt; ということだ。多くの企業では評価は何かしらの形で定量化してアウトプットすると思う。例えばABCDEの五段階評価、100点満点中何点などだ。&lt;/p&gt;

&lt;p&gt;定量的な評価アプローチはわかりやすい反面、評価者の評価の甘辛で評価が低くなったり高くなったりすることがあり難しい。また評価基準もまちまちになりがちで、全社的に公平な評価基準を作ることは個人的には無理だと思う（例えば100点満点だとしたら100点となる基準は何か？/その基準は明確かつ公平か？/120点の人の20点は評価されないのか？など）。&lt;/p&gt;

&lt;p&gt;技術力評価会では定量化しない代わりにフィードバックとなる文章をしっかり書くという構造になっている。無理に定量化するよりもこのように文書を通じたフィードバックを行うほうが上述の定量化の問題も起きないし、被評価者の納得感も得られやすいと思う。&lt;/p&gt;

&lt;h3 id=&quot;オープンな評価&quot;&gt;オープンな評価&lt;/h3&gt;

&lt;p&gt;各人のランク（グレード）および &lt;strong&gt;評価結果をGitHubでオープンにしている&lt;/strong&gt; ということも興味深い。&lt;/p&gt;

&lt;p&gt;評価をオープンにすることは評価の透明性が担保される一方で、「なぜあの人が私/俺よりランクが高いのか？」という不満も呼び込みやすく諸刃の剣の施策だ。ただVOYAGEさんの場合、被評価者の声を拾いつつ評価制度を納得感のあるようにブラッシュアップしてきているようなのでオープンにすることで得られるメリットのほうが大きいと感じた。&lt;/p&gt;

&lt;p&gt;オープンにすることでロールモデルのイメージが得られるのも良い。同じチームにおいてAさんよりランクが上のBさんがいたとする。この状況においてAさんは下記の様な具体的なアクションをとることができる。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;「Bさん（ロールモデル）のように行動すればランクが上がる」&lt;/li&gt;
  &lt;li&gt;オープンになっているBさんの評価をみにいく&lt;/li&gt;
  &lt;li&gt;Bさんの評価されているところを確認する&lt;/li&gt;
  &lt;li&gt;Bさんの評価されているところを真似る&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;このような組織全体がレベルアップしていく絵を描きやすい。&lt;/p&gt;

&lt;p&gt;他に評価をオープンにしている会社の例としてはペパボさんがある。こちらも参照されたい。&lt;a href=&quot;https://tech.pepabo.com/2018/06/14/engineer-assessment/&quot;&gt;ペパボのエンジニア文化を醸成するエンジニア評価制度 - ペパボテックブログ&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;揚げ足取りをしない&quot;&gt;揚げ足取りをしない&lt;/h3&gt;

&lt;p&gt;基本的に評価会においては揚げ足取りをしない。揚げ足となる指摘としては例えば「ここtypoあるね？」「スタイルガイドに沿っていないコードじゃない？」などだ。誰だって小さなミスはある。本質的な部分のみで評価しようという姿勢がよかった。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;揚げ足取りはやらないってのは地味にめちゃくちゃ重要な気がする。本質的な指摘で評価したいよね&lt;a href=&quot;https://twitter.com/hashtag/vg_tech_assessment?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#vg_tech_assessment&lt;/a&gt;&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/1090566565148278785?ref_src=twsrc%5Etfw&quot;&gt;January 30, 2019&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3 id=&quot;複数人の専門家による評価&quot;&gt;複数人の専門家による評価&lt;/h3&gt;

&lt;p&gt;フロントエンジニアの技術力をバックエンドエンジニアは評価できない。逆もまた然りでバックエンドエンジニアの技術力をフロントエンジニアは評価できない。このように異なる職種の異なる技術スタックのエンジニア同士は基本的に評価はできない。&lt;/p&gt;

&lt;p&gt;VOYAGEさんの場合、チーム関係なくチームを跨いで &lt;strong&gt;二人以上の適切な評価者が設定されるような仕組みを取ることで評価者・被評価者のミスマッチを防ぐ&lt;/strong&gt;。被評価者をきちんと評価できる技術者がきちんとアサインされるわけだ。&lt;/p&gt;

&lt;p&gt;そして一人ではなく二人以上とすることもポイントだと思っていて、複数の評価観点・視座で評価を行うことで偏った評価を防ぐことができる（実際、評価会の中で評価者によって意見が分かれる場面があった）。&lt;/p&gt;

&lt;h3 id=&quot;社外評価者&quot;&gt;社外評価者&lt;/h3&gt;

&lt;p&gt;なまじ社内事情がわかっていると（チームのメンバー状況・プロダクトの歴史やバックグラウンドなど）、意図せずとも社内のコンテキストによるバイアスが入るかもしれない。また社内の評価基準が社外の評価―つまり業界的な評価基準と離れてしまうかもしれない。あるいは社内のリソースだけで十分な専門家の観点を用意できないかもしれない（例えば機械学習エンジニアの領域など）。&lt;/p&gt;

&lt;p&gt;これらの問題を解消し評価をフェアに行うために &lt;strong&gt;評価者を外部から招いて３人目の評価者として入れる&lt;/strong&gt; のは良いアイディアだと思った。外部の”強い”エンジニアの評価となれば被評価者の納得感も増すはずだ。&lt;/p&gt;

&lt;h3 id=&quot;ビジネス指向&quot;&gt;ビジネス指向&lt;/h3&gt;

&lt;p&gt;評価会では技術選定について聞く場面もあった。「なぜその技術選定（今回でいうとReact.js）に至ったのか？」&lt;/p&gt;

&lt;p&gt;「流行ってるからReact.js」「jQueryはイケてないのでReact.js」…こういった回答だと不十分でもう一歩本質的な理由に踏み込むように評価者が導くように質問を展開していたのが印象的だった。&lt;/p&gt;

&lt;p&gt;本質的な理由としては「DOMにステートを持たせたくない」「フロントエンドをテスタブルにしたい 」「メンテナビリティを高めたい」のようなもので、それが最終的にプロダクトの品質向上に繋がりビジネス的にもインパクトがあるよね？というところまで一緒に落とし込んでいるのが流石だと感じた。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;「技術的な投資判断はどのようにプロセスを経てなされたのか」良い観点の質問だなぁ&lt;a href=&quot;https://twitter.com/hashtag/vg_tech_assessment?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#vg_tech_assessment&lt;/a&gt;&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/1090570758693122048?ref_src=twsrc%5Etfw&quot;&gt;January 30, 2019&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;エンジニアはともすると技術選定や設計の場面でエゴに走りがちだ。そこで &lt;strong&gt;評価者がきちんとビジネス的な視座を持たせてあげるように誘導&lt;/strong&gt; してあげることで、エンジニアだけではなくビジネス側に所属する人たちにも評価してもらえるような理由付けをしている点が素晴らしいと思った。&lt;/p&gt;

&lt;h2 id=&quot;エンジニアの評価制度の設計と導入&quot;&gt;エンジニアの評価制度の設計と導入&lt;/h2&gt;

&lt;p&gt;さてここまで「エンジニア技術力評価会は良い制度だった」という話をしてきたわけだが、いざ自分の所属組織でも導入するか？と問われるとおそらくやらないし、やってみようぜ！という提案もしないと思う。&lt;/p&gt;

&lt;p&gt;なぜか？　理由はコストが高すぎるから。評価者一人に対して被評価者が10人アサインされるとしよう。評価時間90分×10人分で900分、評価会単体の時間だけで15時間。それに加えて一人ひとりの評価を記入する時間を30分上乗せするとして30分x10人分で300分でプラス5時間。つまりランクの高い評価者一人あたり最低でも20時間（営業日換算で2.5営業日）は奪われるわけだ。&lt;/p&gt;

&lt;p&gt;納得感のある評価を徹底するのはコストがかかる。もちろんそれだけのコストをかけるだけのメリットは享受できると思う。しかし不満もそこまでなくそこそこ上手く回っている既存のエンジニアの技術力評価をひっくり返してまで導入するかというと答えはNOだとは思う。&lt;/p&gt;

&lt;p&gt;もし既存の技術力評価に問題があったとしてもなかなか導入は難しいと感じる。なぜならそれだけのコストがかかる制度導入は関係各所のコンセンサスを得るのが難しいからだ。ボトムアップで突き上げて制度を導入するには相当なパワーと時間が必要だ。&lt;/p&gt;

&lt;p&gt;ではどう導入するのが一番手っ取り早いかというと、CTOなどからトップダウンで制度を導入することだ。VOYAGEさんの場合もCTOの小賀さんの強い力と思いがあったからこそ実現した制度だと感じた。&lt;/p&gt;

&lt;h2 id=&quot;ランクと給与をマッチさせるべきか&quot;&gt;ランクと給与をマッチさせるべきか？&lt;/h2&gt;

&lt;p&gt;全く別の論点として、ランクと給与をマッチさせるべきかどうかという話がある。VOYAGEさんの場合、技術力評価などによって決まるグレードと給与が緩やかに結びついているという話を懇親会で聞いた。&lt;/p&gt;

&lt;h3 id=&quot;給与テーブル&quot;&gt;給与テーブル&lt;/h3&gt;

&lt;p&gt;多くの企業は下記のような給与テーブルが設定されていると思う。下記はSmartHRさんの例だ。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/tech_assessment/smarthr.png&quot; alt=&quot;給与テーブル&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/miyasho88/we-are-hiring&quot;&gt;SmartHR会社紹介資料 - Speaker Deck&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;この給与テーブルの仕組みは厳密に運用できていれば納得感もあるだろうし問題ないと思う。しかし問題があるケースとしては例外を作ってしまうことだ。具体的には前職の給与のスライドによって給与テーブルから外れる人が出てしまうこと。これをやると &lt;strong&gt;給与テーブルという仕組み自体が崩壊し評価制度が矛盾を引き起こしひいてはエンジニアの不満・軋轢へとつながっていく&lt;/strong&gt;。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;現年収を聞く理由は下記の2つくらいしか思い浮かびません。&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;エンジニアを安く採用したい&lt;/li&gt;
    &lt;li&gt;自社で評価せず、他社の評価を使って楽したい&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;給与テーブルや評価基準を明確にしている企業様は現年収を聞かないようにして頂けると、「この企業は評価基準が明確なのか」と分かるので聞かないようにして頂ければ幸いです。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://sinsoku.hatenablog.com/entry/2018/03/06/002028&quot;&gt;面接で現年収(前職の年収)を聞かれるのが嫌い - アジャイルSEの憂鬱&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;その点SmartHRさんは下記の記事の通り厳格な給与テーブルの運用を行っており素晴らしい姿勢だと思う。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;現年収や希望年収を聞かずに、経験や能力、期待する役割、社内の水準と照らし合わせてオファー金額を決めています。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.shojimiyata.com/entry/2019/01/14/234020&quot;&gt;SmartHR社が面談で「現年収・希望年収」を聞かない理由 - 宮田昇始のブログ&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;市場価値で給与を決定&quot;&gt;市場価値で給与を決定&lt;/h3&gt;

&lt;p&gt;サイボウズさんの場合、社内評価だけで給与を決めるということはせず &lt;strong&gt;市場価値で給料を決めている&lt;/strong&gt;。市場価値という概念を取り入れて給与を決めるのはなかなか他に例を聞かず、非常に面白い取り組みだと思った。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;サイボウズの給与は「その人の市場価値」で決定されます。市場価値とは「社外的価値」と「社内的価値」の2つで決まります。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://cybozushiki.cybozu.co.jp/articles/m001020.html&quot;&gt;サイボウズの給料は「あなたが転職したらいくら？」で決めています | サイボウズ式&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;エンジニアは給与によって転職してしまうことが多い。社内で高く評価しているのにもかかわらず、お金という理由だけで転職してしまうのだとしたらそれは不幸なことだ。そういった不幸な転職を防ぐために市場価値を給与の決定要因にするのは悪くない判断だと思う。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;思い切った賃金テーブルの改定が行えない企業が世の中には多いようで、&lt;a href=&quot;https://b.hatena.ne.jp/entry/356805083/comment/mizchi&quot;&gt;転職すると年収が上がるというバグ&lt;/a&gt;が報告されている。&lt;/p&gt;

  &lt;p&gt;（中略）&lt;/p&gt;

  &lt;p&gt;社内で手放したくないエンジニアがいるという企業は、年収バグ起因で他の企業に転職されちゃう前にきちんと実力・成果に応じた報酬設定を行うべきた。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.toshimaru.net/engineer-hiring/&quot;&gt;『その「エンジニア採用」が不幸を生む』を読んだ ~優秀エンジニアをどう採用するか~ - Hack Your Design!&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;人を正しく評価する社会であってほしい&quot;&gt;人を正しく評価する社会であってほしい&lt;/h2&gt;

&lt;p&gt;エンジニアの転職市場は活況でまだしばらくその情報は続きそうだ。エンジニアを正しく評価し適切な給与設定をしなければ簡単に他社になびいてしまう。&lt;/p&gt;

&lt;p&gt;本記事ではVOYAGEさんのエンジニア技術力評価会制度、SmartHRさんの厳格な給与テーブル運用、サイボウズさんの市場価格よる給与決定を紹介した。どれも素晴らしい取り組み・姿勢であり各社「正しい評価をしよう」という努力が見て取れる。&lt;/p&gt;

&lt;p&gt;本記事ではエンジニア評価という切り口だったため、エンジニアに焦点をあてた内容になった。しかしエンジニアだけではない。&lt;strong&gt;優秀な人が優秀な人として正しく評価される&lt;/strong&gt;―そんな社会であってほしいと切に願う。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;能力の高い人は静かにうつむいて仕事に打ち込む傾向があるいうことです。仕事での業績が認められ、何も言わずに出世の道が開かれることを望み、自分から申し出なければならないと知ると、憤りを覚えて不満をこぼすようになり、最終的にもっと評価してもらえると感じられる場所へ飛び立っていきます。そして、そのパターンを繰り返します。&lt;/p&gt;

  &lt;p&gt;往々にして経営者は優秀な人材が辞めていくことに驚き、理由がわからないでいます。これは経営者が配慮していなかったことが原因ですが、社員が去るまでその人材の価値を理解していない経営者がいるのは残念なことです。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://jp.quora.com/%E8%83%BD%E5%8A%9B%E3%81%AE%E9%AB%98%E3%81%84%E4%BA%BA%E3%81%8C%E5%87%BA%E4%B8%96%E3%81%97%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF%E3%81%AA%E3%81%9C%E3%81%A7%E3%81%99%E3%81%8B&quot;&gt;能力の高い人が出世しないのはなぜですか？ - Quora&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;参考文献&quot;&gt;参考文献&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://seleck.cc/834&quot;&gt;VOYAGEのエンジニア評価制度の全貌。「技術力評価会」による、人が育つ組織の作り方 | SELECK [セレック]&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/makoga/technology-assessment-2018-04-25&quot;&gt;エンジニアの技術力評価は難しい? - 7年間運用してきた技術力評価制度の改善の歴史 ‒ / technology assessment 2018 04 25 - Speaker Deck&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;市場価値のソースは転職ドラフト。ちなみに今は市場価値以上のお賃金はもらってますよ。念の為。 &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;実際はこのケースにおいては全員を同じようにランクアップさせるのが良いとは思う &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Toshimaru</name></author><category term="management" /><summary type="html">先日VOYAGE GROUP エンジニアの公開ガチ評価会というイベントに行ってきた。イベントの細かな内容まとめは他の方のブログに譲るとして、エンジニアの評価についていろいろ考える良いきっかけとなったので書いてみる。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/tech_assessment/og.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/tech_assessment/og.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">『Team Geek』読んだ ~HRT(謙虚/尊敬/信頼)の精神を知り会社でサバイブしていく方法~</title><link href="https://blog.toshimaru.net/team-geek/" rel="alternate" type="text/html" title="『Team Geek』読んだ ~HRT(謙虚/尊敬/信頼)の精神を知り会社でサバイブしていく方法~" /><published>2018-10-26T00:00:00+09:00</published><updated>2019-07-03T00:00:00+09:00</updated><id>https://blog.toshimaru.net/team-geek</id><content type="html" xml:base="https://blog.toshimaru.net/team-geek/">&lt;p&gt;かの有名な&lt;strong&gt;HRTの精神の原典&lt;/strong&gt;になっている本ということで読んでみた。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.amazon.co.jp/Team-Geek-%E2%80%95Google%E3%81%AE%E3%82%AE%E3%83%BC%E3%82%AF%E3%81%9F%E3%81%A1%E3%81%AF%E3%81%84%E3%81%8B%E3%81%AB%E3%81%97%E3%81%A6%E3%83%81%E3%83%BC%E3%83%A0%E3%82%92%E4%BD%9C%E3%82%8B%E3%81%AE%E3%81%8B-Brian-Fitzpatrick/dp/4873116309/ref=as_li_ss_il?ie=UTF8&amp;amp;qid=1540485309&amp;amp;sr=8-1&amp;amp;keywords=team+geek&amp;amp;linkCode=li3&amp;amp;tag=toshimaru-22&amp;amp;linkId=40736310d52f5cf2ad4d58ee4b35f4e3&amp;amp;language=ja_JP&quot; target=&quot;_blank&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;ASIN=4873116309&amp;amp;Format=_SL250_&amp;amp;ID=AsinImage&amp;amp;MarketPlace=JP&amp;amp;ServiceVersion=20070822&amp;amp;WS=1&amp;amp;tag=toshimaru-22&amp;amp;language=ja_JP&quot; /&gt;&lt;/a&gt;&lt;img src=&quot;https://ir-jp.amazon-adsystem.com/e/ir?t=toshimaru-22&amp;amp;language=ja_JP&amp;amp;l=li3&amp;amp;o=9&amp;amp;a=4873116309&quot; width=&quot;1&quot; height=&quot;1&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;border:none !important; margin:0px !important;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;内容紹介&quot;&gt;内容紹介&lt;/h2&gt;

&lt;p&gt;読む前の印象としてはHRT精神ということでどんなエモい内容が書かれているんだろう…と期待していたのだがとんでもない、めちゃくちゃ実践的で（誤解を恐れずに言うと）、狡猾な内容が書かれていた。&lt;/p&gt;

&lt;p&gt;本書では「人間は複雑でありバグの塊」という身も蓋もない前提事項を明確にした上で、「ではそんなバグバグでダメな人間とどう向き合っていけばよいか」を具体的に記載している。&lt;/p&gt;

&lt;p&gt;また本書の面白い点は、会社内でうまく立ち回るためにときに社内政治・ソーシャルエンジニアリングさえも行う必要があると説かれている点だ。こういった活動はおよそソフトウェアエンジニアとは程遠いスキルのように思われるが、本書ではしっかりと言及され社内でどううまく立ち回っていけばよいか説明されている。&lt;/p&gt;

&lt;h2 id=&quot;hrt&quot;&gt;HRT&lt;/h2&gt;

&lt;p&gt;HRTとは謙虚（&lt;strong&gt;Humility&lt;/strong&gt;）、尊敬（&lt;strong&gt;Respect&lt;/strong&gt;）、信頼（&lt;strong&gt;Trust&lt;/strong&gt;）のそれぞれの頭文字三文字をとった言葉だ。読み方は「ハート(heart)」というらしい。それぞれの用語を解説する。&lt;/p&gt;

&lt;h3 id=&quot;謙虚humility&quot;&gt;謙虚（Humility）&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;世界の中心は君ではない&lt;/strong&gt;。君は全知全能ではないし、絶対に正しいわけでもない。常に自分を改善しよう。&lt;/p&gt;

&lt;h3 id=&quot;尊敬respect&quot;&gt;尊敬（Respect）&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;一緒に働く人のことを心から思いやろう&lt;/strong&gt;。相手を一人の人間として扱い、その能力や功績を高く評価しよう。&lt;/p&gt;

&lt;h3 id=&quot;信頼trust&quot;&gt;信頼（Trust）&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;自分以外の人は有能であり、正しいことをすると信じよう&lt;/strong&gt;。そうすれば仕事を自分以外の誰かに任せることができる（ただし無能な人には任せるのは難しい）。&lt;/p&gt;

&lt;h3 id=&quot;あらゆる人間関係の衝突はhrtの欠如によるもの&quot;&gt;あらゆる人間関係の衝突はHRTの欠如によるもの&lt;/h3&gt;

&lt;p&gt;そして本書では下記のように言い切っている。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;あらゆる人間関係の衝突は、謙虚・尊敬・信頼の欠如によるものだ&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;つまり人間関係が悪化している場合、それはあなたもしくは誰かが「謙虚ではない・尊敬の念を持っていない・信頼していない」ことから生じていると考えてよい。&lt;/p&gt;

&lt;h2 id=&quot;コードレビューとhrt&quot;&gt;コードレビューとHRT&lt;/h2&gt;

&lt;p&gt;私見だが特にエンジニアのコードレビューの場面においてこのHRTの精神は大事にすべきだと考えている。&lt;/p&gt;

&lt;p&gt;GitHubなどのコードレビューツールの台頭によりコードレビューが圧倒的にしやすくなった反面、文章によるコードレビューは容易に人の心を傷つける。具体的にはコードに対する批判を人に対する批判（人格否定）だと受け取ったり、文章だと感情が伝わりづらく何気ないレビューコメントが「怒ってそう」「高圧的で怖い」などと受け取られたり…。&lt;/p&gt;

&lt;p&gt;コードレビュー時には上述したようなすれ違いが起きないように、なるべく気をつけてHRTな振る舞いをするようにしたい。僕がレビューのときに気をつけていることとしては下記のことだ。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;絵文字を使う😃
    &lt;ul&gt;
      &lt;li&gt;絵文字を駆使して感情を伝える。フレンドリーさを演出する&lt;/li&gt;
      &lt;li&gt;その結果感情の誤読は減り、コミュニケーションはより活発になる&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;断定口調は使わない
    &lt;ul&gt;
      &lt;li&gt;「〜のほうが良い」「〜はダメ」という断定は自分が間違っている可能性を否定しているので &lt;strong&gt;謙虚さ&lt;/strong&gt; に欠ける&lt;/li&gt;
      &lt;li&gt;「〜のほうが良いと思っているのですがどうでしょうか」などと相手の反論の余地を残してやるべき&lt;/li&gt;
      &lt;li&gt;なにか断定したいのであれば少なくともレビュイーが納得できるに足る理由を上げるべき&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;命令ではなく提案
    &lt;ul&gt;
      &lt;li&gt;「〜に変更してください」という命令は相手のコードを &lt;strong&gt;尊敬&lt;/strong&gt; していないし &lt;strong&gt;信頼&lt;/strong&gt; していないように聞こえる&lt;/li&gt;
      &lt;li&gt;命令でなく「〜と書いてみるのはいかがでしょう？」という提案に形式を変えてみるとよい&lt;/li&gt;
      &lt;li&gt;断定同様にきちんと理由も述べる&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;強い言葉を使わない（弱くみえるぞ？）
    &lt;ul&gt;
      &lt;li&gt;「クソコード」などの強い言葉は使わない。相手への &lt;strong&gt;尊敬&lt;/strong&gt; が全くないのでNG&lt;/li&gt;
      &lt;li&gt;強い言葉を使いたくなるような場面だとコードレビューでのすれ違いが起きる可能性が高いので口頭でカバーするのが吉&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;有害な人間と付き合う&quot;&gt;有害な人間と付き合う&lt;/h2&gt;

&lt;p&gt;第四章のトピックは &lt;strong&gt;有害な人に対処する&lt;/strong&gt; だ。本章では「チームの文化を破壊するアウトサイダーから身を守る方法」について説明される。&lt;/p&gt;

&lt;h3 id=&quot;有害な人への対策&quot;&gt;有害な人への対策&lt;/h3&gt;

&lt;p&gt;下記のような手段でチームの文化を強固にしておけば、有害な人の有害な振る舞いを受け入れにくくなる。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;ミッション・ステートメント&lt;/strong&gt; の作成
    &lt;ul&gt;
      &lt;li&gt;チームの目標を明確にする&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;メールで議論するときの &lt;strong&gt;マナー&lt;/strong&gt; を決める
    &lt;ul&gt;
      &lt;li&gt;OSSでいう&lt;a href=&quot;https://gihyo.jp/admin/clip/01/linux_dt/201809/19&quot;&gt;Code of Conduct&lt;/a&gt;的なもの&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;すべての &lt;strong&gt;履歴を文書化&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;新参者が履歴を追えるように&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;バグ修正・テスト・リリースについて &lt;strong&gt;明確なポリシー・手続き&lt;/strong&gt; を策定&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;合意ベースの決定&lt;/strong&gt; を信頼する
    &lt;ul&gt;
      &lt;li&gt;あわせて合意できなかったときの衝突解消のプロセスも定義する&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;有害な人のパターン&quot;&gt;有害な人のパターン&lt;/h3&gt;

&lt;p&gt;有害な人のパターンとしては下記のパターンが存在する。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;他人の時間を尊重しない人
    &lt;ul&gt;
      &lt;li&gt;プロジェクトの文書、READMEを読めばわかることを何度も質問して邪魔する&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;エゴが強い人
    &lt;ul&gt;
      &lt;li&gt;合意を受け入れられない人・異なる視点の意見に耳を傾けない人・妥協できない人&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;何かを要求する人
    &lt;ul&gt;
      &lt;li&gt;ソフトウェアに対して不満はいうが、貢献する気のない人の可能性がある&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;未熟なコミュニケーションをする人
    &lt;ul&gt;
      &lt;li&gt;草を生やしまくったり(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;w&lt;/code&gt;を多用すること)、大文字や記号を多用する&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;パラノイアな人
    &lt;ul&gt;
      &lt;li&gt;被害妄想を持ち、陰謀論を唱えるような人&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;完璧主義な人
    &lt;ul&gt;
      &lt;li&gt;ソフトウェアの設計に時間をかけすぎる人&lt;/li&gt;
      &lt;li&gt;チームの進捗を停滞させてしまう&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;有害な人を追い出す&quot;&gt;有害な人を追い出す&lt;/h3&gt;

&lt;p&gt;本書では最終的に&lt;strong&gt;有害な人は追い出してよい&lt;/strong&gt;と述べている。もちろん最初からではなくきちんとコミュニケーションをとった上でそれでも問題が解消されないようであれば、最後の手段としての＜追い出し＞だ。&lt;/p&gt;

&lt;h2 id=&quot;社内政治ソーシャルエンジニアリング&quot;&gt;社内政治、ソーシャルエンジニアリング&lt;/h2&gt;

&lt;p&gt;5章は組織的操作の技法がトピックであり、「仕事を効率的に進めるための小手先のテクニックが必要」だと述べられている。小手先のテクニックとはつまり &lt;strong&gt;社内政治、ソーシャルエンジニアリング&lt;/strong&gt; のことである。&lt;/p&gt;

&lt;p&gt;社内政治という言葉はエンジニアの対極にある慣習のように思えるし、あなたがエンジニアであれば「社内政治なんてとんでもない！」と思うかもしれない。しかしときにそういう手段も必要だとハッキリ説いているのが本書の面白いところと言える。&lt;/p&gt;

&lt;h3 id=&quot;自分の価値を高める&quot;&gt;自分の価値を高める&lt;/h3&gt;

&lt;p&gt;自分の価値を高める振る舞いとして下記のような振る舞いが紹介されている。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;自分の責任範囲を広げる
    &lt;ul&gt;
      &lt;li&gt;マネージャーの作業負担軽減になる&lt;/li&gt;
      &lt;li&gt;自分自身の能力を示すことができる&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;リスクをとる
    &lt;ul&gt;
      &lt;li&gt;すばやく失敗してすばやく学習する&lt;/li&gt;
      &lt;li&gt;失敗したら何が起きたかを文書化して再発防止策に努める&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;大人らしく振る舞う
    &lt;ul&gt;
      &lt;li&gt;マネージャーから子供扱いを受けないために&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;質問する
    &lt;ul&gt;
      &lt;li&gt;納得できないことがあれば根拠について質問したり議論する&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;マネージャーはエスパーではない
    &lt;ul&gt;
      &lt;li&gt;自分が何をしているかをマネージャーに報告する&lt;/li&gt;
      &lt;li&gt;マイクロマネジメントの回避策にもなる&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;自分が居心地のいい場所を作る&quot;&gt;自分が居心地のいい場所を作る&lt;/h3&gt;

&lt;p&gt;平たくいうと「&lt;strong&gt;組織がクソなこともある。組織に期待せず自分でよい組織を作るという意識を持て&lt;/strong&gt;」ということが書いてある。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;会社にはルールがある。曲げてもいいものもあれば、ぶち壊していいものある。組織のなかで振る舞うべきことばかりに集中していると、不満や失望を感じるだけだ。組織はそういうものだと認めよう。組織を動かして自分の仕事に利用できる仕組みを見つけよう。自分が居心地のいい場所を作り出すのである。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;自分を売り込む&quot;&gt;自分を売り込む&lt;/h3&gt;

&lt;p&gt;自分を売り込むという行為もまたエンジニアらしからぬ行為のようにも思えるが時には必要だ。つまり&lt;strong&gt;うまくやっていることを上司やチームの外部にいる人たちに知らせる&lt;/strong&gt;ということだ。&lt;/p&gt;

&lt;p&gt;それを演出するために＜できるだけ約束を小さくして、届けるものは大きくする＞という手法が紹介されている。大きな約束をしてしまうとその締切を守れなかったときや、機能を落としたときの信用損失が大きくなってしまうからだ。&lt;/p&gt;

&lt;p&gt;またエンジニアはプロダクトのローンチにエネルギーを注ぐべきだとも説かれている。なぜならプロダクトローンチというイベントが何かを成し遂げたことを伝える一番わかりやすいイベントだからだ。リファクタリングをもっとやりたいと考えるかもしれないがそれだけではダメで、そこに半分以上時間を割いたりしたら何も評価されないし最悪プロジェクト中止さえありえる。&lt;/p&gt;

&lt;h3 id=&quot;逃げるという選択肢&quot;&gt;逃げるという選択肢&lt;/h3&gt;

&lt;p&gt;「すべてやっているけど改善されないしうまくいかない」そんな状況に陥ったとしたら&lt;strong&gt;さっさと逃げてしまう&lt;/strong&gt;ことが得策だと言う。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;システムを変更できなければいくらエネルギーを注いでもムダだ。そこから逃げ出すことにエネルギーを注ごう&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ある程度やって無理なものは無理、ダメなものはダメ、さっさと逃げる！と割り切っている点も本書の潔くて良い点である。&lt;/p&gt;

&lt;h2 id=&quot;チームはパンのようなもの&quot;&gt;チームはパンのようなもの&lt;/h2&gt;

&lt;p&gt;本書ではチームはパンであるという比喩が使われる。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;チームの文化はサワードウパンのようなものだ。スターター（創業者）がパン生地（新来者）に菌（文化）を植え付ける。イースト菌と乳酸菌（チームメンバー）が発酵（成長）すると、おいしいパン（チーム）のできあがりだ。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;強い文化を持つチームを作る必要がある&lt;/strong&gt;。さもないと新来者が持ち込む文化に負けてしまう。チームが文化を大切にできなければ、チームのアイデンティティや仕事の誇りを失ってしまう。&lt;/p&gt;

&lt;p&gt;この話は日本風の喩えでいうと＜腐ったみかん＞の話に通ずるものがある。一つ腐ったみかんがあると他のみかんも腐ってしまうという事象である。そうならないために腐ったみかんを紛れ込ませない、あるいは多少腐ってしてもそれが伝播しないような強いみかん（チーム）である必要がある。&lt;/p&gt;

&lt;p&gt;強い文化を作るには時間・労力がかかる。会社においては応募者がカルチャーフィットするかを面接のプロセスにおいてチームのメンバーが評価・判断し決める。採用を妥協してはいけない。&lt;/p&gt;

&lt;h2 id=&quot;マネジメントについて&quot;&gt;マネジメントについて&lt;/h2&gt;

&lt;p&gt;本書はマネージャーのためのマネジメント本ではなく、なんとなくリーダーになってしまったエンジニアのための本だと位置付けられている。&lt;/p&gt;

&lt;h3 id=&quot;マネージャーになるべき&quot;&gt;マネージャーになるべき！？&lt;/h3&gt;

&lt;p&gt;本書では「エンジニアはマネージャーになるべきだ」と主張しているのは興味深い。&lt;/p&gt;

&lt;p&gt;一般的に言ってエンジニアはマネージャーになりたがらない。一番の理由はコードを書く時間が少なくなるからである。そして無能なマネージャーの下に就いたことのあるエンジニアもまたマネージャーになることを拒む。しかし本書では下記のように説く。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;マネージャーになるべき大きな理由がある。まずは自分自身をスケールできるからだ。コードを書くのが得意だとしても、一人で書けるコード量には限界がある。自分がリーダーになって、優秀なエンジニアのチームにコードを書いてもらえば、どれだけのコード量になるかを想像してみてほしい！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;サーバントリーダーの役割&quot;&gt;サーバントリーダーの役割&lt;/h3&gt;

&lt;p&gt;マネージャーになるのであれば &lt;strong&gt;サーバントリーダーになるべき&lt;/strong&gt; だという。つまり執事や召使いのようにチームに奉仕するのだ。サーバントリーダーのやるべきことの例は下記だ。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HRTの雰囲気を作り出す&lt;/li&gt;
  &lt;li&gt;エンジニアでは対処できない社内の障害物を除去&lt;/li&gt;
  &lt;li&gt;チームの合意形成を支援&lt;/li&gt;
  &lt;li&gt;問題解決を支援する
    &lt;ul&gt;
      &lt;li&gt;アドバイスを求めてきたらリーダー自身が問題解決してはダメ、あくまでもサポートのみ&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;マイクロマネジメントをしない&lt;/li&gt;
  &lt;li&gt;夜遅くなったときに差し入れ&lt;/li&gt;
  &lt;li&gt;チームが順調に進めるように穴を埋める
    &lt;ul&gt;
      &lt;li&gt;ときには自らの手を汚す&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;技術的な側面とチームの人間関係を管理する（後者が難しい！）
    &lt;ul&gt;
      &lt;li&gt;技術畑出身のリーダーは後者を無視しがちだがそれはNG、きちんとチームの人間的側面に目を向ける&lt;/li&gt;
      &lt;li&gt;みんなのお友達になるのもNG、あくまでも仕事の関係を保つ&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;リーダーはパーフェクトではない&quot;&gt;リーダーはパーフェクトではない&lt;/h3&gt;

&lt;p&gt;リーダーはパーフェクトでなければならないという強迫観念があるかもしれないが、それを本書は否定する。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;リーダーはなんでも正しくやって、すべてを把握して、あらゆる質問に答える責任があると思っている。すべてを正しくやる必要はないし、あらゆる質問に答える必要もないし、そんなことをしていたら逆にチームの信頼を失ってしまう。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;質問を歓迎してチームからのフィードバックと批判をオープンに受け止めよう。そして何かを失敗したときは心から謝罪しよう。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;またリーダーが適切な答えを知っている必要はない。適切な答えを持っている人を知っていて、その人を紹介できさえすればよいのだ。多くの場合、適切な答えを知るより、適切な人を知るほうが価値がある。&lt;/p&gt;

&lt;p&gt;参考資料 (Podcast): &lt;a href=&quot;https://anchor.fm/em-fm/episodes/ep2--Engineering-Manager-e2bq4j&quot;&gt;Engineering Managerをスーパーマンだと思わないで by EM . FM #EMFM • A podcast on Anchor&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;ネガティブフィードバックを正しく伝える&quot;&gt;（ネガティブ）フィードバックを正しく伝える&lt;/h3&gt;

&lt;p&gt;正直になるのもリーダーをやる上で重要だ。&lt;/p&gt;

&lt;p&gt;1on1などの場面において共有できないことをメンバーから質問されたら「知っているけど伝えられない」と答えれば良い。自分がわからないことを聞かれたら素直に「わからない」といえばいい。&lt;/p&gt;

&lt;p&gt;ネガティブ・フィードバックを伝えるのは難しい。フィードバックや批判を伝えるときはメッセージが正しく相手に伝わっているかが重要だ。しかし直截的な伝え方だと相手に受け入れてもらえない場合があるので、きちんと適切な言い方を考えてから伝えよう。&lt;/p&gt;

&lt;p&gt;一方でチームメンバーの欠点ばかりを気にしていいところを十分にフィードバックできていないケースも気をつけよう。素晴らしいところは積極的に知らせてあげるべきだ。&lt;/p&gt;

&lt;h3 id=&quot;リーダーの行動指針&quot;&gt;リーダーの行動指針&lt;/h3&gt;

&lt;p&gt;その他にもリーダーが取るべき行動指針として下記のものが紹介されている。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;チームの幸せを追い求める&lt;/li&gt;
  &lt;li&gt;委譲せよ、ただし手は汚せ
    &lt;ul&gt;
      &lt;li&gt;たとえ自分がやったほうが早くてもチームメンバーに任せる&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;自分自身を置き換えるくらいの優秀な人を採用する
    &lt;ul&gt;
      &lt;li&gt;チームメンバーに代わりをしてほしいのであれば自分より優秀な人を採用する&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;事を荒立てるときを知る
    &lt;ul&gt;
      &lt;li&gt;状況は自然とは良くはならない、きちんと指摘する&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;カオス（不確実性）からチームを守る
    &lt;ul&gt;
      &lt;li&gt;リーダーになるとメンバーの頃には見えなかったカオスが見える。メンバーをそのカオスから守ろう&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;チームを空中援護する
    &lt;ul&gt;
      &lt;li&gt;会社の上空（上層部）で何が起きているかをチームに知らせる&lt;/li&gt;
      &lt;li&gt;できるだけ多くの情報をチームに共有すべきだが、チームに無関係の組織の話はする必要がない&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;どのエンジニアが何を必要としているかを把握してそれを与える
    &lt;ul&gt;
      &lt;li&gt;エンジニアが何を欲しているかは一人ひとり異なる&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;HRT（謙虚・尊敬・信頼）の精神を知るためにまずは手にとって読むべき本が本書である。&lt;/p&gt;

&lt;p&gt;HRTの精神に加えて、本書には「有害な人に対処する方法」「社内でうまく立ち回る方法」など&lt;strong&gt;会社で＜サバイブ＞していくための極めて実践的な内容&lt;/strong&gt;が書かれていた。HRTだけでなくそういったスキルもときに必要であり重要であるということを認識するのに、本書はすべてのエンジニアにオススメの一冊に仕上がっている。&lt;/p&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=toshimaru-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=4873116309&amp;amp;linkId=0aff3222ba2c6d1926da0019e2d110b9&quot;&gt;&lt;/iframe&gt;</content><author><name>Toshimaru</name></author><category term="読書" /><category term="management" /><category term="review" /><summary type="html">かの有名なHRTの精神の原典になっている本ということで読んでみた。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/teamgeek.jpg" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/teamgeek.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">ヤフーの1on1とシリコンバレー式1on1の本を読んだ ~1on1の目的、進め方、何を話すべきか~</title><link href="https://blog.toshimaru.net/1-on-1-book-memo/" rel="alternate" type="text/html" title="ヤフーの1on1とシリコンバレー式1on1の本を読んだ ~1on1の目的、進め方、何を話すべきか~" /><published>2018-02-10T00:00:00+09:00</published><updated>2019-05-31T00:00:00+09:00</updated><id>https://blog.toshimaru.net/1-on-1-book-memo</id><content type="html" xml:base="https://blog.toshimaru.net/1-on-1-book-memo/">&lt;p&gt;1on1 をチームで実施することとなり、勉強がてら『&lt;a href=&quot;http://amzn.to/2GNg6b5&quot;&gt;シリコンバレー式 最強の育て方 ― 人材マネジメントの新しい常識 1on1ミーティング&lt;/a&gt;』と『&lt;a href=&quot;http://amzn.to/2GKRNu2&quot;&gt;ヤフーの1on1 ― 部下を成長させるコミュニケーションの技法&lt;/a&gt;』の２冊を読んだ。&lt;/p&gt;

&lt;p&gt;※以下、それぞれをシリコンバレー式1on1本とYahoo 1on1本と表記する&lt;/p&gt;

&lt;h2 id=&quot;両本のちがい&quot;&gt;両本のちがい&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;シリコンバレー式1on1本
    &lt;ul&gt;
      &lt;li&gt;1on1の必要性、1on1で何を話すべきかが体系的にまとまっている&lt;/li&gt;
      &lt;li&gt;1on1の質問・伝え方例一覧が巻末にある&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Yahoo 1on1本
    &lt;ul&gt;
      &lt;li&gt;1on1における上司のロールとしてはコーチング的な要素強い&lt;/li&gt;
      &lt;li&gt;1on1での改善事例、サクセスストーリーが漫画・会話形式多く書かれている&lt;/li&gt;
      &lt;li&gt;コミュニケーションの細かなテクニック・Tipsも多く書かれている&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;シリコンバレー式1on1本のほうで体系的に1on1の必要性・話すべきことを掴んで、実際に1on1の開催イメージを掴んでいくためにYahoo 1on1本を読むと良い。&lt;/p&gt;

&lt;h2 id=&quot;1on1とは何か&quot;&gt;1on1とは何か？&lt;/h2&gt;

&lt;p&gt;1on1とは上司と部下で行われる１対１で話をする場のことである&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;。日本語で言うと面談…だが面談というと人事面談や評価面談などのように堅い印象があるので、あえて1on1という呼び方をすることが多い。&lt;/p&gt;

&lt;h2 id=&quot;1on1の目的&quot;&gt;1on1の目的&lt;/h2&gt;

&lt;p&gt;1on1 の目的としては下記が挙げられる。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;部下との関係性の構築&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;業務ではできない質の高いコミュニケーションを行う&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;部下のキャリア開発&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;部下の短期的キャリア・中長期のキャリア開発を支援&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;部下のパフォーマンス管理&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;目標管理&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;部下のモチベーション向上&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;困っていること・業務ブロッカーの排除&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;部下の成長支援&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;フィードバック&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;そして上司はこれらの1on1目的をきちんと部下に説明すること。部下が1on1に意義が見いだせなかったり、イヤイヤ開催するような1on1であれば1on1はすぐに形骸化してしまうので、しっかり上司は目的を伝えて納得してもらった上で1on1を開催すること。&lt;/p&gt;

&lt;h2 id=&quot;1on1で話すこと&quot;&gt;1on1で話すこと&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/1on1/1on1-topics.png&quot; alt=&quot;シリコンバレー式&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;シリコンバレー式1on1本より図を引用&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;プライベート相互理解&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;雑談の中から聞きだせるとよい。関係性を構築する上で相手の人となりは知っておくのが基本。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;心身の健康チェック&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;心身の状態が問題ないか。業務量が過多になっていたり、業務時間が不規則になっていないか。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;モチベーションアップ&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;モチベーションを下げる要因を取り除く
        &lt;ul&gt;
          &lt;li&gt;何か困っていること・業務を行う上でのブロッカーがあるのであればその話をきちんと聞く（傾聴/アクティブリスニング）&lt;/li&gt;
          &lt;li&gt;上司は部下への否定ではなく共感を示す&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;モチベーションを上げる要因を作り出す
        &lt;ul&gt;
          &lt;li&gt;ほめる/承認する&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;業務・組織課題の改善&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;業務課題の改善
        &lt;ul&gt;
          &lt;li&gt;課題を聞くとともに将来起こりうるリスクも確認しておくと良い&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;チーム/組織課題の改善&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;目標設定・評価&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;マネージャーは正しい評価をするのではなく、部下が納得できる評価が必要
        &lt;ul&gt;
          &lt;li&gt;納得感を持てなければ部下が建設的に目標に向き合えない&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;能力開発・キャリア支援&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;経験学習のサイクルを回す&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;戦略・方針の伝達&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;経営陣などの上層部の戦略・方針をその背景も含めて適切に部下に伝達する&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;1on1は部下のための時間&quot;&gt;1on1は部下のための時間&lt;/h2&gt;

&lt;p&gt;1on1は会社のための時間でもなく上司のための時間ではなく &lt;strong&gt;部下のための時間&lt;/strong&gt; だ。&lt;/p&gt;

&lt;p&gt;1on1で話すトピックは基本的には上司が決めてファシリテートしていくものであるが、部下が話したいトピックがある場合はそちらを優先する。&lt;/p&gt;

&lt;p&gt;1on1内で話している時間も7-8割くらいが部下が話す時間になるようにするのが理想的である。&lt;/p&gt;

&lt;h2 id=&quot;1on1メモを作ろう&quot;&gt;1on1メモを作ろう&lt;/h2&gt;

&lt;p&gt;1on1で話した内容を忘れないように、きちんと話したことをメモとして書き残しておく。&lt;/p&gt;

&lt;p&gt;メモを残すならば今ならグーグルDocsなどのクラウドサービスを使うのが良いだろう。上司・部下だけが閲覧できるような設定にしておき、メモは共同編集しておけるようにしておくと良い。&lt;/p&gt;

&lt;p&gt;上司は共有用のドキュメントとは別に部下の個人データを残すドキュメントも用意しておくとよい。そうすることで話が進めやすくなったり担当が変わったときの情報の引き継ぎがやりやすくなる。&lt;/p&gt;

&lt;h2 id=&quot;心理的安全性の確保&quot;&gt;心理的安全性の確保&lt;/h2&gt;

&lt;p&gt;1on1は部下が率直に、気兼ねなく上司と話をできる場でなければならない。言い換えると上司は部下の心理的安全性を確保するように気をつけなければならない。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;心理的安全性とは、自分の言動が他者に与える影響を強く意識することなく感じたままの想いを素直に伝えることのできる環境や雰囲気のことです。&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://bizhint.jp/keyword/101187&quot;&gt;心理的安全性とは？googleが発見したチーム生産性を高める唯一の方法 | BizHint HR&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;心理的安全性を確保するにはどうすればよいか。&lt;/p&gt;

&lt;p&gt;まず、上司は部下一人ひとりときちんと向き合い話を傾聴する姿勢が求められる。部下の話を先取ったり途中で遮ることはやめること。&lt;/p&gt;

&lt;p&gt;また、上司は部下の話を頭ごなしに否定するのではなく共感を示す必要がある。否定する必要があるときはニュートラルな上手な言い回しをすること。&lt;/p&gt;

&lt;p&gt;そして目標設定・評価や業務アサインはきちんと部下が納得感を持てるような説明が上司に求められる。上司から部下への一方的な設定は命令感が強くなり部下が発言しにくくなる可能性がある。&lt;/p&gt;

&lt;h2 id=&quot;1on1の頻度について&quot;&gt;1on1の頻度について&lt;/h2&gt;

&lt;p&gt;Yahoo社の場合だと週一回、30分の1on1ミーティングを実施しているとのことだ。フィードバックループを素早く回していくためにはそれくらいの頻度が丁度良いらしい。&lt;/p&gt;

&lt;p&gt;とはいえ現実問題としてマネージャーは忙しいのでなかなかそこまでの時間がとれないかもしれない。であれば隔週、最低でも月一回は1on1を実施する。1on1 において重要なのは定期的に継続して実践することだ。&lt;/p&gt;

&lt;h2 id=&quot;次のアクションを決める&quot;&gt;次のアクションを決める&lt;/h2&gt;

&lt;p&gt;1on1の中でタスクや確認事項が生じた場合はきちんと &lt;strong&gt;次のアクション（宿題）&lt;/strong&gt; として残しておく。&lt;/p&gt;

&lt;p&gt;そのアクションがきちんと達成できているかは、次回の1on1時に必ず確認する。積み残した宿題があるのであれば出来なかった理由をしっかり確認して次回のアクションに繋げる。&lt;/p&gt;

&lt;h2 id=&quot;1on1を通して成長を支援する&quot;&gt;1on1を通して成長を支援する&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/1on1/cycle.png&quot; alt=&quot;経験学習サイクル&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;シリコンバレー式1on1本より図を引用&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;どちらの本も1on1での成長を促すために &lt;strong&gt;経験学習サイクル&lt;/strong&gt; を回すことが推奨されている。&lt;/p&gt;

&lt;p&gt;1on1ではこのサイクルが上手に回るようにサポートする。上司は1on1のやり取りの中で上図の2(振り返り),3(教訓・学びの気づき),4(計画)を部下の口から引き出せるようにうまく働きかけをおこなう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/1on1/coaching.png&quot; alt=&quot;コーチング&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Yahoo 1on1本より図を引用&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;所感&quot;&gt;所感&lt;/h2&gt;

&lt;p&gt;業務上のコミュニケーションだけでは、業務外の困っていることであったりその人がキャリアプランをどう考えているかなどのトピックまでは拾えない。人々のワークスタイル・ライフスタイルの多様化にともない人々の仕事に対する価値観、仕事に求めることも多様化してきている中、その領域を拾える1on1は職場環境を改善するために非常に有効な手段だと感じることができた。&lt;/p&gt;

&lt;p&gt;1on1制度はシリコンバレーは当たり前のプラクティスとなっていると聞く。日本企業でも1on1制度の導入事例が増えていって社会全体の労働環境が改善されると良いなーと思った。&lt;/p&gt;

&lt;p&gt;1on1導入後も単純に1on1を開催して満足というわけではなく、上手な1on1にしていくには上司側の1on1スキルの向上も必要となってくる。本書を読んでその辺の細かなテクニックとか言い回しのポイントなども知ることができてよかった。&lt;/p&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=toshimaru-22&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=4761272864&amp;amp;linkId=fa0dbf5e7d684ec5864efa0436add116&quot;&gt;&lt;/iframe&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=toshimaru-22&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=4478069786&amp;amp;linkId=ea9f3d4a7b14fcc644075add70c9b61e&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;web上の参考資料&quot;&gt;Web上の参考資料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.slideshare.net/satoshiyoshinaga/1on1-80798455&quot;&gt;生産性を高める 1on1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@tumada/%E5%8A%B9%E6%9E%9C%E7%9A%84%E3%81%AA-1-on-1-%E3%83%9F%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AB%E3%83%9E%E3%83%8D%E3%83%BC%E3%82%B8%E3%83%A3%E3%81%8C%E3%81%A7%E3%81%8D%E3%82%8B%E3%81%93%E3%81%A8-6d5c03a3383&quot;&gt;効果的な 1on1 ミーティングのためにマネージャができること – Taka Umada – Medium&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/higepon/20150728/1438080621&quot;&gt;1on1 で 何を話すのか？ マネージャ/ソフトウェアエンジニアの立場から - サンフランシスコではたらくソフトウェアエンジニア - Higepon’s blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;上司と部下という呼称は上下関係が色濃く現れる日本語なのであまり好きではないのだが、便宜上使うこととする &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Toshimaru</name></author><category term="management" /><category term="読書" /><summary type="html">1on1 をチームで実施することとなり、勉強がてら『シリコンバレー式 最強の育て方 ― 人材マネジメントの新しい常識 1on1ミーティング』と『ヤフーの1on1 ― 部下を成長させるコミュニケーションの技法』の２冊を読んだ。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/1on1/og.jpg" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/1on1/og.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">認定スクラムマスター研修に行ってきました</title><link href="https://blog.toshimaru.net/scrum-training/" rel="alternate" type="text/html" title="認定スクラムマスター研修に行ってきました" /><published>2016-01-20T00:00:00+09:00</published><updated>2018-02-08T00:00:00+09:00</updated><id>https://blog.toshimaru.net/scrum-training</id><content type="html" xml:base="https://blog.toshimaru.net/scrum-training/">&lt;p&gt;昨年末にスクラムマスター研修を受けてきて、認定スクラムマスター (CSM)となりました。スクラムマスター研修で学んだこととして社内で共有した内容を本ブログでも共有してみようと思います。&lt;/p&gt;

&lt;h2 id=&quot;scrum-vs-agile-歴史から学ぶ&quot;&gt;Scrum vs Agile 〜歴史から学ぶ〜&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;1993年: スクラム誕生&lt;/li&gt;
  &lt;li&gt;2001年: アジャイルソフトウェア開発宣言
    &lt;ul&gt;
      &lt;li&gt;アジャイルマニフェスト: &lt;a href=&quot;http://agilemanifesto.org/iso/ja/manifesto.html&quot;&gt;アジャイルソフトウェア開発宣言&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;アジャイル原則:  &lt;a href=&quot;http://agilemanifesto.org/iso/ja/principles.html&quot;&gt;アジャイル宣言の背後にある原則&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;アジャイルは「より良い開発/方法を探している」という状態のことです。状態なので原理的には「アジャイル開発をしている」という表現は正しくありません。振り返ってみて「あのプロジェクトはアジャイルだった」と評価できるもの。極端に言うといわゆるウォーターフォール型の開発も１つのアジャイルと定義することもできます。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Don’t do agile, be agile&lt;/em&gt; （訳: アジャイル開発をするな、アジャイルであれ）&lt;/p&gt;

&lt;p&gt;スクラムのほうがアジャイルより歴史的には古く、アジャイルの定義が曖昧な一方、スクラムはきちんと確立された方法論で現在もアップデートされ続けているフレームワークです(年２回)。ただ出版社のマーケティング戦略的に「アジャイル」というバズワードを使わなきゃ本が売れないという理由もあってか、世の中には＜アジャイルという皮を被った何か＞が氾濫しています。「アジャイル」という魔法のコトバに惑わされてはいけないのです。&lt;/p&gt;

&lt;h2 id=&quot;スクラムとは何か&quot;&gt;スクラムとは何か？&lt;/h2&gt;

&lt;p&gt;スクラムとは &lt;strong&gt;＜現状を把握するためのフレームワーク＞&lt;/strong&gt;。どのプロジェクトにおいても現状を把握した結果、大体において問題はあることから &lt;strong&gt;＜問題を発見するフレームワーク＞&lt;/strong&gt; と言われることもあります。&lt;/p&gt;

&lt;p&gt;なのでポイント（超重要！）は、スクラムをやったからといって、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;生産性は向上しません&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;人が成長することはありません&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;プロダクトが改善することはありません&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あくまでもこれらは、現状を把握した結果として期待できるものであって、スクラムをやれば必ず得られる結果というわけではありません。スクラムもまた、銀の弾丸ではないのです。&lt;/p&gt;

&lt;p&gt;逆にチームの現状を把握できていないのであれば、それはスクラムとは呼べません。そして「スクラムは優秀な人じゃなければできない」というのも間違いです。優秀じゃない人でも現状を把握してそこそこの成果を出せるようにするのがスクラムというフレームワークです。&lt;/p&gt;

&lt;h2 id=&quot;スクラムのルール&quot;&gt;スクラムのルール&lt;/h2&gt;

&lt;p&gt;全部で19個あります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/scrum/scrum1.png&quot; alt=&quot;scrum&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;スクラムの三本柱&quot;&gt;スクラムの三本柱&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;透明性&lt;/strong&gt; – Transparency&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;検証&lt;/strong&gt; – Inspect&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;適合&lt;/strong&gt; (検証に基づいた適合) – Adapt&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;スクラムの３つの役割&quot;&gt;スクラムの３つの役割&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;プロダクトオーナー&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;チームのROIを最大化させる（ビジネスのROIではないということに注意）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;スクラムマスター&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;開発が Scrum と呼べる状態にする&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;スクラムじゃない方法を提案するのもまた、スクラムマスターの役割&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;チーム&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;7人±2人&lt;/strong&gt; が１つのスクラムチームを構成するのがのぞましいとされています。&lt;/p&gt;

&lt;h3 id=&quot;スクラムの5つのセレモニー&quot;&gt;スクラムの5つのセレモニー&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Sprint Planning – スプリント計画&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;短期計画&lt;/li&gt;
      &lt;li&gt;何を実現しようとしているのかを明確に&lt;/li&gt;
      &lt;li&gt;どの順番（優先順位）で開発を進めるのか&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Daily Scrum – デイリースクラム/朝会（朝じゃなくてもよい）&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;15分間&lt;/li&gt;
      &lt;li&gt;毎日の学習を共有&lt;/li&gt;
      &lt;li&gt;議論は行わない&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Product Backlog Refinement – プロダクトバックログ見直し&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;中長期計画（現在のスプリントは含まれないことに注意）&lt;/li&gt;
      &lt;li&gt;スプリントの5-10%使って見直しを行う&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sprint Review – スプリントレビュー&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;動くプロダクト・ドキュメントで成果を確認する&lt;/li&gt;
      &lt;li&gt;プロダクト触ってもっとプロダクトを良くする&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sprint Retrospective – スプリントレトロスペクティブ/振り返り&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;チームが生産性を高めるために取らなきゃいけないアクションを1つ以上決める&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/scrum/scrum2.jpeg&quot; alt=&quot;scrum sprint&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;アーチファクト&quot;&gt;アーチファクト&lt;/h3&gt;

&lt;p&gt;アーティファクト、成果物とでも訳しましょうか。下記４つがそれにあたります。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;スプリントバックログ&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;プロダクトバックログ&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Impediment List&lt;/strong&gt; - 障害リスト&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Acceptance Criteria&lt;/strong&gt; - 受け入れ条件&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;その他&quot;&gt;その他&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Sprint&lt;/strong&gt; - スプリント&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sprint Stop&lt;/strong&gt; - スプリント停止&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;DONE&lt;/strong&gt; - 製品が完了する&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Potentially shippable product increment&lt;/strong&gt; – 出荷可能な製品をリリースする&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;スクラムが適さないシーン&quot;&gt;スクラムが適さないシーン&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;プロダクトの生産期間が短い
    &lt;ul&gt;
      &lt;li&gt;例) 2ヶ月で終わってしまうプロジェクト&lt;/li&gt;
      &lt;li&gt;スクラムはチームビルディングで最低３ヶ月かかる。そしてその３ヶ月を反復してチームを改善させていく。つまり３ヶ月以内のプロジェクトでスクラムを行うのは難しい（やれなくもないが）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;要件・技術が単純なプロダクト
    &lt;ul&gt;
      &lt;li&gt;スクラムは要件・技術的要素が複雑な場合に適したアプローチ&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;自律的なチームとは&quot;&gt;自律的なチームとは&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;チームの明確なゴールがある&lt;/li&gt;
  &lt;li&gt;チームの明確なバウンダリー（境界線）がある&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;「自律的なチームかどうかの判断基準は何？」への回答は「&lt;strong&gt;個人がチームのゴールを達成するために何をすべきか0.1秒以内に判別し行動できる&lt;/strong&gt;」といえます。&lt;/p&gt;

&lt;h2 id=&quot;見積もり方法&quot;&gt;見積もり方法&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;相対見積もり&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;一番簡単なタスクのポイントが1だとしてそれに対する相対的な見積もり&lt;/li&gt;
      &lt;li&gt;プロダクトバックログアイテムはこちらの見積もり方法が適している&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;絶対見積もり&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;xx時間とかの見積もり&lt;/li&gt;
      &lt;li&gt;スプリントバックログアイテムにはこちらの方法が適している&lt;/li&gt;
      &lt;li&gt;1スプリントバックログアイテムが0.5時間〜1時間になるのが理想的な状態&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ここで重要なポイントとしては &lt;strong&gt;スクラムマスターは絶対に計画せずにチームが進むことを許容してはいけません&lt;/strong&gt; 。スクラムをやるなら &lt;strong&gt;徹底的に計画してください。妥協は許されません&lt;/strong&gt; ここがスクラムをやる上でのチームが持たなければならない＜覚悟＞となります。逆に言うとこの覚悟が持てないならスクラムをやるべきではありません。&lt;/p&gt;

&lt;h2 id=&quot;done&quot;&gt;DONE&lt;/h2&gt;

&lt;p&gt;DONEはDefinition of doneのことです。そしてDefinition of doneには doneとundoneの２つが含まれます。&lt;/p&gt;

&lt;p&gt;どういうことでしょうか。例えば「ログイン機能を作る」というタスクを考えてみましょう。ログイン機能のDONEとして何をイメージするでしょうか？「フォームに正しい値を入力して正しくログインできること」「間違った値を入力してログインできないこと」「変な値でバリデーションエラーメッセージがでること」などが簡単に思い浮かぶと思います。&lt;/p&gt;

&lt;p&gt;ではそれで本当にログイン機能はDONEと言えるのでしょうか。違います、DONEにはログイン機能の単体テストやその結合テスト、さらにはセキュリティテスト、負荷テスト、またはその機能のドキュメンテーションも全て含まれてのDONEです。そしてDONEにはそれで完了しているdoneとそれで完了しなかった、例えばこのケースで言うと「テストは後でかこう」「セキュリティ試験は全ての機能が完成してから実施」などのundoneも含まれています。&lt;/p&gt;

&lt;p&gt;このundoneが後回しになって積み上がった状態がプロジェクトの炎上状態であり、スクラムとして不健全な状態といえます。健全なスクラムは１スプリント毎にこのundoneを着実に消化していきます。&lt;/p&gt;

&lt;h2 id=&quot;プロダクトバックログの書き方&quot;&gt;プロダクトバックログの書き方&lt;/h2&gt;

&lt;p&gt;研修ではユーザーストーリーとAcceptance Criteriaの２つを書いて１つのプロダクトバックログアイテムとしました。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;ユーザーストーリー&lt;/strong&gt;: {who}として {what}がほしい なぜなら{why}だから&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Acceptance Criteria&lt;/strong&gt;: 受け入れ条件 ユーザーストーリーが達成できたといえる &lt;strong&gt;誰が見てもわかる明確な条件&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ベロシティ&quot;&gt;ベロシティ&lt;/h2&gt;

&lt;p&gt;これらのプロダクトバックログアイテムに対して先ほどの見積もりのポイントを付けていきます。そして &lt;strong&gt;1スプリント中にチームが消化できるポイント数のことをベロシティ&lt;/strong&gt; といいます。&lt;/p&gt;

&lt;p&gt;このベロシティは安定させるべきです。もしベロシティが安定していないのならばそれはポイントの付け方が間違っているか、チームに何かしら問題がある可能性が高いです。&lt;/p&gt;

&lt;h2 id=&quot;スクラムが成功している状態とは&quot;&gt;スクラムが成功している状態とは？&lt;/h2&gt;

&lt;p&gt;スクラムチームとして &lt;strong&gt;3ヶ月で46%生産性が向上している状態&lt;/strong&gt; がスクラムが成功している状態です。じゃあ46%向上している状態とはどう測ったらよいかというと、スクラム講師曰く、先ほど言及したundoneが3ヶ月というスパンで1つでも消化できていれば46%生産性が上がったと言っていいとのことでした。&lt;/p&gt;

&lt;p&gt;しかしこれは非常に難しいことで、どんなに成功しているスクラムチームでも1年に1回でもそれが達成できていればうまくできているほうだとのことでした。&lt;/p&gt;

&lt;h2 id=&quot;スクラムマスター役割スキル&quot;&gt;スクラムマスター役割・スキル&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;状況分析&lt;/strong&gt;: シチュエーショニング&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ティーチング&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ファシリテーティング&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;メンタリング&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;コーチング&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;そしてスクラムマスターはこれらの行為をやるだけで満足してはいけません。やった上で &lt;strong&gt;結果が出ないと意味がありません。&lt;/strong&gt; つまりティーチングをやったからスクラムマスターの役割を果たしたとはいえず、ティーチングをやった結果、それを受けた者の行動が変わることも含めてスクラムマスターの役割ということです。&lt;/p&gt;

&lt;p&gt;「謙虚さ」と同時に「屈強さ」がスクラムマスターには必要です。&lt;/p&gt;

&lt;h2 id=&quot;受講してみての感想&quot;&gt;受講してみての感想&lt;/h2&gt;

&lt;p&gt;今回のスクラムマスター研修では「スクラムとは何か」を原理的な立場から学びました。&lt;/p&gt;

&lt;p&gt;受講してわかったことは世の開発現場には似非スクラムが溢れているなーってことでした。スプリント回しているからスクラムですとか、カンバンでタスク管理して朝会やってスクラムですとか、リソース足りないのでうちは開発チームメンバーとスクラムマスターをの２つのロールを兼任してますとか…。&lt;/p&gt;

&lt;p&gt;スクラムの基本原則から言うと役割の兼任はNGですし、スクラムは具体的なタスク管理手法は規定していないのでカンバンでやろうとJIRAでやろうとGithub Issueでやろうとそれはスクラムの原理原則とは関係ありません。&lt;/p&gt;

&lt;p&gt;朝会以外にもスクラムの大事なセレモニーはあって必ずそれらはスキップしてはいけないものとなってます。スプリントを回すにしても、ちゃんとそのスプリントは計画とあっていたのかとか、ちゃんと受け入れ条件をクリアする品質でスプリントの成果物が上がってるかとか、スプリント間に差し込みタスクがなかったかとかいろいろやらなきゃいけないことや考えることはあります。&lt;/p&gt;

&lt;p&gt;そして感じたこととしては、スタートアップのアーリーフェーズだとなかなか原理的な意味でのスクラムは難しいのではということでした。スクラムやりたくともリソースが全然足りないのでスクラムマスター、プロダクトオーナーはそもそも置けないとか、スクラムのロールを兼任せざるを得ないとか。&lt;/p&gt;

&lt;p&gt;またアーリーフェーズだと人の出入り（特に新しいメンバーを迎えるケース）も激しいと思うのでそうなるとスクラムチームは再度チームビルディングからやり直さなければなりません（このチームビルディングで1 Sprintは消費すると言われています）。&lt;/p&gt;

&lt;p&gt;なのでこういった開発現場で出来ることとしてはスクラムのフレームワークの中で良いと思うもの、有効だと思うものを選択して組織に有効な＜スクラムエッセンスを取り入れた開発＞を実践することではないでしょうか。&lt;/p&gt;

&lt;p&gt;一方で上記に書いたように「スクラムじゃない別の方法を提案するのもスクラムマスターの役割」と書きました。なのでスクラムにこだわる必要は全然なくて、スクラムがチームにマッチしないと思うならスクラムマスターは別の手法を提案できなきゃダメです。例えばそれがウォーターフォールでもいいしDDDでもいいしリーンスタートアップだっていいのです。&lt;/p&gt;

&lt;p&gt;そういう意味でスクラムマスターは(おそらく皆が)思っている以上にその役割を全うすることが難しいものだと感じました。&lt;/p&gt;

&lt;h2 id=&quot;参考になりそうな他の人の体験記&quot;&gt;参考になりそうな他の人の体験記&lt;/h2&gt;

&lt;p&gt;スクラムマスター研修に行かれた他の方の体験記を紹介します。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://makopi23.blog.fc2.com/blog-entry-155.html&quot;&gt;makopi23のブログ 認定スクラムマスター研修（CSM）を振り返る&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://qiita.com/kara_i/items/fab490c08bb467d2c842&quot;&gt;認定スクラムマスター研修のメモ書き - Qiita&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.slideshare.net/yangiYa/csm2014-1114&quot;&gt;認定スクラムマスター研修に行ってきました&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;こちらも参考にどうぞ&quot;&gt;こちらも参考にどうぞ&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.scrumguides.org/download.html&quot;&gt;公式スクラムガイド&lt;/a&gt; Japanese を選択してもらえれば日本語バージョンが閲覧できます&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.slideshare.net/zaruhiroyukisakuraba/ss-77861697&quot;&gt;スクラム導入に向けて：スクラムは救世主となるのか？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ryuzee.com/contents/blog/7120&quot;&gt;スクラムプロジェクト開始のベストプラクティス | Ryuzee.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Toshimaru</name></author><category term="scrum" /><category term="management" /><category term="tech" /><summary type="html">昨年末にスクラムマスター研修を受けてきて、認定スクラムマスター (CSM)となりました。スクラムマスター研修で学んだこととして社内で共有した内容を本ブログでも共有してみようと思います。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/scrum/scrum.jpg" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/scrum/scrum.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>