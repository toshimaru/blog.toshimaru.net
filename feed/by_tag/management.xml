<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="https://blog.toshimaru.net/feed/by_tag/management.xml" rel="self" type="application/atom+xml" /><link href="https://blog.toshimaru.net/" rel="alternate" type="text/html" /><updated>2023-04-21T11:44:23+09:00</updated><id>https://blog.toshimaru.net/feed/by_tag/management.xml</id><title type="html">Hack Your Design!</title><subtitle>toshimaruの技術系なブログ</subtitle><author><name>Toshimaru</name></author><entry><title type="html">VOYAGE GROUPの『公開技術力評価会』に行ってエンジニア評価と給与設定について本気出して考えた</title><link href="https://blog.toshimaru.net/vg-tech-assessment/" rel="alternate" type="text/html" title="VOYAGE GROUPの『公開技術力評価会』に行ってエンジニア評価と給与設定について本気出して考えた" /><published>2019-02-08T00:00:00+09:00</published><updated>2019-02-08T00:00:00+09:00</updated><id>https://blog.toshimaru.net/vg-tech-assessment</id><content type="html" xml:base="https://blog.toshimaru.net/vg-tech-assessment/"><![CDATA[<p>先日<a href="https://voyagegroup.connpass.com/event/111412/">VOYAGE GROUP エンジニアの公開ガチ評価会</a>というイベントに行ってきた。イベントの細かな内容まとめは<a href="https://shinkufencer.hateblo.jp/entry/2019/01/30/235537">他の方のブログ</a>に譲るとして、エンジニアの評価についていろいろ考える良いきっかけとなったので書いてみる。</p>

<h2 id="人の評価は難しい">人の評価は難しい</h2>

<p>（エンジニアに限らず）<strong>人の評価は難しい</strong>。自分も人を評価する立場になって改めて思う。</p>

<blockquote>
  <p>付与できる昇給額やインセンティブに対して使える原資は限られている。加えて、本人の高い自己評価に対して組織の求める期待値との乖離や、他のメンバーとの相対評価の間にミスマッチがあるケースだって少なくない。</p>

  <p>良い評価を伝えられる人と残念な結果を伝えなければならない人のことを考え、与えられた予算の中で精一杯納得感のある評価を伝えたいと思い悩む日々。</p>
</blockquote>

<p><a href="https://note.mu/kazukomati/n/nd02cbddf40f5">マネージャーの視点から見える向こう側の景色｜Kazutaka Irie｜note</a></p>

<p>僕自身、評価では苦い思いをしてきた。所属するチームの上長・部の上長ともに高い評価を貰ったのに天の意思によりランク・お給料ともに無風だった経験。自らの技術力を総動員してプロジェクトのイニシャルリリースを成功に導いたが、その後プロジェクト自体が失敗したために社内的にその功績は全く評価されなかった経験。市場価値より低く買い叩かれているなという経験<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>。</p>

<p>そんな僕自身の苦い経験から「<strong>自分が評価するメンバーにはできる限り納得感のある評価をしたい</strong>」という強い思いがあり、今回のイベント参加に至った。</p>

<h2 id="納得感のある評価">納得感のある評価</h2>

<p><strong>評価は納得感があればなんだっていい</strong> と個人的に思っている。</p>

<p>極論、そこに納得感があるのであればじゃんけんで評価を決めても良い。例えば組織の全員が自他ともに「みんながんばっているよ、優劣はとくにないよ」という認識で評価が画一化されているのであれば「じゃあ今期の評価はじゃんけんで」という提案はもしかしたら受け入れてもらえるかもしれない<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup>。たとえじゃんけんだとしてもそれにメンバー全員が納得し不満が全く無いのであれば、それは立派な評価だ。</p>

<p>だが実際問題、全員が納得できるような評価を行うのは極めて難しい。全ての評価が良いものになるとは限らないし、自己評価と会社からの評価が必ずしも一致はしないからだ。その齟齬が生じていたときに評価者は被評価者にいかに納得できる理由を提示できるかが重要だ。</p>

<h2 id="技術力評価会">技術力評価会</h2>

<p>そういう意味でVOYAGEさんのエンジニア技術評価会はエンジニアにとって納得感のある評価が可能な評価制度になっていると感じた。具体的には下記のポイントである。</p>

<ul>
  <li><strong>定量化しない</strong></li>
  <li><strong>オープンな評価</strong></li>
  <li><strong>揚げ足取りをしない</strong></li>
  <li><strong>複数人の専門家による評価</strong></li>
  <li><strong>社外評価者</strong></li>
  <li><strong>ビジネス指向</strong></li>
</ul>

<script async="" class="speakerdeck-embed" data-id="e35aab51031244dd9ed3aaeac157871b" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script>

<h3 id="定量化しない">定量化しない</h3>

<p>まず面白いなと思ったのは技術力評価会では <strong>評価を定量化しない</strong> ということだ。多くの企業では評価は何かしらの形で定量化してアウトプットすると思う。例えばABCDEの五段階評価、100点満点中何点などだ。</p>

<p>定量的な評価アプローチはわかりやすい反面、評価者の評価の甘辛で評価が低くなったり高くなったりすることがあり難しい。また評価基準もまちまちになりがちで、全社的に公平な評価基準を作ることは個人的には無理だと思う（例えば100点満点だとしたら100点となる基準は何か？/その基準は明確かつ公平か？/120点の人の20点は評価されないのか？など）。</p>

<p>技術力評価会では定量化しない代わりにフィードバックとなる文章をしっかり書くという構造になっている。無理に定量化するよりもこのように文書を通じたフィードバックを行うほうが上述の定量化の問題も起きないし、被評価者の納得感も得られやすいと思う。</p>

<h3 id="オープンな評価">オープンな評価</h3>

<p>各人のランク（グレード）および <strong>評価結果をGitHubでオープンにしている</strong> ということも興味深い。</p>

<p>評価をオープンにすることは評価の透明性が担保される一方で、「なぜあの人が私/俺よりランクが高いのか？」という不満も呼び込みやすく諸刃の剣の施策だ。ただVOYAGEさんの場合、被評価者の声を拾いつつ評価制度を納得感のあるようにブラッシュアップしてきているようなのでオープンにすることで得られるメリットのほうが大きいと感じた。</p>

<p>オープンにすることでロールモデルのイメージが得られるのも良い。同じチームにおいてAさんよりランクが上のBさんがいたとする。この状況においてAさんは下記の様な具体的なアクションをとることができる。</p>

<ol>
  <li>「Bさん（ロールモデル）のように行動すればランクが上がる」</li>
  <li>オープンになっているBさんの評価をみにいく</li>
  <li>Bさんの評価されているところを確認する</li>
  <li>Bさんの評価されているところを真似る</li>
</ol>

<p>このような組織全体がレベルアップしていく絵を描きやすい。</p>

<p>他に評価をオープンにしている会社の例としてはペパボさんがある。こちらも参照されたい。<a href="https://tech.pepabo.com/2018/06/14/engineer-assessment/">ペパボのエンジニア文化を醸成するエンジニア評価制度 - ペパボテックブログ</a></p>

<h3 id="揚げ足取りをしない">揚げ足取りをしない</h3>

<p>基本的に評価会においては揚げ足取りをしない。揚げ足となる指摘としては例えば「ここtypoあるね？」「スタイルガイドに沿っていないコードじゃない？」などだ。誰だって小さなミスはある。本質的な部分のみで評価しようという姿勢がよかった。</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">揚げ足取りはやらないってのは地味にめちゃくちゃ重要な気がする。本質的な指摘で評価したいよね<a href="https://twitter.com/hashtag/vg_tech_assessment?src=hash&amp;ref_src=twsrc%5Etfw">#vg_tech_assessment</a></p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/1090566565148278785?ref_src=twsrc%5Etfw">January 30, 2019</a></blockquote>

<h3 id="複数人の専門家による評価">複数人の専門家による評価</h3>

<p>フロントエンジニアの技術力をバックエンドエンジニアは評価できない。逆もまた然りでバックエンドエンジニアの技術力をフロントエンジニアは評価できない。このように異なる職種の異なる技術スタックのエンジニア同士は基本的に評価はできない。</p>

<p>VOYAGEさんの場合、チーム関係なくチームを跨いで <strong>二人以上の適切な評価者が設定されるような仕組みを取ることで評価者・被評価者のミスマッチを防ぐ</strong>。被評価者をきちんと評価できる技術者がきちんとアサインされるわけだ。</p>

<p>そして一人ではなく二人以上とすることもポイントだと思っていて、複数の評価観点・視座で評価を行うことで偏った評価を防ぐことができる（実際、評価会の中で評価者によって意見が分かれる場面があった）。</p>

<h3 id="社外評価者">社外評価者</h3>

<p>なまじ社内事情がわかっていると（チームのメンバー状況・プロダクトの歴史やバックグラウンドなど）、意図せずとも社内のコンテキストによるバイアスが入るかもしれない。また社内の評価基準が社外の評価―つまり業界的な評価基準と離れてしまうかもしれない。あるいは社内のリソースだけで十分な専門家の観点を用意できないかもしれない（例えば機械学習エンジニアの領域など）。</p>

<p>これらの問題を解消し評価をフェアに行うために <strong>評価者を外部から招いて３人目の評価者として入れる</strong> のは良いアイディアだと思った。外部の”強い”エンジニアの評価となれば被評価者の納得感も増すはずだ。</p>

<h3 id="ビジネス指向">ビジネス指向</h3>

<p>評価会では技術選定について聞く場面もあった。「なぜその技術選定（今回でいうとReact.js）に至ったのか？」</p>

<p>「流行ってるからReact.js」「jQueryはイケてないのでReact.js」…こういった回答だと不十分でもう一歩本質的な理由に踏み込むように評価者が導くように質問を展開していたのが印象的だった。</p>

<p>本質的な理由としては「DOMにステートを持たせたくない」「フロントエンドをテスタブルにしたい 」「メンテナビリティを高めたい」のようなもので、それが最終的にプロダクトの品質向上に繋がりビジネス的にもインパクトがあるよね？というところまで一緒に落とし込んでいるのが流石だと感じた。</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">「技術的な投資判断はどのようにプロセスを経てなされたのか」良い観点の質問だなぁ<a href="https://twitter.com/hashtag/vg_tech_assessment?src=hash&amp;ref_src=twsrc%5Etfw">#vg_tech_assessment</a></p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/1090570758693122048?ref_src=twsrc%5Etfw">January 30, 2019</a></blockquote>

<p>エンジニアはともすると技術選定や設計の場面でエゴに走りがちだ。そこで <strong>評価者がきちんとビジネス的な視座を持たせてあげるように誘導</strong> してあげることで、エンジニアだけではなくビジネス側に所属する人たちにも評価してもらえるような理由付けをしている点が素晴らしいと思った。</p>

<h2 id="エンジニアの評価制度の設計と導入">エンジニアの評価制度の設計と導入</h2>

<p>さてここまで「エンジニア技術力評価会は良い制度だった」という話をしてきたわけだが、いざ自分の所属組織でも導入するか？と問われるとおそらくやらないし、やってみようぜ！という提案もしないと思う。</p>

<p>なぜか？　理由はコストが高すぎるから。評価者一人に対して被評価者が10人アサインされるとしよう。評価時間90分×10人分で900分、評価会単体の時間だけで15時間。それに加えて一人ひとりの評価を記入する時間を30分上乗せするとして30分x10人分で300分でプラス5時間。つまりランクの高い評価者一人あたり最低でも20時間（営業日換算で2.5営業日）は奪われるわけだ。</p>

<p>納得感のある評価を徹底するのはコストがかかる。もちろんそれだけのコストをかけるだけのメリットは享受できると思う。しかし不満もそこまでなくそこそこ上手く回っている既存のエンジニアの技術力評価をひっくり返してまで導入するかというと答えはNOだとは思う。</p>

<p>もし既存の技術力評価に問題があったとしてもなかなか導入は難しいと感じる。なぜならそれだけのコストがかかる制度導入は関係各所のコンセンサスを得るのが難しいからだ。ボトムアップで突き上げて制度を導入するには相当なパワーと時間が必要だ。</p>

<p>ではどう導入するのが一番手っ取り早いかというと、CTOなどからトップダウンで制度を導入することだ。VOYAGEさんの場合もCTOの小賀さんの強い力と思いがあったからこそ実現した制度だと感じた。</p>

<h2 id="ランクと給与をマッチさせるべきか">ランクと給与をマッチさせるべきか？</h2>

<p>全く別の論点として、ランクと給与をマッチさせるべきかどうかという話がある。VOYAGEさんの場合、技術力評価などによって決まるグレードと給与が緩やかに結びついているという話を懇親会で聞いた。</p>

<h3 id="給与テーブル">給与テーブル</h3>

<p>多くの企業は下記のような給与テーブルが設定されていると思う。下記はSmartHRさんの例だ。</p>

<p><img src="/images/posts/tech_assessment/smarthr.png" alt="給与テーブル" /></p>

<p><a href="https://speakerdeck.com/miyasho88/we-are-hiring">SmartHR会社紹介資料 - Speaker Deck</a></p>

<p>この給与テーブルの仕組みは厳密に運用できていれば納得感もあるだろうし問題ないと思う。しかし問題があるケースとしては例外を作ってしまうことだ。具体的には前職の給与のスライドによって給与テーブルから外れる人が出てしまうこと。これをやると <strong>給与テーブルという仕組み自体が崩壊し評価制度が矛盾を引き起こしひいてはエンジニアの不満・軋轢へとつながっていく</strong>。</p>

<blockquote>
  <p>現年収を聞く理由は下記の2つくらいしか思い浮かびません。</p>

  <ul>
    <li>エンジニアを安く採用したい</li>
    <li>自社で評価せず、他社の評価を使って楽したい</li>
  </ul>

  <p>給与テーブルや評価基準を明確にしている企業様は現年収を聞かないようにして頂けると、「この企業は評価基準が明確なのか」と分かるので聞かないようにして頂ければ幸いです。</p>
</blockquote>

<p><a href="https://sinsoku.hatenablog.com/entry/2018/03/06/002028">面接で現年収(前職の年収)を聞かれるのが嫌い - アジャイルSEの憂鬱</a></p>

<p>その点SmartHRさんは下記の記事の通り厳格な給与テーブルの運用を行っており素晴らしい姿勢だと思う。</p>

<blockquote>
  <p>現年収や希望年収を聞かずに、経験や能力、期待する役割、社内の水準と照らし合わせてオファー金額を決めています。</p>
</blockquote>

<p><a href="https://blog.shojimiyata.com/entry/2019/01/14/234020">SmartHR社が面談で「現年収・希望年収」を聞かない理由 - 宮田昇始のブログ</a></p>

<h3 id="市場価値で給与を決定">市場価値で給与を決定</h3>

<p>サイボウズさんの場合、社内評価だけで給与を決めるということはせず <strong>市場価値で給料を決めている</strong>。市場価値という概念を取り入れて給与を決めるのはなかなか他に例を聞かず、非常に面白い取り組みだと思った。</p>

<blockquote>
  <p>サイボウズの給与は「その人の市場価値」で決定されます。市場価値とは「社外的価値」と「社内的価値」の2つで決まります。</p>
</blockquote>

<p><a href="https://cybozushiki.cybozu.co.jp/articles/m001020.html">サイボウズの給料は「あなたが転職したらいくら？」で決めています | サイボウズ式</a></p>

<p>エンジニアは給与によって転職してしまうことが多い。社内で高く評価しているのにもかかわらず、お金という理由だけで転職してしまうのだとしたらそれは不幸なことだ。そういった不幸な転職を防ぐために市場価値を給与の決定要因にするのは悪くない判断だと思う。</p>

<blockquote>
  <p>思い切った賃金テーブルの改定が行えない企業が世の中には多いようで、<a href="https://b.hatena.ne.jp/entry/356805083/comment/mizchi">転職すると年収が上がるというバグ</a>が報告されている。</p>

  <p>（中略）</p>

  <p>社内で手放したくないエンジニアがいるという企業は、年収バグ起因で他の企業に転職されちゃう前にきちんと実力・成果に応じた報酬設定を行うべきた。</p>
</blockquote>

<p><a href="https://blog.toshimaru.net/engineer-hiring/">『その「エンジニア採用」が不幸を生む』を読んだ ~優秀エンジニアをどう採用するか~ - Hack Your Design!</a></p>

<h2 id="人を正しく評価する社会であってほしい">人を正しく評価する社会であってほしい</h2>

<p>エンジニアの転職市場は活況でまだしばらくその情報は続きそうだ。エンジニアを正しく評価し適切な給与設定をしなければ簡単に他社になびいてしまう。</p>

<p>本記事ではVOYAGEさんのエンジニア技術力評価会制度、SmartHRさんの厳格な給与テーブル運用、サイボウズさんの市場価格よる給与決定を紹介した。どれも素晴らしい取り組み・姿勢であり各社「正しい評価をしよう」という努力が見て取れる。</p>

<p>本記事ではエンジニア評価という切り口だったため、エンジニアに焦点をあてた内容になった。しかしエンジニアだけではない。<strong>優秀な人が優秀な人として正しく評価される</strong>―そんな社会であってほしいと切に願う。</p>

<blockquote>
  <p>能力の高い人は静かにうつむいて仕事に打ち込む傾向があるいうことです。仕事での業績が認められ、何も言わずに出世の道が開かれることを望み、自分から申し出なければならないと知ると、憤りを覚えて不満をこぼすようになり、最終的にもっと評価してもらえると感じられる場所へ飛び立っていきます。そして、そのパターンを繰り返します。</p>

  <p>往々にして経営者は優秀な人材が辞めていくことに驚き、理由がわからないでいます。これは経営者が配慮していなかったことが原因ですが、社員が去るまでその人材の価値を理解していない経営者がいるのは残念なことです。</p>
</blockquote>

<p><a href="https://jp.quora.com/%E8%83%BD%E5%8A%9B%E3%81%AE%E9%AB%98%E3%81%84%E4%BA%BA%E3%81%8C%E5%87%BA%E4%B8%96%E3%81%97%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF%E3%81%AA%E3%81%9C%E3%81%A7%E3%81%99%E3%81%8B">能力の高い人が出世しないのはなぜですか？ - Quora</a></p>

<h2 id="参考文献">参考文献</h2>

<ul>
  <li><a href="https://seleck.cc/834">VOYAGEのエンジニア評価制度の全貌。「技術力評価会」による、人が育つ組織の作り方 | SELECK [セレック]</a></li>
  <li><a href="https://speakerdeck.com/makoga/technology-assessment-2018-04-25">エンジニアの技術力評価は難しい? - 7年間運用してきた技術力評価制度の改善の歴史 ‒ / technology assessment 2018 04 25 - Speaker Deck</a></li>
</ul>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>市場価値のソースは転職ドラフト。ちなみに今は市場価値以上のお賃金はもらってますよ。念の為。 <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>実際はこのケースにおいては全員を同じようにランクアップさせるのが良いとは思う <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Toshimaru</name></author><category term="management" /><summary type="html"><![CDATA[VOYAGE GROUP エンジニアの公開ガチ評価会というイベントに行ってきた。イベントの内容まとめは他の方のブログに譲るとして、エンジニアの評価についていろいろ考える良いきっかけとなったので書いてみる。（エンジニアに限らず）人の評価は難しい。自分も人を評価する立場になって改めて思う。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/tech_assessment/og.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/tech_assessment/og.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">『Team Geek』読んだ ~HRT(謙虚/尊敬/信頼)の精神を知り会社でサバイブしていく方法~</title><link href="https://blog.toshimaru.net/team-geek/" rel="alternate" type="text/html" title="『Team Geek』読んだ ~HRT(謙虚/尊敬/信頼)の精神を知り会社でサバイブしていく方法~" /><published>2018-10-26T00:00:00+09:00</published><updated>2019-07-03T00:00:00+09:00</updated><id>https://blog.toshimaru.net/team-geek</id><content type="html" xml:base="https://blog.toshimaru.net/team-geek/"><![CDATA[<p>かの有名な<strong>HRTの精神の原典</strong>になっている本ということで読んでみた。</p>

<p><a href="https://www.amazon.co.jp/Team-Geek-%E2%80%95Google%E3%81%AE%E3%82%AE%E3%83%BC%E3%82%AF%E3%81%9F%E3%81%A1%E3%81%AF%E3%81%84%E3%81%8B%E3%81%AB%E3%81%97%E3%81%A6%E3%83%81%E3%83%BC%E3%83%A0%E3%82%92%E4%BD%9C%E3%82%8B%E3%81%AE%E3%81%8B-Brian-Fitzpatrick/dp/4873116309/ref=as_li_ss_il?ie=UTF8&amp;qid=1540485309&amp;sr=8-1&amp;keywords=team+geek&amp;linkCode=li3&amp;tag=toshimaru-22&amp;linkId=40736310d52f5cf2ad4d58ee4b35f4e3&amp;language=ja_JP" target="_blank"><img border="0" src="//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;ASIN=4873116309&amp;Format=_SL250_&amp;ID=AsinImage&amp;MarketPlace=JP&amp;ServiceVersion=20070822&amp;WS=1&amp;tag=toshimaru-22&amp;language=ja_JP" /></a><img src="https://ir-jp.amazon-adsystem.com/e/ir?t=toshimaru-22&amp;language=ja_JP&amp;l=li3&amp;o=9&amp;a=4873116309" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<h2 id="内容紹介">内容紹介</h2>

<p>読む前の印象としてはHRT精神ということでどんなエモい内容が書かれているんだろう…と期待していたのだがとんでもない、めちゃくちゃ実践的で（誤解を恐れずに言うと）、狡猾な内容が書かれていた。</p>

<p>本書では「人間は複雑でありバグの塊」という身も蓋もない前提事項を明確にした上で、「ではそんなバグバグでダメな人間とどう向き合っていけばよいか」を具体的に記載している。</p>

<p>また本書の面白い点は、会社内でうまく立ち回るためにときに社内政治・ソーシャルエンジニアリングさえも行う必要があると説かれている点だ。こういった活動はおよそソフトウェアエンジニアとは程遠いスキルのように思われるが、本書ではしっかりと言及され社内でどううまく立ち回っていけばよいか説明されている。</p>

<h2 id="hrt">HRT</h2>

<p>HRTとは謙虚（<strong>Humility</strong>）、尊敬（<strong>Respect</strong>）、信頼（<strong>Trust</strong>）のそれぞれの頭文字三文字をとった言葉だ。読み方は「ハート(heart)」というらしい。それぞれの用語を解説する。</p>

<h3 id="謙虚humility">謙虚（Humility）</h3>

<p><strong>世界の中心は君ではない</strong>。君は全知全能ではないし、絶対に正しいわけでもない。常に自分を改善しよう。</p>

<h3 id="尊敬respect">尊敬（Respect）</h3>

<p><strong>一緒に働く人のことを心から思いやろう</strong>。相手を一人の人間として扱い、その能力や功績を高く評価しよう。</p>

<h3 id="信頼trust">信頼（Trust）</h3>

<p><strong>自分以外の人は有能であり、正しいことをすると信じよう</strong>。そうすれば仕事を自分以外の誰かに任せることができる（ただし無能な人には任せるのは難しい）。</p>

<h3 id="あらゆる人間関係の衝突はhrtの欠如によるもの">あらゆる人間関係の衝突はHRTの欠如によるもの</h3>

<p>そして本書では下記のように言い切っている。</p>

<blockquote>
  <p>あらゆる人間関係の衝突は、謙虚・尊敬・信頼の欠如によるものだ</p>
</blockquote>

<p>つまり人間関係が悪化している場合、それはあなたもしくは誰かが「謙虚ではない・尊敬の念を持っていない・信頼していない」ことから生じていると考えてよい。</p>

<h2 id="コードレビューとhrt">コードレビューとHRT</h2>

<p>私見だが特にエンジニアのコードレビューの場面においてこのHRTの精神は大事にすべきだと考えている。</p>

<p>GitHubなどのコードレビューツールの台頭によりコードレビューが圧倒的にしやすくなった反面、文章によるコードレビューは容易に人の心を傷つける。具体的にはコードに対する批判を人に対する批判（人格否定）だと受け取ったり、文章だと感情が伝わりづらく何気ないレビューコメントが「怒ってそう」「高圧的で怖い」などと受け取られたり…。</p>

<p>コードレビュー時には上述したようなすれ違いが起きないように、なるべく気をつけてHRTな振る舞いをするようにしたい。僕がレビューのときに気をつけていることとしては下記のことだ。</p>

<ul>
  <li>絵文字を使う😃
    <ul>
      <li>絵文字を駆使して感情を伝える。フレンドリーさを演出する</li>
      <li>その結果感情の誤読は減り、コミュニケーションはより活発になる</li>
    </ul>
  </li>
  <li>断定口調は使わない
    <ul>
      <li>「〜のほうが良い」「〜はダメ」という断定は自分が間違っている可能性を否定しているので <strong>謙虚さ</strong> に欠ける</li>
      <li>「〜のほうが良いと思っているのですがどうでしょうか」などと相手の反論の余地を残してやるべき</li>
      <li>なにか断定したいのであれば少なくともレビュイーが納得できるに足る理由を上げるべき</li>
    </ul>
  </li>
  <li>命令ではなく提案
    <ul>
      <li>「〜に変更してください」という命令は相手のコードを <strong>尊敬</strong> していないし <strong>信頼</strong> していないように聞こえる</li>
      <li>命令でなく「〜と書いてみるのはいかがでしょう？」という提案に形式を変えてみるとよい</li>
      <li>断定同様にきちんと理由も述べる</li>
    </ul>
  </li>
  <li>強い言葉を使わない（弱くみえるぞ？）
    <ul>
      <li>「クソコード」などの強い言葉は使わない。相手への <strong>尊敬</strong> が全くないのでNG</li>
      <li>強い言葉を使いたくなるような場面だとコードレビューでのすれ違いが起きる可能性が高いので口頭でカバーするのが吉</li>
    </ul>
  </li>
</ul>

<h2 id="有害な人間と付き合う">有害な人間と付き合う</h2>

<p>第四章のトピックは <strong>有害な人に対処する</strong> だ。本章では「チームの文化を破壊するアウトサイダーから身を守る方法」について説明される。</p>

<h3 id="有害な人への対策">有害な人への対策</h3>

<p>下記のような手段でチームの文化を強固にしておけば、有害な人の有害な振る舞いを受け入れにくくなる。</p>

<ul>
  <li><strong>ミッション・ステートメント</strong> の作成
    <ul>
      <li>チームの目標を明確にする</li>
    </ul>
  </li>
  <li>メールで議論するときの <strong>マナー</strong> を決める
    <ul>
      <li>OSSでいう<a href="https://gihyo.jp/admin/clip/01/linux_dt/201809/19">Code of Conduct</a>的なもの</li>
    </ul>
  </li>
  <li>すべての <strong>履歴を文書化</strong>
    <ul>
      <li>新参者が履歴を追えるように</li>
    </ul>
  </li>
  <li>バグ修正・テスト・リリースについて <strong>明確なポリシー・手続き</strong> を策定</li>
  <li><strong>合意ベースの決定</strong> を信頼する
    <ul>
      <li>あわせて合意できなかったときの衝突解消のプロセスも定義する</li>
    </ul>
  </li>
</ul>

<h3 id="有害な人のパターン">有害な人のパターン</h3>

<p>有害な人のパターンとしては下記のパターンが存在する。</p>

<ul>
  <li>他人の時間を尊重しない人
    <ul>
      <li>プロジェクトの文書、READMEを読めばわかることを何度も質問して邪魔する</li>
    </ul>
  </li>
  <li>エゴが強い人
    <ul>
      <li>合意を受け入れられない人・異なる視点の意見に耳を傾けない人・妥協できない人</li>
    </ul>
  </li>
  <li>何かを要求する人
    <ul>
      <li>ソフトウェアに対して不満はいうが、貢献する気のない人の可能性がある</li>
    </ul>
  </li>
  <li>未熟なコミュニケーションをする人
    <ul>
      <li>草を生やしまくったり(<code class="language-plaintext highlighter-rouge">w</code>を多用すること)、大文字や記号を多用する</li>
    </ul>
  </li>
  <li>パラノイアな人
    <ul>
      <li>被害妄想を持ち、陰謀論を唱えるような人</li>
    </ul>
  </li>
  <li>完璧主義な人
    <ul>
      <li>ソフトウェアの設計に時間をかけすぎる人</li>
      <li>チームの進捗を停滞させてしまう</li>
    </ul>
  </li>
</ul>

<h3 id="有害な人を追い出す">有害な人を追い出す</h3>

<p>本書では最終的に<strong>有害な人は追い出してよい</strong>と述べている。もちろん最初からではなくきちんとコミュニケーションをとった上でそれでも問題が解消されないようであれば、最後の手段としての＜追い出し＞だ。</p>

<h2 id="社内政治ソーシャルエンジニアリング">社内政治、ソーシャルエンジニアリング</h2>

<p>5章は組織的操作の技法がトピックであり、「仕事を効率的に進めるための小手先のテクニックが必要」だと述べられている。小手先のテクニックとはつまり <strong>社内政治、ソーシャルエンジニアリング</strong> のことである。</p>

<p>社内政治という言葉はエンジニアの対極にある慣習のように思えるし、あなたがエンジニアであれば「社内政治なんてとんでもない！」と思うかもしれない。しかしときにそういう手段も必要だとハッキリ説いているのが本書の面白いところと言える。</p>

<h3 id="自分の価値を高める">自分の価値を高める</h3>

<p>自分の価値を高める振る舞いとして下記のような振る舞いが紹介されている。</p>

<ul>
  <li>自分の責任範囲を広げる
    <ul>
      <li>マネージャーの作業負担軽減になる</li>
      <li>自分自身の能力を示すことができる</li>
    </ul>
  </li>
  <li>リスクをとる
    <ul>
      <li>すばやく失敗してすばやく学習する</li>
      <li>失敗したら何が起きたかを文書化して再発防止策に努める</li>
    </ul>
  </li>
  <li>大人らしく振る舞う
    <ul>
      <li>マネージャーから子供扱いを受けないために</li>
    </ul>
  </li>
  <li>質問する
    <ul>
      <li>納得できないことがあれば根拠について質問したり議論する</li>
    </ul>
  </li>
  <li>マネージャーはエスパーではない
    <ul>
      <li>自分が何をしているかをマネージャーに報告する</li>
      <li>マイクロマネジメントの回避策にもなる</li>
    </ul>
  </li>
</ul>

<h3 id="自分が居心地のいい場所を作る">自分が居心地のいい場所を作る</h3>

<p>平たくいうと「<strong>組織がクソなこともある。組織に期待せず自分でよい組織を作るという意識を持て</strong>」ということが書いてある。</p>

<blockquote>
  <p>会社にはルールがある。曲げてもいいものもあれば、ぶち壊していいものある。組織のなかで振る舞うべきことばかりに集中していると、不満や失望を感じるだけだ。組織はそういうものだと認めよう。組織を動かして自分の仕事に利用できる仕組みを見つけよう。自分が居心地のいい場所を作り出すのである。</p>
</blockquote>

<h3 id="自分を売り込む">自分を売り込む</h3>

<p>自分を売り込むという行為もまたエンジニアらしからぬ行為のようにも思えるが時には必要だ。つまり<strong>うまくやっていることを上司やチームの外部にいる人たちに知らせる</strong>ということだ。</p>

<p>それを演出するために＜できるだけ約束を小さくして、届けるものは大きくする＞という手法が紹介されている。大きな約束をしてしまうとその締切を守れなかったときや、機能を落としたときの信用損失が大きくなってしまうからだ。</p>

<p>またエンジニアはプロダクトのローンチにエネルギーを注ぐべきだとも説かれている。なぜならプロダクトローンチというイベントが何かを成し遂げたことを伝える一番わかりやすいイベントだからだ。リファクタリングをもっとやりたいと考えるかもしれないがそれだけではダメで、そこに半分以上時間を割いたりしたら何も評価されないし最悪プロジェクト中止さえありえる。</p>

<h3 id="逃げるという選択肢">逃げるという選択肢</h3>

<p>「すべてやっているけど改善されないしうまくいかない」そんな状況に陥ったとしたら<strong>さっさと逃げてしまう</strong>ことが得策だと言う。</p>

<blockquote>
  <p>システムを変更できなければいくらエネルギーを注いでもムダだ。そこから逃げ出すことにエネルギーを注ごう</p>
</blockquote>

<p>ある程度やって無理なものは無理、ダメなものはダメ、さっさと逃げる！と割り切っている点も本書の潔くて良い点である。</p>

<h2 id="チームはパンのようなもの">チームはパンのようなもの</h2>

<p>本書ではチームはパンであるという比喩が使われる。</p>

<blockquote>
  <p>チームの文化はサワードウパンのようなものだ。スターター（創業者）がパン生地（新来者）に菌（文化）を植え付ける。イースト菌と乳酸菌（チームメンバー）が発酵（成長）すると、おいしいパン（チーム）のできあがりだ。</p>
</blockquote>

<p><strong>強い文化を持つチームを作る必要がある</strong>。さもないと新来者が持ち込む文化に負けてしまう。チームが文化を大切にできなければ、チームのアイデンティティや仕事の誇りを失ってしまう。</p>

<p>この話は日本風の喩えでいうと＜腐ったみかん＞の話に通ずるものがある。一つ腐ったみかんがあると他のみかんも腐ってしまうという事象である。そうならないために腐ったみかんを紛れ込ませない、あるいは多少腐ってしてもそれが伝播しないような強いみかん（チーム）である必要がある。</p>

<p>強い文化を作るには時間・労力がかかる。会社においては応募者がカルチャーフィットするかを面接のプロセスにおいてチームのメンバーが評価・判断し決める。採用を妥協してはいけない。</p>

<h2 id="マネジメントについて">マネジメントについて</h2>

<p>本書はマネージャーのためのマネジメント本ではなく、なんとなくリーダーになってしまったエンジニアのための本だと位置付けられている。</p>

<h3 id="マネージャーになるべき">マネージャーになるべき！？</h3>

<p>本書では「エンジニアはマネージャーになるべきだ」と主張しているのは興味深い。</p>

<p>一般的に言ってエンジニアはマネージャーになりたがらない。一番の理由はコードを書く時間が少なくなるからである。そして無能なマネージャーの下に就いたことのあるエンジニアもまたマネージャーになることを拒む。しかし本書では下記のように説く。</p>

<blockquote>
  <p>マネージャーになるべき大きな理由がある。まずは自分自身をスケールできるからだ。コードを書くのが得意だとしても、一人で書けるコード量には限界がある。自分がリーダーになって、優秀なエンジニアのチームにコードを書いてもらえば、どれだけのコード量になるかを想像してみてほしい！</p>
</blockquote>

<h3 id="サーバントリーダーの役割">サーバントリーダーの役割</h3>

<p>マネージャーになるのであれば <strong>サーバントリーダーになるべき</strong> だという。つまり執事や召使いのようにチームに奉仕するのだ。サーバントリーダーのやるべきことの例は下記だ。</p>

<ul>
  <li>HRTの雰囲気を作り出す</li>
  <li>エンジニアでは対処できない社内の障害物を除去</li>
  <li>チームの合意形成を支援</li>
  <li>問題解決を支援する
    <ul>
      <li>アドバイスを求めてきたらリーダー自身が問題解決してはダメ、あくまでもサポートのみ</li>
    </ul>
  </li>
  <li>マイクロマネジメントをしない</li>
  <li>夜遅くなったときに差し入れ</li>
  <li>チームが順調に進めるように穴を埋める
    <ul>
      <li>ときには自らの手を汚す</li>
    </ul>
  </li>
  <li>技術的な側面とチームの人間関係を管理する（後者が難しい！）
    <ul>
      <li>技術畑出身のリーダーは後者を無視しがちだがそれはNG、きちんとチームの人間的側面に目を向ける</li>
      <li>みんなのお友達になるのもNG、あくまでも仕事の関係を保つ</li>
    </ul>
  </li>
</ul>

<h3 id="リーダーはパーフェクトではない">リーダーはパーフェクトではない</h3>

<p>リーダーはパーフェクトでなければならないという強迫観念があるかもしれないが、それを本書は否定する。</p>

<blockquote>
  <p>リーダーはなんでも正しくやって、すべてを把握して、あらゆる質問に答える責任があると思っている。すべてを正しくやる必要はないし、あらゆる質問に答える必要もないし、そんなことをしていたら逆にチームの信頼を失ってしまう。</p>
</blockquote>

<p><strong>質問を歓迎してチームからのフィードバックと批判をオープンに受け止めよう。そして何かを失敗したときは心から謝罪しよう。</strong></p>

<p>またリーダーが適切な答えを知っている必要はない。適切な答えを持っている人を知っていて、その人を紹介できさえすればよいのだ。多くの場合、適切な答えを知るより、適切な人を知るほうが価値がある。</p>

<p>参考資料 (Podcast): <a href="https://anchor.fm/em-fm/episodes/ep2--Engineering-Manager-e2bq4j">Engineering Managerをスーパーマンだと思わないで by EM . FM #EMFM • A podcast on Anchor</a></p>

<h3 id="ネガティブフィードバックを正しく伝える">（ネガティブ）フィードバックを正しく伝える</h3>

<p>正直になるのもリーダーをやる上で重要だ。</p>

<p>1on1などの場面において共有できないことをメンバーから質問されたら「知っているけど伝えられない」と答えれば良い。自分がわからないことを聞かれたら素直に「わからない」といえばいい。</p>

<p>ネガティブ・フィードバックを伝えるのは難しい。フィードバックや批判を伝えるときはメッセージが正しく相手に伝わっているかが重要だ。しかし直截的な伝え方だと相手に受け入れてもらえない場合があるので、きちんと適切な言い方を考えてから伝えよう。</p>

<p>一方でチームメンバーの欠点ばかりを気にしていいところを十分にフィードバックできていないケースも気をつけよう。素晴らしいところは積極的に知らせてあげるべきだ。</p>

<h3 id="リーダーの行動指針">リーダーの行動指針</h3>

<p>その他にもリーダーが取るべき行動指針として下記のものが紹介されている。</p>

<ul>
  <li>チームの幸せを追い求める</li>
  <li>委譲せよ、ただし手は汚せ
    <ul>
      <li>たとえ自分がやったほうが早くてもチームメンバーに任せる</li>
    </ul>
  </li>
  <li>自分自身を置き換えるくらいの優秀な人を採用する
    <ul>
      <li>チームメンバーに代わりをしてほしいのであれば自分より優秀な人を採用する</li>
    </ul>
  </li>
  <li>事を荒立てるときを知る
    <ul>
      <li>状況は自然とは良くはならない、きちんと指摘する</li>
    </ul>
  </li>
  <li>カオス（不確実性）からチームを守る
    <ul>
      <li>リーダーになるとメンバーの頃には見えなかったカオスが見える。メンバーをそのカオスから守ろう</li>
    </ul>
  </li>
  <li>チームを空中援護する
    <ul>
      <li>会社の上空（上層部）で何が起きているかをチームに知らせる</li>
      <li>できるだけ多くの情報をチームに共有すべきだが、チームに無関係の組織の話はする必要がない</li>
    </ul>
  </li>
  <li>どのエンジニアが何を必要としているかを把握してそれを与える
    <ul>
      <li>エンジニアが何を欲しているかは一人ひとり異なる</li>
    </ul>
  </li>
</ul>

<h2 id="まとめ">まとめ</h2>

<p>HRT（謙虚・尊敬・信頼）の精神を知るためにまずは手にとって読むべき本が本書である。</p>

<p>HRTの精神に加えて、本書には「有害な人に対処する方法」「社内でうまく立ち回る方法」など<strong>会社で＜サバイブ＞していくための極めて実践的な内容</strong>が書かれていた。HRTだけでなくそういったスキルもときに必要であり重要であるということを認識するのに、本書はすべてのエンジニアにオススメの一冊に仕上がっている。</p>

<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=toshimaru-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=4873116309&amp;linkId=0aff3222ba2c6d1926da0019e2d110b9"></iframe>]]></content><author><name>Toshimaru</name></author><category term="読書" /><category term="management" /><category term="review" /><summary type="html"><![CDATA[かの有名なHRTの精神の原典になっている本ということで読んでみた。読む前の印象としてはHRT精神ということでどんなエモい内容が書かれているんだろう…と期待していたのだがとんでもない、めちゃくちゃ実践的で（誤解を恐れずに言うと）狡猾な内容が書かれていた。 本書では「人間は複雑でありバグの塊」という身も蓋もない前提事項を明確にした上で、「ではそんなバグバグでダメな人間とどう向き合っていけばよいか」を具体的に記載している。 また本書の面白い点は会社内でうまく立ち回るためときに社内政治・ソーシャルエンジニアリングを行う必要があると説かれている点だ。こういった活動はおよそソフトウェアエンジニアとは程遠いスキルのように思われるが、本書ではしっかり言及され社内でどううまく立ち回っていけばよいかが説明されている 。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/teamgeek.jpg" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/teamgeek.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">ヤフーの1on1とシリコンバレー式1on1の本を読んだ ~1on1の目的、進め方、何を話すべきか~</title><link href="https://blog.toshimaru.net/1-on-1-book-memo/" rel="alternate" type="text/html" title="ヤフーの1on1とシリコンバレー式1on1の本を読んだ ~1on1の目的、進め方、何を話すべきか~" /><published>2018-02-10T00:00:00+09:00</published><updated>2019-05-31T00:00:00+09:00</updated><id>https://blog.toshimaru.net/1-on-1-book-memo</id><content type="html" xml:base="https://blog.toshimaru.net/1-on-1-book-memo/"><![CDATA[<p>1on1 をチームで実施することとなり、勉強がてら『<a href="http://amzn.to/2GNg6b5">シリコンバレー式 最強の育て方 ― 人材マネジメントの新しい常識 1on1ミーティング</a>』と『<a href="http://amzn.to/2GKRNu2">ヤフーの1on1 ― 部下を成長させるコミュニケーションの技法</a>』の２冊を読んだ。</p>

<p>※以下、それぞれをシリコンバレー式1on1本とYahoo 1on1本と表記する</p>

<h2 id="両本のちがい">両本のちがい</h2>

<ul>
  <li>シリコンバレー式1on1本
    <ul>
      <li>1on1の必要性、1on1で何を話すべきかが体系的にまとまっている</li>
      <li>1on1の質問・伝え方例一覧が巻末にある</li>
    </ul>
  </li>
  <li>Yahoo 1on1本
    <ul>
      <li>1on1における上司のロールとしてはコーチング的な要素強い</li>
      <li>1on1での改善事例、サクセスストーリーが漫画・会話形式多く書かれている</li>
      <li>コミュニケーションの細かなテクニック・Tipsも多く書かれている</li>
    </ul>
  </li>
</ul>

<p>シリコンバレー式1on1本のほうで体系的に1on1の必要性・話すべきことを掴んで、実際に1on1の開催イメージを掴んでいくためにYahoo 1on1本を読むと良い。</p>

<h2 id="1on1とは何か">1on1とは何か？</h2>

<p>1on1とは上司と部下で行われる１対１で話をする場のことである<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>。日本語で言うと面談…だが面談というと人事面談や評価面談などのように堅い印象があるので、あえて1on1という呼び方をすることが多い。</p>

<h2 id="1on1の目的">1on1の目的</h2>

<p>1on1 の目的としては下記が挙げられる。</p>

<ul>
  <li><strong>部下との関係性の構築</strong>
    <ul>
      <li>業務ではできない質の高いコミュニケーションを行う</li>
    </ul>
  </li>
  <li><strong>部下のキャリア開発</strong>
    <ul>
      <li>部下の短期的キャリア・中長期のキャリア開発を支援</li>
    </ul>
  </li>
  <li><strong>部下のパフォーマンス管理</strong>
    <ul>
      <li>目標管理</li>
    </ul>
  </li>
  <li><strong>部下のモチベーション向上</strong>
    <ul>
      <li>困っていること・業務ブロッカーの排除</li>
    </ul>
  </li>
  <li><strong>部下の成長支援</strong>
    <ul>
      <li>フィードバック</li>
    </ul>
  </li>
</ul>

<p>そして上司はこれらの1on1目的をきちんと部下に説明すること。部下が1on1に意義が見いだせなかったり、イヤイヤ開催するような1on1であれば1on1はすぐに形骸化してしまうので、しっかり上司は目的を伝えて納得してもらった上で1on1を開催すること。</p>

<h2 id="1on1で話すこと">1on1で話すこと</h2>

<p><img src="/images/posts/1on1/1on1-topics.png" alt="シリコンバレー式" /></p>

<p><strong>シリコンバレー式1on1本より図を引用</strong></p>

<ol>
  <li><strong>プライベート相互理解</strong>
    <ul>
      <li>雑談の中から聞きだせるとよい。関係性を構築する上で相手の人となりは知っておくのが基本。</li>
    </ul>
  </li>
  <li><strong>心身の健康チェック</strong>
    <ul>
      <li>心身の状態が問題ないか。業務量が過多になっていたり、業務時間が不規則になっていないか。</li>
    </ul>
  </li>
  <li><strong>モチベーションアップ</strong>
    <ul>
      <li>モチベーションを下げる要因を取り除く
        <ul>
          <li>何か困っていること・業務を行う上でのブロッカーがあるのであればその話をきちんと聞く（傾聴/アクティブリスニング）</li>
          <li>上司は部下への否定ではなく共感を示す</li>
        </ul>
      </li>
      <li>モチベーションを上げる要因を作り出す
        <ul>
          <li>ほめる/承認する</li>
        </ul>
      </li>
    </ul>
  </li>
  <li><strong>業務・組織課題の改善</strong>
    <ul>
      <li>業務課題の改善
        <ul>
          <li>課題を聞くとともに将来起こりうるリスクも確認しておくと良い</li>
        </ul>
      </li>
      <li>チーム/組織課題の改善</li>
    </ul>
  </li>
  <li><strong>目標設定・評価</strong>
    <ul>
      <li>マネージャーは正しい評価をするのではなく、部下が納得できる評価が必要
        <ul>
          <li>納得感を持てなければ部下が建設的に目標に向き合えない</li>
        </ul>
      </li>
    </ul>
  </li>
  <li><strong>能力開発・キャリア支援</strong>
    <ul>
      <li>経験学習のサイクルを回す</li>
    </ul>
  </li>
  <li><strong>戦略・方針の伝達</strong>
    <ul>
      <li>経営陣などの上層部の戦略・方針をその背景も含めて適切に部下に伝達する</li>
    </ul>
  </li>
</ol>

<h2 id="1on1は部下のための時間">1on1は部下のための時間</h2>

<p>1on1は会社のための時間でもなく上司のための時間ではなく <strong>部下のための時間</strong> だ。</p>

<p>1on1で話すトピックは基本的には上司が決めてファシリテートしていくものであるが、部下が話したいトピックがある場合はそちらを優先する。</p>

<p>1on1内で話している時間も7-8割くらいが部下が話す時間になるようにするのが理想的である。</p>

<h2 id="1on1メモを作ろう">1on1メモを作ろう</h2>

<p>1on1で話した内容を忘れないように、きちんと話したことをメモとして書き残しておく。</p>

<p>メモを残すならば今ならグーグルDocsなどのクラウドサービスを使うのが良いだろう。上司・部下だけが閲覧できるような設定にしておき、メモは共同編集しておけるようにしておくと良い。</p>

<p>上司は共有用のドキュメントとは別に部下の個人データを残すドキュメントも用意しておくとよい。そうすることで話が進めやすくなったり担当が変わったときの情報の引き継ぎがやりやすくなる。</p>

<h2 id="心理的安全性の確保">心理的安全性の確保</h2>

<p>1on1は部下が率直に、気兼ねなく上司と話をできる場でなければならない。言い換えると上司は部下の心理的安全性を確保するように気をつけなければならない。</p>

<blockquote>
  <p>心理的安全性とは、自分の言動が他者に与える影響を強く意識することなく感じたままの想いを素直に伝えることのできる環境や雰囲気のことです。</p>

  <p><a href="https://bizhint.jp/keyword/101187">心理的安全性とは？googleが発見したチーム生産性を高める唯一の方法 | BizHint HR</a></p>
</blockquote>

<p>心理的安全性を確保するにはどうすればよいか。</p>

<p>まず、上司は部下一人ひとりときちんと向き合い話を傾聴する姿勢が求められる。部下の話を先取ったり途中で遮ることはやめること。</p>

<p>また、上司は部下の話を頭ごなしに否定するのではなく共感を示す必要がある。否定する必要があるときはニュートラルな上手な言い回しをすること。</p>

<p>そして目標設定・評価や業務アサインはきちんと部下が納得感を持てるような説明が上司に求められる。上司から部下への一方的な設定は命令感が強くなり部下が発言しにくくなる可能性がある。</p>

<h2 id="1on1の頻度について">1on1の頻度について</h2>

<p>Yahoo社の場合だと週一回、30分の1on1ミーティングを実施しているとのことだ。フィードバックループを素早く回していくためにはそれくらいの頻度が丁度良いらしい。</p>

<p>とはいえ現実問題としてマネージャーは忙しいのでなかなかそこまでの時間がとれないかもしれない。であれば隔週、最低でも月一回は1on1を実施する。1on1 において重要なのは定期的に継続して実践することだ。</p>

<h2 id="次のアクションを決める">次のアクションを決める</h2>

<p>1on1の中でタスクや確認事項が生じた場合はきちんと <strong>次のアクション（宿題）</strong> として残しておく。</p>

<p>そのアクションがきちんと達成できているかは、次回の1on1時に必ず確認する。積み残した宿題があるのであれば出来なかった理由をしっかり確認して次回のアクションに繋げる。</p>

<h2 id="1on1を通して成長を支援する">1on1を通して成長を支援する</h2>

<p><img src="/images/posts/1on1/cycle.png" alt="経験学習サイクル" /></p>

<p><strong>シリコンバレー式1on1本より図を引用</strong></p>

<p>どちらの本も1on1での成長を促すために <strong>経験学習サイクル</strong> を回すことが推奨されている。</p>

<p>1on1ではこのサイクルが上手に回るようにサポートする。上司は1on1のやり取りの中で上図の2(振り返り),3(教訓・学びの気づき),4(計画)を部下の口から引き出せるようにうまく働きかけをおこなう。</p>

<p><img src="/images/posts/1on1/coaching.png" alt="コーチング" /></p>

<p><strong>Yahoo 1on1本より図を引用</strong></p>

<h2 id="所感">所感</h2>

<p>業務上のコミュニケーションだけでは、業務外の困っていることであったりその人がキャリアプランをどう考えているかなどのトピックまでは拾えない。人々のワークスタイル・ライフスタイルの多様化にともない人々の仕事に対する価値観、仕事に求めることも多様化してきている中、その領域を拾える1on1は職場環境を改善するために非常に有効な手段だと感じることができた。</p>

<p>1on1制度はシリコンバレーは当たり前のプラクティスとなっていると聞く。日本企業でも1on1制度の導入事例が増えていって社会全体の労働環境が改善されると良いなーと思った。</p>

<p>1on1導入後も単純に1on1を開催して満足というわけではなく、上手な1on1にしていくには上司側の1on1スキルの向上も必要となってくる。本書を読んでその辺の細かなテクニックとか言い回しのポイントなども知ることができてよかった。</p>

<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=toshimaru-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=4761272864&amp;linkId=fa0dbf5e7d684ec5864efa0436add116"></iframe>

<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=toshimaru-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=4478069786&amp;linkId=ea9f3d4a7b14fcc644075add70c9b61e"></iframe>

<h2 id="web上の参考資料">Web上の参考資料</h2>

<ul>
  <li><a href="https://www.slideshare.net/satoshiyoshinaga/1on1-80798455">生産性を高める 1on1</a></li>
  <li><a href="https://medium.com/@tumada/%E5%8A%B9%E6%9E%9C%E7%9A%84%E3%81%AA-1-on-1-%E3%83%9F%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AB%E3%83%9E%E3%83%8D%E3%83%BC%E3%82%B8%E3%83%A3%E3%81%8C%E3%81%A7%E3%81%8D%E3%82%8B%E3%81%93%E3%81%A8-6d5c03a3383">効果的な 1on1 ミーティングのためにマネージャができること – Taka Umada – Medium</a></li>
  <li><a href="http://d.hatena.ne.jp/higepon/20150728/1438080621">1on1 で 何を話すのか？ マネージャ/ソフトウェアエンジニアの立場から - サンフランシスコではたらくソフトウェアエンジニア - Higepon’s blog</a></li>
</ul>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>上司と部下という呼称は上下関係が色濃く現れる日本語なのであまり好きではないのだが、便宜上使うこととする <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Toshimaru</name></author><category term="management" /><category term="読書" /><summary type="html"><![CDATA[1on1 をチームで実施することとなり、勉強がてら『シリコンバレー式 最強の育て方 ― 人材マネジメントの新しい常識 1on1ミーティング』と『ヤフーの1on1 ― 部下を成長させるコミュニケーションの技法』の２冊を読んだ。　シリコンバレー式1on1本のほうで体系的に1on1の必要性・話すべきことを掴んで、実際に1on1の開催イメージを掴んでいくためにYahoo 1on1本を読むと良い。1on1とは何か？ 1on1とは上司と部下で行われる１対１で話をする場のことである^1。日本語で言うと面談…だが面談というと人事面談や評価面談などのように堅い印象があるので、あえて1on1という呼び方をすることが多い。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/1on1/og.jpg" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/1on1/og.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">認定スクラムマスター研修に行ってきました</title><link href="https://blog.toshimaru.net/scrum-training/" rel="alternate" type="text/html" title="認定スクラムマスター研修に行ってきました" /><published>2016-01-20T00:00:00+09:00</published><updated>2018-02-08T00:00:00+09:00</updated><id>https://blog.toshimaru.net/scrum-training</id><content type="html" xml:base="https://blog.toshimaru.net/scrum-training/"><![CDATA[<p>昨年末にスクラムマスター研修を受けてきて、認定スクラムマスター (CSM)となりました。スクラムマスター研修で学んだこととして社内で共有した内容を本ブログでも共有してみようと思います。</p>

<h2 id="scrum-vs-agile-歴史から学ぶ">Scrum vs Agile 〜歴史から学ぶ〜</h2>

<ul>
  <li>1993年: スクラム誕生</li>
  <li>2001年: アジャイルソフトウェア開発宣言
    <ul>
      <li>アジャイルマニフェスト: <a href="http://agilemanifesto.org/iso/ja/manifesto.html">アジャイルソフトウェア開発宣言</a></li>
      <li>アジャイル原則:  <a href="http://agilemanifesto.org/iso/ja/principles.html">アジャイル宣言の背後にある原則</a></li>
    </ul>
  </li>
</ul>

<p>アジャイルは「より良い開発/方法を探している」という状態のことです。状態なので原理的には「アジャイル開発をしている」という表現は正しくありません。振り返ってみて「あのプロジェクトはアジャイルだった」と評価できるもの。極端に言うといわゆるウォーターフォール型の開発も１つのアジャイルと定義することもできます。</p>

<p><em>Don’t do agile, be agile</em> （訳: アジャイル開発をするな、アジャイルであれ）</p>

<p>スクラムのほうがアジャイルより歴史的には古く、アジャイルの定義が曖昧な一方、スクラムはきちんと確立された方法論で現在もアップデートされ続けているフレームワークです(年２回)。ただ出版社のマーケティング戦略的に「アジャイル」というバズワードを使わなきゃ本が売れないという理由もあってか、世の中には＜アジャイルという皮を被った何か＞が氾濫しています。「アジャイル」という魔法のコトバに惑わされてはいけないのです。</p>

<h2 id="スクラムとは何か">スクラムとは何か？</h2>

<p>スクラムとは <strong>＜現状を把握するためのフレームワーク＞</strong>。どのプロジェクトにおいても現状を把握した結果、大体において問題はあることから <strong>＜問題を発見するフレームワーク＞</strong> と言われることもあります。</p>

<p>なのでポイント（超重要！）は、スクラムをやったからといって、</p>

<ul>
  <li><strong>生産性は向上しません</strong></li>
  <li><strong>人が成長することはありません</strong></li>
  <li><strong>プロダクトが改善することはありません</strong></li>
</ul>

<p>あくまでもこれらは、現状を把握した結果として期待できるものであって、スクラムをやれば必ず得られる結果というわけではありません。スクラムもまた、銀の弾丸ではないのです。</p>

<p>逆にチームの現状を把握できていないのであれば、それはスクラムとは呼べません。そして「スクラムは優秀な人じゃなければできない」というのも間違いです。優秀じゃない人でも現状を把握してそこそこの成果を出せるようにするのがスクラムというフレームワークです。</p>

<h2 id="スクラムのルール">スクラムのルール</h2>

<p>全部で19個あります。</p>

<p><img src="/images/posts/scrum/scrum1.png" alt="scrum" /></p>

<h3 id="スクラムの三本柱">スクラムの三本柱</h3>

<ol>
  <li><strong>透明性</strong> – Transparency</li>
  <li><strong>検証</strong> – Inspect</li>
  <li><strong>適合</strong> (検証に基づいた適合) – Adapt</li>
</ol>

<h3 id="スクラムの３つの役割">スクラムの３つの役割</h3>

<ol>
  <li><strong>プロダクトオーナー</strong>
    <ul>
      <li>チームのROIを最大化させる（ビジネスのROIではないということに注意）</li>
    </ul>
  </li>
  <li><strong>スクラムマスター</strong>
    <ul>
      <li>開発が Scrum と呼べる状態にする</li>
      <li><strong>スクラムじゃない方法を提案するのもまた、スクラムマスターの役割</strong></li>
    </ul>
  </li>
  <li><strong>チーム</strong></li>
</ol>

<p><strong>7人±2人</strong> が１つのスクラムチームを構成するのがのぞましいとされています。</p>

<h3 id="スクラムの5つのセレモニー">スクラムの5つのセレモニー</h3>

<ol>
  <li><strong>Sprint Planning – スプリント計画</strong>
    <ul>
      <li>短期計画</li>
      <li>何を実現しようとしているのかを明確に</li>
      <li>どの順番（優先順位）で開発を進めるのか</li>
    </ul>
  </li>
  <li><strong>Daily Scrum – デイリースクラム/朝会（朝じゃなくてもよい）</strong>
    <ul>
      <li>15分間</li>
      <li>毎日の学習を共有</li>
      <li>議論は行わない</li>
    </ul>
  </li>
  <li><strong>Product Backlog Refinement – プロダクトバックログ見直し</strong>
    <ul>
      <li>中長期計画（現在のスプリントは含まれないことに注意）</li>
      <li>スプリントの5-10%使って見直しを行う</li>
    </ul>
  </li>
  <li><strong>Sprint Review – スプリントレビュー</strong>
    <ul>
      <li>動くプロダクト・ドキュメントで成果を確認する</li>
      <li>プロダクト触ってもっとプロダクトを良くする</li>
    </ul>
  </li>
  <li><strong>Sprint Retrospective – スプリントレトロスペクティブ/振り返り</strong>
    <ul>
      <li>チームが生産性を高めるために取らなきゃいけないアクションを1つ以上決める</li>
    </ul>
  </li>
</ol>

<p><img src="/images/posts/scrum/scrum2.jpeg" alt="scrum sprint" /></p>

<h3 id="アーチファクト">アーチファクト</h3>

<p>アーティファクト、成果物とでも訳しましょうか。下記４つがそれにあたります。</p>

<ol>
  <li><strong>スプリントバックログ</strong></li>
  <li><strong>プロダクトバックログ</strong></li>
  <li><strong>Impediment List</strong> - 障害リスト</li>
  <li><strong>Acceptance Criteria</strong> - 受け入れ条件</li>
</ol>

<h3 id="その他">その他</h3>

<ul>
  <li><strong>Sprint</strong> - スプリント</li>
  <li><strong>Sprint Stop</strong> - スプリント停止</li>
  <li><strong>DONE</strong> - 製品が完了する</li>
  <li><strong>Potentially shippable product increment</strong> – 出荷可能な製品をリリースする</li>
</ul>

<h2 id="スクラムが適さないシーン">スクラムが適さないシーン</h2>

<ul>
  <li>プロダクトの生産期間が短い
    <ul>
      <li>例) 2ヶ月で終わってしまうプロジェクト</li>
      <li>スクラムはチームビルディングで最低３ヶ月かかる。そしてその３ヶ月を反復してチームを改善させていく。つまり３ヶ月以内のプロジェクトでスクラムを行うのは難しい（やれなくもないが）</li>
    </ul>
  </li>
  <li>要件・技術が単純なプロダクト
    <ul>
      <li>スクラムは要件・技術的要素が複雑な場合に適したアプローチ</li>
    </ul>
  </li>
</ul>

<h2 id="自律的なチームとは">自律的なチームとは</h2>

<ol>
  <li>チームの明確なゴールがある</li>
  <li>チームの明確なバウンダリー（境界線）がある</li>
</ol>

<p>「自律的なチームかどうかの判断基準は何？」への回答は「<strong>個人がチームのゴールを達成するために何をすべきか0.1秒以内に判別し行動できる</strong>」といえます。</p>

<h2 id="見積もり方法">見積もり方法</h2>

<ol>
  <li><strong>相対見積もり</strong>
    <ul>
      <li>一番簡単なタスクのポイントが1だとしてそれに対する相対的な見積もり</li>
      <li>プロダクトバックログアイテムはこちらの見積もり方法が適している</li>
    </ul>
  </li>
  <li><strong>絶対見積もり</strong>
    <ul>
      <li>xx時間とかの見積もり</li>
      <li>スプリントバックログアイテムにはこちらの方法が適している</li>
      <li>1スプリントバックログアイテムが0.5時間〜1時間になるのが理想的な状態</li>
    </ul>
  </li>
</ol>

<p>ここで重要なポイントとしては <strong>スクラムマスターは絶対に計画せずにチームが進むことを許容してはいけません</strong> 。スクラムをやるなら <strong>徹底的に計画してください。妥協は許されません</strong> ここがスクラムをやる上でのチームが持たなければならない＜覚悟＞となります。逆に言うとこの覚悟が持てないならスクラムをやるべきではありません。</p>

<h2 id="done">DONE</h2>

<p>DONEはDefinition of doneのことです。そしてDefinition of doneには doneとundoneの２つが含まれます。</p>

<p>どういうことでしょうか。例えば「ログイン機能を作る」というタスクを考えてみましょう。ログイン機能のDONEとして何をイメージするでしょうか？「フォームに正しい値を入力して正しくログインできること」「間違った値を入力してログインできないこと」「変な値でバリデーションエラーメッセージがでること」などが簡単に思い浮かぶと思います。</p>

<p>ではそれで本当にログイン機能はDONEと言えるのでしょうか。違います、DONEにはログイン機能の単体テストやその結合テスト、さらにはセキュリティテスト、負荷テスト、またはその機能のドキュメンテーションも全て含まれてのDONEです。そしてDONEにはそれで完了しているdoneとそれで完了しなかった、例えばこのケースで言うと「テストは後でかこう」「セキュリティ試験は全ての機能が完成してから実施」などのundoneも含まれています。</p>

<p>このundoneが後回しになって積み上がった状態がプロジェクトの炎上状態であり、スクラムとして不健全な状態といえます。健全なスクラムは１スプリント毎にこのundoneを着実に消化していきます。</p>

<h2 id="プロダクトバックログの書き方">プロダクトバックログの書き方</h2>

<p>研修ではユーザーストーリーとAcceptance Criteriaの２つを書いて１つのプロダクトバックログアイテムとしました。</p>

<ul>
  <li><strong>ユーザーストーリー</strong>: {who}として {what}がほしい なぜなら{why}だから</li>
  <li><strong>Acceptance Criteria</strong>: 受け入れ条件 ユーザーストーリーが達成できたといえる <strong>誰が見てもわかる明確な条件</strong></li>
</ul>

<h2 id="ベロシティ">ベロシティ</h2>

<p>これらのプロダクトバックログアイテムに対して先ほどの見積もりのポイントを付けていきます。そして <strong>1スプリント中にチームが消化できるポイント数のことをベロシティ</strong> といいます。</p>

<p>このベロシティは安定させるべきです。もしベロシティが安定していないのならばそれはポイントの付け方が間違っているか、チームに何かしら問題がある可能性が高いです。</p>

<h2 id="スクラムが成功している状態とは">スクラムが成功している状態とは？</h2>

<p>スクラムチームとして <strong>3ヶ月で46%生産性が向上している状態</strong> がスクラムが成功している状態です。じゃあ46%向上している状態とはどう測ったらよいかというと、スクラム講師曰く、先ほど言及したundoneが3ヶ月というスパンで1つでも消化できていれば46%生産性が上がったと言っていいとのことでした。</p>

<p>しかしこれは非常に難しいことで、どんなに成功しているスクラムチームでも1年に1回でもそれが達成できていればうまくできているほうだとのことでした。</p>

<h2 id="スクラムマスター役割スキル">スクラムマスター役割・スキル</h2>

<ul>
  <li><strong>状況分析</strong>: シチュエーショニング</li>
  <li><strong>ティーチング</strong></li>
  <li><strong>ファシリテーティング</strong></li>
  <li><strong>メンタリング</strong></li>
  <li><strong>コーチング</strong></li>
</ul>

<p>そしてスクラムマスターはこれらの行為をやるだけで満足してはいけません。やった上で <strong>結果が出ないと意味がありません。</strong> つまりティーチングをやったからスクラムマスターの役割を果たしたとはいえず、ティーチングをやった結果、それを受けた者の行動が変わることも含めてスクラムマスターの役割ということです。</p>

<p>「謙虚さ」と同時に「屈強さ」がスクラムマスターには必要です。</p>

<h2 id="受講してみての感想">受講してみての感想</h2>

<p>今回のスクラムマスター研修では「スクラムとは何か」を原理的な立場から学びました。</p>

<p>受講してわかったことは世の開発現場には似非スクラムが溢れているなーってことでした。スプリント回しているからスクラムですとか、カンバンでタスク管理して朝会やってスクラムですとか、リソース足りないのでうちは開発チームメンバーとスクラムマスターをの２つのロールを兼任してますとか…。</p>

<p>スクラムの基本原則から言うと役割の兼任はNGですし、スクラムは具体的なタスク管理手法は規定していないのでカンバンでやろうとJIRAでやろうとGithub Issueでやろうとそれはスクラムの原理原則とは関係ありません。</p>

<p>朝会以外にもスクラムの大事なセレモニーはあって必ずそれらはスキップしてはいけないものとなってます。スプリントを回すにしても、ちゃんとそのスプリントは計画とあっていたのかとか、ちゃんと受け入れ条件をクリアする品質でスプリントの成果物が上がってるかとか、スプリント間に差し込みタスクがなかったかとかいろいろやらなきゃいけないことや考えることはあります。</p>

<p>そして感じたこととしては、スタートアップのアーリーフェーズだとなかなか原理的な意味でのスクラムは難しいのではということでした。スクラムやりたくともリソースが全然足りないのでスクラムマスター、プロダクトオーナーはそもそも置けないとか、スクラムのロールを兼任せざるを得ないとか。</p>

<p>またアーリーフェーズだと人の出入り（特に新しいメンバーを迎えるケース）も激しいと思うのでそうなるとスクラムチームは再度チームビルディングからやり直さなければなりません（このチームビルディングで1 Sprintは消費すると言われています）。</p>

<p>なのでこういった開発現場で出来ることとしてはスクラムのフレームワークの中で良いと思うもの、有効だと思うものを選択して組織に有効な＜スクラムエッセンスを取り入れた開発＞を実践することではないでしょうか。</p>

<p>一方で上記に書いたように「スクラムじゃない別の方法を提案するのもスクラムマスターの役割」と書きました。なのでスクラムにこだわる必要は全然なくて、スクラムがチームにマッチしないと思うならスクラムマスターは別の手法を提案できなきゃダメです。例えばそれがウォーターフォールでもいいしDDDでもいいしリーンスタートアップだっていいのです。</p>

<p>そういう意味でスクラムマスターは(おそらく皆が)思っている以上にその役割を全うすることが難しいものだと感じました。</p>

<h2 id="参考になりそうな他の人の体験記">参考になりそうな他の人の体験記</h2>

<p>スクラムマスター研修に行かれた他の方の体験記を紹介します。</p>

<ul>
  <li><a href="http://makopi23.blog.fc2.com/blog-entry-155.html">makopi23のブログ 認定スクラムマスター研修（CSM）を振り返る</a></li>
  <li><a href="http://qiita.com/kara_i/items/fab490c08bb467d2c842">認定スクラムマスター研修のメモ書き - Qiita</a></li>
  <li><a href="https://www.slideshare.net/yangiYa/csm2014-1114">認定スクラムマスター研修に行ってきました</a></li>
</ul>

<h2 id="こちらも参考にどうぞ">こちらも参考にどうぞ</h2>

<ul>
  <li><a href="https://www.scrumguides.org/download.html">公式スクラムガイド</a> Japanese を選択してもらえれば日本語バージョンが閲覧できます</li>
  <li><a href="https://www.slideshare.net/zaruhiroyukisakuraba/ss-77861697">スクラム導入に向けて：スクラムは救世主となるのか？</a></li>
  <li><a href="http://www.ryuzee.com/contents/blog/7120">スクラムプロジェクト開始のベストプラクティス | Ryuzee.com</a></li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="scrum" /><category term="management" /><category term="tech" /><summary type="html"><![CDATA[昨年末にスクラムマスター研修を受けてきて、認定スクラムマスター (CSM)となりました。スクラムマスター研修で学んだこととして社内で共有した内容を本ブログでも共有してみようと思います。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/scrum/scrum.jpg" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/scrum/scrum.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>