<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.0">Jekyll</generator><link href="https://blog.toshimaru.net/feed/by_tag/rubocop.xml" rel="self" type="application/atom+xml" /><link href="https://blog.toshimaru.net/" rel="alternate" type="text/html" /><updated>2022-10-30T16:39:30+09:00</updated><id>https://blog.toshimaru.net/feed/by_tag/rubocop.xml</id><title type="html">Hack Your Design!</title><subtitle>toshimaruの技術系なブログ</subtitle><author><name>Toshimaru</name></author><entry><title type="html">rubocop-rails_config v1.0 をリリースした</title><link href="https://blog.toshimaru.net/rubocop-rails-config-v1/" rel="alternate" type="text/html" title="rubocop-rails_config v1.0 をリリースした" /><published>2020-11-23T00:00:00+09:00</published><updated>2020-11-23T00:00:00+09:00</updated><id>https://blog.toshimaru.net/rubocop-rails-config-v1</id><content type="html" xml:base="https://blog.toshimaru.net/rubocop-rails-config-v1/"><![CDATA[<p><a href="https://github.com/toshimaru/rubocop-rails_config">rubocop-rails_config</a> gem の v1.0 をリリースした。</p>

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">rubocop-rails_config v1.0.0 has been released! rubocop-rails_config now requires rubocop v1.0. <a href="https://t.co/PL2v9POeVC">https://t.co/PL2v9POeVC</a></p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/1320895710254882817?ref_src=twsrc%5Etfw">October 27, 2020</a></blockquote>

<h2 id="今までの流れ">今までの流れ</h2>

<p>もともと作ったきっかけとかの記事。</p>

<blockquote class="twitter-tweet" data-cards="hidden"><p lang="ja" dir="ltr">つくったやつ | Railsと同じRuboCopの設定が利用できるrubocop-rails gemを作った - Hack Your Design! <a href="https://t.co/szG0eLPetS">https://t.co/szG0eLPetS</a></p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/958123075572195331?ref_src=twsrc%5Etfw">January 29, 2018</a></blockquote>

<p>作ったプロジェクト名を公式に譲ってリネームした話。</p>

<blockquote class="twitter-tweet" data-cards="hidden"><p lang="ja" dir="ltr">Blogged. RuboCopチームにgemの名前を譲った話 - Hack Your Design! <a href="https://t.co/vumSGBK3UN">https://t.co/vumSGBK3UN</a></p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/1019011276561833985?ref_src=twsrc%5Etfw">July 17, 2018</a></blockquote>

<h2 id="v10-に上げたきっかけ">v1.0 に上げたきっかけ</h2>

<p>rubocopメンテナの<a href="https://github.com/koic">@koic</a>さんとは、rubocop v1.0 に<a href="https://github.com/toshimaru/rubocop-rails_config/issues/71#issuecomment-617490886">あわせて rubocop-rails_config v1.0 もリリースしようぜ</a>と話していた。</p>

<p>今回rubocop v1.0 がリリースされたことに加えて、Rails本体でも<a href="https://github.com/rails/rails/pull/40436">rubocop v1.0が使用されるようになった</a>ことをきっかけとして rubocop-rails_config も v1.0 にあげることを決めた。</p>

<blockquote class="twitter-tweet" data-cards="hidden"><p lang="ja" dir="ltr">RuboCop 1.0 がリリースされた - koicの日記<a href="https://t.co/ii353h4ZBQ">https://t.co/ii353h4ZBQ</a></p>&mdash; Koichi ITO (@koic) <a href="https://twitter.com/koic/status/1318884005941374979?ref_src=twsrc%5Etfw">October 21, 2020</a></blockquote>

<h2 id="rubocop-rails_config-v101">rubocop-rails_config v1.0.1</h2>

<p>この記事を書いている時点で既に rubocop は v1.3 までリリースされていたので、 v1.3 までのバージョンは<a href="https://github.com/toshimaru/rubocop-rails_config/pull/84">サポートしておいた</a>。</p>

<p><a href="https://github.com/toshimaru/rubocop-rails_config/releases/tag/v1.0.1">Release v1.0.1 · toshimaru/rubocop-rails_config</a></p>]]></content><author><name>Toshimaru</name></author><category term="rubocop" /><summary type="html"><![CDATA[rubocop-rails_config gem の v1.0 をリリースした。 rubocop-rails_config v1.0.0 has been released!]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/rubocop-rails-config/readme.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/rubocop-rails-config/readme.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">reviewdogを使ってGitHub Actions上でRuboCop自動レビューを動かす</title><link href="https://blog.toshimaru.net/reviewdog-rubocop-github-actions/" rel="alternate" type="text/html" title="reviewdogを使ってGitHub Actions上でRuboCop自動レビューを動かす" /><published>2020-05-31T00:00:00+09:00</published><updated>2020-06-08T00:00:00+09:00</updated><id>https://blog.toshimaru.net/reviewdog-rubocop-github-actions</id><content type="html" xml:base="https://blog.toshimaru.net/reviewdog-rubocop-github-actions/"><![CDATA[<p>過去に<a href="/reviewdog-rubocop/">reviewdogを使ってCircleCI上でrubocop自動レビューを動かす記事</a>を書きました。</p>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">Blogged. | reviewdogを使ってCI上でRuboCop自動レビューを動かす - Hack Your Design! <a href="https://t.co/8vdNUEIisX">https://t.co/8vdNUEIisX</a></p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/1064661783594491904?ref_src=twsrc%5Etfw">November 19, 2018</a></blockquote>

<p>本記事はそれの<a href="https://github.com/features/actions">GitHub Actions</a>バージョンになります。</p>

<h2 id="なぜgithub-actionなのか">なぜGitHub Actionなのか？</h2>

<p>以前に書いた記事のようにCircleCIでも問題はないものの、GitHub ActionsはデフォルトでPull Requestにコメント可能な <code class="language-plaintext highlighter-rouge">GITHUB_TOKEN</code> を吐くことが可能で、そのへんのtoken周りの煩雑な設定が不要という点でCircleCIよりアドバンテージがあると言えます。</p>

<p><a href="https://help.github.com/en/actions/configuring-and-managing-workflows/authenticating-with-the-github_token">Authenticating with the GITHUB_TOKEN - GitHub Help</a></p>

<p>GitHubが公式機能として出していることもあり、GitHubとのIntegrationはGitHub Actionsのほうが優れている印象があります。</p>

<h2 id="基本のrubocop設定">基本のrubocop設定</h2>

<p>GitHub Actionsで動かす基本となるrubocop設定は下記の通りです。</p>

<p>※ 実際はbundlerのキャッシュの設定などが必要ですが今回は設定していません</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># .github/workflows/rubocop.yml</span>
<span class="na">name</span><span class="pi">:</span> <span class="s">RuboCop</span>
<span class="na">on</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">pull_request</span><span class="pi">]</span>
<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">rubocop</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">steps</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v2</span>
    <span class="pi">-</span> <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/setup-ruby@v1</span>
      <span class="na">with</span><span class="pi">:</span>
        <span class="na">ruby-version</span><span class="pi">:</span> <span class="m">2.6</span>
    <span class="pi">-</span> <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
        <span class="s">gem install bundler</span>
        <span class="s">bundle install</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Run rubocop</span>
      <span class="na">run</span><span class="pi">:</span> <span class="s">bundle exec rubocop</span>
</code></pre></div></div>

<p>上述の設定をベースにreviewdogを使った自動レビューの設定を追加していきます。</p>

<h2 id="reviewdogによる自動レビューを追加">reviewdogによる自動レビューを追加</h2>

<p>追加するのは下記の2ステップです。</p>

<ol>
  <li>Setup reviewdog: reviewdog のバイナリをインストール</li>
  <li>Run rubocop with reviewdog: rubocop の指摘を reviewdog に渡してPRコメントを付けさせる</li>
</ol>

<p>yamlファイルとしては下記になります。</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># .github/workflows/rubocop.yml</span>
<span class="na">name</span><span class="pi">:</span> <span class="s">RuboCop</span>
<span class="na">on</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">pull_request</span><span class="pi">]</span>
<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">rubocop</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">steps</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v2</span>
    <span class="pi">-</span> <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/setup-ruby@v1</span>
      <span class="na">with</span><span class="pi">:</span>
        <span class="na">ruby-version</span><span class="pi">:</span> <span class="m">2.6</span>
    <span class="pi">-</span> <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
        <span class="s">gem install bundler</span>
        <span class="s">bundle install</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Setup reviewdog</span>
      <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
        <span class="s">mkdir -p $HOME/bin &amp;&amp; curl -sfL https://raw.githubusercontent.com/reviewdog/reviewdog/master/install.sh | sh -s -- -b $HOME/bin</span>
        <span class="s">echo ::add-path::$HOME/bin</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Run rubocop with reviewdog</span>
      <span class="na">env</span><span class="pi">:</span>
        <span class="na">REVIEWDOG_GITHUB_API_TOKEN</span><span class="pi">:</span> <span class="s">${{ secrets.GITHUB_TOKEN }}</span>
      <span class="na">run</span><span class="pi">:</span> <span class="s">bundle exec rubocop | reviewdog -reporter=github-pr-review -f=rubocop</span>
</code></pre></div></div>

<h2 id="レビューコメント">レビューコメント</h2>

<p>設定がうまくいっていれば、下記のように <code class="language-plaintext highlighter-rouge">github-actions</code> からの自動レビューコメントが付きます。</p>

<p><img src="/images/posts/rubocop-actions/rubocop-by-github-actions.png" alt="comment by github-actions" /></p>

<h2 id="実際に動かしてみたpull-request">実際に動かしてみたPull Request</h2>

<p>実際にこの構成で設定してみたPRは下記になります。</p>

<p><a href="https://github.com/toshimaru/Test/pull/16">rubocop x reviewdog x GitHub Actions by toshimaru · Pull Request #16 · toshimaru/Test</a></p>

<h2 id="余談">余談</h2>

<p>本記事ではミニマルな設定を紹介しましたが、実行高速化のために実際は下記の設定もあわせてしたほうが良いでしょう。</p>

<ul>
  <li>bundler cache の設定</li>
  <li>rubocop cache の設定（<code class="language-plaintext highlighter-rouge">~/.cache/rubocop_cache</code>）</li>
  <li><code class="language-plaintext highlighter-rouge">--parallel</code> オプションの追加</li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="rubocop" /><category term="github" /><category term="ci" /><category term="review" /><summary type="html"><![CDATA[過去にreviewdogを使ってCircleCI上でrubocop自動レビューを動かす記事を書きました。 本記事はそれのGitHub Actionsバージョンになります。　GitHub Actions上でreviewdogを使ってRuboCop自動レビューを動かすための設定を紹介します。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/rubocop-actions/rubocop-actions.jpg" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/rubocop-actions/rubocop-actions.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">reviewdogを使ってCI上でRuboCop自動レビューを動かす</title><link href="https://blog.toshimaru.net/reviewdog-rubocop/" rel="alternate" type="text/html" title="reviewdogを使ってCI上でRuboCop自動レビューを動かす" /><published>2018-11-19T00:00:00+09:00</published><updated>2020-06-08T00:00:00+09:00</updated><id>https://blog.toshimaru.net/reviewdog-rubocop</id><content type="html" xml:base="https://blog.toshimaru.net/reviewdog-rubocop/"><![CDATA[<p><a href="https://github.com/rubocop-hq/rubocop">rubocop</a>の自動レビューを<a href="https://github.com/haya14busa/reviewdog">reviewdog</a>を使ってやってみたのでその知見です。</p>

<ul id="markdown-toc">
  <li><a href="#追記" id="markdown-toc-追記">追記</a></li>
  <li><a href="#auto-rubocop-on-circleci-powered-by-reviewdog" id="markdown-toc-auto-rubocop-on-circleci-powered-by-reviewdog">Auto-RuboCop on CircleCI powered by reviewdog</a>    <ul>
      <li><a href="#1-configymlの設定" id="markdown-toc-1-configymlの設定">1. <code class="language-plaintext highlighter-rouge">config.yml</code>の設定</a></li>
      <li><a href="#2コメントできるtokenを取得--設定" id="markdown-toc-2コメントできるtokenを取得--設定">2.コメントできるTokenを取得 &amp; 設定</a></li>
      <li><a href="#3-rubucopの結果をreviewdogで通知" id="markdown-toc-3-rubucopの結果をreviewdogで通知">3. rubucopの結果をreviewdogで通知</a></li>
    </ul>
  </li>
  <li><a href="#完成yamlイメージ" id="markdown-toc-完成yamlイメージ">完成yamlイメージ</a></li>
  <li><a href="#なぜreviewdogなのか" id="markdown-toc-なぜreviewdogなのか">なぜreviewdogなのか</a></li>
  <li><a href="#最後に" id="markdown-toc-最後に">最後に</a></li>
  <li><a href="#参考資料" id="markdown-toc-参考資料">参考資料</a></li>
</ul>

<h2 id="追記">追記</h2>

<p>本記事の GitHub Actions 版を書きました。</p>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">blogged. | reviewdogを使ってGitHub Actions上でRuboCop自動レビューを動かす - Hack Your Design! <a href="https://t.co/4u11iBjm6G">https://t.co/4u11iBjm6G</a></p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/1267121968307814401?ref_src=twsrc%5Etfw">May 31, 2020</a></blockquote>

<h2 id="auto-rubocop-on-circleci-powered-by-reviewdog">Auto-RuboCop on CircleCI powered by reviewdog</h2>

<p>僕の作っているプロジェクトでrubocop自動レビューをCircleCI上で設定してみました。そのプルリクエストを見てもらうのが一番早いと思いますので、下記リンクより差分を確認してください。</p>

<p><a href="https://github.com/toshimaru/RailsTwitterClone/pull/254">https://github.com/toshimaru/RailsTwitterClone/pull/254</a></p>

<h3 id="1-configymlの設定">1. <code class="language-plaintext highlighter-rouge">config.yml</code>の設定</h3>

<p>基本的には<a href="https://github.com/haya14busa/reviewdog#circle-ci">公式READMEのCircleCIセットアップ手順</a>通りですが、まずは下記のようにreviewdogのバイナリを<code class="language-plaintext highlighter-rouge">curl</code>経由で落とします。</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 環境変数でダウンロードするreviewdogのバージョンを指定</span>
<span class="na">environment</span><span class="pi">:</span>
  <span class="na">REVIEWDOG_VERSION</span><span class="pi">:</span> <span class="s2">"</span><span class="s">0.9.11"</span>

<span class="c1"># reviewdogをcurlでダウンロード</span>
<span class="pi">-</span> <span class="na">run</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">Install reviewdog</span>
    <span class="na">command</span><span class="pi">:</span> <span class="pi">|</span>
      <span class="s">curl -fSL https://github.com/haya14busa/reviewdog/releases/download/$REVIEWDOG_VERSION/reviewdog_linux_amd64 -o reviewdog &amp;&amp; chmod +x ./reviewdog</span>
</code></pre></div></div>

<h3 id="2コメントできるtokenを取得--設定">2.コメントできるTokenを取得 &amp; 設定</h3>

<p>reviewdogにコメントさせるためにはコメントできる権限を持ったGitHub Tokenが必要になります。下記手順でGitHub Tokenを取得してください。</p>

<ul>
  <li><a href="https://github.com/settings/tokens">アクセストークンの取得ページ</a>にいく</li>
  <li>下記の権限を設定してTokenを発行
    <ul>
      <li>Privateレポジトリの設定: <code class="language-plaintext highlighter-rouge">repo</code>をチェック</li>
      <li>Publicレポジトリの設定: <code class="language-plaintext highlighter-rouge">public_repo</code>をチェック</li>
    </ul>
  </li>
</ul>

<p>これでTokenが発行できましたので、次にそのTokenの設定です。</p>

<ul>
  <li>CircleCIの環境変数の設定画面を開く</li>
  <li>下記の環境変数を設定
    <ul>
      <li><code class="language-plaintext highlighter-rouge">REVIEWDOG_GITHUB_API_TOKEN</code>の値に前手順で取得したTokenを設定</li>
    </ul>
  </li>
</ul>

<p>これにてreviewdogにコメントできる権限が付与されました。</p>

<h3 id="3-rubucopの結果をreviewdogで通知">3. rubucopの結果をreviewdogで通知</h3>

<p>あとはいつも通りのrubocopのコマンドをパイプしてreviewdogに渡してあげればOK。その際のオプションは <code class="language-plaintext highlighter-rouge">-f=rubocop</code>（rubocopフォーマット指定）, <code class="language-plaintext highlighter-rouge">-reporter=github-pr-review</code>（GitHub PRレビューコメント形式の指定） の２つを指定します。</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">-</span> <span class="na">run</span><span class="pi">:</span> <span class="s">bundle exec rubocop | ./reviewdog -f=rubocop -reporter=github-pr-review</span>
</code></pre></div></div>

<h2 id="完成yamlイメージ">完成yamlイメージ</h2>

<p><code class="language-plaintext highlighter-rouge">.circleci/config.yml</code>の完成イメージは下記です（完全なyamlファイル<a href="https://github.com/toshimaru/RailsTwitterClone/pull/254/files">当該Pull Request</a>より確認してください）。なおCircleCIはversion2.1を使用していることに注意してください（現時点の最新バージョン）。</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="m">2.1</span>
<span class="na">executors</span><span class="pi">:</span>
  <span class="na">default</span><span class="pi">:</span>
    <span class="na">working_directory</span><span class="pi">:</span> <span class="s">~/app</span>
    <span class="na">docker</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">image</span><span class="pi">:</span> <span class="s">circleci/ruby:2.5-node-browsers</span>
        <span class="na">environment</span><span class="pi">:</span>
          <span class="na">RAILS_ENV</span><span class="pi">:</span> <span class="s">test</span>
          <span class="na">REVIEWDOG_VERSION</span><span class="pi">:</span> <span class="s">0.9.11</span>
<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">rubocop</span><span class="pi">:</span>
    <span class="na">executor</span><span class="pi">:</span>
      <span class="na">name</span><span class="pi">:</span> <span class="s">default</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">checkout</span>
      <span class="pi">-</span> <span class="s">bundle_install</span>
      <span class="pi">-</span> <span class="na">run</span><span class="pi">:</span>
          <span class="na">name</span><span class="pi">:</span> <span class="s">Install reviewdog</span>
          <span class="na">command</span><span class="pi">:</span> <span class="pi">|</span>
            <span class="s">curl -fSL https://github.com/haya14busa/reviewdog/releases/download/$REVIEWDOG_VERSION/reviewdog_linux_amd64 -o reviewdog &amp;&amp; chmod +x ./reviewdog</span>
      <span class="pi">-</span> <span class="na">run</span><span class="pi">:</span> <span class="s">bundle exec rubocop | ./reviewdog -f=rubocop -reporter=github-pr-review</span>

<span class="na">workflows</span><span class="pi">:</span>
  <span class="na">test</span><span class="pi">:</span>
    <span class="na">jobs</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">...省略...</span>
</code></pre></div></div>

<h2 id="なぜreviewdogなのか">なぜreviewdogなのか</h2>

<p>ruboop自動レビューのための既にあるツールとしては、<a href="https://github.com/packsaddle/ruby-saddler">Saddler</a>や<a href="https://github.com/prontolabs/pronto">pronto</a>などがありますが、なぜそれらを使わずにreviewdogを採用したのかというと下記の理由からです。</p>

<ul>
  <li>Goのシングルバイナリポン置き（curlワンコマンド）でSetupがめちゃくちゃ楽</li>
  <li>Language Agnostic （Ruby以外もGo, PHP, Pythonなど他言語で使える）</li>
  <li>Go実装でパフォーマンスが良い</li>
  <li>Activeにメンテされている</li>
  <li>READMEドキュメントが充実している</li>
  <li>日本人が作っている！（おまけ理由</li>
</ul>

<h2 id="最後に">最後に</h2>

<p>本記事ではRubyプロジェクトのrubocop checkをreviewdogを使ってCircleCI上で動かす例を紹介しました。</p>

<p>公式READMEにはTravisCI上での動かし方であったり、GitHubの新機能・GitHub Checks形式での動かし方も記載されておりますので、興味があるかたは公式READMEをご参照ください。</p>

<h2 id="参考資料">参考資料</h2>

<ul>
  <li><a href="https://github.com/haya14busa/reviewdog">haya14busa/reviewdog</a></li>
  <li><a href="http://haya14busa.com/reviewdog/">reviewdog を飼ってコードレビューや開発を改善しませんか - haya14busa</a></li>
  <li><a href="https://qiita.com/azu/items/c563da0b5455a1b1dca2">reviewdogを使ってtextlintの結果をPull Requestに書き込む方法 - Qiita</a></li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="review" /><category term="rubocop" /><category term="github" /><category term="circleci" /><category term="ci" /><summary type="html"><![CDATA[rubocopの自動レビューをreviewdogを使ってやってみたのでその知見です。 Auto-RuboCop on CircleCI powered by reviewdog 僕の作っているプロジェクトでrubocop自動レビューをCircleCI上で設定してみました。そのプルリクエストを見てもらうのが一番早いと思いますので、下記リンクより差分を確認してください。基本的には公式READMEのCircleCIセットアップ手順通りですが、まずは下記のようにreviewdogのバイナリをcurl経由で落とします。reviewdogにコメントさせるためにはコメントできる権限を持ったGitHub Tokenが必要になります。下記手順でGitHub Tokenを取得してください。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/rubocop_x_reviewdog.jpg" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/rubocop_x_reviewdog.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">RuboCopチームにgemの名前を譲った話</title><link href="https://blog.toshimaru.net/rubocop-rails-config/" rel="alternate" type="text/html" title="RuboCopチームにgemの名前を譲った話" /><published>2018-07-17T00:00:00+09:00</published><updated>2018-07-17T00:00:00+09:00</updated><id>https://blog.toshimaru.net/rubocop-rails-config</id><content type="html" xml:base="https://blog.toshimaru.net/rubocop-rails-config/"><![CDATA[<p>かねてより僕が開発していた<a href="https://github.com/toshimaru/rubocop-rails">rubocop-rails</a>というgemをRuboCop公式チームの要望により譲った。</p>

<p>僕がこのgemを作った経緯とかは下記の記事の通り。</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">つくったやつ | Railsと同じRuboCopの設定が利用できるrubocop-rails gemを作った - Hack Your Design! <a href="https://t.co/szG0eLPetS">https://t.co/szG0eLPetS</a></p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/958123075572195331?ref_src=twsrc%5Etfw">January 29, 2018</a></blockquote>

<h2 id="きっかけ">きっかけ</h2>

<p>名前を譲ることになったきっかけは下記のIssue。</p>

<p><a href="https://github.com/rubocop-hq/rubocop/issues/5976">Extract Rails Cops in a separate · Issue #5976 · rubocop-hq/rubocop</a></p>

<p>より正確にいうとこのIssueの前に<a href="https://rubykaigi.org/2018/">RubyKaigi 2018</a>の懇親会でRuboCop作者から僕へ間接的に打診があり、上記のIssueに至る。</p>

<p>RuboCopチームの要望を要約すると「RuboCop公式にRailsの拡張を作りたい。gem名はrubocop-railsとしたい。名前を頂戴！」と感じ。僕の想いとしては「RuboCop公式チームとして使いたい名前ということであればどうぞどうぞ。わかりやすい名前を付けることはRubyコミュニティ全体の利益にもなるだろうしね！」という感じ。</p>

<h2 id="譲るにあたりやったこと">譲るにあたりやったこと</h2>

<p>下記のようなIssueを作成して進めていった。</p>

<p><a href="https://github.com/toshimaru/rubocop-rails/issues/31">[IMPORTANT ANNOUNCEMENT] Transfer rubocop-rails gem to RuboCop Team · Issue #31 · toshimaru/rubocop-rails</a></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">rubocop-rails</code> に代わる新しいgemを作成: <a href="https://github.com/toshimaru/rubocop-rails_config">rubocop-rails_config</a></li>
  <li><code class="language-plaintext highlighter-rouge">rubocop-rails</code> の新しいversionを切って、post_install_messageでRenameの旨を周知</li>
  <li><code class="language-plaintext highlighter-rouge">rubocop-rails_config</code> のほうに簡単にUpdateできるようなUpdate Generator Taskを用意</li>
  <li><code class="language-plaintext highlighter-rouge">rubocop-rails</code> というgemに新しいOwnerを付与</li>
  <li><code class="language-plaintext highlighter-rouge">rubocop-rails</code> のRename前の古いバージョンをrubygemsから削除</li>
</ul>

<p>一番最後の <strong>古いバージョンをrubygemsから削除</strong> はIssueでもやり取りしている通り、既存のビルドを壊すことになるので正直苦渋の決断であった。だけれどもRuboCopがdevelopment依存のgemであること、全く違うgemになったら既存のgemユーザーを驚かせてしまうこと、これらを総合的に考えた結果、古いバージョンを消してでもgemのRename周知を優先させようと思い至った。これに関しては正直正解はないと思う。</p>

<h2 id="rubocopコミッターのkoicさんが発表してくださいました">RuboCopコミッターのkoicさんが発表してくださいました</h2>

<p>本件に関してはRuboCopコミッターの<a href="https://twitter.com/koic">@koic</a>さんも先日の<a href="https://techplay.jp/event/679666">Rails Developers Meetup 2018 Day 3 Extreme</a>にて発表して頂いたようです。:innocent:</p>

<script async="" class="speakerdeck-embed" data-slide="57" data-id="612849c52252464d8a63fc97f90c6091" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>

<p>発表エントリ: <a href="http://koic.hatenablog.com/entry/railsdm-2018-day3-extreme">Rails Developers Meetup 2018 Day 3 Extreme に登壇した - koicの日記</a></p>

<p>エピソードのご紹介ありがとうございました。:pray:</p>

<h2 id="参考資料">参考資料</h2>

<p>なお、gemを消す方法に関しては下記を参考にさせてもらった。</p>

<p><a href="http://blog.s21g.com/articles/1755">公開した gem を削除する方法 - ヽ( ・∀・)ノくまくまー - s21g</a></p>]]></content><author><name>Toshimaru</name></author><category term="rails" /><category term="rubocop" /><category term="oss" /><summary type="html"><![CDATA[かねてより僕が開発していたubocop-railsというgemをRuboCop公式チームの要望により譲った。 僕がこのgemを作った経緯とかは下記の記事の通り。名前を譲ることになったきっかけは下記のIssue。 Extract Rails Cops in a separate より正確にいうとこのIssueの前にRubyKaigi 2018の懇親会でRuboCop作者から僕へ間接的に打診があり、上記のIssueに至る。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/rubocop-rail.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/rubocop-rail.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Railsと同じRuboCopの設定が利用できるrubocop-rails gemを作った</title><link href="https://blog.toshimaru.net/rubocop-rails/" rel="alternate" type="text/html" title="Railsと同じRuboCopの設定が利用できるrubocop-rails gemを作った" /><published>2018-01-30T00:00:00+09:00</published><updated>2020-11-23T00:00:00+09:00</updated><id>https://blog.toshimaru.net/rubocop-rails</id><content type="html" xml:base="https://blog.toshimaru.net/rubocop-rails/"><![CDATA[<p>【追記】本記事で紹介しているgem, <code class="language-plaintext highlighter-rouge">rubocop-rails</code>は公式RuboCopチームの要望により、<a href="https://github.com/toshimaru/rubocop-rails_config">rubocop-rails_config</a>というgemにRenameされました。</p>

<p>本gemご利用の方は下記の<code class="language-plaintext highlighter-rouge">rubocop-rails_config</code>のご利用をお願いします。</p>

<p><a href="https://github.com/toshimaru/rubocop-rails_config">toshimaru/rubocop-rails_config</a></p>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">Blogged. RuboCopチームにgemの名前を譲った話 - Hack Your Design! <a href="https://t.co/vumSGBK3UN">https://t.co/vumSGBK3UN</a></p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/1019011276561833985?ref_src=twsrc%5Etfw">July 17, 2018</a></blockquote>

<hr />

<p>Railsとほとんど同じRuboCopの設定が利用できる<a href="https://github.com/toshimaru/rubocop-rails">rubocop-rails</a>というgemを作りましたので紹介します。</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">Railsのrubocopと同じ設定を簡単に適用できるgemを作ったよ<br />toshimaru/rubocop-rails: Code style checking for Ruby on Rails project <a href="https://t.co/DnTRKtJc9j">https://t.co/DnTRKtJc9j</a></p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/819931180304715776?ref_src=twsrc%5Etfw">January 13, 2017</a></blockquote>

<h2 id="モチベーション">モチベーション</h2>

<p>Rubyの静的コード解析の定番といえば<a href="https://github.com/bbatsov/rubocop">RuboCop</a>ですよね。ですがRuboCopの設定ファイル<code class="language-plaintext highlighter-rouge">rubocop.yml</code>の設定作業って結構大変じゃないですか？</p>

<p>RuboCopはデフォルトだと結構うるさすぎることが多いのでプロジェクト・チームに応じて何かしら設定はカスタマイズすると思います。しかし１つ１つ設定項目毎にチームのコンセンサスを取るのは非常にダルい。チームの一人が持ち込んだ＜俺の考える最強のRuboCop設定＞に従うという手もありますが「誰がお前の作った設定に従うか！」という気持ちも無くはない。</p>

<p>「何かしらRuboCop設定のレールが欲しいよね〜 :railway_car:」というところで閃き:bulb:、「だったらrailsチームの用意した公式<code class="language-plaintext highlighter-rouge">rubocop.yml</code>を使えばいいじゃない」ということで冒頭のRailsとほぼ同じ設定を持った<a href="https://github.com/toshimaru/rubocop-rails">rubocop-rails</a> gemを作りました。</p>

<h2 id="使い方">使い方</h2>

<p>使い方は <code class="language-plaintext highlighter-rouge">rubocop-rails</code> をinstallした後に、下記の設定を記述した <code class="language-plaintext highlighter-rouge">rubocop.yml</code> を用意する。</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">inherit_gem</span><span class="pi">:</span>
  <span class="na">rubocop-rails</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">config/rails.yml</span>
</code></pre></div></div>

<p>オーバーライドしたい設定、追加したい設定があれば、適宜同じ<code class="language-plaintext highlighter-rouge">rubocop.yml</code>内に設定を追加していく。</p>

<h2 id="実際使ってみてどうか">実際使ってみてどうか</h2>

<p>実際使ってみるとうるさすぎず、しかしコードスタイルとしてきっちり統一させたいところは統一されており、使い心地はなかなか悪くないです。</p>

<p>また副次効果として、普段からこのgemの設定に慣れておくと、Rails本体にコントリビュートするときにRailsのrubocop設定違反にならないコードを書けて便利。 :innocent:</p>

<h2 id="こんなrubocop設定もあるよ">こんなRuboCop設定もあるよ</h2>

<p>他の＜いい感じ＞に設定されたRuboCop設定も紹介します。</p>

<ul>
  <li>GitHubの場合: <a href="https://github.com/github/rubocop-github">github/rubocop-github</a></li>
  <li>Siderの場合: <a href="https://github.com/sider/meowcop">sider/meowcop</a></li>
</ul>

<p>これらの設定はきちんとチーム・会社でディスカッションされた上で作られたものだと思いますので、こちらもあわせて導入を検討してみてもいいかもしれません。</p>]]></content><author><name>Toshimaru</name></author><category term="rails" /><category term="rubocop" /><category term="oss" /><category term="gem" /><summary type="html"><![CDATA[Railsとほとんど同じRuboCopの設定が利用できるrubocop-railsというgemを作りましたので紹介します。 【追記】本記事で紹介しているgem, rubocop-railsは公式RuboCopチームの要望により、rubocop-rails_configというgemにRenameされました。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/rubocop-rail.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/rubocop-rail.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>