<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="https://blog.toshimaru.net/feed/by_tag/gem.xml" rel="self" type="application/atom+xml" /><link href="https://blog.toshimaru.net/" rel="alternate" type="text/html" /><updated>2023-01-17T09:45:03+09:00</updated><id>https://blog.toshimaru.net/feed/by_tag/gem.xml</id><title type="html">Hack Your Design!</title><subtitle>toshimaruの技術系なブログ</subtitle><author><name>Toshimaru</name></author><entry><title type="html">Gemfile.lock 内の特定バージョンgemをインストールする bgem コマンド作った</title><link href="https://blog.toshimaru.net/rubygems-bundled-gems/" rel="alternate" type="text/html" title="Gemfile.lock 内の特定バージョンgemをインストールする bgem コマンド作った" /><published>2021-02-28T00:00:00+09:00</published><updated>2021-02-28T00:00:00+09:00</updated><id>https://blog.toshimaru.net/rubygems-bundled-gems</id><content type="html" xml:base="https://blog.toshimaru.net/rubygems-bundled-gems/"><![CDATA[<p><code class="language-plaintext highlighter-rouge">Gemfile.lock</code>に記述された特定バージョンのgemを簡単にインストールできる bgem コマンドを作った。</p>

<p>（gem名としては <a href="https://github.com/rubygems/rubygems">rubygems/rubygems</a> にインスパイアされて <code class="language-plaintext highlighter-rouge">bundled_gems</code> とした）</p>

<p><a href="https://github.com/toshimaru/bundled_gems">toshimaru/bundled_gems: Install gem specified in Gemfile.lock without bundle install.</a></p>

<h2 id="モチベーション">モチベーション</h2>

<p>もともとは、GitHub Actionに <a href="https://docs.github.com/en/actions/guides/caching-dependencies-to-speed-up-workflows">cache機能</a>が来る前に作ったもの。</p>

<p>GitHub Action でCIしていた場合、cache機能がないと毎回 <code class="language-plaintext highlighter-rouge">bundle install</code>走らせる必要があり、巨大プロジェクトだとそこがCIにおけるコストになっていた。</p>

<p>また CI で rubocop だけを走らせている、みたいな場合、全てのライブラリのインストールは必要なく、rubocopと一部のライブラリさえあれば十分で、それ以外のライブラリのインストールはいわば無駄なインストールとなっている。</p>

<p>「だったら必要なライブラリだけインストールしてCI走らせりゃいいじゃん」というのが今回のgemの着想。</p>

<h2 id="使い方">使い方</h2>

<h3 id="インストール">インストール</h3>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>gem <span class="nb">install </span>bundled_gems
</code></pre></div></div>

<p>これで <code class="language-plaintext highlighter-rouge">bgem</code> コマンドが利用可能になる。</p>

<h3 id="gemfilelock-内のgemのインストール">Gemfile.lock 内のgemのインストール</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ bgem install gem_name
</code></pre></div></div>

<p>こうすることで <code class="language-plaintext highlighter-rouge">Gemfile.lock</code>内に記載されている <code class="language-plaintext highlighter-rouge">gem_name</code> のバージョンを読み取ってそれをインストールしてくれる（内部的には <code class="language-plaintext highlighter-rouge">gem install gem_name:version</code> を走らせている）。</p>

<p>例としては、<code class="language-plaintext highlighter-rouge">bgem install rubocop</code>とした場合、<code class="language-plaintext highlighter-rouge">Gemfile.lock</code>に記載されているバージョンの <code class="language-plaintext highlighter-rouge">rubocop</code> をインストールする。</p>

<h2 id="課題">課題</h2>

<ul>
  <li>installするgemの子となる依存gemのバージョンまでは解決してくれない点
    <ul>
      <li>このへん実装しようと思っていたら、先にGitHub公式の <a href="https://github.com/actions/cache">actions/cache</a>が来てしまった次第。。。</li>
    </ul>
  </li>
</ul>

<h2 id="special-thanks">Special Thanks</h2>

<p><code class="language-plaintext highlighter-rouge">Gemfile.lock</code> のパースに関しては、<a href="https://github.com/ledsun">@ledsun</a> さんにサンプルをいただきました<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>。ありがとうございました。</p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><a href="https://github.com/ledsun/orgen">ledsun/orgen</a> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Toshimaru</name></author><category term="ruby" /><category term="gem" /><category term="oss" /><summary type="html"><![CDATA[Gemfile.lockに記述された特定バージョンのgemを簡単にインストールできる bgem コマンドを作った。 toshimaru/bundled_gems: Install gem specified in Gemfile.lock without bundle install.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/bgem.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/bgem.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Railsと同じRuboCopの設定が利用できるrubocop-rails gemを作った</title><link href="https://blog.toshimaru.net/rubocop-rails/" rel="alternate" type="text/html" title="Railsと同じRuboCopの設定が利用できるrubocop-rails gemを作った" /><published>2018-01-30T00:00:00+09:00</published><updated>2020-11-23T00:00:00+09:00</updated><id>https://blog.toshimaru.net/rubocop-rails</id><content type="html" xml:base="https://blog.toshimaru.net/rubocop-rails/"><![CDATA[<p>【追記】本記事で紹介しているgem, <code class="language-plaintext highlighter-rouge">rubocop-rails</code>は公式RuboCopチームの要望により、<a href="https://github.com/toshimaru/rubocop-rails_config">rubocop-rails_config</a>というgemにRenameされました。</p>

<p>本gemご利用の方は下記の<code class="language-plaintext highlighter-rouge">rubocop-rails_config</code>のご利用をお願いします。</p>

<p><a href="https://github.com/toshimaru/rubocop-rails_config">toshimaru/rubocop-rails_config</a></p>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">Blogged. RuboCopチームにgemの名前を譲った話 - Hack Your Design! <a href="https://t.co/vumSGBK3UN">https://t.co/vumSGBK3UN</a></p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/1019011276561833985?ref_src=twsrc%5Etfw">July 17, 2018</a></blockquote>

<hr />

<p>Railsとほとんど同じRuboCopの設定が利用できる<a href="https://github.com/toshimaru/rubocop-rails">rubocop-rails</a>というgemを作りましたので紹介します。</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">Railsのrubocopと同じ設定を簡単に適用できるgemを作ったよ<br />toshimaru/rubocop-rails: Code style checking for Ruby on Rails project <a href="https://t.co/DnTRKtJc9j">https://t.co/DnTRKtJc9j</a></p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/819931180304715776?ref_src=twsrc%5Etfw">January 13, 2017</a></blockquote>

<h2 id="モチベーション">モチベーション</h2>

<p>Rubyの静的コード解析の定番といえば<a href="https://github.com/bbatsov/rubocop">RuboCop</a>ですよね。ですがRuboCopの設定ファイル<code class="language-plaintext highlighter-rouge">rubocop.yml</code>の設定作業って結構大変じゃないですか？</p>

<p>RuboCopはデフォルトだと結構うるさすぎることが多いのでプロジェクト・チームに応じて何かしら設定はカスタマイズすると思います。しかし１つ１つ設定項目毎にチームのコンセンサスを取るのは非常にダルい。チームの一人が持ち込んだ＜俺の考える最強のRuboCop設定＞に従うという手もありますが「誰がお前の作った設定に従うか！」という気持ちも無くはない。</p>

<p>「何かしらRuboCop設定のレールが欲しいよね〜 :railway_car:」というところで閃き:bulb:、「だったらrailsチームの用意した公式<code class="language-plaintext highlighter-rouge">rubocop.yml</code>を使えばいいじゃない」ということで冒頭のRailsとほぼ同じ設定を持った<a href="https://github.com/toshimaru/rubocop-rails">rubocop-rails</a> gemを作りました。</p>

<h2 id="使い方">使い方</h2>

<p>使い方は <code class="language-plaintext highlighter-rouge">rubocop-rails</code> をinstallした後に、下記の設定を記述した <code class="language-plaintext highlighter-rouge">rubocop.yml</code> を用意する。</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">inherit_gem</span><span class="pi">:</span>
  <span class="na">rubocop-rails</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">config/rails.yml</span>
</code></pre></div></div>

<p>オーバーライドしたい設定、追加したい設定があれば、適宜同じ<code class="language-plaintext highlighter-rouge">rubocop.yml</code>内に設定を追加していく。</p>

<h2 id="実際使ってみてどうか">実際使ってみてどうか</h2>

<p>実際使ってみるとうるさすぎず、しかしコードスタイルとしてきっちり統一させたいところは統一されており、使い心地はなかなか悪くないです。</p>

<p>また副次効果として、普段からこのgemの設定に慣れておくと、Rails本体にコントリビュートするときにRailsのrubocop設定違反にならないコードを書けて便利。 :innocent:</p>

<h2 id="こんなrubocop設定もあるよ">こんなRuboCop設定もあるよ</h2>

<p>他の＜いい感じ＞に設定されたRuboCop設定も紹介します。</p>

<ul>
  <li>GitHubの場合: <a href="https://github.com/github/rubocop-github">github/rubocop-github</a></li>
  <li>Siderの場合: <a href="https://github.com/sider/meowcop">sider/meowcop</a></li>
</ul>

<p>これらの設定はきちんとチーム・会社でディスカッションされた上で作られたものだと思いますので、こちらもあわせて導入を検討してみてもいいかもしれません。</p>]]></content><author><name>Toshimaru</name></author><category term="rails" /><category term="rubocop" /><category term="oss" /><category term="gem" /><summary type="html"><![CDATA[Railsとほとんど同じRuboCopの設定が利用できるrubocop-railsというgemを作りましたので紹介します。 【追記】本記事で紹介しているgem, rubocop-railsは公式RuboCopチームの要望により、rubocop-rails_configというgemにRenameされました。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/rubocop-rail.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/rubocop-rail.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Railsでデバイス判定するrack-simple_user_agentというgemを作った</title><link href="https://blog.toshimaru.net/gem-rack-simple-user-agent/" rel="alternate" type="text/html" title="Railsでデバイス判定するrack-simple_user_agentというgemを作った" /><published>2016-10-02T00:00:00+09:00</published><updated>2016-10-02T00:00:00+09:00</updated><id>https://blog.toshimaru.net/gem-rack-simple-user-agent</id><content type="html" xml:base="https://blog.toshimaru.net/gem-rack-simple-user-agent/"><![CDATA[<p><a href="https://github.com/toshimaru/rack-simple_user_agent">rack-simple_user_agent</a>というgemを作った。</p>

<h2 id="なぜ作ったか">なぜ作ったか</h2>

<p>同じコンセプトのgemとしては、<a href="https://github.com/k0kubun">k0kubun</a>さんの<a href="https://github.com/k0kubun/rack-user_agent">rack-user_agent</a>がある。詳細については下記のブログエントリに詳しい。</p>

<p><a href="http://k0kubun.hatenablog.com/entry/2014/11/21/041949">Railsでデバイスの判定をするのに便利なgemを作った - k0kubun’s blog</a></p>

<p>ではなぜ新たに別のgemを作ったのかというと、rack-user_agentは内部で判定ロジックとして<a href="https://github.com/woothee/woothee">woothee</a>を使っているのだが、wootheeだとやりたいことに対してややヘビーな感じがしたのと、wootheeの判定ロジックでは僕がやりたい判定が完全には出来なかったからだ。</p>

<h3 id="tablet-判定したい">tablet 判定したい</h3>

<p>昨今のWebアプリケーションにおいてViewを分けたいとなったときは大体 smartphone, tablet, pc の３つのビューに分けたいのではないだろうか。もしくはsmartphone, pc の２つのビューに分け、tabletはどちらか１つのビューに属するという形にするのではないか。</p>

<p>wootheeの場合、残念ながらcategoryとしてtabletは用意されていない。実際にwootheeを使ってiPadを判定した場合、カテゴリはsmartphoneと判定されてしまう。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Woothee</span><span class="p">.</span><span class="nf">parse</span> <span class="s2">"Mozilla/5.0 (iPad; CPU OS 9_0_1 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Version/9.0 Mobile/13A404 Safari/601.1"</span>
<span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:name</span><span class="o">=&gt;</span><span class="s2">"Safari"</span><span class="p">,</span> <span class="ss">:category</span><span class="o">=&gt;</span><span class="ss">:smartphone</span><span class="p">,</span> <span class="ss">:os</span><span class="o">=&gt;</span><span class="s2">"iPad"</span><span class="p">,</span> <span class="ss">:os_version</span><span class="o">=&gt;</span><span class="s2">"9.0.1"</span><span class="p">,</span> <span class="ss">:version</span><span class="o">=&gt;</span><span class="s2">"9.0"</span><span class="p">,</span> <span class="ss">:vendor</span><span class="o">=&gt;</span><span class="s2">"Apple"</span><span class="p">}</span>
</code></pre></div></div>

<p>この判定だとsmartphoneとtabletのビューを分けたいといったときにやや不便だ。またtabletビューをpcビューと一緒にする場合にも困ってしまう。</p>

<h3 id="無条件にbot判定されたくない">無条件にbot判定されたくない</h3>

<p>また無条件にcrawlerと判定されてしまうのも困ってしまうケースがある。例えば<a href="https://www.google.com/webmasters/tools/mobile-friendly/">Mobile-Friendly Test</a>でサイトチェックをした場合にsmartphone用の画面が結果として表示されてほしいわけだけど、rack-user_agentを用いた場合、同クローラーが<code class="language-plaintext highlighter-rouge">crawler</code>と判定されてしまい、正しくsmartphoneビューが表示されなくなってしまう。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Woothee</span><span class="p">.</span><span class="nf">parse</span> <span class="s2">"​Mozilla/5.0 (Linux; Android 6.0.1; Nexus 5X Build/MMB29P) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.96 Mobile Safari/537.36 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)"</span>
<span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:name</span><span class="o">=&gt;</span><span class="s2">"Googlebot"</span><span class="p">,</span> <span class="ss">:category</span><span class="o">=&gt;</span><span class="ss">:crawler</span><span class="p">,</span> <span class="ss">:os</span><span class="o">=&gt;</span><span class="s2">"UNKNOWN"</span><span class="p">,</span> <span class="ss">:os_version</span><span class="o">=&gt;</span><span class="s2">"UNKNOWN"</span><span class="p">,</span> <span class="ss">:version</span><span class="o">=&gt;</span><span class="s2">"UNKNOWN"</span><span class="p">,</span> <span class="ss">:vendor</span><span class="o">=&gt;</span><span class="s2">"UNKNOWN"</span><span class="p">}</span>
</code></pre></div></div>

<h2 id="rack-simple_user_agentというソリューション">rack-simple_user_agentというソリューション</h2>

<p>これらを解決することが冒頭のgemを作ったモチベーションになっている。ロジックとしては、単純にrequest UA stingに特定のデバイス特有の文字列が含まれているかどうかをチェック・判定するだけのバカ判定機だ。なのでこのgemは <strong>stupidly simple UA detector</strong> と称することにした。</p>

<h2 id="rack-simple_user_agentで可能な判定">rack-simple_user_agentで可能な判定</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">request.from_smartphone?</code>
    <ul>
      <li>iPhone, Android, Windows Phone の判定</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">request.from_tablet?</code>
    <ul>
      <li>iPad, Android Tablet の判定</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">request.from_smartdevice?</code>
    <ul>
      <li>上記のsmartphone, tabletを含む判定</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">from_googlebot?</code>
    <ul>
      <li>googlebot かどうかの判定</li>
    </ul>
  </li>
</ul>

<p>2016年にもなってさすがにフィーチャーフォンはもうケアしない。だが現代において普通に使われているデバイスであれば対応したいと考えているので、判定漏れているよとかこの判定も追加してよみたいなのがあれば、Pull request is welcome.</p>

<h2 id="まとめ">まとめ</h2>

<p><a href="https://github.com/toshimaru/rack-simple_user_agent">rack-simple_user_agent</a>はtabletの判定をロジック内に含ませることができ、便利。あとシンプルな文字列の判定だけなのでデバイスの判定ロジックにおいて大きなパフォーマンス劣化もしない。</p>]]></content><author><name>Toshimaru</name></author><category term="rails" /><category term="oss" /><category term="gem" /><summary type="html"><![CDATA[rack-simple_user_agent というgemを作った。 同じコンセプトのgemとしては、k0kubunさんのrack-user_agentがある。ではなぜ新たに別のgemを作ったのかというと、rack-user_agentは内部で判定ロジックとしてwootheeを使っているのだが、wootheeだとやりたいことに対してややヘビーな感じがしたのと、wootheeの判定ロジックでは僕がやりたい判定が完全には出来なかったからだ。]]></summary></entry><entry><title type="html">Ruby Gem Configuration Pattern</title><link href="https://blog.toshimaru.net/ruby-configuration-pattern/" rel="alternate" type="text/html" title="Ruby Gem Configuration Pattern" /><published>2015-09-01T00:00:00+09:00</published><updated>2015-09-01T00:00:00+09:00</updated><id>https://blog.toshimaru.net/ruby-configuration-pattern</id><content type="html" xml:base="https://blog.toshimaru.net/ruby-configuration-pattern/"><![CDATA[<p>railsのgemでよくみかける初期設定ファイル、<code class="language-plaintext highlighter-rouge">config/initializers/foo.rb</code>。このような初期設定のインターフェースをgem内に作る場合、いったいどうしたら良いでしょうか。</p>

<h2 id="めざす完成形はコレ">めざす完成形はコレ！</h2>

<p>完成系として、下記を想定してみます。</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># config/initializers/konfig.rb</span>
<span class="no">Konfig</span><span class="p">.</span><span class="nf">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
  <span class="n">config</span><span class="p">.</span><span class="nf">my_value</span> <span class="o">=</span> <span class="s1">'my configuration value'</span>
<span class="k">end</span></code></pre></figure>

<h2 id="configureメソッドを用意">configureメソッドを用意</h2>

<p>まずは<code class="language-plaintext highlighter-rouge">module</code>と<code class="language-plaintext highlighter-rouge">configure</code>というクラスメソッドを用意します。</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">module</span> <span class="nn">Konfig</span>
  <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
    <span class="k">def</span> <span class="nf">configure</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></figure>

<h2 id="configurationクラス">Configurationクラス</h2>

<p>次に実際の設定値が入る<code class="language-plaintext highlighter-rouge">Configuration</code>クラスを用意します。</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">Configuration</span>
  <span class="nb">attr_accessor</span> <span class="ss">:my_value</span>

  <span class="k">def</span> <span class="nf">initialize</span>
    <span class="vi">@my_value</span> <span class="o">=</span> <span class="s1">'default value'</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></figure>

<h2 id="完成形">完成形</h2>

<p>次にこれを組み合わせてみましょう。</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">module</span> <span class="nn">Konfig</span>
  <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
    <span class="k">def</span> <span class="nf">configure</span>
      <span class="k">yield</span><span class="p">(</span><span class="n">configuration</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">configuration</span>
      <span class="vi">@configuration</span> <span class="o">||=</span> <span class="no">Configuration</span><span class="p">.</span><span class="nf">new</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="k">class</span> <span class="nc">Configuration</span>
    <span class="nb">attr_accessor</span> <span class="ss">:my_value</span>

    <span class="k">def</span> <span class="nf">initialize</span>
      <span class="vi">@my_value</span> <span class="o">=</span> <span class="s1">'default value'</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></figure>

<p>これでインスタンス化された<code class="language-plaintext highlighter-rouge">Configuration</code>クラスが出てきます。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; Konfig.configure {|config| p config}
#&lt;Konfig::Configuration:0x007ff5dfba4a50 @my_value="default value"&gt;
</code></pre></div></div>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">Konfig</span><span class="p">.</span><span class="nf">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
  <span class="n">config</span><span class="p">.</span><span class="nf">my_value</span> <span class="o">=</span> <span class="s2">"abc"</span>
<span class="k">end</span>
<span class="c1"># =&gt; "abc"</span>

<span class="no">Konfig</span><span class="p">.</span><span class="nf">configuration</span>
<span class="c1"># =&gt; #&lt;Konfig::Configuration:0x007fa9730aace8 @my_value="abc"&gt;</span></code></pre></figure>

<p><code class="language-plaintext highlighter-rouge">configure</code>で<code class="language-plaintext highlighter-rouge">Configuration</code>インスタンス作っててブロック内の<code class="language-plaintext highlighter-rouge">config</code>変数で<code class="language-plaintext highlighter-rouge">Configuration</code>インスタンスに設定注入していくようなイメージですね。</p>

<h3 id="参考">参考</h3>
<ul>
  <li><a href="https://robots.thoughtbot.com/mygem-configure-block">MyGem.configure Block</a></li>
  <li><a href="http://jimsei.hatenablog.com/entry/20120721/1342855783">クラスインスタンス変数にアクセサを利用しアクセスする - ひたすら事務</a></li>
  <li><a href="http://o.inchiki.jp/obbr/168">Rubyのクラスインスタンス変数をアクセサで定義する</a></li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="ruby" /><category term="gem" /><category term="rails" /><summary type="html"><![CDATA[railsのgemでよくみかける初期設定ファイル、config/initializers/foo.rb。このような初期設定のインターフェースをgem内に作る場合、いったいどうしたら良いでしょうか。]]></summary></entry></feed>