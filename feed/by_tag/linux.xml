<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="https://blog.toshimaru.net/feed/by_tag/linux.xml" rel="self" type="application/atom+xml" /><link href="https://blog.toshimaru.net/" rel="alternate" type="text/html" /><updated>2023-01-21T02:29:31+09:00</updated><id>https://blog.toshimaru.net/feed/by_tag/linux.xml</id><title type="html">Hack Your Design!</title><subtitle>toshimaruの技術系なブログ</subtitle><author><name>Toshimaru</name></author><entry><title type="html">bcコマンドで16進数変換</title><link href="https://blog.toshimaru.net/bc-decimal-hex/" rel="alternate" type="text/html" title="bcコマンドで16進数変換" /><published>2013-12-05T00:00:00+09:00</published><updated>2013-12-05T00:00:00+09:00</updated><id>https://blog.toshimaru.net/bc-decimal-hex</id><content type="html" xml:base="https://blog.toshimaru.net/bc-decimal-hex/"><![CDATA[<p>パッと計算したいときにはよくコマンドラインを立ち上げて<code class="language-plaintext highlighter-rouge">bc</code>コマンドを使います。基本10進数を扱うのがメインなんですが、たまーに16進数とかも扱いたいときがあります。その方法をご紹介。</p>

<h2 id="基本">基本</h2>

<p>基本は下記の２つの値を設定して10進数以外を扱うことができます。（初期値は10で設定されてます）</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">obase</code>: 出力したい進数を設定</li>
  <li><code class="language-plaintext highlighter-rouge">ibase</code>: 入力となる進数を設定</li>
</ul>

<h2 id="10進数16進数">10進数→16進数</h2>

<p><code class="language-plaintext highlighter-rouge">obase</code>を設定すればOK.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>obase=16
255
FF
</code></pre></div></div>

<p>255 -&gt; FF です。</p>

<h2 id="16進数10進数">16進数→10進数</h2>

<p>逆もいってみます。<code class="language-plaintext highlighter-rouge">ibase</code>を設定します。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ibase=16
AA
170
</code></pre></div></div>

<p>AA -&gt; 170 です。</p>

<h2 id="2進数8進数">2進数、8進数</h2>

<p>もちろん他にも2進数やら8進数やら設定次第でOKです。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>obase=2
255
11111111
</code></pre></div></div>

<p>255 -&gt; 11111111 です。</p>

<h2 id="参考">参考</h2>

<ul>
  <li><a href="http://linux.just4fun.biz/%E9%80%86%E5%BC%95%E3%81%8DUNIX%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89/bc%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%81%A716%E9%80%B2%E6%95%B0%E3%80%8110%E9%80%B2%E6%95%B0%E3%80%818%E9%80%B2%E6%95%B0%E3%80%812%E9%80%B2%E6%95%B0%E3%81%AE%E5%A4%89%E6%8F%9B%E3%83%BB%E8%A8%88%E7%AE%97%E3%82%92%E8%A1%8C%E3%81%86.html">bcコマンドで16進数、10進数、8進数、2進数の変換・計算を行う方法</a></li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="linux" /><summary type="html"><![CDATA[パッと計算したいときにはよくコマンドラインを立ち上げてbcコマンドを使います。基本10進数を扱うのがメインなんですが、たまーに16進数とかも扱いたいときがあります。その方法をご紹介。]]></summary></entry><entry><title type="html">「たった一行でもっと高画質の画像を集める方法」のシェルスクリプトコード解説</title><link href="https://blog.toshimaru.net/sh3iz/" rel="alternate" type="text/html" title="「たった一行でもっと高画質の画像を集める方法」のシェルスクリプトコード解説" /><published>2012-12-24T00:00:00+09:00</published><updated>2019-11-02T00:00:00+09:00</updated><id>https://blog.toshimaru.net/sh3iz</id><content type="html" xml:base="https://blog.toshimaru.net/sh3iz/"><![CDATA[<p><a href="http://d.hatena.ne.jp/shi3z/20121217/1355695824">たった一行でもっと高画質の画像を集める方法</a>にあったシェルスクリプトのコード。</p>

<h2 id="ソース">ソース</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">matome_url</span><span class="o">=</span><span class="nv">$1</span>
<span class="nv">cnt</span><span class="o">=</span>0
<span class="k">for </span>j <span class="k">in</span> <span class="o">{</span>1..10<span class="o">}</span><span class="p">;</span> <span class="k">do
  for </span>i <span class="k">in</span> <span class="sb">`</span>curl <span class="nv">$matome_url</span><span class="se">\?</span><span class="nv">page</span><span class="o">=</span><span class="nv">$j</span> | <span class="nb">grep</span> <span class="s1">'_jWidgetData'</span> | <span class="nb">sed </span>s/<span class="se">\&amp;</span>quot<span class="se">\;</span>/<span class="se">\"</span>/g | <span class="nb">grep</span> <span class="nt">-o</span> <span class="s2">"url</span><span class="se">\"\:\"</span><span class="s2">[^</span><span class="se">\"</span><span class="s2">]*"</span> | <span class="nb">cut</span> <span class="nt">-d</span> <span class="se">\"</span> <span class="nt">-f</span> 3 <span class="sb">`</span><span class="p">;</span> <span class="k">do
    </span>curl <span class="nt">-o</span> <span class="nv">$2_$cnt</span>.jpg <span class="nv">$i</span>
    <span class="nv">cnt</span><span class="o">=</span><span class="sb">`</span><span class="nb">expr</span> <span class="nv">$cnt</span> + 1<span class="sb">`</span>
  <span class="k">done
done</span>
</code></pre></div></div>

<p>その中の１行、このコードの意味がよくわからなかったので調べてみた。</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>curl <span class="nv">$matome_url</span><span class="se">\?</span><span class="nv">page</span><span class="o">=</span><span class="nv">$j</span>| <span class="nb">grep</span> <span class="s1">'_jWidgetData'</span> | <span class="nb">sed </span>s/<span class="se">\&amp;</span>quot<span class="se">\;</span>/<span class="se">\"</span>/g | <span class="nb">grep</span> <span class="nt">-o</span> <span class="s2">"url</span><span class="se">\"\:\"</span><span class="s2">[^</span><span class="se">\"</span><span class="s2">]*"</span> | <span class="nb">cut</span> <span class="nt">-d</span> <span class="se">\"</span> <span class="nt">-f</span> 3
</code></pre></div></div>

<p>バラすと下記のようになる。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl https://matome.naver.jp/odai/2128076173257260401 | <span class="c"># curlでデータ取得</span>
<span class="nb">grep</span> <span class="s1">'_jWidgetData'</span> |                                   <span class="c"># _jWidgetData(画像URLが含まれている行)をgrep</span>
<span class="nb">sed </span>s/<span class="se">\&amp;</span>quot<span class="se">\;</span>/<span class="se">\"</span>/g |                                   <span class="c"># &amp;quot; を " に変換</span>
<span class="nb">grep</span> <span class="nt">-o</span> <span class="s2">"url</span><span class="se">\"\:\"</span><span class="s2">[^</span><span class="se">\"</span><span class="s2">]*"</span> |                             <span class="c"># url":"http:~ をgrepで抜き出す</span>
<span class="nb">cut</span> <span class="nt">-d</span> <span class="se">\"</span> <span class="nt">-f</span> 3                                          <span class="c"># ⇡をurl,:,http:~ の３つに分割してURLである３つめをcut!</span>
</code></pre></div></div>

<h3 id="出力結果">出力結果</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://imgcc.naver.jp/kaze/mission/USER/20121010/16/112376/0/800x1126x5e102d37fb7211123e76a10.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121009/16/112376/1/1134x1548x5a8f6dace3e8a811e2caeb.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121222/16/112376/1/1152x1643xa71b65cd2d7ccfbd9ab501.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121022/16/112376/3/1470x2048xf91af81cc31725554aa6a1.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121223/16/112376/0/800x1067xce40c56866a0c1349b12d40.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121223/16/112376/1/800x1067xda8507d549b33034789af92.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121222/16/112376/0/1120x1680xe367f4d20758df59051771.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121218/16/112376/3/800x1200xf0e163f978b6340999a3627.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121220/16/112376/2/800x1149x504004fca0a43ae177b6b94.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121220/16/112376/1/909x1346xbc20b11869f748acf5dfcb9.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121220/16/112376/0/1066x1600x961a7ad10008867d0b4dc4.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121218/16/112376/1/703x1024x9c2810c4630ee676e88581e.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121215/16/112376/0/1226x1671x7380daad05950ec9f27aa1.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121218/16/112376/5/900x1280x8feb008f284438ae077799f.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121219/16/112376/0/799x1200xa22a34c73b464cc8c008887.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121219/16/112376/1/1200x800x596d41a8093f6663d2f51d5.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121216/16/112376/1/1500x2150x03d096234d12754f302cae.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121216/16/112376/0/683x1024x85dc2bb2d1fb1168ee2815c.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121214/16/112376/2/530x800x764574c1e912f5a46846fe56.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121214/16/112376/3/1280x1900x1ce4cf74906fd926a96f41.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121214/16/112376/0/900x1200xaca3d3fec5d57eec05c514a.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121214/16/112376/8/531x800xc515ec8798a9a4032daca277.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121207/16/112376/24/1033x1550x7c9c3cd8928ab0fbf19548.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121202/16/112376/1/1033x1550x6e0dc201a49d96d93740d1.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121208/16/112376/1/1033x1550xf007fde2a5343d1a0a55d1.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121209/16/112376/7/854x1280xeabf817b9a607e419f2472f.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121209/16/112376/6/896x1280x08f71b1d54aa4bd5c2ef364.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121209/16/112376/5/1280x1682xd727f8325bec6c51d47212.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121209/16/112376/4/800x1067xcec4822757324881e9978c9.jpg
http://imgcc.naver.jp/kaze/mission/USER/20121209/16/112376/3/1280x1920x0a1ca8283d2796132f14e3.jpg
</code></pre></div></div>

<p>この「◯◯で水着画像を集める」系のネタ元はPHPでしたが、シェルでもいけちゃうんですね。奥深い・・・</p>]]></content><author><name>Toshimaru</name></author><category term="linux" /><category term="shell" /><category term="bash" /><summary type="html"><![CDATA[たった一行でもっと高画質の画像を集める方法にあったシェルスクリプトのコード。]]></summary></entry><entry><title type="html">プロセス毎のメモリ使用量を調べるコマンド</title><link href="https://blog.toshimaru.net/linux/" rel="alternate" type="text/html" title="プロセス毎のメモリ使用量を調べるコマンド" /><published>2012-12-02T00:00:00+09:00</published><updated>2019-11-02T00:00:00+09:00</updated><id>https://blog.toshimaru.net/linux</id><content type="html" xml:base="https://blog.toshimaru.net/linux/"><![CDATA[<p>メモリを食いつぶしてたプロセスがいたのでそれを調べるときに利用したコマンド。</p>
<p>これでズラっとでます。</p>
<div>
  <pre>$ ps alx  | awk '{printf (&quot;%d\t%s\n&quot;, $8,$13)}'</pre>
</div>

<p>しかし、このコマンドの結果が見づらい。なので<strong>使用量の多い順にソートしてトップ10を出してみる</strong>と下記のようなコマンドになります。</p>

<div>
  <pre>$ ps alx  | awk '{printf (&quot;%d\t%s\n&quot;, $8,$13)}' | sort -nr | head -10</pre>
</div>

<h2>参考</h2>

<p><a href="http://at-aka.blogspot.jp/2006/07/linux.html">Linux でプロセスごとのメモリー使用量を調べる</a></p>]]></content><author><name>Toshimaru</name></author><category term="shell" /><category term="linux" /><summary type="html"><![CDATA[メモリを食いつぶしてたプロセスがいたのでそれを調べるときに利用したコマンド。 これでズラっとでます。 $ ps alx | awk '{printf (&quot;%d\t%s\n&quot;, $8,$13)}']]></summary></entry><entry><title type="html">john the ripper を使用してパスワードクラッキング</title><link href="https://blog.toshimaru.net/john-the-ripper/" rel="alternate" type="text/html" title="john the ripper を使用してパスワードクラッキング" /><published>2011-12-10T00:00:00+09:00</published><updated>2011-12-10T00:00:00+09:00</updated><id>https://blog.toshimaru.net/john-the-ripper</id><content type="html" xml:base="https://blog.toshimaru.net/john-the-ripper/"><![CDATA[<p>簡単で想像しやすいパスワードをLinuxで設定すると簡単にクラックできちゃいますよ、ということを確かめるためにも、今日は<a href="http://www.openwall.com/john/">john the ripper</a>というツールを使ってパスワードを解析してみます。</p>
<p>まずはインストール。</p>
<div class="CodeRay">
  <div class="code"><pre>$ sudo apt-get install john</pre></div>
</div>

<p>クラックするユーザーを作成。</p>
<div class="CodeRay">
  <div class="code"><pre>$ useradd test
$ passwd test</pre></div>
</div>

<p>ここでは、ユーザー名を"test",パスワードも"test"という単純なアカウントを作成します。</p>
<p>まずはパスワードとshadowファイルを統合させたファイルを作成。</p>
<div class="CodeRay">
  <div class="code"><pre>$ sudo unshadow /etc/passwd /etc/shadow &gt; /tmp/passfile</pre></div>
</div>

<p>単純なアカウントなのでシングルモードで解析できます。</p>
<div class="CodeRay">
  <div class="code"><pre>$ john --single /tmp/passfile
test:test:1001:1001::/home/test:/bin/sh</pre></div>
</div>

<p>ということでパスワードは解析完了。 他にも辞書ファイルを使ったり、総当たりで当たっていったりもできるようです。</p>]]></content><author><name>Toshimaru</name></author><category term="linux" /><category term="security" /><summary type="html"><![CDATA[簡単で想像しやすいパスワードをLinuxで設定すると簡単にクラックできちゃいますよ、ということを確かめるためにも、今日はjohn the ripperというツールを使ってパスワードを解析してみます。 まずはインストール。 $ sudo apt-get install john]]></summary></entry><entry><title type="html">SNMPサーバを立てて、クライアントからsnmpwalkする</title><link href="https://blog.toshimaru.net/snmpsnmpwalk/" rel="alternate" type="text/html" title="SNMPサーバを立てて、クライアントからsnmpwalkする" /><published>2011-12-04T00:00:00+09:00</published><updated>2011-12-04T00:00:00+09:00</updated><id>https://blog.toshimaru.net/snmpsnmpwalk</id><content type="html" xml:base="https://blog.toshimaru.net/snmpsnmpwalk/"><![CDATA[<p>お仕事でSNMPを使うことがありましたので勉強がてらメモ。</p>
<div>
  <pre>$ sudo apt-get install snmp snmpd</pre>
</div>

<p>localhostにsnmpwalkしてMIBツリーの情報を取得できます。</p>

<div>
<pre>$ snmpwalk -v 1 -c public localhost
 iso.3.6.1.2.1.1.1.0 = STRING: &quot;Linux ubuntu 3.0.0-12-generic #20-Ubuntu SMP Fri Oct 7 14:56:25 UTC 2011 x86_64&quot;
 iso.3.6.1.2.1.1.2.0 = OID: iso.3.6.1.4.1.8072.3.2.10
（以下略...）</pre>
</div>

<p>デフォルトの状態だとlocalhostのみで外部からsnmpwalkできないので、/etc/snmp/snmpd.conf　のagentAddressを下記のように編集してsnmpdを再起動する。</p>

<div>
  <pre>agentAddress  udp:161</pre>
</div>

<p>これで外部からsnmpwalkできるようになります。</p>

<h3>参考</h3>
<ul>
<li><a href="http://www.atmarkit.co.jp/flinux/rensai/root07/root07c.html">http://www.atmarkit.co.jp/flinux/rensai/root07/root07c.html</a></li>
<li><a href="http://www.uetyi.mydns.jp/wordpress/snmp-setting/entry-137.html">http://www.uetyi.mydns.jp/wordpress/snmp-setting/entry-137.html</a></li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="linux" /><category term="network" /><summary type="html"><![CDATA[お仕事でSNMPを使うことがありましたので勉強がてらメモ。sudo apt-get install snmp snmpd]]></summary></entry><entry><title type="html">vmware上のubuntuのネットワーク設定</title><link href="https://blog.toshimaru.net/vmwareubuntu/" rel="alternate" type="text/html" title="vmware上のubuntuのネットワーク設定" /><published>2011-11-02T00:00:00+09:00</published><updated>2011-11-02T00:00:00+09:00</updated><id>https://blog.toshimaru.net/vmwareubuntu</id><content type="html" xml:base="https://blog.toshimaru.net/vmwareubuntu/"><![CDATA[<p>をちょっとメモ</p>
<p>まずはeth0に静的IPを割り振りましょう。/etc/network/interfaces を下記のような感じで書き換える。</p>
<p>（参考：<a href="http://tobysoft.net/wiki/index.php?Ubuntu%2F%A5%A4%A5%F3%A5%B9%A5%C8%A1%BC%A5%EB%B8%E5%A4%CE%C0%DF%C4%EA#v8e1badd">Ubuntu/インストール後の設定</a> ）</p>
<div class="CodeRay">
  <div class="code"><pre>auto lo
iface lo inet loopback

auto eth0
iface eth0 inet static         # ↓ 注意：この日本語コメントは削除してください（でないとかしくなります）
        address 192.168.0.100  # ← IPアドレス
        network 192.168.0.0  # ← (サブ)ネットワークのアドレス .0で終わるはず
        netmask 255.255.255.0  # ← ネットマスク
        broadcast 192.168.0.255 # ←ブロードキャストアドレス .255で終わるはず
        :ateway 192.168.0.1  # ← ゲートウェイ（ルーター）のアドレス
        dns-nameservers 192.168.0.10  # ← DNSのアドレス</pre></div>
</div>

<p>設定を変えたら以下のコマンドで設定を反映させます。</p>
<div class="CodeRay">
  <div class="code"><pre>sudo /etc/init.d/networking restart</pre></div>
</div>

<p>するとこんなエラー。</p>
<div class="CodeRay">
  <div class="code"><pre>eth0: ERROR while getting interface flags: No such device</pre></div>
</div>

<p>これに対しては、以下の対応をするとよいよう。</p>
<ol>
<li> /etc/udev/rules.d/70-persistent-net.rulesの SUBSYSTEM==&rdquo;net&rdquo;から始まる行を削除（またはコメントアウト） </li>
<li> /etc/udev/rules.d/75-persistent-net-generator.rulesの以下2行を削除（またはコメントアウト） </li>
</ol>
<p>(参考：<a href="http://namahage.dip.jp/blog/2107">vmwareのubuntuを別PCへ移動で eth0: ERROR</a>）</p>
<p>これで問題なく通りましたとさ。</p>]]></content><author><name>Toshimaru</name></author><category term="linux" /><category term="network" /><summary type="html"><![CDATA[をちょっとメモ まずはeth0に静的IPを割り振りましょう。/etc/network/interfaces を下記のような感じで書き換える。 （参考：Ubuntu/インストール後の設定 ） auto lo iface lo inet loopback]]></summary></entry></feed>