<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="https://blog.toshimaru.net/feed/by_tag/chef.xml" rel="self" type="application/atom+xml" /><link href="https://blog.toshimaru.net/" rel="alternate" type="text/html" /><updated>2023-04-21T11:44:23+09:00</updated><id>https://blog.toshimaru.net/feed/by_tag/chef.xml</id><title type="html">Hack Your Design!</title><subtitle>toshimaruの技術系なブログ</subtitle><author><name>Toshimaru</name></author><entry><title type="html">Amazon OpsWorksでRailsアプリを簡単Chefプロビジョニング</title><link href="https://blog.toshimaru.net/opsworks-rails/" rel="alternate" type="text/html" title="Amazon OpsWorksでRailsアプリを簡単Chefプロビジョニング" /><published>2014-12-21T00:00:00+09:00</published><updated>2014-12-21T00:00:00+09:00</updated><id>https://blog.toshimaru.net/opsworks-rails</id><content type="html" xml:base="https://blog.toshimaru.net/opsworks-rails/"><![CDATA[<p>本記事は<a href="http://qiita.com/advent-calendar/2014/chef">Chef Advent Calendar 2014</a>の21日目の記事です。</p>

<h2 id="opsworksとは">OpsWorksとは？</h2>
<p>公式サイトの説明は下記です。</p>

<blockquote>
  <p>設定管理サービスである AWS OpsWorks を使用すると、ユーザーは Chef を使用して、あらゆる種類およびサイズのアプリケーションを簡単に設定および運用できます。パッケージのインストール、ソフトウェア設定およびストレージなどのリソースを含む、各コンポーネントのアプリケーションのアーキテクチャおよび仕様を定義できます。</p>

  <p><a href="http://aws.amazon.com/jp/opsworks/">AWS OpsWorks</a></p>
</blockquote>

<p>ポイントは以下の通り。</p>

<ul>
  <li>Chefでサーバーをプロビジョニング・デプロイできる</li>
  <li>スタック ＞ レイヤー ＞ App という概念でシステムを構成</li>
  <li>インスタンスをタイムベース or ロードベースでスケールアウトできる</li>
  <li>OpsWorksで使われているレシピは<a href="https://github.com/aws/opsworks-cookbooks">Githubで公開</a>されており実行コードが追える</li>
  <li>OpsWorksの用意したレシピに加えて自らのCustom Chefレシピを追加することも可能</li>
</ul>

<p><img src="/images/posts/opsworks/stack.png" alt="stack image" /></p>

<p><strong>【↑図】OpsWorksのStack &amp; Layerの関係</strong></p>

<h2 id="料金">料金</h2>
<p>OpsWorksの使用自体にかかる料金は <strong>0円</strong> です。OpsWorks上で使用したAWSリソースの料金（ロードバランサ、EC2インスタンス、RDS等）のみがかかってきます。</p>

<h2 id="railsをopsworksにデプロイしてみよう">RailsをOpsWorksにデプロイしてみよう</h2>
<p>OpsWorksはとくにRailsアプリケーションとの相性が良く、今回はRails4.2のアプリケーションをOpsWorksにデプロイしてみようと思います。</p>

<p>今回デプロイするRailsアプリケーションのコードの最終形は下記になります。</p>

<p><a href="https://github.com/toshimaru/opsworks-rails">https://github.com/toshimaru/opsworks-rails</a></p>

<h2 id="デプロイ手順">デプロイ手順</h2>

<h3 id="スタックの追加">スタックの追加</h3>

<p>まずはAWS ConsoleからOpsWorksにいきAdd Stackしましょう。RegionとかVPCとかIAMとかは適宜設定してね。</p>

<p><img src="/images/posts/opsworks/add_stack.png" alt="add stack" /></p>

<p>こんなのがStackのトップ画面。</p>

<p><img src="/images/posts/opsworks/top.png" alt="stack top" /></p>

<h3 id="レイヤーの定義">レイヤーの定義</h3>

<p><img src="/images/posts/opsworks/layer.png" alt="layer" /></p>

<p>Layer TypeはRails App、Ruby versionは2.1、nginx+unicornを選択する</p>

<p><img src="/images/posts/opsworks/add_layer.png" alt="add layer" /></p>

<p>追加されました。</p>

<p><img src="/images/posts/opsworks/layer_done.png" alt="layer done" /></p>

<h3 id="レシピ">レシピ</h3>

<p>RecipesでOpsWorksにどんなレシピが設定されているかがわかります。レシピ名がGithubへのリンクになっており、どんなレシピが書かれているかを確認できます。</p>

<p><img src="/images/posts/opsworks/recipes.png" alt="recipes" /></p>

<p>今回はこのままでOK.</p>

<h3 id="インスタンスの追加">インスタンスの追加</h3>

<p>では次にAppインスタンスを追加。t1.microインスタンスで。</p>

<p><img src="/images/posts/opsworks/add_instance.png" alt="add instance" /></p>

<p>AddInstanceするとステータスがStoppedなのでstartで起動します。</p>

<p><img src="/images/posts/opsworks/instance_stopped.png" alt="instance stop" /></p>

<p>10分くらいでセットアップが完了します。Statusがonlineでグリーンになれば準備OK.</p>

<p><img src="/images/posts/opsworks/instance_online.png" alt="online" /></p>

<h3 id="appの設定">Appの設定</h3>

<p>次にデプロイするAppの設定を追加していきます。</p>

<p><img src="/images/posts/opsworks/apps.png" alt="setting app" /></p>

<p>こんな感じでAppを設定。</p>

<ul>
  <li>Type: Ruby on Rails</li>
  <li>DataSource: 今回は特にないのでNone</li>
  <li>Applicationソース: GithubからデプロイしたいGithubのレポジトリURLを指定</li>
</ul>

<p><img src="/images/posts/opsworks/add_apps.png" alt="add app" /></p>

<p><code class="language-plaintext highlighter-rouge">SECRET_KEY_BASE</code>(Rails4.2の<code class="language-plaintext highlighter-rouge">secrets.yml</code>で必要になる)もあわせてセットしましょう。</p>

<p><img src="/images/posts/opsworks/add_envvar.png" alt="env var" /></p>

<p>Deployments で Deploy Appしてみよう。</p>

<p><img src="/images/posts/opsworks/deploy_app.png" alt="deploy app" /></p>

<p>Appは先ほど設定したApp、CommandはDeployを指定してDeploy App!（マイグレーションが必要であればここでMigration ON）</p>

<p><img src="/images/posts/opsworks/deploy_app2.png" alt="deploy app 2" /></p>

<p>SuccessすればOK.</p>

<p><img src="/images/posts/opsworks/deploy_app3.png" alt="deploy finished" /></p>

<h2 id="幾つかのハマりポイント">幾つかのハマりポイント</h2>

<h3 id="gemfile">Gemfile</h3>

<p>下記のGemが必要になるのでコメントアウトされていることを確認すること。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem 'therubyracer', platforms: :ruby
gem 'unicorn'
</code></pre></div></div>

<h3 id="databaseyml">database.yml</h3>

<p>RDSを設定していれば自動的に設定されるのですが、今回の場合設定していないので別途手で<code class="language-plaintext highlighter-rouge">database.yml</code>を作りました。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[root@rails-app1 current]# cat config/database.yml
</code></pre></div></div>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">default</span><span class="pi">:</span> <span class="nl">&amp;default</span>
  <span class="na">adapter</span><span class="pi">:</span> <span class="s">sqlite3</span>
  <span class="na">pool</span><span class="pi">:</span> <span class="m">5</span>
  <span class="na">timeout</span><span class="pi">:</span> <span class="m">5000</span>

<span class="na">production</span><span class="pi">:</span>
  <span class="na">&lt;&lt;</span><span class="pi">:</span> <span class="nv">*default</span>
  <span class="na">database</span><span class="pi">:</span> <span class="s">db/production.sqlite3</span>
</code></pre></div></div>

<h3 id="cssが適応されていない問題">CSSが適応されていない問題</h3>

<p>「アレ、なんかCSSが効いていないっぽい！？」</p>

<p><img src="/images/posts/opsworks/before_css.png" alt="css" /></p>

<p>これは<code class="language-plaintext highlighter-rouge">asset:precompile</code>が走っていないため。</p>

<blockquote>
  <p>rake asset:precompile というタスクを実行する必要がありますが、OpsWorksのRailsアプリケーションのデフォルトのデプロイ処理ではこのタスクを実行してくれません。</p>

  <p><a href="http://interu.hatenablog.com/entry/2013/08/01/214258">OpsWorksでRailsをデプロイする際にasset:precompileを実施する方法</a></p>
</blockquote>

<p>下記を<code class="language-plaintext highlighter-rouge">deploy/before_migrate.rb</code>に設定する。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Chef</span><span class="o">::</span><span class="no">Log</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="s2">"Running deploy/before_migrate.rb"</span><span class="p">)</span>
<span class="n">env</span> <span class="o">=</span> <span class="n">node</span><span class="p">[</span><span class="ss">:deploy</span><span class="p">][</span><span class="ss">:rails_opsworks</span><span class="p">][</span><span class="ss">:rails_env</span><span class="p">]</span>
<span class="n">current_release</span> <span class="o">=</span> <span class="n">release_path</span>

<span class="n">execute</span> <span class="s2">"rake assets:precompile"</span> <span class="k">do</span>
  <span class="n">cwd</span> <span class="n">current_release</span>
  <span class="n">command</span> <span class="s2">"bundle exec rake assets:precompile"</span>
  <span class="n">environment</span> <span class="s2">"RAILS_ENV"</span> <span class="o">=&gt;</span> <span class="n">env</span>
<span class="k">end</span>
</code></pre></div></div>

<p>これでデプロイ。</p>

<p><img src="/images/posts/opsworks/after_css.png" alt="css 2" /></p>

<p>OK.</p>

<h3 id="デプロイディレクトリ">デプロイ・ディレクトリ</h3>

<p><code class="language-plaintext highlighter-rouge">/srv/www/rails_opsworks/current</code>に最新の状態がデプロイされます。</p>

<h3 id="ログディレクトリ">ログ・ディレクトリ</h3>

<p><code class="language-plaintext highlighter-rouge">/var/lib/aws/opsworks/chef</code> Chefのログ、OpsWorksの設定JSONが格納されています。</p>

<h2 id="まとめ">まとめ</h2>

<p>さてOpsWorksでのデプロイ手順を紹介してきましたが一体何が嬉しいのでしょうか。個人的なメリットは以下です。</p>

<ul>
  <li>インスタンスが Disposable（廃棄可能）・Reproducible（再現可能） である
    <ul>
      <li>いわゆる immutable infrastructure</li>
      <li>= サーバーをいつでも潰して全く同じ環境を再現できる！</li>
      <li>「サーバーを増やしたい！」 → Add Instanceをポチるだけ</li>
    </ul>
  </li>
  <li><a href="https://github.com/capistrano/capistrano">Capistrano</a>などのデプロイツールのコードをゴチャゴチャ書く必要がなく、デプロイタスクはOpsWorks &amp; Chefに一任できる</li>
</ul>

<h2 id="さいごに">さいごに</h2>

<p>Chef Advent CalendarといいながらChefよりもOpsWorks中心の内容になってしまいましたが、冒頭に書いたようにOpsWorksの用意しているレシピに加えて自らのCustom Chefレシピを定義することが可能です。現実的な運用を考えるとOpsWorksのレシピだけでプロビジョニング・デプロイレシピを完結させることは難しいと思うので、<strong>OpsWorksレシピ+Custom Chefレシピ</strong> の２つを組み合わせて運用していくのが現実的かと思います。</p>

<h2 id="link-参考">:link: 参考</h2>

<ul>
  <li><a href="http://ruby.awsblog.com/post/Tx7FQMT084INCR/Deploying-Ruby-on-Rails-Applications-to-AWS-OpsWorks">Deploying Ruby on Rails Applications to AWS OpsWorks</a></li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="chef" /><category term="opsworks" /><category term="rails" /><category term="aws" /><summary type="html"><![CDATA[Rails4.2.0のアプリケーションをChefでプロビジョニングできるOpsWorksにデプロイしてみます。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/opsworks/eyecatch.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/opsworks/eyecatch.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>