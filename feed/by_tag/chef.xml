<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://blog.toshimaru.net/feed/by_tag/chef.xml" rel="self" type="application/atom+xml" /><link href="https://blog.toshimaru.net/" rel="alternate" type="text/html" /><updated>2021-02-28T18:36:05+09:00</updated><id>https://blog.toshimaru.net/feed/by_tag/chef.xml</id><title type="html">Hack Your Design!</title><subtitle>toshimaruの技術系なブログ</subtitle><author><name>Toshimaru</name></author><entry><title type="html">Amazon OpsWorksでRailsアプリを簡単Chefプロビジョニング</title><link href="https://blog.toshimaru.net/opsworks-rails/" rel="alternate" type="text/html" title="Amazon OpsWorksでRailsアプリを簡単Chefプロビジョニング" /><published>2014-12-21T00:00:00+09:00</published><updated>2014-12-21T00:00:00+09:00</updated><id>https://blog.toshimaru.net/opsworks-rails</id><content type="html" xml:base="https://blog.toshimaru.net/opsworks-rails/">&lt;p&gt;本記事は&lt;a href=&quot;http://qiita.com/advent-calendar/2014/chef&quot;&gt;Chef Advent Calendar 2014&lt;/a&gt;の21日目の記事です。&lt;/p&gt;

&lt;h2 id=&quot;opsworksとは&quot;&gt;OpsWorksとは？&lt;/h2&gt;
&lt;p&gt;公式サイトの説明は下記です。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;設定管理サービスである AWS OpsWorks を使用すると、ユーザーは Chef を使用して、あらゆる種類およびサイズのアプリケーションを簡単に設定および運用できます。パッケージのインストール、ソフトウェア設定およびストレージなどのリソースを含む、各コンポーネントのアプリケーションのアーキテクチャおよび仕様を定義できます。&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://aws.amazon.com/jp/opsworks/&quot;&gt;AWS OpsWorks&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ポイントは以下の通り。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Chefでサーバーをプロビジョニング・デプロイできる&lt;/li&gt;
  &lt;li&gt;スタック ＞ レイヤー ＞ App という概念でシステムを構成&lt;/li&gt;
  &lt;li&gt;インスタンスをタイムベース or ロードベースでスケールアウトできる&lt;/li&gt;
  &lt;li&gt;OpsWorksで使われているレシピは&lt;a href=&quot;https://github.com/aws/opsworks-cookbooks&quot;&gt;Githubで公開&lt;/a&gt;されており実行コードが追える&lt;/li&gt;
  &lt;li&gt;OpsWorksの用意したレシピに加えて自らのCustom Chefレシピを追加することも可能&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/opsworks/stack.png&quot; alt=&quot;stack image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;【↑図】OpsWorksのStack &amp;amp; Layerの関係&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;料金&quot;&gt;料金&lt;/h2&gt;
&lt;p&gt;OpsWorksの使用自体にかかる料金は &lt;strong&gt;0円&lt;/strong&gt; です。OpsWorks上で使用したAWSリソースの料金（ロードバランサ、EC2インスタンス、RDS等）のみがかかってきます。&lt;/p&gt;

&lt;h2 id=&quot;railsをopsworksにデプロイしてみよう&quot;&gt;RailsをOpsWorksにデプロイしてみよう&lt;/h2&gt;
&lt;p&gt;OpsWorksはとくにRailsアプリケーションとの相性が良く、今回はRails4.2のアプリケーションをOpsWorksにデプロイしてみようと思います。&lt;/p&gt;

&lt;p&gt;今回デプロイするRailsアプリケーションのコードの最終形は下記になります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/toshimaru/opsworks-rails&quot;&gt;https://github.com/toshimaru/opsworks-rails&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;デプロイ手順&quot;&gt;デプロイ手順&lt;/h2&gt;

&lt;h3 id=&quot;スタックの追加&quot;&gt;スタックの追加&lt;/h3&gt;

&lt;p&gt;まずはAWS ConsoleからOpsWorksにいきAdd Stackしましょう。RegionとかVPCとかIAMとかは適宜設定してね。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/opsworks/add_stack.png&quot; alt=&quot;add stack&quot; /&gt;&lt;/p&gt;

&lt;p&gt;こんなのがStackのトップ画面。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/opsworks/top.png&quot; alt=&quot;stack top&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;レイヤーの定義&quot;&gt;レイヤーの定義&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/opsworks/layer.png&quot; alt=&quot;layer&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Layer TypeはRails App、Ruby versionは2.1、nginx+unicornを選択する&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/opsworks/add_layer.png&quot; alt=&quot;add layer&quot; /&gt;&lt;/p&gt;

&lt;p&gt;追加されました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/opsworks/layer_done.png&quot; alt=&quot;layer done&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;レシピ&quot;&gt;レシピ&lt;/h3&gt;

&lt;p&gt;RecipesでOpsWorksにどんなレシピが設定されているかがわかります。レシピ名がGithubへのリンクになっており、どんなレシピが書かれているかを確認できます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/opsworks/recipes.png&quot; alt=&quot;recipes&quot; /&gt;&lt;/p&gt;

&lt;p&gt;今回はこのままでOK.&lt;/p&gt;

&lt;h3 id=&quot;インスタンスの追加&quot;&gt;インスタンスの追加&lt;/h3&gt;

&lt;p&gt;では次にAppインスタンスを追加。t1.microインスタンスで。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/opsworks/add_instance.png&quot; alt=&quot;add instance&quot; /&gt;&lt;/p&gt;

&lt;p&gt;AddInstanceするとステータスがStoppedなのでstartで起動します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/opsworks/instance_stopped.png&quot; alt=&quot;instance stop&quot; /&gt;&lt;/p&gt;

&lt;p&gt;10分くらいでセットアップが完了します。Statusがonlineでグリーンになれば準備OK.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/opsworks/instance_online.png&quot; alt=&quot;online&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;appの設定&quot;&gt;Appの設定&lt;/h3&gt;

&lt;p&gt;次にデプロイするAppの設定を追加していきます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/opsworks/apps.png&quot; alt=&quot;setting app&quot; /&gt;&lt;/p&gt;

&lt;p&gt;こんな感じでAppを設定。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Type: Ruby on Rails&lt;/li&gt;
  &lt;li&gt;DataSource: 今回は特にないのでNone&lt;/li&gt;
  &lt;li&gt;Applicationソース: GithubからデプロイしたいGithubのレポジトリURLを指定&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/opsworks/add_apps.png&quot; alt=&quot;add app&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SECRET_KEY_BASE&lt;/code&gt;(Rails4.2の&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;secrets.yml&lt;/code&gt;で必要になる)もあわせてセットしましょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/opsworks/add_envvar.png&quot; alt=&quot;env var&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Deployments で Deploy Appしてみよう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/opsworks/deploy_app.png&quot; alt=&quot;deploy app&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Appは先ほど設定したApp、CommandはDeployを指定してDeploy App!（マイグレーションが必要であればここでMigration ON）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/opsworks/deploy_app2.png&quot; alt=&quot;deploy app 2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;SuccessすればOK.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/opsworks/deploy_app3.png&quot; alt=&quot;deploy finished&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;幾つかのハマりポイント&quot;&gt;幾つかのハマりポイント&lt;/h2&gt;

&lt;h3 id=&quot;gemfile&quot;&gt;Gemfile&lt;/h3&gt;

&lt;p&gt;下記のGemが必要になるのでコメントアウトされていることを確認すること。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem &apos;therubyracer&apos;, platforms: :ruby
gem &apos;unicorn&apos;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;databaseyml&quot;&gt;database.yml&lt;/h3&gt;

&lt;p&gt;RDSを設定していれば自動的に設定されるのですが、今回の場合設定していないので別途手で&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;database.yml&lt;/code&gt;を作りました。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@rails-app1 current]# cat config/database.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;&amp;amp;default&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;adapter&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sqlite3&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;pool&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5000&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;production&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;*default&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;db/production.sqlite3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;cssが適応されていない問題&quot;&gt;CSSが適応されていない問題&lt;/h3&gt;

&lt;p&gt;「アレ、なんかCSSが効いていないっぽい！？」&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/opsworks/before_css.png&quot; alt=&quot;css&quot; /&gt;&lt;/p&gt;

&lt;p&gt;これは&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;asset:precompile&lt;/code&gt;が走っていないため。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;rake asset:precompile というタスクを実行する必要がありますが、OpsWorksのRailsアプリケーションのデフォルトのデプロイ処理ではこのタスクを実行してくれません。&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://interu.hatenablog.com/entry/2013/08/01/214258&quot;&gt;OpsWorksでRailsをデプロイする際にasset:precompileを実施する方法&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;下記を&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;deploy/before_migrate.rb&lt;/code&gt;に設定する。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Chef&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Running deploy/before_migrate.rb&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:deploy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:rails_opsworks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:rails_env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;current_release&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;release_path&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;rake assets:precompile&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cwd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_release&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bundle exec rake assets:precompile&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;RAILS_ENV&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これでデプロイ。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/opsworks/after_css.png&quot; alt=&quot;css 2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;OK.&lt;/p&gt;

&lt;h3 id=&quot;デプロイディレクトリ&quot;&gt;デプロイ・ディレクトリ&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/srv/www/rails_opsworks/current&lt;/code&gt;に最新の状態がデプロイされます。&lt;/p&gt;

&lt;h3 id=&quot;ログディレクトリ&quot;&gt;ログ・ディレクトリ&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/var/lib/aws/opsworks/chef&lt;/code&gt; Chefのログ、OpsWorksの設定JSONが格納されています。&lt;/p&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;さてOpsWorksでのデプロイ手順を紹介してきましたが一体何が嬉しいのでしょうか。個人的なメリットは以下です。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;インスタンスが Disposable（廃棄可能）・Reproducible（再現可能） である
    &lt;ul&gt;
      &lt;li&gt;いわゆる immutable infrastructure&lt;/li&gt;
      &lt;li&gt;= サーバーをいつでも潰して全く同じ環境を再現できる！&lt;/li&gt;
      &lt;li&gt;「サーバーを増やしたい！」 → Add Instanceをポチるだけ&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/capistrano/capistrano&quot;&gt;Capistrano&lt;/a&gt;などのデプロイツールのコードをゴチャゴチャ書く必要がなく、デプロイタスクはOpsWorks &amp;amp; Chefに一任できる&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;さいごに&quot;&gt;さいごに&lt;/h2&gt;

&lt;p&gt;Chef Advent CalendarといいながらChefよりもOpsWorks中心の内容になってしまいましたが、冒頭に書いたようにOpsWorksの用意しているレシピに加えて自らのCustom Chefレシピを定義することが可能です。現実的な運用を考えるとOpsWorksのレシピだけでプロビジョニング・デプロイレシピを完結させることは難しいと思うので、&lt;strong&gt;OpsWorksレシピ+Custom Chefレシピ&lt;/strong&gt; の２つを組み合わせて運用していくのが現実的かと思います。&lt;/p&gt;

&lt;h2 id=&quot;link-参考&quot;&gt;:link: 参考&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://ruby.awsblog.com/post/Tx7FQMT084INCR/Deploying-Ruby-on-Rails-Applications-to-AWS-OpsWorks&quot;&gt;Deploying Ruby on Rails Applications to AWS OpsWorks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Toshimaru</name></author><category term="chef" /><category term="opsworks" /><category term="rails" /><category term="aws" /><summary type="html">本記事はChef Advent Calendar 2014の21日目の記事です。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/opsworks/eyecatch.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/opsworks/eyecatch.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>