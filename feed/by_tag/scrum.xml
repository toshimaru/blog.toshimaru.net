<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="https://blog.toshimaru.net/feed/by_tag/scrum.xml" rel="self" type="application/atom+xml" /><link href="https://blog.toshimaru.net/" rel="alternate" type="text/html" /><updated>2023-01-21T02:29:31+09:00</updated><id>https://blog.toshimaru.net/feed/by_tag/scrum.xml</id><title type="html">Hack Your Design!</title><subtitle>toshimaruの技術系なブログ</subtitle><author><name>Toshimaru</name></author><entry><title type="html">認定スクラムマスター研修に行ってきました</title><link href="https://blog.toshimaru.net/scrum-training/" rel="alternate" type="text/html" title="認定スクラムマスター研修に行ってきました" /><published>2016-01-20T00:00:00+09:00</published><updated>2018-02-08T00:00:00+09:00</updated><id>https://blog.toshimaru.net/scrum-training</id><content type="html" xml:base="https://blog.toshimaru.net/scrum-training/"><![CDATA[<p>昨年末にスクラムマスター研修を受けてきて、認定スクラムマスター (CSM)となりました。スクラムマスター研修で学んだこととして社内で共有した内容を本ブログでも共有してみようと思います。</p>

<h2 id="scrum-vs-agile-歴史から学ぶ">Scrum vs Agile 〜歴史から学ぶ〜</h2>

<ul>
  <li>1993年: スクラム誕生</li>
  <li>2001年: アジャイルソフトウェア開発宣言
    <ul>
      <li>アジャイルマニフェスト: <a href="http://agilemanifesto.org/iso/ja/manifesto.html">アジャイルソフトウェア開発宣言</a></li>
      <li>アジャイル原則:  <a href="http://agilemanifesto.org/iso/ja/principles.html">アジャイル宣言の背後にある原則</a></li>
    </ul>
  </li>
</ul>

<p>アジャイルは「より良い開発/方法を探している」という状態のことです。状態なので原理的には「アジャイル開発をしている」という表現は正しくありません。振り返ってみて「あのプロジェクトはアジャイルだった」と評価できるもの。極端に言うといわゆるウォーターフォール型の開発も１つのアジャイルと定義することもできます。</p>

<p><em>Don’t do agile, be agile</em> （訳: アジャイル開発をするな、アジャイルであれ）</p>

<p>スクラムのほうがアジャイルより歴史的には古く、アジャイルの定義が曖昧な一方、スクラムはきちんと確立された方法論で現在もアップデートされ続けているフレームワークです(年２回)。ただ出版社のマーケティング戦略的に「アジャイル」というバズワードを使わなきゃ本が売れないという理由もあってか、世の中には＜アジャイルという皮を被った何か＞が氾濫しています。「アジャイル」という魔法のコトバに惑わされてはいけないのです。</p>

<h2 id="スクラムとは何か">スクラムとは何か？</h2>

<p>スクラムとは <strong>＜現状を把握するためのフレームワーク＞</strong>。どのプロジェクトにおいても現状を把握した結果、大体において問題はあることから <strong>＜問題を発見するフレームワーク＞</strong> と言われることもあります。</p>

<p>なのでポイント（超重要！）は、スクラムをやったからといって、</p>

<ul>
  <li><strong>生産性は向上しません</strong></li>
  <li><strong>人が成長することはありません</strong></li>
  <li><strong>プロダクトが改善することはありません</strong></li>
</ul>

<p>あくまでもこれらは、現状を把握した結果として期待できるものであって、スクラムをやれば必ず得られる結果というわけではありません。スクラムもまた、銀の弾丸ではないのです。</p>

<p>逆にチームの現状を把握できていないのであれば、それはスクラムとは呼べません。そして「スクラムは優秀な人じゃなければできない」というのも間違いです。優秀じゃない人でも現状を把握してそこそこの成果を出せるようにするのがスクラムというフレームワークです。</p>

<h2 id="スクラムのルール">スクラムのルール</h2>

<p>全部で19個あります。</p>

<p><img src="/images/posts/scrum/scrum1.png" alt="scrum" /></p>

<h3 id="スクラムの三本柱">スクラムの三本柱</h3>

<ol>
  <li><strong>透明性</strong> – Transparency</li>
  <li><strong>検証</strong> – Inspect</li>
  <li><strong>適合</strong> (検証に基づいた適合) – Adapt</li>
</ol>

<h3 id="スクラムの３つの役割">スクラムの３つの役割</h3>

<ol>
  <li><strong>プロダクトオーナー</strong>
    <ul>
      <li>チームのROIを最大化させる（ビジネスのROIではないということに注意）</li>
    </ul>
  </li>
  <li><strong>スクラムマスター</strong>
    <ul>
      <li>開発が Scrum と呼べる状態にする</li>
      <li><strong>スクラムじゃない方法を提案するのもまた、スクラムマスターの役割</strong></li>
    </ul>
  </li>
  <li><strong>チーム</strong></li>
</ol>

<p><strong>7人±2人</strong> が１つのスクラムチームを構成するのがのぞましいとされています。</p>

<h3 id="スクラムの5つのセレモニー">スクラムの5つのセレモニー</h3>

<ol>
  <li><strong>Sprint Planning – スプリント計画</strong>
    <ul>
      <li>短期計画</li>
      <li>何を実現しようとしているのかを明確に</li>
      <li>どの順番（優先順位）で開発を進めるのか</li>
    </ul>
  </li>
  <li><strong>Daily Scrum – デイリースクラム/朝会（朝じゃなくてもよい）</strong>
    <ul>
      <li>15分間</li>
      <li>毎日の学習を共有</li>
      <li>議論は行わない</li>
    </ul>
  </li>
  <li><strong>Product Backlog Refinement – プロダクトバックログ見直し</strong>
    <ul>
      <li>中長期計画（現在のスプリントは含まれないことに注意）</li>
      <li>スプリントの5-10%使って見直しを行う</li>
    </ul>
  </li>
  <li><strong>Sprint Review – スプリントレビュー</strong>
    <ul>
      <li>動くプロダクト・ドキュメントで成果を確認する</li>
      <li>プロダクト触ってもっとプロダクトを良くする</li>
    </ul>
  </li>
  <li><strong>Sprint Retrospective – スプリントレトロスペクティブ/振り返り</strong>
    <ul>
      <li>チームが生産性を高めるために取らなきゃいけないアクションを1つ以上決める</li>
    </ul>
  </li>
</ol>

<p><img src="/images/posts/scrum/scrum2.jpeg" alt="scrum sprint" /></p>

<h3 id="アーチファクト">アーチファクト</h3>

<p>アーティファクト、成果物とでも訳しましょうか。下記４つがそれにあたります。</p>

<ol>
  <li><strong>スプリントバックログ</strong></li>
  <li><strong>プロダクトバックログ</strong></li>
  <li><strong>Impediment List</strong> - 障害リスト</li>
  <li><strong>Acceptance Criteria</strong> - 受け入れ条件</li>
</ol>

<h3 id="その他">その他</h3>

<ul>
  <li><strong>Sprint</strong> - スプリント</li>
  <li><strong>Sprint Stop</strong> - スプリント停止</li>
  <li><strong>DONE</strong> - 製品が完了する</li>
  <li><strong>Potentially shippable product increment</strong> – 出荷可能な製品をリリースする</li>
</ul>

<h2 id="スクラムが適さないシーン">スクラムが適さないシーン</h2>

<ul>
  <li>プロダクトの生産期間が短い
    <ul>
      <li>例) 2ヶ月で終わってしまうプロジェクト</li>
      <li>スクラムはチームビルディングで最低３ヶ月かかる。そしてその３ヶ月を反復してチームを改善させていく。つまり３ヶ月以内のプロジェクトでスクラムを行うのは難しい（やれなくもないが）</li>
    </ul>
  </li>
  <li>要件・技術が単純なプロダクト
    <ul>
      <li>スクラムは要件・技術的要素が複雑な場合に適したアプローチ</li>
    </ul>
  </li>
</ul>

<h2 id="自律的なチームとは">自律的なチームとは</h2>

<ol>
  <li>チームの明確なゴールがある</li>
  <li>チームの明確なバウンダリー（境界線）がある</li>
</ol>

<p>「自律的なチームかどうかの判断基準は何？」への回答は「<strong>個人がチームのゴールを達成するために何をすべきか0.1秒以内に判別し行動できる</strong>」といえます。</p>

<h2 id="見積もり方法">見積もり方法</h2>

<ol>
  <li><strong>相対見積もり</strong>
    <ul>
      <li>一番簡単なタスクのポイントが1だとしてそれに対する相対的な見積もり</li>
      <li>プロダクトバックログアイテムはこちらの見積もり方法が適している</li>
    </ul>
  </li>
  <li><strong>絶対見積もり</strong>
    <ul>
      <li>xx時間とかの見積もり</li>
      <li>スプリントバックログアイテムにはこちらの方法が適している</li>
      <li>1スプリントバックログアイテムが0.5時間〜1時間になるのが理想的な状態</li>
    </ul>
  </li>
</ol>

<p>ここで重要なポイントとしては <strong>スクラムマスターは絶対に計画せずにチームが進むことを許容してはいけません</strong> 。スクラムをやるなら <strong>徹底的に計画してください。妥協は許されません</strong> ここがスクラムをやる上でのチームが持たなければならない＜覚悟＞となります。逆に言うとこの覚悟が持てないならスクラムをやるべきではありません。</p>

<h2 id="done">DONE</h2>

<p>DONEはDefinition of doneのことです。そしてDefinition of doneには doneとundoneの２つが含まれます。</p>

<p>どういうことでしょうか。例えば「ログイン機能を作る」というタスクを考えてみましょう。ログイン機能のDONEとして何をイメージするでしょうか？「フォームに正しい値を入力して正しくログインできること」「間違った値を入力してログインできないこと」「変な値でバリデーションエラーメッセージがでること」などが簡単に思い浮かぶと思います。</p>

<p>ではそれで本当にログイン機能はDONEと言えるのでしょうか。違います、DONEにはログイン機能の単体テストやその結合テスト、さらにはセキュリティテスト、負荷テスト、またはその機能のドキュメンテーションも全て含まれてのDONEです。そしてDONEにはそれで完了しているdoneとそれで完了しなかった、例えばこのケースで言うと「テストは後でかこう」「セキュリティ試験は全ての機能が完成してから実施」などのundoneも含まれています。</p>

<p>このundoneが後回しになって積み上がった状態がプロジェクトの炎上状態であり、スクラムとして不健全な状態といえます。健全なスクラムは１スプリント毎にこのundoneを着実に消化していきます。</p>

<h2 id="プロダクトバックログの書き方">プロダクトバックログの書き方</h2>

<p>研修ではユーザーストーリーとAcceptance Criteriaの２つを書いて１つのプロダクトバックログアイテムとしました。</p>

<ul>
  <li><strong>ユーザーストーリー</strong>: {who}として {what}がほしい なぜなら{why}だから</li>
  <li><strong>Acceptance Criteria</strong>: 受け入れ条件 ユーザーストーリーが達成できたといえる <strong>誰が見てもわかる明確な条件</strong></li>
</ul>

<h2 id="ベロシティ">ベロシティ</h2>

<p>これらのプロダクトバックログアイテムに対して先ほどの見積もりのポイントを付けていきます。そして <strong>1スプリント中にチームが消化できるポイント数のことをベロシティ</strong> といいます。</p>

<p>このベロシティは安定させるべきです。もしベロシティが安定していないのならばそれはポイントの付け方が間違っているか、チームに何かしら問題がある可能性が高いです。</p>

<h2 id="スクラムが成功している状態とは">スクラムが成功している状態とは？</h2>

<p>スクラムチームとして <strong>3ヶ月で46%生産性が向上している状態</strong> がスクラムが成功している状態です。じゃあ46%向上している状態とはどう測ったらよいかというと、スクラム講師曰く、先ほど言及したundoneが3ヶ月というスパンで1つでも消化できていれば46%生産性が上がったと言っていいとのことでした。</p>

<p>しかしこれは非常に難しいことで、どんなに成功しているスクラムチームでも1年に1回でもそれが達成できていればうまくできているほうだとのことでした。</p>

<h2 id="スクラムマスター役割スキル">スクラムマスター役割・スキル</h2>

<ul>
  <li><strong>状況分析</strong>: シチュエーショニング</li>
  <li><strong>ティーチング</strong></li>
  <li><strong>ファシリテーティング</strong></li>
  <li><strong>メンタリング</strong></li>
  <li><strong>コーチング</strong></li>
</ul>

<p>そしてスクラムマスターはこれらの行為をやるだけで満足してはいけません。やった上で <strong>結果が出ないと意味がありません。</strong> つまりティーチングをやったからスクラムマスターの役割を果たしたとはいえず、ティーチングをやった結果、それを受けた者の行動が変わることも含めてスクラムマスターの役割ということです。</p>

<p>「謙虚さ」と同時に「屈強さ」がスクラムマスターには必要です。</p>

<h2 id="受講してみての感想">受講してみての感想</h2>

<p>今回のスクラムマスター研修では「スクラムとは何か」を原理的な立場から学びました。</p>

<p>受講してわかったことは世の開発現場には似非スクラムが溢れているなーってことでした。スプリント回しているからスクラムですとか、カンバンでタスク管理して朝会やってスクラムですとか、リソース足りないのでうちは開発チームメンバーとスクラムマスターをの２つのロールを兼任してますとか…。</p>

<p>スクラムの基本原則から言うと役割の兼任はNGですし、スクラムは具体的なタスク管理手法は規定していないのでカンバンでやろうとJIRAでやろうとGithub Issueでやろうとそれはスクラムの原理原則とは関係ありません。</p>

<p>朝会以外にもスクラムの大事なセレモニーはあって必ずそれらはスキップしてはいけないものとなってます。スプリントを回すにしても、ちゃんとそのスプリントは計画とあっていたのかとか、ちゃんと受け入れ条件をクリアする品質でスプリントの成果物が上がってるかとか、スプリント間に差し込みタスクがなかったかとかいろいろやらなきゃいけないことや考えることはあります。</p>

<p>そして感じたこととしては、スタートアップのアーリーフェーズだとなかなか原理的な意味でのスクラムは難しいのではということでした。スクラムやりたくともリソースが全然足りないのでスクラムマスター、プロダクトオーナーはそもそも置けないとか、スクラムのロールを兼任せざるを得ないとか。</p>

<p>またアーリーフェーズだと人の出入り（特に新しいメンバーを迎えるケース）も激しいと思うのでそうなるとスクラムチームは再度チームビルディングからやり直さなければなりません（このチームビルディングで1 Sprintは消費すると言われています）。</p>

<p>なのでこういった開発現場で出来ることとしてはスクラムのフレームワークの中で良いと思うもの、有効だと思うものを選択して組織に有効な＜スクラムエッセンスを取り入れた開発＞を実践することではないでしょうか。</p>

<p>一方で上記に書いたように「スクラムじゃない別の方法を提案するのもスクラムマスターの役割」と書きました。なのでスクラムにこだわる必要は全然なくて、スクラムがチームにマッチしないと思うならスクラムマスターは別の手法を提案できなきゃダメです。例えばそれがウォーターフォールでもいいしDDDでもいいしリーンスタートアップだっていいのです。</p>

<p>そういう意味でスクラムマスターは(おそらく皆が)思っている以上にその役割を全うすることが難しいものだと感じました。</p>

<h2 id="参考になりそうな他の人の体験記">参考になりそうな他の人の体験記</h2>

<p>スクラムマスター研修に行かれた他の方の体験記を紹介します。</p>

<ul>
  <li><a href="http://makopi23.blog.fc2.com/blog-entry-155.html">makopi23のブログ 認定スクラムマスター研修（CSM）を振り返る</a></li>
  <li><a href="http://qiita.com/kara_i/items/fab490c08bb467d2c842">認定スクラムマスター研修のメモ書き - Qiita</a></li>
  <li><a href="https://www.slideshare.net/yangiYa/csm2014-1114">認定スクラムマスター研修に行ってきました</a></li>
</ul>

<h2 id="こちらも参考にどうぞ">こちらも参考にどうぞ</h2>

<ul>
  <li><a href="https://www.scrumguides.org/download.html">公式スクラムガイド</a> Japanese を選択してもらえれば日本語バージョンが閲覧できます</li>
  <li><a href="https://www.slideshare.net/zaruhiroyukisakuraba/ss-77861697">スクラム導入に向けて：スクラムは救世主となるのか？</a></li>
  <li><a href="http://www.ryuzee.com/contents/blog/7120">スクラムプロジェクト開始のベストプラクティス | Ryuzee.com</a></li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="scrum" /><category term="management" /><category term="tech" /><summary type="html"><![CDATA[昨年末にスクラムマスター研修を受けてきて、認定スクラムマスター (CSM)となりました。スクラムマスター研修で学んだこととして社内で共有した内容を本ブログでも共有してみようと思います。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/scrum/scrum.jpg" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/scrum/scrum.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>