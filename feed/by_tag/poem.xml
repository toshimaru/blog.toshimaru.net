<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="https://blog.toshimaru.net/feed/by_tag/poem.xml" rel="self" type="application/atom+xml" /><link href="https://blog.toshimaru.net/" rel="alternate" type="text/html" /><updated>2023-04-30T22:43:10+09:00</updated><id>https://blog.toshimaru.net/feed/by_tag/poem.xml</id><title type="html">Hack Your Design!</title><subtitle>toshimaruの技術系なブログ</subtitle><author><name>Toshimaru</name></author><entry><title type="html">技術者としてスポンジであり続けること　あるいは老害回避戦略の話</title><link href="https://blog.toshimaru.net/like-a-sponge-as-an-engineer/" rel="alternate" type="text/html" title="技術者としてスポンジであり続けること　あるいは老害回避戦略の話" /><published>2017-12-04T00:00:00+09:00</published><updated>2018-08-31T00:00:00+09:00</updated><id>https://blog.toshimaru.net/like-a-sponge-as-an-engineer</id><content type="html" xml:base="https://blog.toshimaru.net/like-a-sponge-as-an-engineer/"><![CDATA[<h2 id="エンジニアリングとは常に学習し続けることである">エンジニアリングとは常に学習し続けることである</h2>

<p>エンジニアリングとは常に学習し続けることである。僕がWeb技術者として生計を立てる上で大切にしているモットーだ。</p>

<p>ドッグイヤーな変化の激しいIT業界、変化に取り残されないためには常に学習が必要だ。今僕たちがデファクト・スタンダートとしている技術は一年後もスタンダートであり続けるだろうか？　一年くらいなら大丈夫？　じゃあ三年後は？　五年後は？ 十年後はどうだろう？ 自信をもって技術トレンドは今と変わっていないと言えるだろうか。</p>

<h2 id="変化する技術トレンド">変化する技術トレンド</h2>

<p>Web業界の技術トレンド変化を見るにしてもその変化が激しいことは明らかだ。古くは掲示板を動かしていたPerl CGIの時代から、最強のPHP製CMS・Wordpress、継続的にバージョンアップを重ね進化を続けるWebアプリケーションフレームワーク・Ruby on Rails…。近年だとサーバーサイドJavaScirpt・Node.js、Erlang VM上で動くRubyライクなシンタックスを持つElixir、Twitterでも運用実績を持つScala、Googleが作った爆速言語Go、Mozillaの開発したRustなどもよく聞く。お硬い感じなところだとJavaのSpring Frameworkであったり（最近はKotlin対応もしたと聞く）オープンソース化もされているMicrosoftの.NETなど。</p>

<p>サーバーサイド技術だけじゃなく、フロントエンド技術の変化も大きい。HTMLはHTML5になり、CSSはCSS3になってWebでリッチな表現が可能になった。貧弱な言語であったJavaScriptはES6(ES2015),ES7(ES2016)へと進化し言語として洗練されてきている（Bebelなどのトランスパイラーの進化の力も大きい）。便利な関数群を多く含みブラウザ間の挙動の差異を吸収してくれるjQueryはそこそこ長い間フロントエンドのデファクト・ライブラリだったが、フロントエンドコードの複雑化・巨大化に伴いその座をReactやAngularへと譲りつつある（React/Angularにたどり着くまでの紆余曲折はここでは省略）。</p>

<p>開発ワークフローもずいぶん進化した。開発者にとって一番大きかったのはGitHubの台頭だ。OSSを加速度的に推し進めエンジニアリング業界にソーシャルコーディングという概念を普及させた。これによりVCSはGitを利用しRemoteにはGithub（あるいはGithubライクなプロダクト）を使うのが当たり前となった。</p>

<p>テストももちろん書く。テストを書くと次はCIがしたくなる。Jenkins？ 今ならTravisCI、CircleCIなどのCIサービス使ったほうが良さそうだ。</p>

<p>アプリケーションのデプロイ先となるインフラはどうだ。オンプレ？ いや、今はクラウドの時代だ。IaaS業者ならAWS（Amazon Web Service）か。いや、GCP（Google Cloud Platform）も最近頑張っているようだ。そこまでインフラ面倒見る余裕なんてない？ならばHerokuなどのPaaSを選択することもできる。</p>

<p>モバイルアプリ開発はどうだろう？ iOS？ Objective-Cじゃなくて今はSwiftなんだっけ。Android？ 古き良きJava…ではなく最近はKotlinで書けるらしい。最近はReact Nativeという技術もあるらしい。Reactに慣れたWeb開発者にとって取っ付きやすそうだ。</p>

<h2 id="我々は学習し続けられるか">我々は学習し続けられるか？</h2>

<p>Web技術に限定してザッと思いつくだけ列挙してもこれだけあるのだ。これでもなお「１つの技術だけで今後も戦い続けることができる！」と自信を持って言えるだろうか。</p>

<p>あなたは言う。いいや、俺はこの技術一筋で勝負するんだ！なるほど、けっこうけっこう。あなたが変わらなくても世界は変わる。世界はあなたを待ってはくれない<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>。</p>

<p>学習を止めた時から変化の波に取り残され、気付いた頃にはもう手遅れ…、そんな事態は避けなければならない。</p>

<p>では問おう。<strong>我々は学習し続けられるのか？</strong></p>

<h2 id="学習の壁">学習の壁</h2>

<p>我々に立ちはだかる学習の壁。この学習の壁を乗り越える続けることは難しい。</p>

<p>そしてこれは歳を重ねれば重ねるほどに難しくなっていく。一般的に記憶力や集中力は年齢とともに衰えていくと言われるからだ<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup>。</p>

<p>一方で学習能力は年齢とは関係ないとする説もある<sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">3</a></sup>。記憶力そのものに年齢は関係なく、老化とともに記憶力が低下したと感じる理由は＜学習意欲の低下＞に起因しているとする説だ。</p>

<p>僕の考えとしては前者の説も後者の説もどちらも支持したい。我々の学習能力は年齢とともに衰えていくし、学習意欲もまた年齢とともに低下する。</p>

<h2 id="スポンジであるということ">スポンジであるということ</h2>

<p>では我々はこれにどう抗ったらよいだろうか？　</p>

<p>前者の年齢とともに不可避的に衰える能力は仕方がないにせよ、せめて後者の学習意欲は高く保ち続けようではないか。新しいものを進んで吸収できるスポンジであろう。弾力を失ってはいけない。柔軟にしなやかであろう。硬直化する脳に抗おう。</p>

<p>スポンジであるということ。これによって学習という困難も楽しみとして享受できるようになるのではないだろうか。</p>

<h2 id="老害になってはいないか">老害になってはいないか</h2>

<p>学習し続ける姿勢、これは老害化するのを防ぐ上でも大切な心がけだと思う。</p>

<p>そもそも老害とはどういう人なのか？ 僕が思う老害とは下記の通りだ。</p>

<p>老害とは自分の過去の栄光や成功体験を元にして、自分の価値観ややり方を周囲（主に若者がターゲットにされやすい）に押し付けるような人のこと。その結果、チーム/個人のパフォーマンスを低下させる。</p>

<p>こういうタイプの人は過去の成功を根拠としてロジックを展開するので、その成功が現代では通用しない時代錯誤なものであったとしても気にせず押し通そうとする。そして新しいことに関しては「よくわからない」などと言って斬り捨てる。</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">「老害になる」というのは、ほんとうは「歳を取ると感覚がオッサンになる」ということではなくて、「どこかのタイミングから思考を停止し始めて、じぶんの価値観のアップデートをサボり続けたせいで、じぶんの感覚がその時代に合わなくなる」ことを言うんですよね。老害とは、変化をやめたひとを言う。</p>&mdash; プロ奢ラレヤー🍣 (@taichinakaj) <a href="https://twitter.com/taichinakaj/status/1030945286917693442?ref_src=twsrc%5Etfw">August 18, 2018</a></blockquote>

<p>そんな老害にはなりたくないと思う。きっとこの文章を読んでいるあなたもそうだろう。だがあなたは <strong>自分が老害になっていないとハッキリ言えるだろうか？</strong></p>

<p>一般的に、歳を取ると価値観は固まっていき保守的になってゆく。あなたは自分の気づかないレベルで無意識に新しいことを拒絶していないだろうか。自分の考えを無意識に他者に押し付けてはいないだろうか。職場で気づいたら老害になってはいないだろうか。</p>

<iframe src="//www.slideshare.net/slideshow/embed_code/key/NWNwslJEgKFtkr" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen=""> </iframe>
<div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/sasakipochi/ss-51445100" title="老害について" target="_blank">老害について</a> </strong> from <strong><a href="https://www.slideshare.net/sasakipochi" target="_blank">Ken SASAKI</a></strong> </div>

<p>:point_up: <strong>老害について簡潔にまとまっている資料</strong></p>

<h2 id="老害回避戦略">老害回避戦略</h2>

<p>エンジニアとして老害にならないための僕なりの老害回避戦略を考えてみたのでまとめてみる。</p>

<h3 id="マサカリを投げるな">マサカリを投げるな</h3>

<p>技術的な厳しい指摘をよく「マサカリを投げる」と表現したりするが<sup id="fnref:4" role="doc-noteref"><a href="#fn:4" class="footnote" rel="footnote">4</a></sup>、マサカリを投げるのは止めよう。</p>

<p>そのマサカリが本当に意味のあるものか今一度考えてみよう。あなたの飛ばしたマサカリは周囲を萎縮させチームの空気を悪くしパフォーマンスを下げている可能性が高い。</p>

<p>あなたがどんなに優れたエンジニアだとしてもそれをマサカリという形で誇示する必要は無い。あなたの優秀さはマサカリではなくコードで示せるはずだ。</p>

<p>剣ではなく弁を。攻撃ではなく教育を。</p>

<h3 id="技術に素直でいよう">技術に素直でいよう</h3>

<p>コンピュータの内部が0か1のバイナリで構成されているの同様に、プログラミングという行為も0か1のように正誤がハッキリするものが多いように感じる。</p>

<p>バグがある挙動、バグが無い挙動であればバグが無い挙動が正しいし、速いコードと遅いコードであれば速いコードが良いし、DRYなコード、そうじゃないコードがあればDRYなコードを選択すべきだし、テストがないコードよりもテストがあるコードが信頼性は高い。</p>

<p>老害であれば技術的正しさを無視して自説を展開するかもしれないが、それではダメだ。常に技術的に正しい世界を目指そう。技術にたいして素直でいよう。</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">個人開発は遊びでいいけど仕事における開発は遊びじゃない。技術的/仕様的正しさは常に追求すべきだしデータ的正しさは検証すべきだしプログラムにはバグが無いように（テストコード書くなどして）努力すべきだし自分のコードにはオーナーシップを持つべきだ。</p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/995968055342649344?ref_src=twsrc%5Etfw">May 14, 2018</a></blockquote>

<p>僕たちが持っている知識は変化する技術の流れの中で明日には変わっているかもしれない。今に凝り固まるのではなく、常に技術的正しさを求めて学習しよう。</p>

<h3 id="フラットでいよう">フラットでいよう</h3>

<p>GitHubのOSSコミュニティで人種・性別・年齢関係なくコラボレーションするように、我々も技術の文脈においてフラットなコミュニケーションを目指そう。</p>

<p>この世界、どんなに自分より歳をとっていてもかなわないなというエンジニアもいるし、逆に自分よりずっと若くても優秀なエンジニアはたくさんいる。「俺の方が人生経験が長いから」「私の方が年齢が高いから」という理由では奢れない（もしそんな理由でエラそうにしているのであればそれは老害だ）。</p>

<p>実際のところ、先輩後輩・上下関係を重んじる日本社会においてこれを実現するのは容易ではないわけだが、技術コミュニケーションにおいてできるだけフラットなコミュニケーションを心がけよう。この姿勢は前述の<技術に素直でいる>ことにも繋がることだと思う。</技術に素直でいる></p>

<h3 id="次の世代を育てる">次の世代を育てる</h3>

<p>老害でないということは同時に若手とうまく付き合うということでもある。今まで述べてきたような老害的な態度を取らなければ、若手が伸び伸びと働ける職場環境にできるのではないだろうか。</p>

<p>次の世代を育てよう。そして彼らが伸び伸びと活躍できるような雰囲気作りを目指そう。</p>

<p>こんなことを言うとたまに「若手に自分のポジションを脅かせれる」「自分の仕事が奪われる」と言って拒否反応を示す人をたまに見かける。その考え方も分からなくはないが、僕はそれは自己保身的で一面的な考え方だと感じる。</p>

<p>次の世代を育てることで得られるメリットは数多くあると思う。</p>

<ul>
  <li>次の世代を育てる過程で自分も育つ: 育てている過程の中で自分もちゃんと理解できていなかった部分が理解できるようになったり、自分の理解が深まる</li>
  <li>次の世代が育つことでチームひいては会社の生産性が高まり自分自身の仕事が相対的に減る</li>
  <li>次の世代が育つと自分一人ではできなかったことが出来るようになるかもしれない: 切磋琢磨出来る仲間が増えるとチームとしてもう一段上のレベルへと上がり、一人では思いつかなかったアイディアやソリューションが発案されるかもしれない</li>
</ul>

<p>自分の立場ばかり考える保身的な老害にはならないようにしよう。どんどん次の世代を育てていき、次の世代とともにステップアップを目指そう。</p>

<h2 id="35歳定年説の嘘">「35歳定年説」の嘘</h2>

<p><a href="https://tech-camp.in/note/engineer/30204/">35歳定年説</a>的な言説を技術界隈で聞くことがある。</p>

<p>この35歳の35の数字の部分は38でも40でもなんだって良いのだが、僕は基本的にこのn歳定年説は間違っていると思う。</p>

<p>これを反証することは簡単で、40歳でバリバリ現役でコードを書き続けている技術者を見つければ良い。僕は40歳でバリバリ前線で頑張っている技術者を知っている。なのでこの説は間違っているとハッキリ言える。</p>

<p>思うに、<strong>コードを書かず学習意欲を失ってしまった35歳のおじさんたちが自分がコードが書けないこと・学ばないことの言い訳として言い出し始めたのがこの「35歳定年説」の真実じゃないだろうか。</strong> 20歳の技術者は35歳定年説なんて言い出さない。それを言い出すのは35を過ぎて自身のパフォーマンスが出なくなったと感じている技術者たちだけだ。もし本当にそんな理由で言っているのであればハッキリ言ってダサすぎだと思う。</p>

<p>年齢を言い訳にするのは止めよう。学習するのに遅すぎるなんてことはないはずだ。</p>

<blockquote>
  <p>You’re never too old to learn</p>
</blockquote>

<h2 id="最後に">最後に</h2>

<p>この文章は僕自身が若手とは言えない年齢となり今後シニアな立場へとなっていく中で「自分は老害化していくのではないか」という危機感から自戒も込めて書いたものである。願わくば五年後十年後自分がここに書いたような老害になっていないことを祈る。</p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>もちろん１つのことに特化して高度な専門性を武器に戦っている技術者もいる。しかしトレンドは常に追っているべきだ。なぜならブレークスルーが起こってその技術が死んだときに自分の食い扶持がなくなるからだ（それでもすぐにその技術がなくなるわけではないのでその技術を使う古い現場で細々と食い扶持を得るのも戦略としてありえるが）。 <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p><a href="https://www.businessinsider.jp/post-100550">集中力は43歳！ 人間の脳のピーク年齢は、能力ごとに違っていた | BUSINESS INSIDER JAPAN</a> <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:3" role="doc-endnote">
      <p><a href="http://www.fukuishimbun.co.jp/articles/-/62618">「加齢で記憶力が低下」は誤解 知能も低下せず、問題は前頭葉老化 | 東洋経済ONLINE | 福井新聞ONLINE</a> <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:4" role="doc-endnote">
      <p><a href="https://qiita.com/kaityo256/items/d7d8f7a0e522895c8f5d">マサカリの起源について - Qiita</a> <a href="#fnref:4" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Toshimaru</name></author><category term="poem" /><category term="tech" /><summary type="html"><![CDATA[エンジニアリングとは常に学習し続けることである。僕がWeb技術者として生計を立てる上で大切にしているモットーだ。 ドッグイヤーな変化の激しいIT業界、変化に取り残されないためには常に学習が必要だ。今僕たちがデファクト・スタンダートとしている技術は一年後もスタンダートであり続けるだろうか？　一年くらいなら大丈夫？　じゃあ三年後は？　五年後は？ 十年後はどうだろう？ 自信をもって技術トレンドは今と変わっていないと言えるだろうか。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/book/books.jpeg" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/book/books.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">光へ</title><link href="https://blog.toshimaru.net/hikari-e/" rel="alternate" type="text/html" title="光へ" /><published>2014-12-03T00:00:00+09:00</published><updated>2014-12-03T00:00:00+09:00</updated><id>https://blog.toshimaru.net/hikari-e</id><content type="html" xml:base="https://blog.toshimaru.net/hikari-e/"><![CDATA[<p>タカキは恐れていた。自分は開発者として一人前であるのか。現時点の自分のスキルセットは市場価値があるのか。開発者としての成長は止まっていないか。技術トレンドに取り残されていないか。自分の生産性に見合う対価は支払われているか。</p>

<p>ITエンジニアとはほとほと難しい職業だ。終わりがない。何か１つ技術を身につけたとしてもその技術は５年後、１０年後にはもう枯れている技術かもしれない（多くの場合、五年も経てば技術は陳腐化してしまうだろう）。最新の流行りの技術を勉強し身に付けたとしても技術潮流が大きく変わって使われなくなることだってすらある。</p>

<p>それゆえエンジニアは面白い職業でもある。日々変化する技術にキャッチアップし、その変化を楽しむこと。変化の流れに身を委ねる。他の産業にはない流れの速さだ。取り残されないようにうまく流れに乗る。進歩、進歩。学習、学習。吸収、吸収。毛刈り、毛刈り。おっと、いつのまにかYak Shavingしていた。</p>

<p>★</p>

<p>タカキがエンジニア志望したのには深い理由はなかった。ゴミのような「文系ライフ」を謳歌していたと思っていたらあっという間にいざ就活、周囲が一様に同じような黒い服を身にまとい、明るかった髪色が均一化した。</p>

<p>「お前志望企業どうすんの？」　友人の問いにタカキは答えられなかったが、その晩テレビでやっていた討論番組でどこかのIT社長が「これからはITの時代だ」「受験勉強で役に立たない知識を学ぶよりプログラミングを学ぶべきだ」という要旨のことを言ってたのをビールを片手に聞きIT開発者を目指すことを彼は決めた。子供の頃からコンピュータで遊ぶのが好きだった彼にとっては悪くない選択だった（とはいえやっていたのはもっぱらネットとゲームだ）。</p>

<p>そうしてタカキが新卒で入った会社は某大手ITベンダーの下請けSIだった。就職氷河期の中、Dラン大学・文系出身・プログラミングすらまともにやったことの無いタカキに開発者としての内定を出した稀有な会社だ。大手企業の選考は壊滅的、無い内定状態のタカキは他に選択肢もなく入社を決めた。</p>

<p>その会社（仮にK社としよう）はマイクロソフト技術ベースの開発を行っていた。.NET Framework, Microsoft SQL Server, Windows Server, Visual Basic, 誰が作ったかわからない社内フレームワーク…。</p>

<p>今でこそ「アレは掃き溜めのような環境だった」とタカキは言えるが当時の彼には何もわからなかった。無理もない、開発者として右も左もわからない状況だったのだ。良い悪いなんて価値判断もできるわけがない。当時の彼にはK社こそが＜世界の中心＞だった。</p>

<p>開発者として働き始めてITニュースチェックは毎朝欠かさずに行うようになった。するとK社では使われていない技術用語を目にすることが明らかに多かった。Ruby on Rails, Angular.js, AWS, Git, Github, Node.js, HTML5, CI, RESTful, アジャイル, Docker, Go…。タカキはふと気づく「ここは＜世界の中心＞なんかじゃない。世界の片隅、しかもすごく小さい辺境の地だ。」と。</p>

<p>そこからタカキが世界の広さを知るまでは時間はそうかからなかった。まずはTwitterでIT界隈で有名な人を片っ端からフォローした。彼らの共有している記事は欠かさずチェックし、彼らが呟いているワードから彼らがどんな技術に注目しているのかを把握した。次に興味を持った技術分野の勉強会にも顔を出し、その分野のエンジニアたちと交流を行った。</p>

<p>気づくとタカキの技術力は社内の先輩より高くなっていた。最初は単純な疑問だった。「なぜこの人はこんなふうにわざわざ汚いコードを書くのだろう？」それが日々の積み重ねで不満へとだんだん変わっていった。「なぜこの人はなんでこんなクソコードを書くのだ？」「どうして汎用的に使えるようなクラスを作らない？」「どうしてシステムを疎結合に設計しない？」「どうして品質を高めるためにテストを書かない？」「どうしてオープンソースの自社フレームワークなんかよりずっとずっと優れたフレームワークを使わない？」どうして。どうして。どうして。　(そして驚くべきことに彼らはタカキの１．５倍から２倍以上の給料をもらっている)</p>

<p>ある日、タカキは当時かかわっていたプロジェクトの開発マネージャーに進言したことがあった。「このコードの作りは使う側から見て少し使いにくいのでこのように変更しませんか？」　タカキの言葉にマネージャーはこのような要旨のことを返した。「開発経験が浅い若造のお前に何がわかる。俺が設計したコードに口出しするな」</p>

<p>タカキはK社を去ることを決意した。</p>

<p>★</p>

<p>新しい環境ではかつてはタカキの世界の外にあった技術が目の前にあった。Ruby on Rails, CI, AWS, Github, Go…。不条理なことを言う「ビッグ・ブラザー」たちはもう居ない。今ではリトル・ピープルとして仲間とともにタカキは楽しく働いている。</p>

<p>かつての＜世界の中心＞はもう世界の中心ではなくなった。今ではブラウザの検索窓ごしに世界が観える。</p>

<p>「ハロー、ワールド。」</p>

<p>タカキは呟いた。</p>

<p><span style="color:#eee">Where there’s a will, there’s a way.</span></p>

<p><strong>※この話はフィクションです。</strong></p>

<hr />

<p><a href="http://www.adventar.org/calendars/628">闇 Advent Calendar 2014</a></p>]]></content><author><name>Toshimaru</name></author><category term="poem" /><summary type="html"><![CDATA[タカキは恐れていた。自分は開発者として一人前であるのか。現時点の自分のスキルセットは市場価値があるのか。開発者としての成長は止まっていないか。技術トレンドに取り残されていないか。自分の生産性に見合う対価は支払われているか。]]></summary></entry></feed>