<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://blog.toshimaru.net/feed/by_tag/ruby.xml" rel="self" type="application/atom+xml" /><link href="https://blog.toshimaru.net/" rel="alternate" type="text/html" /><updated>2022-06-22T10:09:46+09:00</updated><id>https://blog.toshimaru.net/feed/by_tag/ruby.xml</id><title type="html">Hack Your Design!</title><subtitle>toshimaruの技術系なブログ</subtitle><author><name>Toshimaru</name></author><entry><title type="html">Gemfile.lock 内の特定バージョンgemをインストールする bgem コマンド作った</title><link href="https://blog.toshimaru.net/rubygems-bundled-gems/" rel="alternate" type="text/html" title="Gemfile.lock 内の特定バージョンgemをインストールする bgem コマンド作った" /><published>2021-02-28T00:00:00+09:00</published><updated>2021-02-28T00:00:00+09:00</updated><id>https://blog.toshimaru.net/rubygems-bundled-gems</id><content type="html" xml:base="https://blog.toshimaru.net/rubygems-bundled-gems/"><![CDATA[<p><code class="language-plaintext highlighter-rouge">Gemfile.lock</code>に記述された特定バージョンのgemを簡単にインストールできる bgem コマンドを作った。</p>

<p>（gem名としては <a href="https://github.com/rubygems/rubygems">rubygems/rubygems</a> にインスパイアされて <code class="language-plaintext highlighter-rouge">bundled_gems</code> とした）</p>

<p><a href="https://github.com/toshimaru/bundled_gems">toshimaru/bundled_gems: Install gem specified in Gemfile.lock without bundle install.</a></p>

<h2 id="モチベーション">モチベーション</h2>

<p>もともとは、GitHub Actionに <a href="https://docs.github.com/en/actions/guides/caching-dependencies-to-speed-up-workflows">cache機能</a>が来る前に作ったもの。</p>

<p>GitHub Action でCIしていた場合、cache機能がないと毎回 <code class="language-plaintext highlighter-rouge">bundle install</code>走らせる必要があり、巨大プロジェクトだとそこがCIにおけるコストになっていた。</p>

<p>また CI で rubocop だけを走らせている、みたいな場合、全てのライブラリのインストールは必要なく、rubocopと一部のライブラリさえあれば十分で、それ以外のライブラリのインストールはいわば無駄なインストールとなっている。</p>

<p>「だったら必要なライブラリだけインストールしてCI走らせりゃいいじゃん」というのが今回のgemの着想。</p>

<h2 id="使い方">使い方</h2>

<h3 id="インストール">インストール</h3>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>gem <span class="nb">install </span>bundled_gems
</code></pre></div></div>

<p>これで <code class="language-plaintext highlighter-rouge">bgem</code> コマンドが利用可能になる。</p>

<h3 id="gemfilelock-内のgemのインストール">Gemfile.lock 内のgemのインストール</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ bgem install gem_name
</code></pre></div></div>

<p>こうすることで <code class="language-plaintext highlighter-rouge">Gemfile.lock</code>内に記載されている <code class="language-plaintext highlighter-rouge">gem_name</code> のバージョンを読み取ってそれをインストールしてくれる（内部的には <code class="language-plaintext highlighter-rouge">gem install gem_name:version</code> を走らせている）。</p>

<p>例としては、<code class="language-plaintext highlighter-rouge">bgem install rubocop</code>とした場合、<code class="language-plaintext highlighter-rouge">Gemfile.lock</code>に記載されているバージョンの <code class="language-plaintext highlighter-rouge">rubocop</code> をインストールする。</p>

<h2 id="課題">課題</h2>

<ul>
  <li>installするgemの子となる依存gemのバージョンまでは解決してくれない点
    <ul>
      <li>このへん実装しようと思っていたら、先にGitHub公式の <a href="https://github.com/actions/cache">actions/cache</a>が来てしまった次第。。。</li>
    </ul>
  </li>
</ul>

<h2 id="special-thanks">Special Thanks</h2>

<p><code class="language-plaintext highlighter-rouge">Gemfile.lock</code> のパースに関しては、<a href="https://github.com/ledsun">@ledsun</a> さんにサンプルをいただきました<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>。ありがとうございました。</p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><a href="https://github.com/ledsun/orgen">ledsun/orgen</a> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Toshimaru</name></author><category term="ruby" /><category term="gem" /><category term="oss" /><summary type="html"><![CDATA[Gemfile.lockに記述された特定バージョンのgemを簡単にインストールできる bgem コマンドを作った。 toshimaru/bundled_gems: Install gem specified in Gemfile.lock without bundle install.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/bgem.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/bgem.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Rubyで数値の0埋め</title><link href="https://blog.toshimaru.net/ruby-0-padding/" rel="alternate" type="text/html" title="Rubyで数値の0埋め" /><published>2020-06-30T00:00:00+09:00</published><updated>2020-06-30T00:00:00+09:00</updated><id>https://blog.toshimaru.net/ruby-0-padding</id><content type="html" xml:base="https://blog.toshimaru.net/ruby-0-padding/"><![CDATA[<p>Rubyで数値の0埋めするときの書き方をよく忘れるのでメモ。</p>

<h2 id="tldr">TL;DR</h2>

<p>結論としては下記のように書くとよい。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">format</span><span class="p">(</span><span class="s2">"number: %09&lt;number&gt;d"</span><span class="p">,</span> <span class="ss">number: </span><span class="mi">1</span><span class="p">)</span> <span class="c1">#=&gt; "number: 000000001"</span>
</code></pre></div></div>

<h2 id="rubyで数値の0埋め">Rubyで数値の0埋め</h2>

<p>Rubyで数値の0埋めしようと思うとこんな感じのコードになる。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sprintf</span><span class="p">(</span><span class="s2">"number: %09d"</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="c1">#=&gt; "number: 000000001"</span>
</code></pre></div></div>

<p><a href="https://docs.ruby-lang.org/ja/latest/doc/print_format.html">sprintf フォーマット</a>はC由来の関数だ。<code class="language-plaintext highlighter-rouge">%09d</code>の意味としては<code class="language-plaintext highlighter-rouge">%d</code>が数値、<code class="language-plaintext highlighter-rouge">09</code>は9桁の0埋めという意味になる。</p>

<p>また、<a href="https://docs.ruby-lang.org/ja/latest/class/String.html#I_--25">String#%</a>を使う方法もある。<code class="language-plaintext highlighter-rouge">sprintf</code>と同じ挙動をする。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s2">"number: %09d"</span> <span class="o">%</span> <span class="mi">1</span> <span class="c1">#=&gt; "number: 000000001"</span>
</code></pre></div></div>

<p>こちらのほうがより簡潔な表記だ。</p>

<h2 id="rubocopのオススメ書き方">RuboCopのオススメ書き方</h2>

<p>上述の書き方でも問題ないのだが、rubocop（デフォルト設定）に通すと下記の通り怒られる。</p>

<h3 id="favor-format-over-sprintf">Favor format over sprintf</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>C: Style/FormatString: Favor format over sprintf.
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">sprintf</code>ではなく<code class="language-plaintext highlighter-rouge">format</code>を使え、と。また <code class="language-plaintext highlighter-rouge">String#%</code> を使った書き方も下記の指摘がくる。</p>

<h3 id="favor-format-over-string">Favor format over String#%</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>C: Style/FormatString: Favor format over String#%.
</code></pre></div></div>

<p>ちなみに<code class="language-plaintext highlighter-rouge">format</code>は<code class="language-plaintext highlighter-rouge">sprintf</code>のエイリアス関数。</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">rb_define_global_function</span><span class="p">(</span><span class="s">"sprintf"</span><span class="p">,</span> <span class="n">f_sprintf</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">);</span>
<span class="n">rb_define_global_function</span><span class="p">(</span><span class="s">"format"</span><span class="p">,</span> <span class="n">f_sprintf</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</code></pre></div></div>

<p>ref. <a href="https://github.com/ruby/ruby/blob/946e5cc668f66a4a0b79461047d3fcba8b71eef0/object.c#L4630-L4631">ruby/object.c at 946e5cc668f66a4a0b79461047d3fcba8b71eef0 · ruby/ruby</a></p>

<p>rubocopの指摘に従って下記のように修正してみる。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">format</span><span class="p">(</span><span class="s2">"number: %09d"</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="c1">#=&gt; "number: 000000001"</span>
</code></pre></div></div>

<h3 id="prefer-annotated-tokens">Prefer annotated tokens</h3>

<p>これでもrubocopに下記のように怒られる。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>C: Style/FormatStringToken: Prefer annotated tokens (like %&lt;foo&gt;s) over unannotated tokens (like %s).
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">&lt;foo&gt;</code>のようなannotated tokenを使って名前を与えてやれ、とのことらしい。</p>

<h2 id="結論">結論</h2>

<p>rubocopの指摘を乗り越えて、最終的には下記で完成です。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">format</span><span class="p">(</span><span class="s2">"number: %09&lt;number&gt;d"</span><span class="p">,</span> <span class="ss">number: </span><span class="mi">1</span><span class="p">)</span> <span class="c1">#=&gt; "number: 000000001"</span>
</code></pre></div></div>]]></content><author><name>Toshimaru</name></author><category term="ruby" /><summary type="html"><![CDATA[Rubyで数値の0埋めするときの書き方をよく忘れるのでメモ。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/ruby/zero-padding.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/ruby/zero-padding.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">[Ruby]日時が特定日時の範囲内にあるかのチェック</title><link href="https://blog.toshimaru.net/datetime-range-check/" rel="alternate" type="text/html" title="[Ruby]日時が特定日時の範囲内にあるかのチェック" /><published>2020-05-17T00:00:00+09:00</published><updated>2020-05-17T00:00:00+09:00</updated><id>https://blog.toshimaru.net/datetime-range-check</id><content type="html" xml:base="https://blog.toshimaru.net/datetime-range-check/"><![CDATA[<h1 id="timewithzonebetween-で範囲内判定">TimeWithZone#between? で範囲内判定</h1>

<p>特定日付が範囲内にあるかの判定を行うには <a href="https://railsdoc.github.io/classes/ActiveSupport/TimeWithZone.html#method-i-between-3F">ActiveSupport::TimeWithZone#between?</a> が使える。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 日時.between?(始端, 終端)</span>
<span class="no">Time</span><span class="p">.</span><span class="nf">now</span><span class="p">.</span><span class="nf">between?</span><span class="p">(</span><span class="no">Date</span><span class="p">.</span><span class="nf">yesterday</span><span class="p">,</span> <span class="no">Date</span><span class="p">.</span><span class="nf">tomorrow</span><span class="p">)</span>
</code></pre></div></div>

<p>実際に範囲内チェックを行うとこんな感じ。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="no">Time</span><span class="p">.</span><span class="nf">now</span><span class="p">.</span><span class="nf">between?</span><span class="p">(</span><span class="no">Date</span><span class="p">.</span><span class="nf">yesterday</span><span class="p">,</span> <span class="no">Date</span><span class="p">.</span><span class="nf">tomorrow</span><span class="p">)</span>
<span class="o">=&gt;</span> <span class="kp">true</span>

<span class="o">&gt;</span> <span class="no">Time</span><span class="p">.</span><span class="nf">now</span><span class="p">.</span><span class="nf">between?</span><span class="p">(</span><span class="mi">1</span><span class="p">.</span><span class="nf">week</span><span class="p">.</span><span class="nf">ago</span><span class="p">,</span> <span class="no">Date</span><span class="p">.</span><span class="nf">yesterday</span><span class="p">)</span>
<span class="o">=&gt;</span> <span class="kp">false</span>

<span class="o">&gt;</span> <span class="no">Time</span><span class="p">.</span><span class="nf">now</span><span class="p">.</span><span class="nf">between?</span><span class="p">(</span><span class="no">Date</span><span class="p">.</span><span class="nf">tomorrow</span><span class="p">,</span> <span class="mi">1</span><span class="p">.</span><span class="nf">week</span><span class="p">.</span><span class="nf">since</span><span class="p">)</span>
<span class="o">=&gt;</span> <span class="kp">false</span>
</code></pre></div></div>

<p>ただ上記の書き方の場合、始端もしくは終端が <code class="language-plaintext highlighter-rouge">nil</code> の場合にエラーが出てしまう。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Date</span><span class="p">.</span><span class="nf">today</span><span class="p">.</span><span class="nf">between?</span><span class="p">(</span><span class="no">Date</span><span class="p">.</span><span class="nf">yesterday</span><span class="p">,</span> <span class="kp">nil</span><span class="p">)</span>
<span class="no">ArgumentError</span><span class="p">:</span> <span class="n">comparison</span> <span class="n">of</span> <span class="no">Date</span> <span class="n">with</span> <span class="kp">nil</span> <span class="n">failed</span>
<span class="n">from</span> <span class="p">(</span><span class="n">pry</span><span class="p">):</span><span class="mi">9</span><span class="ss">:in</span> <span class="sb">`between?`</span>
</code></pre></div></div>

<h2 id="rangecover-で範囲内判定">Range#cover? で範囲内判定</h2>

<p>上述の問題が回避するには、Rubyの <a href="https://docs.ruby-lang.org/ja/2.7.0/method/Range/i/cover=3f.html">Range#cover?</a> が使える。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># (始端..終端).cover? 日時</span>
<span class="o">&gt;</span> <span class="p">(</span><span class="no">Date</span><span class="p">.</span><span class="nf">yesterday</span><span class="o">..</span><span class="no">Date</span><span class="p">.</span><span class="nf">tomorrow</span><span class="p">).</span><span class="nf">cover?</span> <span class="no">Time</span><span class="p">.</span><span class="nf">now</span>
<span class="o">=&gt;</span> <span class="kp">true</span>
</code></pre></div></div>

<h3 id="始端終端が-nil-の場合">始端/終端が nil の場合</h3>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 始端がnil</span>
<span class="o">&gt;</span> <span class="p">(</span><span class="kp">nil</span><span class="o">..</span><span class="no">Date</span><span class="p">.</span><span class="nf">tomorrow</span><span class="p">).</span><span class="nf">cover?</span> <span class="no">Time</span><span class="p">.</span><span class="nf">now</span>
<span class="o">=&gt;</span> <span class="kp">true</span>

<span class="c1"># 終端がnil</span>
<span class="o">&gt;</span> <span class="p">(</span><span class="no">Date</span><span class="p">.</span><span class="nf">yesterday</span><span class="o">..</span><span class="kp">nil</span><span class="p">).</span><span class="nf">cover?</span> <span class="no">Time</span><span class="p">.</span><span class="nf">now</span>
<span class="o">=&gt;</span> <span class="kp">true</span>
</code></pre></div></div>

<p>下記の通り範囲内から外れた場合は <code class="language-plaintext highlighter-rouge">false</code> が帰ってくる。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="p">(</span><span class="kp">nil</span><span class="o">..</span><span class="no">Date</span><span class="p">.</span><span class="nf">yesterday</span><span class="p">).</span><span class="nf">cover?</span> <span class="no">Time</span><span class="p">.</span><span class="nf">now</span>
<span class="o">=&gt;</span> <span class="kp">false</span>
<span class="o">&gt;</span> <span class="p">(</span><span class="no">Date</span><span class="p">.</span><span class="nf">tomorrow</span><span class="o">..</span><span class="kp">nil</span><span class="p">).</span><span class="nf">cover?</span> <span class="no">Time</span><span class="p">.</span><span class="nf">now</span>
<span class="o">=&gt;</span> <span class="kp">false</span>
</code></pre></div></div>]]></content><author><name>Toshimaru</name></author><category term="ruby" /><category term="rails" /><summary type="html"><![CDATA[特定日付が範囲内にあるかの判定を行うには ActiveSupport::TimeWithZone#between? が使える。ただ上記の書き方の場合、始端もしくは終端が nil の場合にエラーが出てしまう。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/ruby-range.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/ruby-range.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">RubyでHashのKey/Valueをソートする</title><link href="https://blog.toshimaru.net/ruby-hash-sort/" rel="alternate" type="text/html" title="RubyでHashのKey/Valueをソートする" /><published>2019-09-03T00:00:00+09:00</published><updated>2019-09-03T00:00:00+09:00</updated><id>https://blog.toshimaru.net/ruby-hash-sort</id><content type="html" xml:base="https://blog.toshimaru.net/ruby-hash-sort/"><![CDATA[<p>RubyでHashのKey/Valueをソートするにはどうしたらよいでしょうか。</p>

<h2 id="ベースとなるhashデータ">ベースとなるHashデータ</h2>

<p>今回ソートの対象となるベースとなるHashデータは下記のとおりです。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="n">h</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">c: </span><span class="o">-</span><span class="mi">10</span><span class="p">,</span> <span class="ss">z: </span><span class="mi">10</span><span class="p">,</span> <span class="ss">b: </span><span class="o">-</span><span class="mi">5</span><span class="p">,</span> <span class="ss">y: </span><span class="mi">5</span><span class="p">,</span> <span class="ss">a: </span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="ss">x: </span><span class="mi">1</span> <span class="p">}</span>
<span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:c</span><span class="o">=&gt;-</span><span class="mi">10</span><span class="p">,</span> <span class="ss">:z</span><span class="o">=&gt;</span><span class="mi">10</span><span class="p">,</span> <span class="ss">:b</span><span class="o">=&gt;-</span><span class="mi">5</span><span class="p">,</span> <span class="ss">:y</span><span class="o">=&gt;</span><span class="mi">5</span><span class="p">,</span> <span class="ss">:a</span><span class="o">=&gt;-</span><span class="mi">1</span><span class="p">,</span> <span class="ss">:x</span><span class="o">=&gt;</span><span class="mi">1</span><span class="p">}</span>
</code></pre></div></div>

<h2 id="hashのkeyをソート">HashのKeyをソート</h2>

<h3 id="hashのkeyを昇順にソート">HashのKeyを昇順にソート</h3>

<p>HashのKeyのソートであれば素直に <code class="language-plaintext highlighter-rouge">sort</code> を呼べばいけます。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="n">h</span><span class="p">.</span><span class="nf">sort</span>
<span class="o">=&gt;</span> <span class="p">[[</span><span class="ss">:a</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="ss">:b</span><span class="p">,</span> <span class="o">-</span><span class="mi">5</span><span class="p">],</span> <span class="p">[</span><span class="ss">:c</span><span class="p">,</span> <span class="o">-</span><span class="mi">10</span><span class="p">],</span> <span class="p">[</span><span class="ss">:x</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="ss">:y</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> <span class="p">[</span><span class="ss">:z</span><span class="p">,</span> <span class="mi">10</span><span class="p">]]</span>
</code></pre></div></div>

<p>ただこのままだとArrayのかたちなので、再びHashに戻すために<code class="language-plaintext highlighter-rouge">to_h</code>を付けてHashに戻してやりましょう。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="n">h</span><span class="p">.</span><span class="nf">sort</span><span class="p">.</span><span class="nf">to_h</span>
<span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:a</span><span class="o">=&gt;-</span><span class="mi">1</span><span class="p">,</span> <span class="ss">:b</span><span class="o">=&gt;-</span><span class="mi">5</span><span class="p">,</span> <span class="ss">:c</span><span class="o">=&gt;-</span><span class="mi">10</span><span class="p">,</span> <span class="ss">:x</span><span class="o">=&gt;</span><span class="mi">1</span><span class="p">,</span> <span class="ss">:y</span><span class="o">=&gt;</span><span class="mi">5</span><span class="p">,</span> <span class="ss">:z</span><span class="o">=&gt;</span><span class="mi">10</span><span class="p">}</span>
</code></pre></div></div>

<h3 id="hashのkeyを降順にソート">HashのKeyを降順にソート</h3>

<p>では次に降順にソートです。<code class="language-plaintext highlighter-rouge">reverse</code>でいけます。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="n">h</span><span class="p">.</span><span class="nf">sort</span><span class="p">.</span><span class="nf">reverse</span>
<span class="o">=&gt;</span> <span class="p">[[</span><span class="ss">:z</span><span class="p">,</span> <span class="mi">10</span><span class="p">],</span> <span class="p">[</span><span class="ss">:y</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> <span class="p">[</span><span class="ss">:x</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="ss">:c</span><span class="p">,</span> <span class="o">-</span><span class="mi">10</span><span class="p">],</span> <span class="p">[</span><span class="ss">:b</span><span class="p">,</span> <span class="o">-</span><span class="mi">5</span><span class="p">],</span> <span class="p">[</span><span class="ss">:a</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">]]</span>

<span class="o">&gt;</span> <span class="n">h</span><span class="p">.</span><span class="nf">sort</span><span class="p">.</span><span class="nf">reverse</span><span class="p">.</span><span class="nf">to_h</span>
<span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:z</span><span class="o">=&gt;</span><span class="mi">10</span><span class="p">,</span> <span class="ss">:y</span><span class="o">=&gt;</span><span class="mi">5</span><span class="p">,</span> <span class="ss">:x</span><span class="o">=&gt;</span><span class="mi">1</span><span class="p">,</span> <span class="ss">:c</span><span class="o">=&gt;-</span><span class="mi">10</span><span class="p">,</span> <span class="ss">:b</span><span class="o">=&gt;-</span><span class="mi">5</span><span class="p">,</span> <span class="ss">:a</span><span class="o">=&gt;-</span><span class="mi">1</span><span class="p">}</span>
</code></pre></div></div>

<h2 id="hashのvalueをソート">HashのValueをソート</h2>

<h3 id="hashのvalueを昇順にソート">HashのValueを昇順にソート</h3>

<p>次にHashのValueはどうでしょうか？ <code class="language-plaintext highlighter-rouge">sort_by</code> を使えばいけます。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="n">h</span><span class="p">.</span><span class="nf">sort_by</span> <span class="p">{</span> <span class="o">|</span><span class="n">_</span><span class="p">,</span> <span class="n">v</span><span class="o">|</span> <span class="n">v</span> <span class="p">}</span>
<span class="o">=&gt;</span> <span class="p">[[</span><span class="ss">:c</span><span class="p">,</span> <span class="o">-</span><span class="mi">10</span><span class="p">],</span> <span class="p">[</span><span class="ss">:b</span><span class="p">,</span> <span class="o">-</span><span class="mi">5</span><span class="p">],</span> <span class="p">[</span><span class="ss">:a</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="ss">:x</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="ss">:y</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> <span class="p">[</span><span class="ss">:z</span><span class="p">,</span> <span class="mi">10</span><span class="p">]]</span>

<span class="o">&gt;</span> <span class="n">h</span><span class="p">.</span><span class="nf">sort_by</span> <span class="p">{</span> <span class="o">|</span><span class="n">_</span><span class="p">,</span> <span class="n">v</span><span class="o">|</span> <span class="n">v</span> <span class="p">}.</span><span class="nf">to_h</span>
<span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:c</span><span class="o">=&gt;-</span><span class="mi">10</span><span class="p">,</span> <span class="ss">:b</span><span class="o">=&gt;-</span><span class="mi">5</span><span class="p">,</span> <span class="ss">:a</span><span class="o">=&gt;-</span><span class="mi">1</span><span class="p">,</span> <span class="ss">:x</span><span class="o">=&gt;</span><span class="mi">1</span><span class="p">,</span> <span class="ss">:y</span><span class="o">=&gt;</span><span class="mi">5</span><span class="p">,</span> <span class="ss">:z</span><span class="o">=&gt;</span><span class="mi">10</span><span class="p">}</span>
</code></pre></div></div>

<h3 id="hashのvalueを降順にソート">HashのValueを降順にソート</h3>

<p>降順は<code class="language-plaintext highlighter-rouge">reverse</code>を使ってこうです。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="n">h</span><span class="p">.</span><span class="nf">sort_by</span> <span class="p">{</span> <span class="o">|</span><span class="n">_</span><span class="p">,</span> <span class="n">v</span><span class="o">|</span> <span class="n">v</span> <span class="p">}.</span><span class="nf">reverse</span><span class="p">.</span><span class="nf">to_h</span>
<span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:z</span><span class="o">=&gt;</span><span class="mi">10</span><span class="p">,</span> <span class="ss">:y</span><span class="o">=&gt;</span><span class="mi">5</span><span class="p">,</span> <span class="ss">:x</span><span class="o">=&gt;</span><span class="mi">1</span><span class="p">,</span> <span class="ss">:a</span><span class="o">=&gt;-</span><span class="mi">1</span><span class="p">,</span> <span class="ss">:b</span><span class="o">=&gt;-</span><span class="mi">5</span><span class="p">,</span> <span class="ss">:c</span><span class="o">=&gt;-</span><span class="mi">10</span><span class="p">}</span>
</code></pre></div></div>

<p>ただ今回のHashデータのようにValueがIntegerの場合は、下記のほうがスマートです。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="n">h</span><span class="p">.</span><span class="nf">sort_by</span> <span class="p">{</span> <span class="o">|</span><span class="n">_</span><span class="p">,</span> <span class="n">v</span><span class="o">|</span> <span class="o">-</span><span class="n">v</span> <span class="p">}.</span><span class="nf">to_h</span>
<span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:z</span><span class="o">=&gt;</span><span class="mi">10</span><span class="p">,</span> <span class="ss">:y</span><span class="o">=&gt;</span><span class="mi">5</span><span class="p">,</span> <span class="ss">:x</span><span class="o">=&gt;</span><span class="mi">1</span><span class="p">,</span> <span class="ss">:a</span><span class="o">=&gt;-</span><span class="mi">1</span><span class="p">,</span> <span class="ss">:b</span><span class="o">=&gt;-</span><span class="mi">5</span><span class="p">,</span> <span class="ss">:c</span><span class="o">=&gt;-</span><span class="mi">10</span><span class="p">}</span>
</code></pre></div></div>]]></content><author><name>Toshimaru</name></author><category term="ruby" /><summary type="html"><![CDATA[RubyでHashのKey/Valueをソートするにはどうしたらよいでしょうか。 ベースとなるHashデータ 今回ソートの対象となるベースとなるHashデータは下記のとおりです。 > h = { c: -10, z: 10, b: -5, y: 5, a: -1, x: 1 } => {:c=>-10, :z=>10, :b=>-5, :y=>5, :a=>-1, :x=>1}]]></summary></entry><entry><title type="html">Rubyのヒアドキュメントの書き方いろいろ</title><link href="https://blog.toshimaru.net/ruby-heredoc/" rel="alternate" type="text/html" title="Rubyのヒアドキュメントの書き方いろいろ" /><published>2017-08-04T00:00:00+09:00</published><updated>2020-08-08T00:00:00+09:00</updated><id>https://blog.toshimaru.net/ruby-heredoc</id><content type="html" xml:base="https://blog.toshimaru.net/ruby-heredoc/"><![CDATA[<p>Rubyの覚えてそうで覚えられないヒアドキュメントの書き方をまとめてみたいと思います。</p>

<h2 id="識別子">&lt;&lt;識別子</h2>

<p>これがRubyのヒアドキュメントの基本型となります。識別子である<code class="language-plaintext highlighter-rouge">EOS</code>の始点の<code class="language-plaintext highlighter-rouge">&lt;&lt;EOS</code>から次に出てくる<code class="language-plaintext highlighter-rouge">EOS</code>までの囲まれている部分が文字列となります。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">hello</span>
  <span class="nb">puts</span> <span class="o">&lt;&lt;</span><span class="no">EOS</span><span class="sh">
    Hello,

    World!
</span><span class="no">EOS</span>
<span class="k">end</span>

<span class="n">hello</span>
</code></pre></div></div>

<p><strong>出力結果：</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    Hello,

    World!
</code></pre></div></div>

<p>上記のコードのコメントアウトされている箇所が定義した<code class="language-plaintext highlighter-rouge">hello</code>メソッドの出力結果となります。</p>

<h2 id="-識別子">&lt;&lt;-識別子</h2>

<p>上記のコードは終端の<code class="language-plaintext highlighter-rouge">EOS</code>の位置が気に食わないですか？　たしかにdef~endの中で一段ネストさせたいですね。<code class="language-plaintext highlighter-rouge">-</code>（ダッシュ）を識別子の手前に置けば、こんな書き方が可能です。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">hello</span>
  <span class="nb">puts</span> <span class="o">&lt;&lt;-</span><span class="no">EOS</span><span class="sh">
    Hello,

    World!
</span><span class="no">  EOS</span>
<span class="k">end</span>

<span class="n">hello</span>
</code></pre></div></div>

<p><strong>出力結果：</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    Hello,

    World!
</code></pre></div></div>

<p>これで終端の<code class="language-plaintext highlighter-rouge">EOS</code>がメソッドの内部でネストされて可読性が上がりましたね。</p>

<h2 id="識別子-1">&lt;&lt;~識別子</h2>

<p>でもちょっと待って下さい。本当にほしい文字列は先頭に空白のない文字列だったんです。でも安心してください、Ruby2.3以降は<code class="language-plaintext highlighter-rouge">~</code>（チルダ）を識別子の手前に置いてこう書けるんです。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">hello</span>
  <span class="nb">puts</span> <span class="o">&lt;&lt;~</span><span class="no">EOS</span><span class="sh">
    Hello,

    World!
</span><span class="no">  EOS</span>
<span class="k">end</span>

<span class="n">hello</span>
</code></pre></div></div>

<p><strong>出力結果：</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Hello,

World!
</code></pre></div></div>

<p>これでHelloという文字列の手前にあるネストの空白も消してくれました。</p>

<hr />

<h2 id="tips-github-syntax-highlight">Tips① GitHub Syntax Highlight</h2>

<p>下記のようにGitHub上にてヒアドキュメントの識別子にsyntaxの指定をすると、GitHub syntax highlightが効くようになります。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">a</span>
  <span class="n">doc</span> <span class="o">=</span> <span class="o">&lt;&lt;-</span><span class="no">RUBY</span><span class="sh">
    def hello
      puts "Hello World!"
    end
</span><span class="no">  RUBY</span>
<span class="k">end</span>
</code></pre></div></div>

<p><img src="/images/posts/heredoc_rb.png" alt="heredoc" /></p>

<h2 id="tips-引数内のヒアドキュメントの書き方">Tips② 引数内のヒアドキュメントの書き方</h2>

<p>下記のクエリの実行もヒアドキュメントを使って見やすく書き直すこともできます。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Post</span><span class="p">.</span><span class="nf">find_by_sql</span><span class="p">(</span><span class="s2">"SELECT p.title, c.author FROM posts p, comments c WHERE p.id = c.post_id"</span><span class="p">)</span>
</code></pre></div></div>

<p>(引用元: <a href="https://railsdoc.github.io/classes/ActiveRecord/Querying.html#method-i-find_by_sql">ActiveRecord::Querying | RailsDoc</a>)</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Post</span><span class="p">.</span><span class="nf">find_by_sql</span><span class="p">(</span><span class="o">&lt;&lt;~</span><span class="no">SQL</span><span class="p">)</span><span class="sh">
  SELECT p.title, c.author
  FROM posts p, comments c
  WHERE p.id = c.post_id
</span><span class="no">SQL</span>
</code></pre></div></div>

<p>ポイントとしては引数に置いたヒアドキュメントの識別子を丸括弧で一度閉じることができるという点です。</p>

<h2 id="参考">参考</h2>

<ul>
  <li><a href="https://docs.ruby-lang.org/ja/latest/doc/spec=2fliteral.html#here">リテラル (Ruby 2.7.0 リファレンスマニュアル)</a></li>
  <li><a href="https://techracho.bpsinc.jp/hachi8833/2019_05_30/74930">Ruby: ヒアドキュメントの引数やメソッド呼び出しは「開始行」に置こう｜TechRacho（テックラッチョ）〜エンジニアの「？」を「！」に〜｜BPS株式会社</a></li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="ruby" /><summary type="html"><![CDATA[Rubyの覚えてそうで覚えられないヒアドキュメントの書き方をまとめてみたいと思います。 <<識別子 これがRubyのヒアドキュメントの基本型となります。識別子であるEOSの始点の<<EOSから次に出てくるEOSまでの囲まれている部分が文字列となります。]]></summary></entry><entry><title type="html">Roppongi.rb#2で「Infrastructure as (Ruby) Code の現状確認」を発表しました</title><link href="https://blog.toshimaru.net/infrastructure-as-ruby-code-2016/" rel="alternate" type="text/html" title="Roppongi.rb#2で「Infrastructure as (Ruby) Code の現状確認」を発表しました" /><published>2016-11-06T00:00:00+09:00</published><updated>2016-11-06T00:00:00+09:00</updated><id>https://blog.toshimaru.net/infrastructure-as-ruby-code-2016</id><content type="html" xml:base="https://blog.toshimaru.net/infrastructure-as-ruby-code-2016/"><![CDATA[<p>第二回Roppongi.rbを<a href="http://roppongirb.connpass.com/event/42633/">「Infrastructure x Ruby」というテーマで開催</a>した。</p>

<p>僕はその中で「Infrastructure as (Ruby) Code の現状確認」という内容でオープニングLTとして発表したので、その内容をブログにもまとめておく（前回発表分の発表内容まとめはこちら: <a href="http://blog.toshimaru.net/roppongirb-speeding-up-rails/">Roppongi.rbで「Rails高速化戦略」を発表しました</a>）。</p>

<script async="" class="speakerdeck-embed" data-id="786983b0a1f94d1ca1250aa48ce94ed0" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>

<h2 id="目的">目的</h2>

<p>発表の目的としては世に言われる <strong>Infrastructure as Code</strong> の認識・理解を参加者であわせること。</p>

<h2 id="infrastructure-as-codeの意義">Infrastructure as Codeの意義</h2>

<p>大きく３つあると思っている。</p>

<ol>
  <li>インフラ構築手順を秘伝のタレ化させない</li>
  <li>手順をコードに落としてインフラへの変更をトラッキングする</li>
  <li>手順を不変（immutable）にする</li>
</ol>

<h3 id="秘伝のタレ">秘伝のタレ</h3>

<p>秘伝のタレ。一体どういう意味だろうか。まるで秘伝のタレのように継ぎ足し継ぎ足し変更が入り代々受け継がれてきたサーバーを形容する表現が <strong>秘伝のタレ</strong> だ。</p>

<p>秘伝のタレが代々受け継がれている環境なんかでは、メンテナンスされているかどうかまるでわからない「サーバー構築手順書.xls」なんてモノがあったりする。そしてそれは大体において手順書通りにはうまくいかないのが常だ。</p>

<p>インフラ担当者のアタマにしか入っていない隠し味なんかがあったりするとオワタ状態＼(^o^)／。その担当者が退職したりすると誰も現プロダクション環境は再現できません、という状況が出来上がる。</p>

<h3 id="コード化するということ">コード化するということ</h3>

<p>秘伝のタレ化を防ぐために、コード化という行為を行う。ではコード化されることで良い事とはなんだろうか。</p>

<ul>
  <li>コード化される</li>
  <li>➜ Gitでトラック可能になる</li>
  <li>➜ Githubでプルリク可能になる</li>
  <li>➜ Githubでレビュー可能になる</li>
  <li>➜ :blush: = HAPPY!</li>
</ul>

<p>このようにコード化されることでソフトウェア開発のグッドプラクティスであるGithub Workflowに乗ることができる。:surfer:</p>

<h2 id="immutable-infrastructure">Immutable Infrastructure</h2>

<p>次に手順を不変（Immutable）にするということについて。Immutableという言葉はインフラ的文脈ではImmutable Infrastructureという言葉が有名かと思う。</p>

<p>Immutable Infrastructureについては、<a href="http://rebuild.fm/25/">rebuild.fmでnaoyaさんやmizzyさんがmiyagawaさんと話して</a>いたり、<a href="https://speakerdeck.com/naoya/immutable-infrastructure-number-jawsdays">naoyaさんが発表していたり</a>したあたりを契機に日本でも浸透した言葉だと思っている。</p>

<p>出自はというとChad Fowler氏が書いた下記の記事。</p>

<p><a href="http://chadfowler.com/2013/06/23/immutable-deployments.html">Trash Your Servers and Burn Your Code: Immutable Infrastructure and Disposable Components</a></p>

<h3 id="immutable-infrastructure-のキーワード">Immutable Infrastructure のキーワード</h3>

<p>Immutable Infrastructureを僕なりに解釈すると、その言葉の本質は下記のキーワードで表せると思う。</p>

<ul>
  <li>Immutable （不変）</li>
  <li>Disposable（使い捨て）</li>
  <li>Reproducible （再現可能）</li>
  <li>Idempotence（冪等性）</li>
</ul>

<p>Immutable Infrastructureが登場した背景にはAWS, GCPを始めとするIaaSの登場が大きいと思っている。どういうことかというとIaaSでボタン１つでサーバーを上げて必要なくなったら捨てるダイナミックなサーバー、つまり <strong>Disposable</strong> なサーバーが誕生したということが背景の１つにある。</p>

<p>そして、オートスケーリングの恩恵を享受するためにはサーバー・プロビジョニング自動化作業が必要となる。スケール前提のサーバー群はいつ何時でも既存のサーバーと同じ状態のサーバーが立ち上がる必要がある<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>。つまり、構築手順を <strong>Immutable</strong> にし <strong>Reproducible</strong> なサーバー環境にする(= <strong>Idempotence</strong> を担保する)ことが必要。</p>

<h2 id="構成管理ツールの歴史">構成管理ツールの歴史</h2>

<p>メジャーなプロビジョニングツール(構成管理ツール)の歴史を追ってみる。</p>

<ul>
  <li>2005年 <a href="https://docs.puppet.com/puppet/">Puppet</a></li>
  <li>2009年 <a href="https://www.chef.io/chef/">Chef</a></li>
  <li>2012年 <a href="https://www.ansible.com">Ansible</a></li>
  <li>2014年 <a href="https://www.terraform.io">Terraform</a>, <a href="https://github.com/itamae-kitchen/itamae">Itamae</a></li>
</ul>

<h2 id="実装言語別分類">実装言語別分類</h2>

<p>実装言語別に分類してみる。</p>

<table>
  <thead>
    <tr>
      <th>Ruby実装</th>
      <th>Go実装</th>
      <th>Python実装</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Puppet, Chef, Itamae, Serverkit</td>
      <td>Terraform</td>
      <td>Ansible</td>
    </tr>
  </tbody>
</table>

<h2 id="表現別分類">表現別分類</h2>

<p>インフラストラクチャをどうコードで表現しているかの表現体形で分類してみる。</p>

<table>
  <thead>
    <tr>
      <th>RubyによるDSL</th>
      <th>HCLによるDSL</th>
      <th>YAML</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Puppet, Chef, Itamae</td>
      <td>Terraform</td>
      <td>Ansible, Serverkit</td>
    </tr>
  </tbody>
</table>

<h3 id="why-yaml">Why YAML?</h3>

<p>なぜYAMLで表現するのか？ まずはXML/JSONより記述がラクという点がある。そしてYAMLは人間にとってよみやすい、かきやすい、わかりやすいという特徴がある。そしてRailsの設定ファイルなどで一般的に使われている記述フォーマットなので、学習コストが低いという点が利点である。</p>

<h3 id="why-hcl">Why HCL?</h3>

<p><a href="https://github.com/hashicorp/hcl">HCL</a> とは HashiCorp configuration language の略。HCLの<a href="https://github.com/hashicorp/hcl#why">READMEではHLCについてこう説明</a>されている。</p>

<ul>
  <li>:x: JSONダメ。なぜならコメントかけない。しんどい。</li>
  <li>:x: YAMLもダメ。なぜなら初心者には記法むずかしい！</li>
  <li>:x: Rubyとかもダメ。なぜなら自由度高すぎぃ！複雑すぎぃ！</li>
  <li>:o: よろしい、ならば独自言語だ。ということで生まれたのが <strong>HCL</strong></li>
</ul>

<h3 id="why-ruby">Why Ruby?</h3>

<p>なぜRubyを採用するか？ まずはDSLが書きやすいという点。そしてRSpecなどのRuby DSLに代表されるようにRuby DSLは宣言的な記述が可能である。宣言的ということはコードを読んだだけでそのコードの意図が伝わりやすいということだ。そしてDSLといってもRubyはRuby。RubyなのでRubyでできることは何でもできちゃうので、自由度が高い（これは悪い意味に作用することもあってやりすぎるとChefのレシピそのものが秘伝のタレ化する可能性があるので注意）。</p>

<h2 id="infrastructure-as-code-の概念整理">Infrastructure as Code の概念整理</h2>

<p>Infrastructure as Code の概念を整理してみたい。<a href="http://mizzy.org/blog/2013/10/29/1/">mizzyさんのブログでは</a>、プロビジョニングのレイヤーを下記のように分けるような考え方が紹介されていた。</p>

<p><img src="/images/posts/roppongirb2/provisioning-tools.png" alt="provisioning layers" /></p>

<h2 id="シンプルなプロビジョニングレイヤーの考え方">シンプルなプロビジョニング・レイヤーの考え方</h2>

<p>オーケストレーションなどというと抽象的なのとInfrastructure as Codeのスコープが広くなってしまうと思うので、シンプルにこんな風に考えてみるのはどうだろうか。</p>

<p><img src="/images/posts/roppongirb2/infra-as-code-layers.png" alt="infra-as-code-layers" /></p>

<p>上記の考え方で先の構成管理ツールを分類するとこんな感じだ。</p>

<p><img src="/images/posts/roppongirb2/provisioning-categorize.png" alt="provisioning categorize" /></p>

<p>しかしこれで本当に全てはコード化されるか、というとそうではない。サーバーのプロビジョニングでコード化されるのはAWSサービス群のほんの一部、EC2のみだ。</p>

<p><img src="/images/posts/roppongirb2/aws-services.png" alt="AWS services" /></p>

<h2 id="infrastructure-as-code-のカバー範囲">Infrastructure as Code のカバー範囲</h2>

<p>IaaSは仮想サーバ以外にもさまざまなサービスを提供している。AWSの例でいうと、ELB, RDS, VPC, S3, CloudFront, IAM, SecurityGroup などなど。</p>

<p>それらに対するオペレーションをAWS Management ConsoleなどのGUIでやるべきだろうか？</p>

<h3 id="gui-configuration-is-hard">GUI Configuration is hard…</h3>

<p>さきほどのImmutable Infrastructureの文脈でいうと、GUIによる操作はImmutableではない。なぜならGUIは変わるかもしれないし、GUI操作は明確な言語化できないほどにファジーだからだ。では重要な設定をそのGUI任せにしていいのだろうか？</p>

<p>Route53やSecurityGroupなどオペレーションミスで一歩間違うと大障害になりかねない。これらのGUIの設定をimmutableにはできないだろうか。じゃあimmutableなインターフェースであるAPIを叩けばいいじゃない。というところで、<strong>Configuration as Code</strong> という言葉が出て来る。</p>

<p>この考え方を使えばInfrastructure as Codeの概念をさらに良い感じに敷衍できるのではないかと僕は考えた。</p>

<p><img src="/images/posts/roppongirb2/configuratino-as-code.png" alt="Configuration as Code*" /></p>

<p>こう考えるとIaaSの各種サービス群もコード化の対象として捉えることができる。</p>

<h2 id="全てがコードになる例">全てがコードになる例</h2>

<h3 id="route53-configuration">Route53 Configuration</h3>

<p>Route53のコード化例。こんな感じにRuby DSLになる</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">hosted_zone</span> <span class="s2">"example.com."</span> <span class="k">do</span>
  <span class="n">rrset</span> <span class="s2">"example.com."</span><span class="p">,</span> <span class="s2">"A"</span> <span class="k">do</span>
    <span class="n">ttl</span> <span class="mi">300</span>
    <span class="n">resource_records</span><span class="p">(</span>
      <span class="s2">"127.0.0.1"</span><span class="p">,</span>
      <span class="s2">"127.0.0.2"</span>
    <span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>powered by <a href="https://github.com/winebarrel/roadworker">roadworker</a></p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">resource</span> <span class="s">"aws_route53_record"</span> <span class="s">"www"</span> <span class="p">{</span>
 <span class="n">zone_id</span> <span class="o">=</span> <span class="s">"${aws_route53_zone.primary.zone_id}"</span>
 <span class="n">name</span> <span class="o">=</span> <span class="s">"www.example.com"</span>
 <span class="k">type</span> <span class="o">=</span> <span class="s">"A"</span>
 <span class="n">ttl</span> <span class="o">=</span> <span class="s">"300"</span>
 <span class="n">records</span> <span class="o">=</span> <span class="p">[</span><span class="s">"${aws_eip.lb.public_ip}"</span><span class="p">]</span>
<span class="p">}</span>
</code></pre></div></div>

<p>powered by <a href="https://www.terraform.io/docs/providers/aws/r/route.html">AWS: aws_route - Terraform by HashiCorp</a></p>

<h3 id="cloudwatch-alarm">CloudWatch Alarm</h3>

<p>CloudWatchのAlarmだってDSLになる。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">alarm</span> <span class="s2">"alarm1"</span> <span class="k">do</span>
  <span class="n">namespace</span> <span class="s2">"AWS/EC2"</span>
  <span class="n">metric_name</span> <span class="s2">"CPUUtilization"</span>
  <span class="n">dimensions</span> <span class="s2">"InstanceId"</span><span class="o">=&gt;</span><span class="s2">"i-XXXXXXXX"</span>
  <span class="n">period</span> <span class="mi">300</span>
  <span class="n">statistic</span> <span class="ss">:average</span>
  <span class="n">threshold</span> <span class="s2">"&gt;="</span><span class="p">,</span> <span class="mf">50.0</span>
  <span class="n">evaluation_periods</span> <span class="mi">1</span>
  <span class="n">actions_enabled</span> <span class="kp">true</span>
  <span class="n">alarm_actions</span> <span class="p">[]</span>
  <span class="n">ok_actions</span> <span class="p">[]</span>
  <span class="n">insufficient_data_actions</span> <span class="p">[</span><span class="s2">"arn:aws:sns:us-east-1:123456789012:my_topic"</span><span class="p">]</span>
<span class="k">end</span>
</code></pre></div></div>

<p>powered by <a href="https://github.com/winebarrel/radiosonde">radiosonde</a></p>

<h3 id="datadog-alert-configuration">Datadog Alert Configuration</h3>

<p>さらにコード化される対象はIaaSだけではない。Datadogという監視のアラート設定もコード化される。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">monitor</span> <span class="s2">"Check load avg"</span><span class="p">,</span> <span class="ss">:type</span><span class="o">=&gt;</span><span class="s2">"metric alert"</span> <span class="k">do</span>
  <span class="n">query</span> <span class="s2">"avg(last_5m):avg:ddstat.load_avg.1m{host:i-XXXXXXXX} &gt; 1"</span>
  <span class="n">message</span> <span class="s2">"@winebarrel@example.net"</span>
  <span class="n">options</span> <span class="k">do</span>
    <span class="n">locked</span> <span class="kp">false</span>
    <span class="n">new_host_delay</span> <span class="mi">300</span>
    <span class="n">notify_no_data</span> <span class="kp">true</span>
    <span class="n">no_data_timeframe</span> <span class="mi">2</span>
    <span class="n">notify_audit</span> <span class="kp">true</span>
    <span class="n">silenced</span><span class="p">({})</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>powered by <a href="https://github.com/winebarrel/barkdog">barkdog</a></p>

<h3 id="github-member-management">Github Member Management</h3>

<p>Githubのメンバー管理だってTerraformでできちゃうんだぜ。</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">resource</span> <span class="s">"github_membership"</span> <span class="s">"membership_for_some_user"</span> <span class="p">{</span>
    <span class="n">username</span> <span class="o">=</span> <span class="s">"SomeUser"</span>
    <span class="n">role</span> <span class="o">=</span> <span class="s">"member"</span>
<span class="p">}</span>

<span class="n">resource</span> <span class="s">"github_repository"</span> <span class="s">"example"</span> <span class="p">{</span>
  <span class="n">name</span>        <span class="o">=</span> <span class="s">"example"</span>
  <span class="n">description</span> <span class="o">=</span> <span class="s">"My awesome codebase"</span>

  <span class="n">private</span> <span class="o">=</span> <span class="no">true</span>
<span class="p">}</span>

<span class="n">resource</span> <span class="s">"github_repository_collaborator"</span> <span class="s">"a_repo_collaborator"</span> <span class="p">{</span>
    <span class="n">repository</span> <span class="o">=</span> <span class="s">"our-cool-repo"</span>
    <span class="n">username</span> <span class="o">=</span> <span class="s">"SomeUser"</span>
    <span class="n">permission</span> <span class="o">=</span> <span class="s">"admin"</span>
<span class="p">}</span>
</code></pre></div></div>

<p>powered by <a href="https://www.terraform.io/docs/providers/github/">Provider: GitHub - Terraform by HashiCorp</a></p>

<h2 id="全てがプルリクになる">全てがプルリクになる</h2>

<p>冒頭に述べたように、コード化されるということはGithubに乗せてプルリクエストを出せるということだ。</p>

<p><img src="/images/posts/roppongirb2/pull-request.png" alt="Pull Request" /></p>

<p>こんなふうにプルリクになっているとレビューも簡単。</p>

<h2 id="コード化するメリット">コード化するメリット</h2>

<ul>
  <li>レビューによるチェック体制により、より安全なConfigurationオペレーションを実現できる</li>
  <li>CIサービスと連携させてテスト・CDの自動化も可能となる</li>
</ul>

<h2 id="まとめ">まとめ</h2>

<ul>
  <li>コード化することによりGithubワークフロー（プルリク→レビュー→マージ）に乗ることができてハッピー :smile:</li>
  <li>Infrastructure as Code = Server Configuration as Code + Service Configuration as Code ➜ サーバーだけではなく、サービスそれ自体もコード化されていく。</li>
</ul>

<h2 id="感想">感想</h2>

<ul>
  <li>今回の発表はKeynoteでスライド作ったけど、Keynoteはレイアウトとかテーマの設定が自由にできてDecksetよりはデザイン凝ろうと思ったときに便利。</li>
</ul>

<h2 id="参考">参考</h2>

<ul>
  <li><a href="https://speakerdeck.com/ryotarai/itamae-infra-as-code-xian-zhuang-que-ren-hui">Itamae - Infra as Code 現状確認会</a></li>
  <li><a href="http://rebuild.fm/25/">Rebuild: 25: Immutable Infrastructure</a></li>
  <li><a href="https://speakerdeck.com/naoya/infrastructure-as-code">Infrastructure as Code // Speaker Deck</a></li>
  <li><a href="http://mizzy.org/blog/2016/04/22/1/">Infrastructure as Code 再考</a></li>
  <li><a href="http://chadfowler.com/2013/06/23/immutable-deployments.html">Trash Your Servers and Burn Your Code: Immutable Infrastructure and Disposable Components</a></li>
  <li><a href="http://martinfowler.com/bliki/InfrastructureAsCode.html">InfrastructureAsCode</a></li>
</ul>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>特定のサーバーにデータに依存してしまわないように、データ的にはステートレスなサーバー構成が前提となる <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Toshimaru</name></author><category term="ruby" /><category term="roppongirb" /><category term="aws" /><category term="presentation" /><summary type="html"><![CDATA[第二回Roppongi.rbを「Infrastructure x Ruby」というテーマで開催した。 僕はその中で「Infrastructure as (Ruby) Code の現状確認」という内容で発表したので、その内容をブログにもまとめておく。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/roppongirb2/og.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/roppongirb2/og.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Ruby2.3で導入されたfrozen_string_literalマジックコメントでImmutable Stringを実現する</title><link href="https://blog.toshimaru.net/ruby-immutable-string/" rel="alternate" type="text/html" title="Ruby2.3で導入されたfrozen_string_literalマジックコメントでImmutable Stringを実現する" /><published>2016-07-24T00:00:00+09:00</published><updated>2022-05-19T00:00:00+09:00</updated><id>https://blog.toshimaru.net/ruby-immutable-string</id><content type="html" xml:base="https://blog.toshimaru.net/ruby-immutable-string/"><![CDATA[<h2 id="immutable-string-in-ruby3">Immutable String in Ruby3</h2>

<p><del>Ruby3 では文字列がデフォルトで immutable になるという大きな変更が予定されている</del>（<strong>追記あり</strong>）。</p>

<blockquote>
  <p>Ruby 3.0 では文字列リテラルをデフォルトで immutable （破壊的変更不可） にする、という方針が『決定』しました</p>
</blockquote>

<p>via. <a href="https://mametter.hatenablog.com/entry/20151004/p1">[Ruby] Ruby 3.0 の特大の非互換について - まめめも</a></p>

<p>この変更の背景としては引用リンクに書いてある通り、Rubyの最適化のために文字列のいたるところに<code class="language-plaintext highlighter-rouge">.freeze</code>を付けてプルリクエストを投げる輩が大挙してきたことだ。</p>

<h3 id="追記2019-08-07">追記（2019-08-07）</h3>

<div class="warning">
  <h5></h5>
  <p>「Ruby3 では文字列がデフォルトで immutable になる」と書いたが、「Ruby3 では文字列をデフォルトで immutable にはしない」という決定がMatzによってなされた。</p>
</div>

<blockquote>
  <p>So I officially abandon making frozen-string-literals default (for Ruby3).</p>
</blockquote>

<p>via. <a href="https://bugs.ruby-lang.org/issues/11473">Feature #11473: Immutable String literal in Ruby 3 - Ruby master - Ruby Issue Tracking System</a></p>

<p>したがって、<strong>Ruby3以降も文字列を immutable にしたければ、引き続き<code class="language-plaintext highlighter-rouge">frozen_string_literal: true</code>のマジックコメントが必要</strong>となる。</p>

<hr />

<h2 id="immutable-string-in-ruby23">Immutable String in Ruby2.3+</h2>

<p>実は Ruby2.3 で既にこの Immutable String を有効にする機能が入っている。やり方はRubyファイルの行頭に次のように<code class="language-plaintext highlighter-rouge">frozen_string_literal: true</code> とマジックコメントを書けばよい。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># frozen_string_literal: true</span>

<span class="n">frozen_string</span> <span class="o">=</span> <span class="s2">"This string is frozen!"</span>
</code></pre></div></div>

<h2 id="frozen_string_literal-の機能を試す">frozen_string_literal の機能を試す</h2>

<p>実際に試してみよう。<code class="language-plaintext highlighter-rouge">frozen_string_literal</code>の設定が入っているRubyコードと入っていないRubyコードの２つを用意して実行してみる。</p>

<h3 id="frozen_string_literal入りのコード">frozen_string_literal入りのコード</h3>

<p><code class="language-plaintext highlighter-rouge">string_with_frozen_option.rb</code></p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># frozen_string_literal: true</span>
<span class="mi">5</span><span class="p">.</span><span class="nf">times</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">"a"</span><span class="p">.</span><span class="nf">object_id</span> <span class="p">}</span>
</code></pre></div></div>

<p>実行すると全て同じ <code class="language-plaintext highlighter-rouge">object_id</code> が返ってくる。</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>ruby string_with_frozen_option.rb
<span class="go">70212460463280
70212460463280
70212460463280
70212460463280
70212460463280
</span></code></pre></div></div>

<h3 id="frozen_string_literal無しのコード">frozen_string_literal無しのコード</h3>

<p><code class="language-plaintext highlighter-rouge">string_without_frozen_option.rb</code></p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">5</span><span class="p">.</span><span class="nf">times</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">"a"</span><span class="p">.</span><span class="nf">object_id</span> <span class="p">}</span>
</code></pre></div></div>

<p>実行すると全て違う <code class="language-plaintext highlighter-rouge">object_id</code> が返ってくる。</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>ruby string_without_frozen_option.rb
<span class="go">70277165754460
70277165754200
70277165754080
70277165754000
70277165753940
</span></code></pre></div></div>

<h2 id="frozen_string_literal-はファイル毎に設定される">frozen_string_literal はファイル毎に設定される</h2>

<p>たとえば<code class="language-plaintext highlighter-rouge">frozen_string_literal</code>の設定が入ったものと入っていないファイルが実行された場合はどうなるだろうか。Railsで試してみる。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">ApplicationController</span> <span class="o">&lt;</span> <span class="no">ActionController</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">before_action</span> <span class="ss">:not_frozen</span>
  <span class="k">def</span> <span class="nf">not_frozen</span>
    <span class="mi">5</span><span class="p">.</span><span class="nf">times</span> <span class="p">{</span> <span class="n">logger</span><span class="p">.</span><span class="nf">debug</span><span class="p">(</span><span class="s2">"a"</span><span class="p">.</span><span class="nf">object_id</span><span class="p">)</span> <span class="p">}</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># frozen_string_literal: true</span>
<span class="k">class</span> <span class="nc">WelcomeController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="k">def</span> <span class="nf">index</span>
    <span class="mi">5</span><span class="p">.</span><span class="nf">times</span> <span class="p">{</span> <span class="n">logger</span><span class="p">.</span><span class="nf">debug</span><span class="p">(</span><span class="s2">"a"</span><span class="p">.</span><span class="nf">object_id</span><span class="p">)</span> <span class="p">}</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>これで<code class="language-plaintext highlighter-rouge">WelcomeController#index</code>が実行された場合、ログは下記のようになる。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>70346238891860
70346238891080
70346238890280
70346238889340
70346238888420
...
70346229343820
70346229343820
70346229343820
70346229343820
70346229343820
</code></pre></div></div>

<p>つまり<code class="language-plaintext highlighter-rouge">frozen_string_literal</code>が書かれた<code class="language-plaintext highlighter-rouge">WelcomeController</code>上で定義された文字列だけが<code class="language-plaintext highlighter-rouge">freeze</code>されていることがわかる。</p>

<h2 id="mutableなstringを定義するにはどうしたらよい">mutableなStringを定義するにはどうしたらよい？</h2>

<p>一度 <code class="language-plaintext highlighter-rouge">frozen_string_literal: true</code> のコードを入れると全ての文字列が<code class="language-plaintext highlighter-rouge">.freeze</code>されるので、下記のようなコードは<code class="language-plaintext highlighter-rouge">RuntimeError</code>となる。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># frozen_string_literal: true</span>
<span class="n">str</span> <span class="o">=</span> <span class="s2">"a"</span>
<span class="n">str</span> <span class="o">&lt;&lt;</span> <span class="s2">"bc"</span>
<span class="nb">puts</span> <span class="n">str</span>
<span class="c1"># =&gt; test.rb:3:in `&lt;main&gt;': can't modify frozen String (RuntimeError)</span>
</code></pre></div></div>

<h3 id="方法1-stringdup">方法1: String#dup</h3>

<p>この場合の対処法としてはfreezeを解除したい文字列に対して、<code class="language-plaintext highlighter-rouge">.dup</code>を付けてやれば解決する。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># frozen_string_literal: true</span>
<span class="n">str</span> <span class="o">=</span> <span class="s2">"a"</span><span class="p">.</span><span class="nf">dup</span>
<span class="n">str</span> <span class="o">&lt;&lt;</span> <span class="s2">"bc"</span>
<span class="nb">puts</span> <span class="n">str</span>
<span class="c1"># =&gt; abc</span>
</code></pre></div></div>

<h3 id="方法2-string">方法2: String#+@</h3>

<p>あるいは、<code class="language-plaintext highlighter-rouge">String#+@</code>を使って下記のようにも書ける。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># frozen_string_literal: true</span>
<span class="n">str</span> <span class="o">=</span> <span class="o">+</span><span class="s2">"a"</span>
<span class="n">str</span> <span class="o">&lt;&lt;</span> <span class="s2">"bc"</span>
<span class="nb">puts</span> <span class="n">str</span>
<span class="c1"># =&gt; abc</span>
</code></pre></div></div>

<p>こちらのほうが<code class="language-plaintext highlighter-rouge">dup</code>するよりも<a href="https://gist.github.com/k0kubun/e3da77cae2c132badd386c96f2de5768">パフォーマンスが優れている</a>ので、こちらの書き方のほうがベターである。</p>

<h2 id="まとめ">まとめ</h2>

<p>Ruby3 の Immutable String に先駆けて、Ruby2.3 以上が前提の実行環境では、積極的に<code class="language-plaintext highlighter-rouge">frozen_string_literal: true</code>のマジックコメント設定をしていくべき。</p>

<h2 id="参考">参考</h2>

<ul>
  <li><a href="https://wyeworks.com/blog/2015/12/1/immutable-strings-in-ruby-2-dot-3">Immutable strings in Ruby 2.3</a></li>
  <li><a href="https://bugs.ruby-lang.org/issues/8976">Feature #8976: file-scope freeze_string directive - Ruby trunk - Ruby Issue Tracking System</a></li>
  <li><a href="https://qiita.com/k0kubun/items/1c3e605645ba5ff683a1">Perfect Frozen String Literal - Qiita</a></li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="ruby" /><summary type="html"><![CDATA[Ruby3 では文字列がデフォルトで immutable になるという大きな変更が予定されている。この変更の背景としては上リンクに書いてある通り、Rubyの最適化のために文字列のいたるところ.freezeを付けてプルリクエストを投げる輩が大挙してきたことだ。Ruby2.3 で既にこの Immutable String を有効にする機能が入っている。やり方はRubyファイルの行頭に下記のように書けばよい。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/frozenstring.jpg" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/frozenstring.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Roppongi.rbで「Rails高速化戦略」を発表しました</title><link href="https://blog.toshimaru.net/roppongirb-speeding-up-rails/" rel="alternate" type="text/html" title="Roppongi.rbで「Rails高速化戦略」を発表しました" /><published>2016-07-19T00:00:00+09:00</published><updated>2016-07-19T00:00:00+09:00</updated><id>https://blog.toshimaru.net/roppongirb-speeding-up-rails</id><content type="html" xml:base="https://blog.toshimaru.net/roppongirb-speeding-up-rails/"><![CDATA[<p>自分がオーガナイザーを務めた <a href="http://roppongirb.connpass.com/event/33502/">Roppongi.rb #1</a>で「Rails高速化戦略」という題で発表してきました。スライドは下記になります。</p>

<script async="" class="speakerdeck-embed" data-id="37881a2ec2214ef39d85820f3327bbc2" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>

<p>発表内容をこちらのブログでも文章形式でざっとまとめてみたいと思います。</p>

<h2 id="rails-ruby-遅いよね">Rails (Ruby) 遅いよね</h2>

<p>RailsないしRubyはプログラミング言語の中では速くはない言語であることは言うまでもないと思う<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>。 実際に「Rails/Ruby遅いよねって今まで思ったことある方どれくらいいますか？」と会場でも聞いてみたところ、予想では半数以上手を挙げてくれると思ったのだけど、実際は30人中3~4人くらい。あまりにも意外な結果だったので自分なりに理由を分析してみると２つあるかなと思う。</p>

<h3 id="パフォーマンスを求められないから">パフォーマンスを求められないから</h3>

<p>例えば社内の数人が使うような管理画面の場合。この場合、パフォーマンスよりも機能性（ちゃんと検索・閲覧できるかとかCRUD操作ができるかとか）などが優先されると思う。数人だけが使うのでアクセススパイクもないし、パフォーマンスが問題にもなりにくい。</p>

<h3 id="railsをフレームワークとして使っていないから">Railsをフレームワークとして使っていないから</h3>

<p>すごくパフォーマンスを求められるWebアプリの場合、それが事前にわかっているならまずは言語選択レベルでRailsを選択しないかもしれない。今ならGoとかElixirとかScalaとか代替言語もあるのでそちらを選択した場合はRailsは使わないことになるのでRailsの遅さで困ることもない。</p>

<h2 id="それでもやっぱりrailsだ">それでもやっぱりRailsだ…!</h2>

<p>それでもやっぱりRuby好きのRubyっ子であれば、Rubyは使いたい… ということで、Railsの高速化をする上での戦略を紹介。</p>

<h2 id="ruby-version-up">Ruby Version Up</h2>

<p>まずはRubyバージョンアップ。Rubyバージョンの歴史はこんな感じになっている。</p>

<ul>
  <li>2013.2: Ruby 2.0</li>
  <li>2013.12: Ruby 2.1</li>
  <li>2014.12: Ruby 2.2</li>
  <li>2015.12: Ruby 2.3</li>
  <li>20xx: Ruby 3.0</li>
</ul>

<p>去年matzの口からRuby3のコンセプトが発表された。その驚くべき内容が <strong>Ruby 3 x 3</strong> 。</p>

<p><img src="/images/posts/roppongirb/ruby3x3.png" alt="ruby 3 x 3" /></p>

<p>via. <a href="https://www.youtube.com/watch?v=E9bO1uqs4Oc">Ruby3 challenges - RubyKaigi 2015 Keynote - YouTube</a></p>

<h2 id="とあるrailsアプリの場合">とあるRailsアプリの場合</h2>

<p>会社で取り組んでいるプロダクトのRubyのバージョンは基本的に最新バージョンを使うようにしているものの、中にはレガシーな環境もある。下記はあるプロダクトでRuby2.0 から Ruby2.1に上げた例。結果としては、Ruby 2.0 =&gt; 2.1 Ruby Version Up だけで レスポンス速度が約2倍向上した。</p>

<p><img src="/images/posts/roppongirb/ruby2_0-to-2_1.png" alt="" /></p>

<p>このようにRubyバージョンアップによりアプリケーションコード変更ゼロでも<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup>、速度改善が期待できる。古いRubyお使いの方は今すぐRubyのバージョンアップ！</p>

<h2 id="what-about-rails">What about Rails?</h2>

<p>じゃあRailsはどうだろうか。下記は<a href="https://github.com/amatsuda">amatsuda</a>さんのmatzのRuby 3x3 を受けての発表。</p>

<p><img src="/images/posts/roppongirb/rails3x.png" alt="" /></p>

<p><a href="https://speakerdeck.com/a_matsuda/3x-rails">3x Rails // Speaker Deck</a></p>

<p><code class="language-plaintext highlighter-rouge">?</code>が付いていることで分かる通り3倍速くなるという発表というより、まだまだRailsは速くするために工夫の余地があるよ、というような発表。</p>

<p>下記は同じ<a href="https://github.com/amatsuda">amatsuda</a>さんが発表された<a href="http://togetter.com/li/955629">Rails Upgrade Casual Talks</a>での資料です。</p>

<p><img src="/images/posts/roppongirb/rails-verup1.png" alt="" /></p>

<p>via. <a href="https://speakerdeck.com/a_matsuda/rails-upgrade-casual-talks">Rails Upgrade Casual Talks // Speaker Deck</a></p>

<p>たしかに色んな機能が追加されている中、Railsが劇的に速くなることは考えにくい。解決策は…?</p>

<p><img src="/images/posts/roppongirb/rails-verup2.png" alt="" /></p>

<p><strong>歯を食いしばってRails/Rubyをバージョンアップ</strong> :innocent:</p>

<p>Rails 遅くなってもRuby は速くなっているので、どちらも最新版をしっかり追っかけていけば、遅くなることなくRailsの機能拡張も追っかけていけるのでOK.</p>

<h2 id="ボトルネックを潰す">ボトルネックを潰す</h2>

<p>Railsアプリをどうボトルネックを発見し潰していくか？</p>

<h3 id="推測するな計測せよ">推測するな、計測せよ　</h3>

<p>ボトルネックは計測して数値で示すもの。ボトルネックを発見するためのサービス・ツールをいくつか紹介。</p>

<ul>
  <li><a href="https://newrelic.com/">New Relic</a>: 無料で使えて導入もラクでよい</li>
  <li><a href="https://github.com/MiniProfiler/rack-mini-profiler">rack-mini-profiler</a>: 開発環境導入する。クエリやpartialレンダー時間を表示。</li>
  <li><a href="https://github.com/kainosnoema/rack-lineprof">rack-lineprof</a>: Rubyのコードを行単位で計測したい場合に有効</li>
</ul>

<p>ツールを使った結果ボトルネックになりやすい箇所というとRDBまわり。それを解決するgem・機能を紹介。</p>

<h2 id="activerecord-optimization">ActiveRecord Optimization</h2>

<h3 id="mag_right-問題発見型">:mag_right: 問題発見型</h3>

<ul>
  <li><a href="https://github.com/flyerhzm/bullet">bullet</a>: Kill <code class="language-plaintext highlighter-rouge">N+1</code> issue!</li>
  <li><a href="https://github.com/joker1007/activerecord-cause">activerecord-cause</a>: Logs where ActiveRecord actually loads record</li>
</ul>

<h3 id="key-dbスキーマ最適化型">:key: DBスキーマ最適化型</h3>

<ul>
  <li><a href="https://github.com/pboling/flag_shih_tzu">flag_shih_tzu</a>: Bit fields for ActiveRecord</li>
  <li><a href="http://guides.rubyonrails.org/association_basics.html#counter-cache">counter-cache</a>: cacheing count query result
    <ul>
      <li><a href="https://github.com/magnusvk/counter_culture">counter_culture</a>: Better counter-cache</li>
    </ul>
  </li>
</ul>

<h3 id="zap-クエリ効率化型">:zap: クエリ効率化型</h3>

<ul>
  <li><a href="https://github.com/k0kubun/activerecord-precount">activerecord-precount</a>: Yet another counter_cache alternative.</li>
  <li><a href="https://github.com/zdennis/activerecord-import">activerecord-import</a>: bulk inserting data</li>
</ul>

<h2 id="クエリを意識してactiverecord使いこなそう">クエリを意識してActiveRecord使いこなそう</h2>

<p>ActiveRecordもといORマッパの良さってDBを意識しなくて済むところ。でも高速化を行う上でクエリは避けられない壁。DBを意識せずコードを書いている最近のワカモノはもっとクエリを意識しよう！ <del>老害っぽい発言だ</del></p>

<h2 id="パーシャルレンダリングを減らす">パーシャルレンダリングを減らす</h2>

<h3 id="n1-partial-rendering">N+1 partial rendering</h3>

<p>データN個分<code class="language-plaintext highlighter-rouge">render</code>処理が走ってしまうのを、個人的に <strong>N+1 rendering</strong> と呼んでいる。データの数N+親のビュー1回で <code class="language-plaintext highlighter-rouge">N+1</code>. 例えばこんなコード。</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- views/items/index --&gt;</span>
<span class="cp">&lt;%</span> <span class="vi">@items</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span> <span class="cp">%&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">render</span> <span class="n">item</span> <span class="cp">%&gt;</span>
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
</code></pre></div></div>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- views/items/_item --&gt;</span>
<span class="nt">&lt;tr&gt;</span>
  <span class="nt">&lt;td&gt;</span><span class="cp">&lt;%=</span> <span class="n">item</span><span class="p">.</span><span class="nf">name</span> <span class="cp">%&gt;</span><span class="nt">&lt;/td&gt;</span>
  <span class="nt">&lt;td&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s1">'Show'</span><span class="p">,</span> <span class="n">item</span> <span class="cp">%&gt;</span><span class="nt">&lt;/td&gt;</span>
  <span class="nt">&lt;td&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s1">'Edit'</span><span class="p">,</span> <span class="n">edit_item_path</span><span class="p">(</span><span class="n">item</span><span class="p">)</span> <span class="cp">%&gt;</span><span class="nt">&lt;/td&gt;</span>
  <span class="nt">&lt;td&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s1">'Destroy'</span><span class="p">,</span> <span class="n">item</span><span class="p">,</span> <span class="ss">method: :delete</span> <span class="cp">%&gt;</span><span class="nt">&lt;/td&gt;</span>
<span class="nt">&lt;/tr&gt;</span>
</code></pre></div></div>

<p>この場合のログはこうなる。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Processing by ItemsController#index as HTML
  Rendering items/index.html.erb within layouts/application
  Item Load (0.3ms)  SELECT "items".* FROM "items"
  Rendered items/_item.html.erb (0.5ms)
  Rendered items/_item.html.erb (0.3ms)
  ...snip...
  Rendered items/_item.html.erb (0.5ms)
  Rendered items/_item.html.erb (0.3ms)
  Rendered items/index.html.erb within layouts/application (57.7ms)
Completed 200 OK in 80ms (Views: 77.1ms | ActiveRecord: 0.3ms)
</code></pre></div></div>

<p>Viewで80msくらいかかっている。</p>

<h3 id="collection-rendering">Collection rendering</h3>

<p>上記の場合、Collectionレンダーの機能を使えばもっと効率的にrenderできる。</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- views/items/index --&gt;</span>
<span class="cp">&lt;%=</span> <span class="n">render</span> <span class="vi">@items</span> <span class="cp">%&gt;</span>
</code></pre></div></div>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- views/items/_item --&gt;</span>
<span class="nt">&lt;tr&gt;</span>
  <span class="nt">&lt;td&gt;</span><span class="cp">&lt;%=</span> <span class="n">item</span><span class="p">.</span><span class="nf">name</span> <span class="cp">%&gt;</span><span class="nt">&lt;/td&gt;</span>
  <span class="nt">&lt;td&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s1">'Show'</span><span class="p">,</span> <span class="n">item</span> <span class="cp">%&gt;</span><span class="nt">&lt;/td&gt;</span>
  <span class="nt">&lt;td&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s1">'Edit'</span><span class="p">,</span> <span class="n">edit_item_path</span><span class="p">(</span><span class="n">item</span><span class="p">)</span> <span class="cp">%&gt;</span><span class="nt">&lt;/td&gt;</span>
  <span class="nt">&lt;td&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s1">'Destroy'</span><span class="p">,</span> <span class="n">item</span><span class="p">,</span> <span class="ss">method: :delete</span> <span class="cp">%&gt;</span><span class="nt">&lt;/td&gt;</span>
<span class="nt">&lt;/tr&gt;</span>
</code></pre></div></div>

<p>この場合のログはこうなる。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Processing by ItemsController#index as HTML
  Rendering items/index.html.erb within layouts/application
  Item Load (0.4ms)  SELECT "items".* FROM "items"
  Rendered collection of items/_item.html.erb [29 times] (6.9ms)
  Rendered items/index.html.erb within layouts/application (10.3ms)
Completed 200 OK in 29ms (Views: 26.4ms | ActiveRecord: 0.4ms)
</code></pre></div></div>

<p>ビューで25msくらい。だいたい上記の例と比べると1/3くらいになっている。</p>

<h2 id="rails-caching">Rails caching</h2>

<p>RailsのCacheの仕組みとして<a href="http://guides.rubyonrails.org/caching_with_rails.html">公式ガイド</a>で3つ紹介されているのだが、ご存知だろうか。</p>

<ol>
  <li><strong>Fragment Cache</strong>: View fragment caching.</li>
  <li><strong>Action Cache</strong>: Controller’s action caching (removed in Rails4).</li>
  <li><strong>Page Cache</strong>: Static page caching (removed in Rails4).</li>
</ol>

<h3 id="1-fragment-cache">1. Fragment Cache</h3>

<p><img src="/images/posts/roppongirb/cache-fragment.png" alt="" /></p>

<ul>
  <li>グローバルナビ・サイドバーなどの多く呼ばれる共通コンテンツに有効</li>
  <li>重い処理が走るビューの一部分であればあるほど高速化が期待できる</li>
  <li>Advanced Usage: <strong>Russian Doll Caching</strong></li>
</ul>

<h3 id="2-action-cache">2. Action Cache</h3>

<p><img src="/images/posts/roppongirb/action-cache.png" alt="" /></p>

<ul>
  <li>Rails4で削除されてgem化: <a href="https://github.com/rails/actionpack-action_caching">actionpack-action_caching</a></li>
  <li>Viewの手前のControllerのAction自体の処理が重い場合に有効</li>
  <li><code class="language-plaintext highlighter-rouge">cache_path</code> でキャッシュキーをカスタマイズ可能
    <ul>
      <li>モデルのupdated_at を組み込んだり、PC/スマフォでキャッシュビュー出し分け可能</li>
    </ul>
  </li>
</ul>

<h3 id="3-page-cache">3. Page Cache</h3>
<ul>
  <li>Rails4で削除されてgem化: <a href="https://github.com/rails/actionpack-page_caching">actionpack-page_caching</a></li>
  <li>キャッシュ対象となるControllerのActionの生成するHTMLをまるっと静的ファイルに吐き出す</li>
  <li>その静的ファイルをNGINXなどのWeb Server/Reverse Proxyでハンドリング</li>
</ul>

<h2 id="railsのキャッシュ戦略">Railsのキャッシュ戦略</h2>
<ol>
  <li>Railsデフォルトの FragmentCache を使ってビューのレンダリングを高速化</li>
  <li>それでもダメな場合や Controller 自体の処理が重い場合なら、ActionCache/PageCache を検討</li>
</ol>

<h3 id="warning-注意">:warning: 注意</h3>
<ul>
  <li>キャッシュしても根っこの問題は消えない</li>
  <li>キャッシュのライフサイクル管理</li>
  <li>用法用量を守って正しくお使いください</li>
</ul>

<p>キャッシュしても根っこの問題はバイパスされるだけでそれ自体が解決されるわけではないので、本質的にはその根っこの問題を潰すほうがキャッシュより優先すべき。キャッシュによって<strong>臭いものには蓋</strong>をしていないか。キャッシュによって大きなボトルネックが隠蔽されていないか。本質的な問題を潰した上でなお高速化したい場合にキャッシュを利用するのが筋の良いキャッシュ戦略だと思う。</p>

<p>またキャッシュを行うことでそのライフサイクル管理も必要になってくることはアタマに入れておきたい。どういう場合にキャッシュがexpireすべきなのか(あるいはexpireすべきでないのか)、updateすべきなのか、削除すべきなのか。この辺もきちんと考えた上でキャッシュに取り組みたい。</p>

<h2 id="静的ファイル配信">静的ファイル配信</h2>

<h3 id="nginx">NGINX</h3>

<p>プロダクション運用においては実際Railsが静的ファイルまでサーブすることはなくて、下記のようにNGINXに静的ファイルをサーブさせることが多い。</p>

<p><img src="/images/posts/roppongirb/nginx.png" alt="" /></p>

<h3 id="cdn">CDN</h3>

<p>さらに言うと、Railsの吐く assets:precompile の成果物は、CDNに乗せちゃって配信を最適化してやるともっとよい。</p>

<p><img src="/images/posts/roppongirb/nginx-cdn.png" alt="" /></p>

<h2 id="レイテンシに負けないプロトコル--http2">レイテンシに負けないプロトコル = HTTP/2</h2>

<p>バンド幅大きくなってもページロード時間は大きく変わらない。<strong>光の速度はこれ以上速くならない</strong>。じゃあどうするか。解決策がHTTP/2.</p>

<p><img src="/images/posts/roppongirb/http2-latency.png" alt="" /></p>

<p><img src="/images/posts/roppongirb/http2.png" alt="" /></p>

<p>via. <a href="http://www.slideshare.net/kazuho/dena-http2">ウェブを速くするためにDeNAがやっていること - HTTP/2と、さらにその先</a></p>

<p>下記のBEFORE/AFTERは画像の配信をHTTPからHTTP/2に変更した場合のリクエストをキャプチャしたもの。</p>

<h3 id="before-http2">Before HTTP/2</h3>

<p>HTTP/2前の状態。リクエストが順番に走っていることが見て取れる。</p>

<p><img src="/images/posts/roppongirb/before-http2.png" alt="" /></p>

<h3 id="after-http2">After HTTP/2</h3>

<p>HTTP/2後の状態。リクエストが見事に多重化されている。</p>

<p><img src="/images/posts/roppongirb/after-http2.png" alt="" /></p>

<p><a href="https://www.httpvshttps.com/">こちらのページ</a>ではHTTPSの画像ロードの速度の速さを体感できる。</p>

<p><img src="/images/posts/roppongirb/HTTP_vs_HTTPS.png" alt="" /></p>

<h2 id="ユーザーの体感速度--サーバーサイドレスポンス--クライアントサイドスピード">ユーザーの体感速度 = サーバーサイドレスポンス + クライアントサイド・スピード</h2>

<p>仮にサーバーレスポンスタイムを<code class="language-plaintext highlighter-rouge">1ms</code>にしたとしても、十分に速くなったとはいえない。なぜなら最終的にユーザーが感じるであろうウェブページの体感速度はサーバーサイドのレスポンス速度とクライアントサイドでのページロードのスピードを足し合わせたものだから。サーバーが0msでレスポンス返しても10秒間クライアントサイドの画面が真っ白だったら、ユーザーにとってはそれは10秒待たされてるのと一緒。</p>

<h3 id="rails-helloworld-app-の場合">Rails HelloWorld App の場合</h3>

<p>Rails5をほぼ素の状態でHello Worldという文字列を出力するアプリをHerokuにデプロイして<a href="https://developers.google.com/speed/pagespeed/insights/">Google PageSpeed Insights</a>で計測してみた。</p>

<p>結果は80点以下… :weary:</p>

<p><img src="/images/posts/roppongirb/render-block-js.png" alt="" /></p>

<p><code class="language-plaintext highlighter-rouge">Should Fix</code>として報告されているのは、headタグ内にあるJS読み込みが Render Blocking してますよ、という内容のもの。Webの高速化はサーバーサイドだけで済むようなラクなもんじゃない。</p>

<h2 id="amp-zap">AMP :zap:</h2>

<p>AMPはWeb高速化のベストプラクティスを詰め込んだ仕様/制限のこと。詳しくは下記が参考になる。</p>

<ul>
  <li><a href="https://medium.com/@cramforce/why-amp-is-fast-7d2ff1f48597#.tcozirlt5">Why AMP is fast — Medium</a></li>
  <li><a href="https://mozaic.fm/episodes/22/amp.html">ep22 AMP | mozaic.fm</a></li>
</ul>

<p>またAMPに対応するとページが速くなる他にもおいしいことがあって、GoogleがAMPページをキャッシュしてコンテンツ配信を肩代わりしてくれるのだ。いうなればAMPのためのGoogle無料CDN。これでオーガニック検索のトラフィックはだいぶラクになるかも？</p>

<p>僕も自分の<a href="http://blog.toshima.ru/">英語Tipsブログ</a>をAMP化してみたが非常に高速にページが表示できている。(完全にAMP化はできていないのだけど) まだAMP試していない人は、AMPすげーはやいのでぜひその速さを体感してみてほしい。そしてWebの高速化にまっすぐ向き合ってもらいたいと思う。</p>

<h2 id="その他の参考資料">その他の参考資料</h2>
<ul>
  <li><a href="https://speakerdeck.com/mirakui/high-performance-rails-long-edition">High Performance Rails (long edition) // Speaker Deck</a></li>
  <li><a href="https://speakerdeck.com/joker1007/railspahuomansuji-ben-falseki">Railsパフォーマンス基本のキ // Speaker Deck</a></li>
  <li><a href="http://parashuto.com/rriver/development/page-speed-optimization">デザイナーやディレクターも知っておきたい、ページ表示速度の高速化の基本 – Rriver</a></li>
</ul>

<h2 id="roppongirb-イベントについて">Roppongi.rb イベントについて</h2>
<ul>
  <li><a href="https://twitter.com/hashtag/roppongirb?f=tweets&amp;vertical=default">#roppongirb hashtag on Twitter</a></li>
  <li>イベント発表資料: <a href="http://roppongirb.connpass.com/event/33502/presentation/">Roppongi.rb 資料一覧 - connpass</a></li>
  <li><a href="http://morizyun.github.io/blog/roppongi-rb-ruby-rails/">Roppongi.rb #1 発表の密度が濃くて楽しかったYO! - 酒と泪とRubyとRailsと</a></li>
</ul>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><a href="https://www.techempower.com/benchmarks/">Round 12 results - TechEmpower Framework Benchmarks</a> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>ただしRubyバージョン差異による非互換性を解消するための変更は必要だけどね。 <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Toshimaru</name></author><category term="rails" /><category term="ruby" /><category term="roppongirb" /><category term="presentation" /><category term="web" /><summary type="html"><![CDATA[自分がオーガナイザーを務めた Roppongi.rb #1で「Rails高速化戦略」という題で発表してきました。スライドは下記になります。発表内容をこちらのブログでも文章形式でざっとまとめてみたいと思います。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/roppongirb/title.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/roppongirb/title.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">RubyのJSONパーサーのパース速度比較</title><link href="https://blog.toshimaru.net/json-parser-benchmark/" rel="alternate" type="text/html" title="RubyのJSONパーサーのパース速度比較" /><published>2015-12-13T00:00:00+09:00</published><updated>2015-12-13T00:00:00+09:00</updated><id>https://blog.toshimaru.net/json-parser-benchmark</id><content type="html" xml:base="https://blog.toshimaru.net/json-parser-benchmark/"><![CDATA[<p>標準のJSONパーサーとは別に<a href="https://www.ruby-toolbox.com/categories/JSON_Parsers">いくつかのJSONパーサー</a>実装がRuby gemにはある。それらを比較としてベンチマークとってみた。</p>

<h2 id="前提">前提</h2>
<ul>
  <li>Ruby 2.2.2 を使います</li>
  <li><a href="https://github.com/evanphx/benchmark-ips">benchmark-ips</a>でベンチとる</li>
  <li>パースするJSONは30KB程度のサイズ</li>
  <li>比較対象は下記3つ
    <ul>
      <li><a href="http://ruby-doc.org/stdlib-2.2.0/libdoc/json/rdoc/JSON.html">Module: JSON</a></li>
      <li><a href="https://github.com/brianmario/yajl-ruby">yajl</a></li>
      <li><a href="https://github.com/ohler55/oj">oj</a></li>
    </ul>
  </li>
</ul>

<h2 id="ruby-code">Ruby code</h2>

<p>書いてみた。</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="nb">require</span> <span class="s1">'uri'</span>
<span class="nb">require</span> <span class="s1">'net/http'</span>
<span class="nb">require</span> <span class="s1">'json'</span>
<span class="nb">require</span> <span class="s1">'yajl'</span>
<span class="nb">require</span> <span class="s1">'oj'</span>
<span class="nb">require</span> <span class="s1">'benchmark/ips'</span>

<span class="n">uri</span> <span class="o">=</span> <span class="no">URI</span> <span class="s2">"http://complex/json/url.json"</span>
<span class="n">response</span> <span class="o">=</span> <span class="no">Net</span><span class="o">::</span><span class="no">HTTP</span><span class="p">.</span><span class="nf">get</span> <span class="n">uri</span>

<span class="no">Benchmark</span><span class="p">.</span><span class="nf">ips</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
  <span class="n">x</span><span class="p">.</span><span class="nf">report</span><span class="p">(</span><span class="s2">"JSON.parse"</span><span class="p">)</span> <span class="p">{</span> <span class="no">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="n">response</span><span class="p">)</span> <span class="p">}</span>
  <span class="n">x</span><span class="p">.</span><span class="nf">report</span><span class="p">(</span><span class="s2">"Yajl"</span><span class="p">)</span> <span class="p">{</span> <span class="no">Yajl</span><span class="o">::</span><span class="no">Parser</span><span class="p">.</span><span class="nf">new</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="n">response</span><span class="p">)</span> <span class="p">}</span>
  <span class="n">x</span><span class="p">.</span><span class="nf">report</span><span class="p">(</span><span class="s2">"Oj"</span><span class="p">)</span> <span class="p">{</span> <span class="no">Oj</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="n">response</span><span class="p">)</span> <span class="p">}</span>
  <span class="n">x</span><span class="p">.</span><span class="nf">compare!</span>
<span class="k">end</span></code></pre></figure>

<h2 id="result">Result</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Calculating -------------------------------------
          JSON.parse    99.000  i/100ms
                Yajl   108.000  i/100ms
                  Oj   173.000  i/100ms
-------------------------------------------------
          JSON.parse      1.123k (± 8.4%) i/s -      5.643k
                Yajl      1.105k (± 2.8%) i/s -      5.616k
                  Oj      1.838k (± 3.2%) i/s -      9.342k

Comparison:
                  Oj:     1838.3 i/s
          JSON.parse:     1123.1 i/s - 1.64x slower
                Yajl:     1105.2 i/s - 1.66x slower
</code></pre></div></div>

<p>OjがJSON.parseやYajlより1.5倍〜1.8倍ほど高速という結果が得られた。</p>

<h2 id="まとめ">まとめ</h2>

<p>Oj使ってこ。</p>

<h2 id="追記">追記</h2>

<p>こんなPRを見つけた。 <a href="https://github.com/fluent/fluentd/pull/748">Use ‘oj’ for performance improvement when oj is installed by repeatedly · Pull Request #748 · fluent/fluentd</a></p>]]></content><author><name>Toshimaru</name></author><category term="json" /><category term="ruby" /><summary type="html"><![CDATA[標準のJSONパーサーとは別にいくつかのJSONパーサー実装がRuby gemにはある。それらを比較としてベンチマークとってみた。]]></summary></entry><entry><title type="html">rubyの破壊的メソッドと非破壊的メソッドのパフォーマンス比較</title><link href="https://blog.toshimaru.net/destructive-method-performance/" rel="alternate" type="text/html" title="rubyの破壊的メソッドと非破壊的メソッドのパフォーマンス比較" /><published>2015-11-06T00:00:00+09:00</published><updated>2015-11-06T00:00:00+09:00</updated><id>https://blog.toshimaru.net/destructive-method-performance</id><content type="html" xml:base="https://blog.toshimaru.net/destructive-method-performance/"><![CDATA[<p>Rubyの破壊的メソッドと非破壊的メソッドってどっちが速いのだろう？ 直感的には破壊的メソッドのほうが速そうだけど実際は…ということで調べてみた。</p>

<p>Rubyのバージョンは2.2です。</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="nb">require</span> <span class="s1">'benchmark'</span>
<span class="n">n</span> <span class="o">=</span> <span class="mi">100_000</span>

<span class="no">Benchmark</span><span class="p">.</span><span class="nf">bm</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
  <span class="n">x</span><span class="p">.</span><span class="nf">report</span><span class="p">(</span><span class="s2">"非破壊的"</span><span class="p">)</span> <span class="p">{</span> <span class="n">n</span><span class="p">.</span><span class="nf">times</span> <span class="p">{</span> <span class="p">{</span><span class="ss">a: </span><span class="mi">1</span><span class="p">,</span> <span class="ss">b: </span><span class="mi">2</span><span class="p">,</span> <span class="ss">c: </span><span class="mi">3</span><span class="p">}.</span><span class="nf">merge</span><span class="p">(</span><span class="ss">d: </span><span class="mi">4</span><span class="p">)</span> <span class="p">}</span> <span class="p">}</span>
  <span class="n">x</span><span class="p">.</span><span class="nf">report</span><span class="p">(</span><span class="s2">"破壊的"</span><span class="p">)</span> <span class="p">{</span> <span class="n">n</span><span class="p">.</span><span class="nf">times</span> <span class="p">{</span> <span class="p">{</span><span class="ss">a: </span><span class="mi">1</span><span class="p">,</span> <span class="ss">b: </span><span class="mi">2</span><span class="p">,</span> <span class="ss">c: </span><span class="mi">3</span><span class="p">}.</span><span class="nf">merge!</span><span class="p">(</span><span class="ss">d: </span><span class="mi">4</span><span class="p">)</span>  <span class="p">}</span> <span class="p">}</span>
<span class="k">end</span></code></pre></figure>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>user     system      total        real
非破壊的  0.330000   0.010000   0.340000 (  0.337557)
破壊的  0.170000   0.000000   0.170000 (  0.177394)
</code></pre></div></div>

<p>破壊的のほうが速い。</p>

<blockquote>
  <p>破壊的メソッド (「!」が付くメソッド) はそうでないのに比べ概して高速。 しかし最近は非破壊的メソッドも高速化されてきているので以前ほど 違わなくなってきているのは確かだ。 たとえば gsub と gsub! だと作業自体は gsub のほうが高速だったりする。 計測してみると非破壊的メソッドが遅いことが多いのは、 無駄なオブジェクトが増えて GC が起きているからである。</p>
</blockquote>

<p>via. <a href="http://i.loveruby.net/w/OptimizingRubyProgram.html">LoveRubyNet Wiki: OptimizingRubyProgram</a></p>

<p>なるほど。<code class="language-plaintext highlighter-rouge">gsub</code>でも検証してみよう。</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">Benchmark</span><span class="p">.</span><span class="nf">bm</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
  <span class="n">x</span><span class="p">.</span><span class="nf">report</span><span class="p">(</span><span class="s2">"非破壊的"</span><span class="p">)</span> <span class="p">{</span> <span class="n">n</span><span class="p">.</span><span class="nf">times</span> <span class="p">{</span> <span class="s2">"hello,</span><span class="se">\n</span><span class="s2">world</span><span class="se">\n</span><span class="s2">"</span><span class="p">.</span><span class="nf">gsub</span><span class="p">(</span><span class="sr">/(\r\n|\r|\n)/</span><span class="p">,</span> <span class="s2">"&lt;br /&gt;"</span><span class="p">)</span> <span class="p">}</span> <span class="p">}</span>
  <span class="n">x</span><span class="p">.</span><span class="nf">report</span><span class="p">(</span><span class="s2">"破壊的"</span><span class="p">)</span> <span class="p">{</span> <span class="n">n</span><span class="p">.</span><span class="nf">times</span> <span class="p">{</span> <span class="s2">"hello,</span><span class="se">\n</span><span class="s2">world</span><span class="se">\n</span><span class="s2">"</span><span class="p">.</span><span class="nf">gsub!</span><span class="p">(</span><span class="sr">/(\r\n|\r|\n)/</span><span class="p">,</span> <span class="s2">"&lt;br /&gt;"</span><span class="p">)</span> <span class="p">}</span> <span class="p">}</span>
<span class="k">end</span></code></pre></figure>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>user     system      total        real
非破壊的  0.410000   0.010000   0.420000 (  0.420611)
破壊的  0.420000   0.000000   0.420000 (  0.418214)
</code></pre></div></div>

<p>こちらは結果はほとんど変わらなかった。</p>

<h2 id="まとめ">まとめ</h2>

<p>多くの場合、破壊的メソッドのほうが速い。</p>]]></content><author><name>Toshimaru</name></author><category term="ruby" /><summary type="html"><![CDATA[Rubyの破壊的メソッドと非破壊的メソッドってどっちが速いのだろう？ 直感的には破壊的メソッドのほうが速そうだけど実際は…ということで調べてみた。 (Rubyのバージョンは2.2です)]]></summary></entry></feed>