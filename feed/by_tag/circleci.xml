<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="https://blog.toshimaru.net/feed/by_tag/circleci.xml" rel="self" type="application/atom+xml" /><link href="https://blog.toshimaru.net/" rel="alternate" type="text/html" /><updated>2023-04-21T11:53:42+09:00</updated><id>https://blog.toshimaru.net/feed/by_tag/circleci.xml</id><title type="html">Hack Your Design!</title><subtitle>toshimaruの技術系なブログ</subtitle><author><name>Toshimaru</name></author><entry><title type="html">CircleCIのベースイメージを次世代イメージ cimg に移行する</title><link href="https://blog.toshimaru.net/use-circleci-cimg/" rel="alternate" type="text/html" title="CircleCIのベースイメージを次世代イメージ cimg に移行する" /><published>2021-03-05T00:00:00+09:00</published><updated>2021-03-05T00:00:00+09:00</updated><id>https://blog.toshimaru.net/use-circleci-cimg</id><content type="html" xml:base="https://blog.toshimaru.net/use-circleci-cimg/"><![CDATA[<p>2020年にCircleCIの次世代イメージ・cimg が登場しました<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>。</p>

<p>個人のRuby on Railsプロジェクトで、従来のcircleci/rubyから次世代イメージであるところの<a href="https://github.com/toshimaru/RailsTwitterClone/pull/920">cimg/rubyに移行</a>してみたので紹介します。</p>

<h2 id="ベースイメージの変更">ベースイメージの変更</h2>

<p><code class="language-plaintext highlighter-rouge">circleci/ruby</code> から <code class="language-plaintext highlighter-rouge">cimg/ruby</code> へ変更します。</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code> executors:
   default:
     working_directory: ~/app
     docker:
<span class="gi">+      - image: circleci/ruby:2.7-node-browsers
</span><span class="gd">-      - image: cimg/ruby:2.7-browsers
</span></code></pre></div></div>

<h2 id="circleci-公式-orb-の利用">CircleCI 公式 Orb の利用</h2>

<p>今回の変更とあわせて、下記２つのCircleCI公式Orbも導入しました。</p>

<ul>
  <li><a href="https://circleci.com/developer/orbs/orb/circleci/ruby">CircleCI Developer Hub - circleci/ruby</a></li>
  <li><a href="https://circleci.com/developer/orbs/orb/circleci/browser-tools">CircleCI Developer Hub - circleci/browser-tools</a></li>
</ul>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">orbs</span><span class="pi">:</span>
  <span class="na">ruby</span><span class="pi">:</span> <span class="s">circleci/ruby@1.1.2</span>
  <span class="na">browser-tools</span><span class="pi">:</span> <span class="s">circleci/browser-tools@1.1.3</span>
</code></pre></div></div>

<h2 id="rspec-の実行">RSpec の実行</h2>

<p>上述のOrbを有効活用することで</p>

<ol>
  <li>bundle Install</li>
  <li>chromedriverインストール</li>
  <li>rspecの実行</li>
</ol>

<p>のstepを下記のようにシンプルに記述することが可能になります。</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">rspec</span><span class="pi">:</span>
  <span class="na">executor</span><span class="pi">:</span> <span class="s">default</span>
  <span class="na">steps</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">checkout</span>
    <span class="pi">-</span> <span class="s">ruby/install-deps</span>
    <span class="pi">-</span> <span class="s">browser-tools/install-chrome</span>
    <span class="pi">-</span> <span class="s">browser-tools/install-chromedriver</span>
    <span class="pi">-</span> <span class="na">run</span><span class="pi">:</span> <span class="s">bin/rails db:schema:load --trace</span>
    <span class="pi">-</span> <span class="s">ruby/rspec-test</span>
</code></pre></div></div>

<h2 id="rubocop-の実行">rubocop の実行</h2>

<p>rubocop の実行も同様に <code class="language-plaintext highlighter-rouge">circleci/ruby</code> Orbに組み込まれており、簡単に実行できます。</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">rubocop</span><span class="pi">:</span>
  <span class="na">executor</span><span class="pi">:</span> <span class="s">default</span>
  <span class="na">steps</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">checkout</span>
    <span class="pi">-</span> <span class="s">ruby/install-deps</span>
    <span class="pi">-</span> <span class="s">ruby/rubocop-check</span>
</code></pre></div></div>

<h2 id="最終形">最終形</h2>

<p>実際に <code class="language-plaintext highlighter-rouge">circleci/ruby</code> から <code class="language-plaintext highlighter-rouge">cimg/ruby</code> へと移行した Pull Request の全体像としては下記のようになります。</p>

<p><a href="https://github.com/toshimaru/RailsTwitterClone/pull/920">Migrate CircleCI image from circleci/ruby to cimg/ruby by toshimaru · Pull Request</a></p>

<h2 id="参考リンク">参考リンク</h2>

<ul>
  <li>紹介したCircleCI Orbs
    <ul>
      <li><a href="https://circleci.com/developer/orbs/orb/circleci/ruby">CircleCI Developer Hub - circleci/ruby</a></li>
      <li><a href="https://circleci.com/developer/orbs/orb/circleci/browser-tools">CircleCI Developer Hub - circleci/browser-tools</a></li>
    </ul>
  </li>
  <li><a href="https://circleci.com/developer/images/image/cimg/ruby">cimg/ruby - CircleCI</a></li>
  <li><a href="https://github.com/CircleCI-Public/circleci-demo-ruby-rails/blob/master/.circleci/config.yml">circleci-demo-ruby-rails/config.yml at master · CircleCI-Public/circleci-demo-ruby-rails</a></li>
</ul>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><a href="https://circleci.com/ja/blog/announcing-our-next-generation-convenience-images-smaller-faster-more-deterministic/">次世代コンビニエンス イメージをリリース: より小さく、速く、確定的</a> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Toshimaru</name></author><category term="circleci" /><category term="ci" /><summary type="html"><![CDATA[2020年にCircleCIの次世代イメージ・cimg が登場しました。個人のRuby on Railsプロジェクトで、従来のcircleci/rubyから次世代イメージであるところのcimg/rubyに移行してみたので紹介します。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/cimg.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/cimg.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">はじめてのCircleCI Orbsを公開した</title><link href="https://blog.toshimaru.net/my-first-circleci-orbs/" rel="alternate" type="text/html" title="はじめてのCircleCI Orbsを公開した" /><published>2018-12-02T00:00:00+09:00</published><updated>2018-12-02T00:00:00+09:00</updated><id>https://blog.toshimaru.net/my-first-circleci-orbs</id><content type="html" xml:base="https://blog.toshimaru.net/my-first-circleci-orbs/"><![CDATA[<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">I published my first CircleCI Orb! » CircleCI Orb Registry - toshimaru/bundle-install <a href="https://t.co/Ikd11JmEFd">https://t.co/Ikd11JmEFd</a></p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/1068431295804465152?ref_src=twsrc%5Etfw">November 30, 2018</a></blockquote>

<p>はじめてのCircleCI Orbsを公開した。そのメモ。</p>

<h2 id="circleci-orbsとは">CircleCI Orbsとは</h2>

<p>2018年11月に正式公開されたCircleCI Orbs。</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">本日Orbsをリリースしました🥳OrbsはWorkflow以来のメジャーアップデートです。OrbsはCircleCIの設定をパッケージ化する仕組みで、誰でも自分のOrbsを公開できます。これはCI/CDサービスとしては初の試みで、今後はユーザーやパートナーを巻き込んでCircleCIのエコシステムを構築することができます。</p>&mdash; CircleCI Japan (@CircleCIJapan) <a href="https://twitter.com/CircleCIJapan/status/1060285769124696064?ref_src=twsrc%5Etfw">November 7, 2018</a></blockquote>

<p>要はいろんなレポジトリで使っている共通のCircleCIの設定を共通化できる仕組みのこと。</p>

<h2 id="作ってみた">作ってみた</h2>

<p>僕もいろんなRuby on Railsプロジェクトでよく使うコマンド、<code class="language-plaintext highlighter-rouge">bundle install</code>をCircleCI Orbsを使って共通化してみることにしてみました。</p>

<ul>
  <li>結果できたのがこちら: <a href="https://circleci.com/orbs/registry/orb/toshimaru/bundle-install">CircleCI Orb Registry - toshimaru/bundle-install</a></li>
  <li>GitHubソースコードはこちら: <a href="https://github.com/toshimaru/bundle-install">toshimaru/bundle-install</a></li>
</ul>

<h2 id="作り方">作り方</h2>

<h3 id="install-circleci-command">Install circleci command</h3>

<p>まずはcircleciコマンドを入手。MacOSの場合下記のようにbrewで入れることができます。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew install circleci
</code></pre></div></div>

<h3 id="namespace-作成">namespace 作成</h3>

<p>namespaceを取得します。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ circleci namespace create toshimaru github toshimaru
</code></pre></div></div>

<h3 id="orb-作成">Orb 作成</h3>

<p>namespace以下のorb名を作成します。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ circleci orb create toshimaru/bundle-install
Orb toshimaru/bundle-install created.
Please note that any versions you publish of this orb are world-readable.

You can now register versions of toshimaru/bundle-install using circleci orb publish.
</code></pre></div></div>

<h3 id="publish-circleci-orb">Publish CircleCI Orb</h3>

<p>作成した<code class="language-plaintext highlighter-rouge">orb.yml</code>を公開します。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ circleci orb publish src/orb.yml toshimaru/bundle-install@0.0.1
Orb toshimaru/bundle-install@0.0.1 was published.
Please note that this is an open orb and is world-readable.
</code></pre></div></div>

<h2 id="作成したorbを使う">作成したOrbを使う</h2>

<p>次に作成したOrbを使う側、呼び出す側の設定です。</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">orbs</span><span class="pi">:</span>
  <span class="na">bundle-install</span><span class="pi">:</span> <span class="s">toshimaru/bundle-install@0.1.0</span>
<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">build</span><span class="pi">:</span>
    <span class="na">docker</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">image</span><span class="pi">:</span> <span class="s">circleci/ruby</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">checkout</span>
      <span class="pi">-</span> <span class="s">bundle-install/bundle-install</span>
      <span class="c1"># - bundle exec rspec</span>
</code></pre></div></div>

<p>実際に下記のPRでOrbの変更例が見れますのでご参照ください。</p>

<p><a href="https://github.com/toshimaru/RailsTwitterClone/pull/264/files">Introduce CircleCI Orbs by toshimaru · Pull Request #264</a></p>

<h2 id="参考にした記事">参考にした記事</h2>

<ul>
  <li>全体的にこちらの手順を参考にさせていただきました。 <a href="https://blog.tsub.me/post/introducing-to-circleci-orbs/">CircleCI Orbs 入門 | tsub’s blog</a></li>
  <li>ファイルの構成などこちらを参考にさせていただきました。https://github.com/sue445/circleci-ruby-orbs</li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="circleci" /><category term="oss" /><summary type="html"><![CDATA[はじめてのCircleCI Orbsを公開した。そのメモ。2018年11月に正式公開されたCircleCI Orbs。本日Orbsをリリースしました。OrbsはWorkflow以来のメジャーアップデートです。OrbsはCircleCIの設定をパッケージ化する仕組みで、誰でも自分のOrbsを公開できます。これはCI/CDサービスとしては初の試みで、今後はユーザーやパートナーを巻き込んでCircleCIのエコシステムを構築することができます。要はいろんなレポジトリで使っている共通のCircleCIの設定を共通化できる仕組みのこと。僕もいろんなRuby on Railsプロジェクトでよく使うコマンド、bundle installをCircleCI Orbsを使って共通化してみることにしてみました。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/circleci-orb.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/circleci-orb.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">reviewdogを使ってCI上でRuboCop自動レビューを動かす</title><link href="https://blog.toshimaru.net/reviewdog-rubocop/" rel="alternate" type="text/html" title="reviewdogを使ってCI上でRuboCop自動レビューを動かす" /><published>2018-11-19T00:00:00+09:00</published><updated>2020-06-08T00:00:00+09:00</updated><id>https://blog.toshimaru.net/reviewdog-rubocop</id><content type="html" xml:base="https://blog.toshimaru.net/reviewdog-rubocop/"><![CDATA[<p><a href="https://github.com/rubocop-hq/rubocop">rubocop</a>の自動レビューを<a href="https://github.com/haya14busa/reviewdog">reviewdog</a>を使ってやってみたのでその知見です。</p>

<ul id="markdown-toc">
  <li><a href="#追記" id="markdown-toc-追記">追記</a></li>
  <li><a href="#auto-rubocop-on-circleci-powered-by-reviewdog" id="markdown-toc-auto-rubocop-on-circleci-powered-by-reviewdog">Auto-RuboCop on CircleCI powered by reviewdog</a>    <ul>
      <li><a href="#1-configymlの設定" id="markdown-toc-1-configymlの設定">1. <code class="language-plaintext highlighter-rouge">config.yml</code>の設定</a></li>
      <li><a href="#2コメントできるtokenを取得--設定" id="markdown-toc-2コメントできるtokenを取得--設定">2.コメントできるTokenを取得 &amp; 設定</a></li>
      <li><a href="#3-rubucopの結果をreviewdogで通知" id="markdown-toc-3-rubucopの結果をreviewdogで通知">3. rubucopの結果をreviewdogで通知</a></li>
    </ul>
  </li>
  <li><a href="#完成yamlイメージ" id="markdown-toc-完成yamlイメージ">完成yamlイメージ</a></li>
  <li><a href="#なぜreviewdogなのか" id="markdown-toc-なぜreviewdogなのか">なぜreviewdogなのか</a></li>
  <li><a href="#最後に" id="markdown-toc-最後に">最後に</a></li>
  <li><a href="#参考資料" id="markdown-toc-参考資料">参考資料</a></li>
</ul>

<h2 id="追記">追記</h2>

<p>本記事の GitHub Actions 版を書きました。</p>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">blogged. | reviewdogを使ってGitHub Actions上でRuboCop自動レビューを動かす - Hack Your Design! <a href="https://t.co/4u11iBjm6G">https://t.co/4u11iBjm6G</a></p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/1267121968307814401?ref_src=twsrc%5Etfw">May 31, 2020</a></blockquote>

<h2 id="auto-rubocop-on-circleci-powered-by-reviewdog">Auto-RuboCop on CircleCI powered by reviewdog</h2>

<p>僕の作っているプロジェクトでrubocop自動レビューをCircleCI上で設定してみました。そのプルリクエストを見てもらうのが一番早いと思いますので、下記リンクより差分を確認してください。</p>

<p><a href="https://github.com/toshimaru/RailsTwitterClone/pull/254">https://github.com/toshimaru/RailsTwitterClone/pull/254</a></p>

<h3 id="1-configymlの設定">1. <code class="language-plaintext highlighter-rouge">config.yml</code>の設定</h3>

<p>基本的には<a href="https://github.com/haya14busa/reviewdog#circle-ci">公式READMEのCircleCIセットアップ手順</a>通りですが、まずは下記のようにreviewdogのバイナリを<code class="language-plaintext highlighter-rouge">curl</code>経由で落とします。</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 環境変数でダウンロードするreviewdogのバージョンを指定</span>
<span class="na">environment</span><span class="pi">:</span>
  <span class="na">REVIEWDOG_VERSION</span><span class="pi">:</span> <span class="s2">"</span><span class="s">0.9.11"</span>

<span class="c1"># reviewdogをcurlでダウンロード</span>
<span class="pi">-</span> <span class="na">run</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">Install reviewdog</span>
    <span class="na">command</span><span class="pi">:</span> <span class="pi">|</span>
      <span class="s">curl -fSL https://github.com/haya14busa/reviewdog/releases/download/$REVIEWDOG_VERSION/reviewdog_linux_amd64 -o reviewdog &amp;&amp; chmod +x ./reviewdog</span>
</code></pre></div></div>

<h3 id="2コメントできるtokenを取得--設定">2.コメントできるTokenを取得 &amp; 設定</h3>

<p>reviewdogにコメントさせるためにはコメントできる権限を持ったGitHub Tokenが必要になります。下記手順でGitHub Tokenを取得してください。</p>

<ul>
  <li><a href="https://github.com/settings/tokens">アクセストークンの取得ページ</a>にいく</li>
  <li>下記の権限を設定してTokenを発行
    <ul>
      <li>Privateレポジトリの設定: <code class="language-plaintext highlighter-rouge">repo</code>をチェック</li>
      <li>Publicレポジトリの設定: <code class="language-plaintext highlighter-rouge">public_repo</code>をチェック</li>
    </ul>
  </li>
</ul>

<p>これでTokenが発行できましたので、次にそのTokenの設定です。</p>

<ul>
  <li>CircleCIの環境変数の設定画面を開く</li>
  <li>下記の環境変数を設定
    <ul>
      <li><code class="language-plaintext highlighter-rouge">REVIEWDOG_GITHUB_API_TOKEN</code>の値に前手順で取得したTokenを設定</li>
    </ul>
  </li>
</ul>

<p>これにてreviewdogにコメントできる権限が付与されました。</p>

<h3 id="3-rubucopの結果をreviewdogで通知">3. rubucopの結果をreviewdogで通知</h3>

<p>あとはいつも通りのrubocopのコマンドをパイプしてreviewdogに渡してあげればOK。その際のオプションは <code class="language-plaintext highlighter-rouge">-f=rubocop</code>（rubocopフォーマット指定）, <code class="language-plaintext highlighter-rouge">-reporter=github-pr-review</code>（GitHub PRレビューコメント形式の指定） の２つを指定します。</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">-</span> <span class="na">run</span><span class="pi">:</span> <span class="s">bundle exec rubocop | ./reviewdog -f=rubocop -reporter=github-pr-review</span>
</code></pre></div></div>

<h2 id="完成yamlイメージ">完成yamlイメージ</h2>

<p><code class="language-plaintext highlighter-rouge">.circleci/config.yml</code>の完成イメージは下記です（完全なyamlファイル<a href="https://github.com/toshimaru/RailsTwitterClone/pull/254/files">当該Pull Request</a>より確認してください）。なおCircleCIはversion2.1を使用していることに注意してください（現時点の最新バージョン）。</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="m">2.1</span>
<span class="na">executors</span><span class="pi">:</span>
  <span class="na">default</span><span class="pi">:</span>
    <span class="na">working_directory</span><span class="pi">:</span> <span class="s">~/app</span>
    <span class="na">docker</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">image</span><span class="pi">:</span> <span class="s">circleci/ruby:2.5-node-browsers</span>
        <span class="na">environment</span><span class="pi">:</span>
          <span class="na">RAILS_ENV</span><span class="pi">:</span> <span class="s">test</span>
          <span class="na">REVIEWDOG_VERSION</span><span class="pi">:</span> <span class="s">0.9.11</span>
<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">rubocop</span><span class="pi">:</span>
    <span class="na">executor</span><span class="pi">:</span>
      <span class="na">name</span><span class="pi">:</span> <span class="s">default</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">checkout</span>
      <span class="pi">-</span> <span class="s">bundle_install</span>
      <span class="pi">-</span> <span class="na">run</span><span class="pi">:</span>
          <span class="na">name</span><span class="pi">:</span> <span class="s">Install reviewdog</span>
          <span class="na">command</span><span class="pi">:</span> <span class="pi">|</span>
            <span class="s">curl -fSL https://github.com/haya14busa/reviewdog/releases/download/$REVIEWDOG_VERSION/reviewdog_linux_amd64 -o reviewdog &amp;&amp; chmod +x ./reviewdog</span>
      <span class="pi">-</span> <span class="na">run</span><span class="pi">:</span> <span class="s">bundle exec rubocop | ./reviewdog -f=rubocop -reporter=github-pr-review</span>

<span class="na">workflows</span><span class="pi">:</span>
  <span class="na">test</span><span class="pi">:</span>
    <span class="na">jobs</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">...省略...</span>
</code></pre></div></div>

<h2 id="なぜreviewdogなのか">なぜreviewdogなのか</h2>

<p>ruboop自動レビューのための既にあるツールとしては、<a href="https://github.com/packsaddle/ruby-saddler">Saddler</a>や<a href="https://github.com/prontolabs/pronto">pronto</a>などがありますが、なぜそれらを使わずにreviewdogを採用したのかというと下記の理由からです。</p>

<ul>
  <li>Goのシングルバイナリポン置き（curlワンコマンド）でSetupがめちゃくちゃ楽</li>
  <li>Language Agnostic （Ruby以外もGo, PHP, Pythonなど他言語で使える）</li>
  <li>Go実装でパフォーマンスが良い</li>
  <li>Activeにメンテされている</li>
  <li>READMEドキュメントが充実している</li>
  <li>日本人が作っている！（おまけ理由</li>
</ul>

<h2 id="最後に">最後に</h2>

<p>本記事ではRubyプロジェクトのrubocop checkをreviewdogを使ってCircleCI上で動かす例を紹介しました。</p>

<p>公式READMEにはTravisCI上での動かし方であったり、GitHubの新機能・GitHub Checks形式での動かし方も記載されておりますので、興味があるかたは公式READMEをご参照ください。</p>

<h2 id="参考資料">参考資料</h2>

<ul>
  <li><a href="https://github.com/haya14busa/reviewdog">haya14busa/reviewdog</a></li>
  <li><a href="http://haya14busa.com/reviewdog/">reviewdog を飼ってコードレビューや開発を改善しませんか - haya14busa</a></li>
  <li><a href="https://qiita.com/azu/items/c563da0b5455a1b1dca2">reviewdogを使ってtextlintの結果をPull Requestに書き込む方法 - Qiita</a></li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="review" /><category term="rubocop" /><category term="github" /><category term="circleci" /><category term="ci" /><summary type="html"><![CDATA[rubocopの自動レビューをreviewdogを使ってやってみたのでその知見です。 Auto-RuboCop on CircleCI powered by reviewdog 僕の作っているプロジェクトでrubocop自動レビューをCircleCI上で設定してみました。そのプルリクエストを見てもらうのが一番早いと思いますので、下記リンクより差分を確認してください。基本的には公式READMEのCircleCIセットアップ手順通りですが、まずは下記のようにreviewdogのバイナリをcurl経由で落とします。reviewdogにコメントさせるためにはコメントできる権限を持ったGitHub Tokenが必要になります。下記手順でGitHub Tokenを取得してください。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/rubocop_x_reviewdog.jpg" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/rubocop_x_reviewdog.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>