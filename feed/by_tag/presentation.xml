<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="https://blog.toshimaru.net/feed/by_tag/presentation.xml" rel="self" type="application/atom+xml" /><link href="https://blog.toshimaru.net/" rel="alternate" type="text/html" /><updated>2023-04-30T22:40:52+09:00</updated><id>https://blog.toshimaru.net/feed/by_tag/presentation.xml</id><title type="html">Hack Your Design!</title><subtitle>toshimaruの技術系なブログ</subtitle><author><name>Toshimaru</name></author><entry><title type="html">Kaigi on Railsで「FactoryBot the Right Way」を発表しました</title><link href="https://blog.toshimaru.net/kaigi-on-rails/" rel="alternate" type="text/html" title="Kaigi on Railsで「FactoryBot the Right Way」を発表しました" /><published>2020-10-07T00:00:00+09:00</published><updated>2020-10-08T00:00:00+09:00</updated><id>https://blog.toshimaru.net/kaigi-on-rails</id><content type="html" xml:base="https://blog.toshimaru.net/kaigi-on-rails/"><![CDATA[<p><a href="https://kaigionrails.org/">Kaigi on Rails</a>で「FactoryBot the Right Way」というタイトルで発表しました<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>。</p>

<h2 id="スライド">スライド</h2>

<script async="" class="speakerdeck-embed" data-id="8084985a97ce4b6685d8528388da9779" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script>

<h2 id="アーカイブ動画">アーカイブ動画</h2>

<p>動画もYouTubeにアーカイブとして上がっておりますので、音声付きで聴きたい方はこちらをどうぞ。</p>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">先行して <a href="https://twitter.com/toshimaru_e?ref_src=twsrc%5Etfw">@toshimaru_e</a> さんの動画をアップしました！他のセッションも順次公開していきますのでお楽しみに！ <a href="https://twitter.com/hashtag/kaigionrails?src=hash&amp;ref_src=twsrc%5Etfw">#kaigionrails</a><a href="https://t.co/duhoF1Xu1S">https://t.co/duhoF1Xu1S</a> <a href="https://t.co/y3PRYVRlO8">https://t.co/y3PRYVRlO8</a></p>&mdash; Kaigi on Rails (@kaigionrails) <a href="https://twitter.com/kaigionrails/status/1312397413592653824?ref_src=twsrc%5Etfw">October 3, 2020</a></blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<h2 id="感想">感想</h2>

<p>今回は初のビデオ録画登壇でした。</p>

<p>今までのリモート登壇（<a href="/career-strategy-for-around-thirty-engineer/">アラサーエンジニアの生存戦略</a>、<a href="/how-to-deal-with-fat-model/">Fat Modelの倒し方</a>）は基本Zoomを使ったLIVE登壇だったので、今回初めて録画登壇を経験できて良かったと思います。</p>

<p>録画のセットアップとしては下記を利用しました。</p>

<ul>
  <li>プレゼンテーションツール: Keynote</li>
  <li>スライド録画+音声録音: Keynoteのレコーディング機能 (with Krisp)
    <ul>
      <li>参考: <a href="https://support.apple.com/ja-jp/guide/keynote/tan8a5df9cc5/mac">MacのKeynoteでオーディオを録音する - Apple サポート</a></li>
    </ul>
  </li>
  <li>Backup用音声録音: QuickTime Player
    <ul>
      <li>参考: <a href="https://support.apple.com/ja-jp/guide/quicktime-player/qtpf25d6f827/mac">MacのQuickTime Playerでオーディオを録音する - Apple サポート</a></li>
    </ul>
  </li>
  <li>スピーカー側の動画撮影: iPad</li>
</ul>

<blockquote>
  <p>Kaigi on Railsのコアコンセプトは 「初学者から上級者までが楽しめるWeb系の技術カンファレンス」 です。</p>
</blockquote>

<p>ということでしたが、今回の発表の内容的には初学者もそこそこ楽しめる内容になっていのではないでしょうか。参考になったのなら幸いです<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup>。</p>

<blockquote class="twitter-tweet" data-conversation="none"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/kaigionrails?src=hash&amp;ref_src=twsrc%5Etfw">#kaigionrails</a> 発表資料チラ見せ。FactoryBotをより上手に使いこなしたい初級者〜中級者レベルの方にはそこそこ有益な情報になっていると思いますので是非😊 <a href="https://t.co/dQDOzP3BpX">pic.twitter.com/dQDOzP3BpX</a></p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/1311079864070369280?ref_src=twsrc%5Etfw">September 29, 2020</a></blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<h2 id="おわり">おわり</h2>

<p>Kaigi on Railsをオンラインで開催してくださったチーフオーガナイザーの <a href="https://twitter.com/okuramasafumi">@okuramasafumi</a> をはじめ、運営スタッフの皆さま、ありがとうございました。</p>

<h2 id="参考リンク">参考リンク</h2>

<ul>
  <li>公式ドキュメント
    <ul>
      <li><a href="https://github.com/thoughtbot/factory_bot/blob/master/GETTING_STARTED.md">GETTING_STARTED.md</a></li>
      <li><a href="https://github.com/thoughtbot/factory_bot/blob/master/NAME.md">Project Naming History</a></li>
    </ul>
  </li>
  <li>ベンチマークソースコード
    <ul>
      <li><a href="https://github.com/toshimaru/factory-bot-the-right-way">toshimaru/factory-bot-the-right-way</a></li>
    </ul>
  </li>
  <li><a href="https://fukabori.fm/episode/13">13. ペアプロやテストの疑問とか、ソフトウェアエンジニアの育成とか | fukabori.fm</a></li>
  <li><a href="https://sinsoku.hatenablog.com/entry/2017/04/09/214728">Rails アンチパターン - 錆びついたファクトリー (factory_girl) - アジャイルSEの憂鬱</a></li>
  <li><a href="https://magazine.rubyist.net/articles/kaigi_on_rails/index.html">Rubyist Magazine: Kaigi on Rails 特集号</a></li>
</ul>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>たぶん文法的には「FactoryBot <strong>in</strong> the right way」ってのが正しい気がするけど、こちらがゴロが良かったということでそれはご愛嬌で。。。 <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>RailsDM2018で発表したこちらの内容もあわせて参考にしていただけると :pray: <a href="/rdm2018-active-record-anti-patterns/">railsdm2018で「ActiveRecordデータ処理アンチパターン」を発表しました</a> <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Toshimaru</name></author><category term="presentation" /><category term="rspec" /><category term="rails" /><summary type="html"><![CDATA[Kaigi on Railsで「FactoryBot the Right Way」というタイトルで発表しました。動画もYouTubeにアーカイブとして上がっておりますので、音声付きで聴きたい方はこちらをどうぞ。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/kaigi-on-rails.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/kaigi-on-rails.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">「アラサーエンジニアの生存戦略」を発表しました</title><link href="https://blog.toshimaru.net/career-strategy-for-around-thirty-engineer/" rel="alternate" type="text/html" title="「アラサーエンジニアの生存戦略」を発表しました" /><published>2020-08-09T00:00:00+09:00</published><updated>2021-03-01T00:00:00+09:00</updated><id>https://blog.toshimaru.net/career-strategy-for-around-thirty-engineer</id><content type="html" xml:base="https://blog.toshimaru.net/career-strategy-for-around-thirty-engineer/"><![CDATA[<p><a href="https://medpeer.connpass.com/event/181835/">リードエンジニアから学ぶMedPeerのプロダクト開発</a>という僕が所属する企業のイベントで、「<a href="https://speakerdeck.com/toshimaru/career-strategy-for-around-thirty-engineer">アラサーエンジニアの生存戦略</a>」というタイトルで発表しました。</p>

<script async="" class="speakerdeck-embed" data-id="314bb46f6f1e423d98dddadd84e9bc77" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script>

<h2 id="発表の経緯">発表の経緯</h2>

<p>もともとの発表の着想となったエントリはこちらになります。</p>

<p><a href="/like-a-sponge-as-an-engineer/">技術者としてスポンジであり続けること　あるいは老害回避戦略の話</a></p>

<blockquote>
  <p>エンジニアリングとは常に学習し続けることである。</p>
</blockquote>

<blockquote>
  <p>思うに、コードを書かず学習意欲を失ってしまった35歳のおじさんたちが自分がコードが書けないこと・学ばないことの言い訳として言い出し始めたのがこの「35歳定年説」の真実じゃないだろうか。</p>
</blockquote>

<blockquote>
  <p>この文章は僕自身が若手とは言えない年齢となり今後シニアな立場へとなっていく中で「自分は老害化していくのではないか」という危機感から自戒も込めて書いたものである。願わくば五年後十年後自分がここに書いたような老害になっていないことを祈る。</p>
</blockquote>

<p>この記事のトピックとしては、「エンジニアの学習」「老害にならないためのマインド」になります。</p>

<p>これらのトピックに「キャリア論」を加えて、「エンジニアにとってのキャリア戦略」みたいな話はどこかでまとめてみたいなー、という思いがありました。</p>

<p>そんな中、僕の所属する企業から「会社ミートアップを開催するので、シニアエンジニア向けのネタで登壇してくれないか？」という話が舞い込んできたので、今回の発表に至ったという感じです。</p>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">会社主催イベントの登壇依頼来ているけど、同僚が十分にテックトークしてくれそうなので、僕はアラサーエンジニア向けのエモエモ・エンジニアキャリアトークでもしようかと画策している</p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/1281043327958147072?ref_src=twsrc%5Etfw">July 9, 2020</a></blockquote>

<p>また、僕自身がアラサーといえる世代ではなくなってきて（35歳に接近してきていて）自分の今の考えをスナップショットとして残しておきたかったという思いもあります。この発表内容がアラフォーになっても通じるものかは今後自分自身の身を持って検証していきたいと思っています。</p>

<p>正直、この手のキャリア論みたいなものはおっさんの成功体験語りみたいなものになりがちな気がしていて（それこそ老害トークですね）、そうはならないように気をつけたつもりです。</p>

<p>なのでスライド中にも書いた通り、歩むキャリアに「正解はない」というスタンスですし、最終的に「自分の道は自分で決める」というスタンスです。安易な正解はないとした上で、確固たる軸は確立しておきましょうねという話です。</p>

<h2 id="発表のメインメッセージ">発表のメインメッセージ</h2>

<p>今回の発表のメインメッセージとしては要約すると下記の通りです。</p>

<ul>
  <li>技術の判断軸（審美眼）を持ち、継続的に学習しましょう</li>
  <li>自身の仕事の価値観（仕事観）を明確にし、成長できるキャリアを歩みましょう</li>
  <li>成長のためにチャレンジし続けよう</li>
</ul>

<p>審美眼という言葉は <a href="https://twitter.com/t_wada">twada</a> さんからお借りいたしました。詳しくは<a href="https://speakerdeck.com/twada/worse-is-better-understanding-the-spiral-of-technologies-2019-edition">スライド</a>と合わせて下記Podcastを聴いてみるとよいかと思います。</p>

<ul>
  <li><a href="https://fukabori.fm/episode/28">28. 技術選定の審美眼(1) w/ twada | fukabori.fm</a></li>
  <li><a href="https://fukabori.fm/episode/29">29. 技術選定の審美眼(2) w/ twada | fukabori.fm</a></li>
</ul>

<h2 id="お前の場合どうなのよ">お前の場合どうなのよ？</h2>

<p>おっさんの成功体験語りにならないようにあえて自分の話は発表内には多くは入れませんでした。ただ本発表に至る原体験としては僕自身の20代の経験が元になっていることは間違いありません。</p>

<p><img src="https://files.speakerdeck.com/presentations/314bb46f6f1e423d98dddadd84e9bc77/slide_12.jpg" alt="全能感" /></p>

<p>これとかまさに20代中盤くらいの僕です。</p>

<p>若手時代は黙ってても成長してきました。時期的には丁度新卒3~5年くらいですかね。そりゃそうだ、知らないことしかない。ただ目の前の技術を追いかけるだけで十分成長してきた。ある程度成長実感を得た、さぁどうする？　周囲を見渡す、そこにはさらに広い世界があった。自分の小ささを実感する、20代後半。</p>

<p><img src="https://files.speakerdeck.com/presentations/314bb46f6f1e423d98dddadd84e9bc77/slide_19.jpg" alt="憂鬱" /></p>

<p>そんなときに僕がとったチャレンジが「マネージャーへの挑戦」でした。単に技術者としてやっているだけじゃ成長に陰りが出てきた。＜非連続的な成長＞へとつながるNext Dotがマネージャーへの挑戦だったわけです。実際振り返ってみると、これは僕にとっての大きな成長へとつながったと実感しています。</p>

<p><img src="https://files.speakerdeck.com/presentations/314bb46f6f1e423d98dddadd84e9bc77/slide_59.jpg" alt="チャレンジする" /></p>

<p>（一方で、この手のチャレンジは誰しもが即座にできるわけでなくタイミング・運も重要なので、そういう意味で僕は運が良かったと思っています）</p>

<h2 id="ロールモデルになっている人たち">ロールモデルになっている人たち</h2>

<p>発表内ではバイネームで言及しなかったものの、いくつかロールモデルになっている人たちを補足します<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>。</p>

<h3 id="35歳定年説とか関係なさそうな人">35歳定年説とか関係なさそうな人</h3>

<ul>
  <li><a href="https://twitter.com/miyagawa">Miyagawa</a> さん
    <ul>
      <li><a href="https://rebuild.fm/">Rebuild.fm</a>のホストの方</li>
      <li>昔からPerl Hackerとして有名で、現Fastly勤務、アメリカ在住</li>
    </ul>
  </li>
  <li><a href="https://twitter.com/kazuho">kazuho</a> さん
    <ul>
      <li>同Fastly勤務、<a href="https://github.com/h2o/h2o">H2O</a>の作者</li>
      <li><a href="http://blog.kazuhooku.com/2017/01/fastly.html">OSS活動が転職のきっかけになった</a>のは良い話</li>
    </ul>
  </li>
  <li><a href="https://github.com/mattn">mattn</a> さん
    <ul>
      <li>OSSの世界で大活躍している方</li>
      <li>本当に幅広くOSSコントリビュートされていてすごいなぁと尊敬します</li>
    </ul>
  </li>
  <li>Guido van Rossum
    <ul>
      <li>Python の作者。GoogleからDropboxに転職</li>
      <li>引退に至る最後の最後までエンジニアリングし続けた人。カッコイイ！
        <ul>
          <li>
            <blockquote>
              <p>While mypy was one of the projects Guido spent a lot of his time on, he also cared deeply about making engineering culture, both at Dropbox and in the Python community, more inclusive for women.</p>
            </blockquote>
          </li>
          <li><a href="https://blog.dropbox.com/topics/company/thank-you--guido">Thank you, Guido | Dropbox Blog</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li>登大遊さん
    <ul>
      <li>最近だとこのニュースが話題になりました: <a href="https://xtech.nikkei.com/atcl/nxt/column/18/00001/04192/">天才プログラマーのテレワークシステムに4万人殺到、開発費わずか65万円</a></li>
      <li>彼のすごさはこの記事に集約されています。絶対マネはできませんが…
        <ul>
          <li>
            <blockquote>
              <p>僕は、1 日に少なくとも 3,000 行程度、多く書くときで 10,000 行以上のプログラムを書くことができる。その結果、多い月で 10 万行 / 月くらいである。なお、言語は書くソフトウェアの性質上、大半が C 言語である。</p>
            </blockquote>
          </li>
          <li><a href="https://softether.hatenadiary.org/entry/20070324/p1">論理的思考の放棄 - 登 大遊 (Daiyuu Nobori) の個人日記</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="https://twitter.com/rui314">rui</a>さん
    <ul>
      <li><a href="https://turingcomplete.fm/">Turing Complete FM</a> のホストの方</li>
      <li><a href="https://www.sigbus.info/compilerbook">低レイヤを知りたい人のためのCコンパイラ作成入門</a>を公開されている。無料ながらめちゃくちゃいいコンテンツ！</li>
      <li>YouTube でもプログラミング配信したり質問を受け付けたり情報発信している <a href="https://www.youtube.com/channel/UCyEOiuZoutEJrE3zvfJV7aQ">Rui Ueyama - YouTube</a></li>
    </ul>
  </li>
</ul>

<p>追記:</p>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">Ruiさんもこう言ってるし先般の僕の発表とかは真に受けないようにしましょう。 <a href="https://t.co/BEeDTtugtV">https://t.co/BEeDTtugtV</a></p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/1305744154182389760?ref_src=twsrc%5Etfw">September 15, 2020</a></blockquote>

<p>※ ちなみにruiさんの当該Tweetは僕に対するエアリプってわけではないようです<sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">2</a></sup>。</p>

<h3 id="楽しんで技術学習している人">楽しんで技術学習している人</h3>

<p>「継続的学習において楽しむことは重要だ」と発表しましたが、楽しんで学習を継続してる方で参考にしたい方でいうと下記です。</p>

<ul>
  <li><a href="https://twitter.com/DQNEO">ドキュネオ</a>さん
    <ul>
      <li><a href="https://qiita.com/DQNEO/items/2efaec18772a1ae3c198">Goコンパイラをゼロから作って147日でセルフホストを達成した - Qiita</a>
        <ul>
          <li>楽しんで続けていたからこそできる偉業だなぁと思いました</li>
        </ul>
      </li>
      <li><a href="https://www.youtube.com/watch?v=d0mYwTj2O1M">builderscon の発表</a>も素晴らしい</li>
    </ul>
  </li>
  <li><a href="https://twitter.com/tomzoh">tomzoh</a> さん
    <ul>
      <li>PHPer Kaigi Organizerの方（いろいろなイベントのオーガナイザーやってらっしゃってすごい）</li>
      <li><a href="https://www.hasegawa-tomoki.com/blog/2018/10/16/php-terminal-nes-emulator/">PHPで動くファミコンエミュレータを作った</a>
        <ul>
          <li>PHPでファミコンエミュレータを作ってみようという発想がすごいし、達成するのもすごい</li>
          <li>（とむぞーさん以外にもファミコンエミュレータを作ってらっしゃる方は多くいるようです。こういった興味の持てる学習トピックを１つ見つけてやり込むのは良さそうですね）</li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="https://twitter.com/Lily0727K">Lillian</a> さん
    <ul>
      <li><a href="https://note.com/neko_chan0214/n/n3a64bc1e1412">医師 → Google という異色の経歴</a>の方</li>
      <li>地頭よければソフトウェアエンジニアへの転身も華麗にできるという良い例</li>
      <li>プログラミング初学者は学習リソースとか学習方法は参考にしてみていいかもしれません</li>
    </ul>
  </li>
</ul>

<h2 id="エンジニア35歳定年説の嘘">「エンジニア35歳定年説」の嘘</h2>

<p>上記に紹介させていただいた方々はほんのごく一部ですが、そんな方々を見ていて「もう35歳だしコードは書けないわぁ」とか「新しいこと学習できなくなってきたわぁ」とか言ってられないのは明白ですね。</p>

<p><img src="https://files.speakerdeck.com/presentations/314bb46f6f1e423d98dddadd84e9bc77/slide_22.jpg" alt="定年説" /></p>

<h2 id="アラフォーアラフィフに向けて">アラフォー、アラフィフに向けて</h2>

<p>一方で「生涯コードを書き続ける」ことだけが正解だとは思っていなくて、Linux作者のリーナス・トーバルズやRuby作者のMatzのように<a href="https://ja.wikipedia.org/wiki/%E5%84%AA%E3%81%97%E3%81%84%E7%B5%82%E8%BA%AB%E3%81%AE%E7%8B%AC%E8%A3%81%E8%80%85">優しい終身の独裁者</a>として存在を確立している人もいます。彼らは今でこそ最前線でコードは書いてはいませんが、コミュニティにとって重要な存在であることは言うまでもないでしょう。</p>

<p>またエンジニアキャリアパスの上を目指す人は技術以外の知識を深める必要が出てくるでしょう。具体的には組織運営の手法であったり経営に関する知識であったりします。アラフォー、アラフィフに向けてジョブグレードを高めていきたい人にとってはより多角的な知識・経験が求められるようになっていく気がしています。</p>

<p>今回の発表は僕自身がアラサーだったのでターゲットとしてもアラサー世代になりましたが、アラフォー世代にも通じるところが多くあるとは考えているので<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">3</a></sup>（アラフィフ世代に通じるかは自信がないですが）、今後僕がアラフォー世代になったときに本発表内容がどれだけ通じるのかは僕自身検証していきたいと思っています。</p>

<p><img src="https://files.speakerdeck.com/presentations/314bb46f6f1e423d98dddadd84e9bc77/slide_38.jpg" alt="雑キャリアパス" /></p>

<h2 id="アンサーソング">アンサーソング</h2>

<p>元同僚が良いツッコミを書いてくれました。</p>

<p><a href="https://note.com/imagawa_yakata/n/na2ddc9126f7f">アラサー終盤エンジニアの生存戦略｜いまがわ｜note</a></p>

<blockquote>
  <p>しかしこうした「成長」を最も重視したキャリアのモデルはアラサーエンジニア全般に適したものでは無い。</p>
</blockquote>

<blockquote>
  <p>要するにとしまるさんの発表はエンジニアの「成長戦略」であって「生存戦略」ではないと言いたかった</p>
</blockquote>

<p>指摘としてはもっともで、発表タイトルとしては＜生存戦略＞というキャッチーな言葉をあえて選びましたが、正しくタイトルを付けると＜成長戦略＞であり、もっと言うなら「アラサーエンジニアの成長のためのキャリア戦略」と言うべきものでしょう。</p>

<p>本発表は「成長したいと思っているエンジニア」を暗黙的なターゲットとしており、「別に成長とかどうでもいいし〜」みたいな人にはあまり響かない・刺さらないかもしれません。一方、そんな人にも共通して言えることがあって、それが「キャリアの軸・仕事観は持っておく」ということです。</p>

<p><img src="https://files.speakerdeck.com/presentations/314bb46f6f1e423d98dddadd84e9bc77/slide_67.jpg" alt="ぶれない軸" /></p>

<p>それさえハッキリしていれば特に僕から言うこともないし、迷うこともないと思うんですよね。</p>

<p>例えば「俺は何より金が重要じゃ！」って人はお賃金だけを指標として持ってキャリアを選択していけばいいし、「この事業にフルコミットしたいんじゃ！他の要素はどうでもええ！」って人は自分の目先の成長ではなくフルコミットしたい事業成長に全力を注ぐべきだと思います（えてしてそれが自分の成長にも結果的につながるケースが多い）。むしろそちらのほうが変に＜成長＞に束縛されず楽しく生きていけそうで健全とさえ感じます。</p>

<p>発表内のメッセージとしては「エンジニア業界で長く生存し続けられるのは最後まで学習しつづけるヤツだ」という意識高い系メッセージでしたが、そもそも成長しなくともある程度技術力があればしばらくやっていけると正直思いますし、「成長しないキャリアを選択した」のであればそれはそれで全く否定すべきものではないでしょう。</p>

<p>最終的にやっぱり一番大事なのは「<strong>自分の道は自分で決める</strong>」、これに尽きると思います。</p>

<p><img src="https://files.speakerdeck.com/presentations/314bb46f6f1e423d98dddadd84e9bc77/slide_68.jpg" alt="自分の道は自分で決める" /></p>

<!-- （説教臭いのでカット）年齢を経るにつれ人間の価値観は良い意味でも悪い意味でも固定化していきます。（僕の発表含め）それに口出しする人がいるかもしれません。それに「うるせぇ」と返せるくらいの軸を持ちましょう。他人に耳を貸すなという意味ではありません。他の人の話を聴いた上でそれを自分の中で消化（昇華）して、「これが俺の人生だ」って納得して、胸を張って言える人生が素敵だなぁと思います。 -->

<h2 id="発表を終えての感想">発表を終えての感想</h2>

<ul>
  <li>今回はエモめ成分多めの発表だったので Keynote を使ってスライドを作成しました
    <ul>
      <li>図・絵を自由に入れられたり、レイアウトを柔軟に変えたりできるのは良い（markdown のみで作ったスライドだとこうもいきません）</li>
    </ul>
  </li>
  <li>画像素材は <a href="https://pixabay.com/ja/">pixabay</a> を使わせていただきました
    <ul>
      <li>プレゼン内で画像素材を適切に使うことで、オーディエンスに内容をよりイメージさせやすくすることができます</li>
    </ul>
  </li>
  <li>リモート発表は<a href="/how-to-deal-with-fat-model-after/">銀座Railsの前回</a>に引き続き二回目だったのですんなりできました
    <ul>
      <li>やっぱりオーディエンスの顔が見れないとか、反応ないとかは悲しいけど、これがIT系勉強会のニューノーマルだと思って落ち着くまではこのスタイルを続けたいと思います</li>
    </ul>
  </li>
</ul>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>ここではあくまで知名度のある人だけ書きます。ですが有名であることがロールモデルになる人の必要条件というわけではありません。 <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:3" role="doc-endnote">
      <p><a href="https://twitter.com/rui314/status/1305744753078595584">https://twitter.com/rui314/status/1305744753078595584</a> <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>実際、はてブコメントを観ていると「アラサーより上の世代だけどわかる」というコメントが寄せられていました。 <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Toshimaru</name></author><category term="presentation" /><summary type="html"><![CDATA[リードエンジニアから学ぶMedPeerのプロダクト開発という僕が所属する企業のイベントで、「アラサーエンジニアの生存戦略」というタイトルで発表しました。もともとの発表の着想となったエントリはこちらになります。 エンジニアリングとは常に学習し続けることである。思うに、コードを書かず学習意欲を失ってしまった35歳のおじさんたちが自分がコードが書けないこと・学ばないことの言い訳として言い出し始めたのがこの「35歳定年説」の真実じゃないだろうか。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/career/slide_0.jpg" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/career/slide_0.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">銀座Rails#21で「Fat Modelの倒し方」を発表しました 〜質問・感想編〜</title><link href="https://blog.toshimaru.net/how-to-deal-with-fat-model-after/" rel="alternate" type="text/html" title="銀座Rails#21で「Fat Modelの倒し方」を発表しました 〜質問・感想編〜" /><published>2020-06-05T00:00:00+09:00</published><updated>2020-06-05T00:00:00+09:00</updated><id>https://blog.toshimaru.net/how-to-deal-with-fat-model-after</id><content type="html" xml:base="https://blog.toshimaru.net/how-to-deal-with-fat-model-after/"><![CDATA[<p>本記事は『<a href="/how-to-deal-with-fat-model/">銀座Rails#21で「Fat Modelの倒し方」を発表しました</a>』の後編になります。</p>

<p>当日あった質問、発表してみての感想などを書きたいと思います。</p>

<ul id="markdown-toc">
  <li><a href="#当日の質問" id="markdown-toc-当日の質問">当日の質問</a>    <ul>
      <li><a href="#ファイルの置き場について" id="markdown-toc-ファイルの置き場について">ファイルの置き場について</a></li>
      <li><a href="#trailblazer-について" id="markdown-toc-trailblazer-について">trailblazer について</a></li>
    </ul>
  </li>
  <li><a href="#初リモート登壇してみて" id="markdown-toc-初リモート登壇してみて">初リモート登壇してみて</a>    <ul>
      <li><a href="#セットアップ" id="markdown-toc-セットアップ">セットアップ</a></li>
      <li><a href="#感想" id="markdown-toc-感想">感想</a></li>
    </ul>
  </li>
  <li><a href="#special-thanks" id="markdown-toc-special-thanks">Special Thanks</a></li>
</ul>

<h2 id="当日の質問">当日の質問</h2>

<h3 id="ファイルの置き場について">ファイルの置き場について</h3>

<p>質問の文脈としては「POROファイルの置き場ってどこ？」という内容でした。</p>

<p>発表中でPOROは「Modelの補助輪」という表現をしましたが、役割としてはModelにあたるので置き場所も<code class="language-plaintext highlighter-rouge">app/models</code>配下で問題ないと考えます。</p>

<p>特別な置き場を作りたくなってしまうかもしれませんが、Railsの提供するMVCのレールを逸脱しない範囲で独自路線を作っていくのが個人的には良いアプローチかなと考えています。POROをモデルの延長線上にあるものと考えれば、<code class="language-plaintext highlighter-rouge">app/models</code>にPOROが配置されているのは不自然ではないかと思います。</p>

<p>もちろん <code class="language-plaintext highlighter-rouge">app/models</code> の内部でドメイン毎にnamespace（module）を持たせファイルを構造化していくのはアリだと思います。例えば下記の例です。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>app/models
├── application_record.rb
├── domain1
│   └── plain_object.rb
├── domain2
│   └── plain_object.rb
├── domain3
│   └── plain_object.rb
|
...
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">app/models</code>にフラットにファイルを置いていくと、テーブル数増加・コード肥大化とともにものすごい数になってしまいます。意味のある単位でディレクトリ（module）を切っておくのは今すぐできる手軽な構造化という意味で、早いうちに導入しておくと良いと思います。</p>

<h3 id="trailblazer-について">trailblazer について</h3>

<p>「<a href="https://github.com/trailblazer/trailblazer">trailblazer</a> についてどう思う？」という話がありました。今回の発表にあたりtrailblazerはノーマークだったので、当日は「ちゃんと調べて触ったわけではないので、正直わかりません」という回答をしました。</p>

<p>trailblazer自体は、2015年頃に<a href="https://devchat.tv/ruby-rogues/206-rr-trailblazer-with-nick-sutterer/">Ruby Rogues Podcast</a>で聞いて知っていて、当時は「へ〜、興味深いコンセプトのフレームワークだけど、Not for meかな〜」「RailsのMVC構造とは違って小難しそうなフレームワークだな〜」などと思っていました。</p>

<p>今回の発表を通して改めて trailblazer を評価してみると、<strong>Railsの巨大化にともなって発生するペインポイントを回避するためによく考えられたアーキテクチャだ</strong> と思いました。</p>

<p>trailblazer は「高度に抽象化（high-level abstractions）されたRubyフレームワーク」だと謳っています。「何と比べて高度か？」というと、明らかに「Rails（MVCアーキテクチャ）と比べて高度だ」と考えることができます。具体的にはMVCアーキテクチャと比べて、大規模化しても破綻しにくいアーキテクチャになっているかと思います。</p>

<p><img src="/images/posts/ginzarails-21/trailblazer.png" alt="trailblazer" /></p>

<p>一方でtrailblazerアーキテクチャの中には「Railsでもgemとか使えば表現できるよね？」っていう部分もあるのは事実だと思います。trailblazerのアドバンテージとしては <strong>gem拡張なし</strong> で <strong>標準で</strong> 実現できる点と言えます。素の状態で破綻しにくいアーキテクチャが提供されています。</p>

<p>Hanamiにも共通して言えることなのですが、trailblazerを採用するときのディスアドバンテージはこんな感じでしょうか。</p>

<ul>
  <li>gem拡張に乏しい
    <ul>
      <li>やりたいことをやれるgemが転がっているか？</li>
    </ul>
  </li>
  <li>ハマったときのトラブルシュートの難しさ
    <ul>
      <li>ドキュメントは十分にあるか？</li>
      <li>コミュニティは成熟しているか？</li>
    </ul>
  </li>
  <li>バグを踏んだときの問題解決の難しさ
    <ul>
      <li>アクティブなメンテナはどれだけいるか？</li>
      <li>バグを報告したらすぐ反応して直してくれるか？</li>
      <li>Pull Request を upstream にカジュアルに投げることができそうか？</li>
    </ul>
  </li>
</ul>

<p>上述したデメリットを考えると、Hanamiないしtrailblazerがどれだけ優秀なアーキテクチャであっても採用は慎重にならざるを得ないと言えます。</p>

<p>Ruby on Railsの優位性はRuby Webフレームワークの圧倒的デファクトになっていることです。gemエコシステムやコミュニティ、ドキュメント、ブログ記事がしっかり整っているのは圧倒的アドバンテージと言えるのではないでしょうか。</p>

<h2 id="初リモート登壇してみて">初リモート登壇してみて</h2>

<h3 id="セットアップ">セットアップ</h3>

<p>今回の発表が初の<a href="https://zoom.us/">Zoom</a>によるリモート登壇でした。</p>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">初リモート登壇セットアップ <a href="https://twitter.com/hashtag/ginzarails?src=hash&amp;ref_src=twsrc%5Etfw">#ginzarails</a> <a href="https://t.co/Ays780ImG9">pic.twitter.com/Ays780ImG9</a></p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/1261229167036653570?ref_src=twsrc%5Etfw">May 15, 2020</a></blockquote>

<p>macOS + iPad の2画面を<a href="https://support.apple.com/ja-jp/HT210380">Sidecar</a>を使って実現した形となります。通常登壇だとスピーカーノートを手元のマシンに映して、プレゼン資料をプロジェクタに映して…とするところですが、リモート登壇だとプロジェクタにあたる部分が無いのでサブディスプレイは必須だなと感じました。</p>

<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=toshimaru-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B07PRX2Q11&amp;linkId=496cfb91e959b3c29be79559c0666db9"></iframe>

<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=toshimaru-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B07H27J698&amp;linkId=aa0e907ba05d2a0e01a21b30e73d5b86"></iframe>

<p>リモート発表ということもありネットワークが一番の心配事だったのですが、Google WiFiルーター ⇔ macOS とのネットワーク優先度をMAXにして、5GHz帯を掴むようにして発表に臨むことで、特に問題は発生しませんでした。</p>

<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=toshimaru-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B084ZCV6M5&amp;linkId=dd1f57286c1fe56f3d3bc5db74ef399e"></iframe>

<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=toshimaru-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B01MAW2294&amp;linkId=bdc1818106278e95163b1f29f12bfdd9"></iframe>

<p>また発声がキレイに通るように、ノイズキャンセリングApp・<a href="https://krisp.ai/">Krisp</a>を導入していました（<a href="https://ref.krisp.ai/u/ud778344eb">こちら</a>から登録すると一ヶ月無料で使えます）。リモート時代には必須。</p>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">リモート戦国時代を生き抜くために Krisp を年間購読した</p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/1252784955878305792?ref_src=twsrc%5Etfw">April 22, 2020</a></blockquote>

<p>プレゼンツールはおなじみの<a href="https://www.deckset.com/">Deckset</a>。マークダウンでまとめられるのはGood、一方でデザインを凝ろうとするとパワポやキーノートより逆に大変なのでそのへんは課題感あります。</p>

<h3 id="感想">感想</h3>

<p>正直な気持ちをいうと、「発表するならジェスチャーが使えて、オーディエンスの顔・反応が見れて、緊張感を持って臨めるリアル登壇が良いかなー」って考えだったのですが、コロナが長期化しそうな状況を鑑みて今回のリモート登壇にチャレンジしてみることにしました。</p>

<p>実際にやってみて良かったこととしては、お家環境で椅子に座ってノンビリ発表できるのでそこまで疲れないという点でした。あとZoomはリモート登壇にはとても便利なツール（良い背景画像が無かったので今回はバーチャル背景を使わなかったのが若干後悔）。</p>

<p>逆に難しいなと思ったのはやっぱりオーディエンスの反応が見えない点。ここは運営側で<a href="http://commentscreen.com/">Comment Screen</a>環境を用意してもらえたことで、発表中のオーディエンスへの質問や反応はある程度見ることができました。またこれは登壇者側・参加者側どちらでもそうなのですが、リアル現場での懇親会のように発表後にカジュアルに話せないのはちょっと残念だなーと思う点です。</p>

<p>総じてリモート登壇を初めての体験できてよかったと思います。</p>

<p>あと今回いただいた30分という尺はある程度まとまった量の発表をゆっくり進行するには丁度良い尺でした。それ以上の長さになると発表者側もオーディエンス側もダレそうだなぁという印象。</p>

<h2 id="special-thanks">Special Thanks</h2>

<p>本発表はもともと銀座Rails#18で発表予定だったものです。改めての発表機会をいただき、銀座Rails運営の皆様ありがとうございました。</p>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">イベントキャンセルによってお蔵入りした発表資料。普通に喋ったら20分超えの大作だっただけに残念。。。コロナが落ち着くまでは蔵出しせずに寝かせておくかな...😷 <a href="https://t.co/Qzu2YNQyve">pic.twitter.com/Qzu2YNQyve</a></p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/1229425295930716160?ref_src=twsrc%5Etfw">February 17, 2020</a></blockquote>

<p>Rails Model の限界を考えるにあたり、<a href="https://twitter.com/_yasaichi">yasaichiさん</a>、<a href="https://github.com/hshimoyama">hshiroyamaさん</a>の発表を参考にさせていただきました。ありがとうございました。</p>

<script async="" class="speakerdeck-embed" data-id="b5579c5fa5fa4e479ec81fda3b231eb2" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>

<script async="" class="speakerdeck-embed" data-id="ce30c3cf9433471283e24855f6bdd2b4" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">1年前に「Ruby on Railsの正体と向き合い方」というテーマで登壇したときに、時間の関係で言及できなかった「コードレベルの向き合い方」の詳細が綺麗に整理された上でまとまっていて、いたく感動してしまった。おすすめ / Fat Modelの倒し方 / how to deal with fat model <a href="https://t.co/0vMubQfiLb">https://t.co/0vMubQfiLb</a></p>&mdash; (やさいち|yasaichi) (@_yasaichi) <a href="https://twitter.com/_yasaichi/status/1264889633332060160?ref_src=twsrc%5Etfw">May 25, 2020</a></blockquote>]]></content><author><name>Toshimaru</name></author><category term="presentation" /><category term="rails" /><summary type="html"><![CDATA[本記事は『銀座Rails#21で「Fat Modelの倒し方」を発表しました』の後編になります。当日あった質問、発表してみての感想などを書きたいと思います。当日の質問： ファイルの置き場について trailblazer について]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/ginzarails-21/og2.jpg" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/ginzarails-21/og2.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">銀座Rails#21で「Fat Modelの倒し方」を発表しました</title><link href="https://blog.toshimaru.net/how-to-deal-with-fat-model/" rel="alternate" type="text/html" title="銀座Rails#21で「Fat Modelの倒し方」を発表しました" /><published>2020-06-01T00:00:00+09:00</published><updated>2020-06-05T00:00:00+09:00</updated><id>https://blog.toshimaru.net/how-to-deal-with-fat-model</id><content type="html" xml:base="https://blog.toshimaru.net/how-to-deal-with-fat-model/"><![CDATA[<p><a href="https://ginza-rails.connpass.com/event/173610/">銀座Rails#21</a>で「Fat Modelの倒し方」と題して発表してきました。</p>

<h2 id="発表スライド">発表スライド</h2>

<script async="" class="speakerdeck-embed" data-id="fa367404507c4311aa3eeb087fc45a6e" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>

<h2 id="目次">目次</h2>

<ul id="markdown-toc">
  <li><a href="#発表スライド" id="markdown-toc-発表スライド">発表スライド</a></li>
  <li><a href="#目次" id="markdown-toc-目次">目次</a></li>
  <li><a href="#fat-rails-stage" id="markdown-toc-fat-rails-stage">Fat Rails Stage</a></li>
  <li><a href="#fat-model対処のための３つのアプローチ" id="markdown-toc-fat-model対処のための３つのアプローチ">Fat Model対処のための３つのアプローチ</a></li>
  <li><a href="#rails-modelの限界" id="markdown-toc-rails-modelの限界">Rails Modelの限界</a></li>
  <li><a href="#rails-modelはなぜ辛くなるのか" id="markdown-toc-rails-modelはなぜ辛くなるのか">Rails Modelはなぜ辛くなるのか？</a></li>
  <li><a href="#目指すべきゴール" id="markdown-toc-目指すべきゴール">目指すべきゴール</a></li>
  <li><a href="#rails-way" id="markdown-toc-rails-way">Rails Way</a>    <ul>
      <li><a href="#concerns" id="markdown-toc-concerns">Concerns</a></li>
      <li><a href="#sti" id="markdown-toc-sti">STI</a></li>
      <li><a href="#polymorphic-association" id="markdown-toc-polymorphic-association">Polymorphic Association</a></li>
      <li><a href="#accepts_nested_attributes_for" id="markdown-toc-accepts_nested_attributes_for">accepts_nested_attributes_for</a></li>
      <li><a href="#その他細かめのテクニック" id="markdown-toc-その他細かめのテクニック">その他細かめのテクニック</a></li>
      <li><a href="#rails-wayまとめ" id="markdown-toc-rails-wayまとめ">「Rails Way」まとめ</a></li>
    </ul>
  </li>
  <li><a href="#sub-rails-way" id="markdown-toc-sub-rails-way">Sub-Rails Way</a>    <ul>
      <li><a href="#view-model" id="markdown-toc-view-model">View Model</a></li>
      <li><a href="#権限管理認可" id="markdown-toc-権限管理認可">権限管理・認可</a></li>
      <li><a href="#interactor" id="markdown-toc-interactor">Interactor</a></li>
      <li><a href="#特定の課題の解決" id="markdown-toc-特定の課題の解決">特定の課題の解決</a></li>
      <li><a href="#それrailsでできるよ" id="markdown-toc-それrailsでできるよ">「それRailsでできるよ」</a></li>
      <li><a href="#それrubyでできるよ" id="markdown-toc-それrubyでできるよ">「それRubyでできるよ」</a></li>
      <li><a href="#saasに切り出す" id="markdown-toc-saasに切り出す">SaaSに切り出す</a></li>
      <li><a href="#sub-rails-wayまとめ" id="markdown-toc-sub-rails-wayまとめ">「Sub-Rails Way」まとめ</a></li>
    </ul>
  </li>
  <li><a href="#non-rails-way" id="markdown-toc-non-rails-way">Non-Rails Way</a>    <ul>
      <li><a href="#form-model" id="markdown-toc-form-model">Form Model</a></li>
      <li><a href="#poro" id="markdown-toc-poro">PORO</a></li>
      <li><a href="#service-class" id="markdown-toc-service-class">Service Class</a></li>
      <li><a href="#1-table-multiple-models" id="markdown-toc-1-table-multiple-models">1 Table Multiple Models</a></li>
      <li><a href="#non-rails-wayまとめ" id="markdown-toc-non-rails-wayまとめ">「Non-Rails Way」まとめ</a></li>
    </ul>
  </li>
  <li><a href="#全体のまとめ" id="markdown-toc-全体のまとめ">全体のまとめ</a></li>
  <li><a href="#参考資料" id="markdown-toc-参考資料">参考資料</a></li>
  <li><a href="#後編質問感想編" id="markdown-toc-後編質問感想編">後編（質問・感想編）</a></li>
</ul>

<h2 id="fat-rails-stage">Fat Rails Stage</h2>

<p>肥大化したRailsアプリケーション（Fat Rails Application）において最も辛いレイヤーはどこでしょうか？</p>

<ol>
  <li>Fat View</li>
  <li>Fat Controller</li>
  <li>Fat Model</li>
</ol>

<p>僕はFat Modelだと考えています。</p>

<p>下記は「RailsがどのようにFatになっていくか」段階を示した表です。</p>

<table>
  <thead>
    <tr>
      <th>Fat Stage</th>
      <th>Rails習熟度</th>
      <th>Fat Layer</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>低</td>
      <td>Fat View</td>
    </tr>
    <tr>
      <td>2</td>
      <td>中</td>
      <td>Fat Controller</td>
    </tr>
    <tr>
      <td>3</td>
      <td>高</td>
      <td>Fat Model<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></td>
    </tr>
  </tbody>
</table>

<p>まずはFatステージ1。Railsというものを全然知らない超初心者が陥るステージです。ビューに何でもかんでもロジックを書いちゃう。その結果がFat Viewです。</p>

<p>次にFatステージ2。ある程度Railsに慣れてきた開発者が陥るステージです。Modelへのロジック分離がうまくできず、Controllerにロジックが集中する。その結果はFat Controllerです。</p>

<p>最後がFatステージ3。Railsを習熟したエンジニアであればModelにロジックを寄せていくのが定石です。その結果出来上がるのはFat Modelです。</p>

<p>このように <strong>どんなにRailsに習熟してようと最終的にぶつかる壁がFat Model</strong> です。</p>

<h2 id="fat-model対処のための３つのアプローチ">Fat Model対処のための３つのアプローチ</h2>

<p>Fat Modelを倒すためのアプローチとして、僕は下記の3つに分けて整理すれば良いのではと考えました。</p>

<ol>
  <li>Rails Way</li>
  <li>Sub-Rails Way</li>
  <li>Non-Rails Way</li>
</ol>

<h2 id="rails-modelの限界">Rails Modelの限界</h2>

<p>なぜRailsアプリケーションのModel層は限界を迎えてしまうのでしょうか？</p>

<p>Railsの原始的な状態は、1つのModelに1つのControllerが結びついています。すなわち、<code class="language-plaintext highlighter-rouge">User</code>モデルがあれば<code class="language-plaintext highlighter-rouge">UsersController</code>があり、Controllerのそれぞれのアクションに<code class="language-plaintext highlighter-rouge">User</code>モデルが紐づくという形です。</p>

<p>しかし下図<sup id="fnref:a" role="doc-noteref"><a href="#fn:a" class="footnote" rel="footnote">2</a></sup>はそれが破綻した状態です。どうなっているかというと、複数のControllerからいろんなかたちで１つのモデルが触られる、そういう状態です。</p>

<p><img src="/images/posts/ginzarails-21/controllers-model.jpg" alt="inline" /></p>

<p>続いてのスライドです<sup id="fnref:b" role="doc-noteref"><a href="#fn:b" class="footnote" rel="footnote">3</a></sup>。</p>

<p><img src="https://speakerd.s3.amazonaws.com/presentations/ce30c3cf9433471283e24855f6bdd2b4/slide_42.jpg?12161035" alt="inline" /></p>

<p>ここのキーワードとしては <strong>ユースケース</strong>。いろんなユースケースを1つのModelで表現しなければならないという状況が辛いと言えます。</p>

<h2 id="rails-modelはなぜ辛くなるのか">Rails Modelはなぜ辛くなるのか？</h2>

<ul>
  <li>1つのModelが複数の異なるユースケースに密結合して実装されるとき
    <ul>
      <li>→ ある条件やcontextに紐付いたValidation/Callback処理</li>
    </ul>
  </li>
  <li>1つのフォームで複数のサブリソースが更新されるとき（フォームとModelが1対1で紐付かないとき）
    <ul>
      <li>→ 1つのModelを起点とした複数Modelを跨ぐトランザクション処理</li>
    </ul>
  </li>
</ul>

<p>上述の限界は、Rails ModelとDBのテーブルが一対一で紐づくRailsの世界観に起因する限界と言えます。</p>

<h2 id="目指すべきゴール">目指すべきゴール</h2>

<p>ではどうRailsの限界を乗り越えていけばいいでしょうか？</p>

<p>下記は横軸がコードベースのサイズ、縦軸がペイン（痛みの度合い）を描いたグラフです<sup id="fnref:c" role="doc-noteref"><a href="#fn:c" class="footnote" rel="footnote">4</a></sup>。</p>

<p><img src="/images/posts/ginzarails-21/growth.png" alt="inline" /></p>

<p>赤線はバニラRailsです。コードベースのサイズとともにペインが増大しています。</p>

<p>緑線はストラクチャードRails。コードベースが増大してもペインが増大しません。</p>

<p>僕の発表の言うところでは、赤線（バニラRails）がRails Way、緑線（ストラクチャードRails）がSub-Rails・Non-Rails Wayにあたります。</p>

<p><img src="/images/posts/ginzarails-21/growth2.png" alt="inline" /></p>

<p>ということで我々の基本的なゴールとしてはこの緑線、すなわち、 <strong>コードベースが大きくなってもペインが増大しないRailsコードベース</strong> を目指しましょう、ということになります。</p>

<h2 id="rails-way">Rails Way</h2>

<p>小学生の絵みたいで恐縮なんですが、Rails Wayを絵にするとこんなイメージです。</p>

<p><img src="/images/posts/ginzarails-21/rails-way.png" alt="fit" /></p>

<p>つまり <strong>Railsのレールに沿った開発アプローチ</strong> です。</p>

<h3 id="concerns">Concerns</h3>

<p>まずはConcerns。Model/Controllerの共通の関心事（Concern）をmoduleに切り出す手法です（代表例: DHH’s <code class="language-plaintext highlighter-rouge">Recording</code> Class<sup id="fnref:6" role="doc-noteref"><a href="#fn:6" class="footnote" rel="footnote">5</a></sup>）。</p>

<p><img src="/images/posts/ginzarails-21/concerns.png" alt="inline" /></p>

<p>注意すべきは、ConcernのRails公式ガイドはありません。強いて言うなら下記の記事でDHHがConcernを紹介しています。</p>

<p><a href="https://signalvnoise.com/posts/3372-put-chubby-models-on-a-diet-with-concerns">Put chubby models on a diet with concerns</a></p>

<p>Modelの持っている能力（ability = <code class="language-plaintext highlighter-rouge">-able</code> suffix）に着目してConcern moduleに切り出していくのが、Rails Wayっぽさがあると言えます。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># app/models/concerns/concernable.rb</span>
<span class="k">module</span> <span class="nn">Concernable</span>
  <span class="kp">extend</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Concern</span>

  <span class="o">...</span><span class="p">(</span><span class="n">your</span> <span class="n">concern</span> <span class="n">code</span><span class="p">)</span><span class="o">...</span>
<span class="k">end</span>
</code></pre></div></div>

<h3 id="sti">STI</h3>

<p>RailsにおいてテーブルとModelは原則的に1対1で結びつきます。しかし、STIを使えば1つのテーブルで複数Model紐付けることができます。</p>

<p>下図は<code class="language-plaintext highlighter-rouge">players</code>という単一テーブルに複数のクラスが結びついている図です<sup id="fnref:5" role="doc-noteref"><a href="#fn:5" class="footnote" rel="footnote">6</a></sup>。</p>

<p><img src="/images/posts/ginzarails-21/sti.png" alt="inline" /></p>

<p>Railsのコード例です。 <code class="language-plaintext highlighter-rouge">companies</code> テーブルに紐づく <code class="language-plaintext highlighter-rouge">Firm</code>, <code class="language-plaintext highlighter-rouge">Client</code>モデルの例だと下記の通りです。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># app/models/company.rb</span>
<span class="k">class</span> <span class="nc">Company</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
<span class="k">end</span>

<span class="c1"># app/models/firm.rb</span>
<span class="k">class</span> <span class="nc">Firm</span> <span class="o">&lt;</span> <span class="no">Company</span>
<span class="k">end</span>

<span class="c1"># app/models/client.rb</span>
<span class="k">class</span> <span class="nc">Client</span> <span class="o">&lt;</span> <span class="no">Company</span>
<span class="k">end</span>
</code></pre></div></div>

<h3 id="polymorphic-association">Polymorphic Association</h3>

<p>1つのポリモーフィック関連付け定義で複数のテーブルを従属させることができるのがポリモーフィック関連です。</p>

<p><img src="/images/posts/ginzarails-21/polymorphic.png" alt="inline" /></p>

<p>上図の場合、通常のRails DB設計であれば <code class="language-plaintext highlighter-rouge">pictures</code>テーブルが<code class="language-plaintext highlighter-rouge">employee_id</code>, <code class="language-plaintext highlighter-rouge">product_id</code>を持っているべきですが、<code class="language-plaintext highlighter-rouge">imagable_id</code>という1つカラムで複数のテーブルを従属させることができています。</p>

<p>これをRailsのコードであらわすと下記の通りです。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># app/models/picture.rb</span>
<span class="k">class</span> <span class="nc">Picture</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
  <span class="n">belongs_to</span> <span class="ss">:imageable</span><span class="p">,</span> <span class="ss">polymorphic: </span><span class="kp">true</span>
<span class="k">end</span>

<span class="c1"># app/models/employee.rb</span>
<span class="k">class</span> <span class="nc">Employee</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
  <span class="n">has_many</span> <span class="ss">:pictures</span><span class="p">,</span> <span class="ss">as: :imageable</span>
<span class="k">end</span>

<span class="c1"># app/models/product.rb</span>
<span class="k">class</span> <span class="nc">Product</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
  <span class="n">has_many</span> <span class="ss">:pictures</span><span class="p">,</span> <span class="ss">as: :imageable</span>
<span class="k">end</span>
</code></pre></div></div>

<p>ただし注意点があります。ポリモーフィック関連は『SQLアンチパターン』6章でアンチパターンとして紹介されており、使用する際は気をつける必要があります。</p>

<p>詳しくは『SQLアンチパターン』を読んでいただければと思います。</p>

<h3 id="accepts_nested_attributes_for">accepts_nested_attributes_for</h3>

<p>ネストされたアトリビュートで関連リソースの作成・更新・削除を行うのが<code class="language-plaintext highlighter-rouge">accepts_nested_attributes_for</code>です。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Member</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">has_many</span> <span class="ss">:posts</span>
  <span class="n">accepts_nested_attributes_for</span> <span class="ss">:posts</span>
<span class="k">end</span>

<span class="n">params</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">member: </span><span class="p">{</span>
  <span class="ss">name: </span><span class="s1">'joe'</span><span class="p">,</span> <span class="ss">posts_attributes: </span><span class="p">[</span>
    <span class="p">{</span> <span class="ss">title: </span><span class="s1">'Kari, the awesome Ruby documentation browser!'</span> <span class="p">},</span>
    <span class="p">{</span> <span class="ss">title: </span><span class="s1">'The egalitarian assumption of the modern citizen'</span> <span class="p">},</span>
  <span class="p">]</span>
<span class="p">}}</span>
<span class="n">member</span> <span class="o">=</span> <span class="no">Member</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">params</span><span class="p">[</span><span class="ss">:member</span><span class="p">])</span>
</code></pre></div></div>

<p>ただしこの<code class="language-plaintext highlighter-rouge">accepts_nested_attributes_for</code>はDHH自らが「消したい」と発言しており<sup id="fnref:7" role="doc-noteref"><a href="#fn:7" class="footnote" rel="footnote">7</a></sup>、積極的に使うのはやや躊躇われるかもしれません。</p>

<p><img src="/images/posts/ginzarails-21/dhh.png" alt="inline" /></p>

<h3 id="その他細かめのテクニック">その他細かめのテクニック</h3>

<ul>
  <li><strong>Serialize Attribute</strong>
    <ul>
      <li>json型カラムへのメタデータ保存に便利</li>
      <li>⚠️『SQLアンチパターン』5章 EAV</li>
    </ul>
  </li>
  <li><strong>Value Object</strong> (<code class="language-plaintext highlighter-rouge">compose_of</code>)
    <ul>
      <li>複数カラムをValueオブジェクトとして展開するときに便利</li>
    </ul>
  </li>
  <li><strong>Validation Class</strong>/<strong>Callback Class</strong>
    <ul>
      <li>クラスとして分離可能 → 分離することで複数モデルで再利用可能に</li>
    </ul>
  </li>
</ul>

<h3 id="rails-wayまとめ">「Rails Way」まとめ</h3>

<p>全体としては、Rails WayだけではFat Modelを倒す手段として手数が少なく物足りないと感じます。</p>

<p>アプリケーションサイズがFatになっている時点でそのRailsアプリケーションは中規模以上のサイズが見込まれますから、正直Rails WayだけでFat Modelを倒すのは無理だと思います。</p>

<p>❌ Concerns, Validation ClassなどFat ModelをDRYに記述する手段にはなるが、構造的にダイエットする手段にはなっていません。あくまでそれらは局所的なダイエットに留まっています。</p>

<p>❌ STI, PolymorphicなどはDB設計と密結合したソリューションで、完全なコードレベルの解決にはなっていません。また、アンチパターンとして紹介されているように、それ自体が技術負債になりえる構造的問題を孕んでいます。</p>

<h2 id="sub-rails-way">Sub-Rails Way</h2>

<p>Sub-Rails Wayはレールを補強・拡張しつつレールに乗るスタイルです。</p>

<p><img src="/images/posts/ginzarails-21/sub-rails-way.png" alt="fit" /></p>

<p>レールを何を使って補強・拡張するのでしょうか？それは下記２つになります。</p>

<ol>
  <li>gem</li>
  <li>SaaS</li>
</ol>

<h3 id="view-model">View Model</h3>

<p>ModelにおけるView関連ロジックを <strong>View Model</strong> として切り出す手法です。</p>

<p>Development of Further PoEAAで<a href="https://martinfowler.com/eaaDev/PresentationModel.html">Presentation Model</a>という概念で紹介されているパターンにあたると考えています。ModelをDecoratorパターンっぽく拡張しているのでDecoratorとも呼ばれることが多いです<sup id="fnref:8" role="doc-noteref"><a href="#fn:8" class="footnote" rel="footnote">8</a></sup>。</p>

<p>このView Modelの良いところとしては、Fat Model の対処として機能するだけでなく、Fat View の対処としても機能する点です。</p>

<p>💎 gemの実装としては下記のようなものがあります。</p>

<ul>
  <li><a href="https://github.com/drapergem/draper">draper</a></li>
  <li><a href="https://github.com/amatsuda/active_decorator">active_decorator</a></li>
</ul>

<p>🔧 draperの場合、コードは下記のようになります（ArticleモデルのDecoratorクラス）。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># app/decorators/article_decorator.rb</span>
<span class="k">class</span> <span class="nc">ArticleDecorator</span> <span class="o">&lt;</span> <span class="no">Draper</span><span class="o">::</span><span class="no">Decorator</span>
  <span class="n">delegate_all</span>

  <span class="k">def</span> <span class="nf">publication_status</span>
    <span class="k">if</span> <span class="n">published?</span>
      <span class="s2">"Published at </span><span class="si">#{</span><span class="n">published_at</span><span class="si">}</span><span class="s2">"</span>
    <span class="k">else</span>
      <span class="s2">"Unpublished"</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">published_at</span>
    <span class="n">object</span><span class="p">.</span><span class="nf">published_at</span><span class="p">.</span><span class="nf">strftime</span><span class="p">(</span><span class="s2">"%A, %B %e"</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<h3 id="権限管理認可">権限管理・認可</h3>

<p>管理画面実装において逃げられない実装は認証とあわせて、権限管理・認可ではないでしょうか？</p>

<p>ResourceのCRUDでユーザーのアクセス制御するのが「Railsらしい」権限管理と考えています。</p>

<p>💎 gemの実装としては下記のようなものです。</p>

<ul>
  <li><a href="https://github.com/varvet/pundit">pundit</a></li>
  <li><a href="https://github.com/kyuden/banken">banken</a></li>
  <li><a href="https://github.com/CanCanCommunity/cancancan">cancancan</a></li>
</ul>

<p>🔧 punditの場合、コードは下記の通りです（Postモデルの認可クラス）。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># app/policies/post_policy.rb</span>
<span class="k">class</span> <span class="nc">PostPolicy</span>
  <span class="nb">attr_reader</span> <span class="ss">:user</span><span class="p">,</span> <span class="ss">:post</span>

  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="n">post</span><span class="p">)</span>
    <span class="vi">@user</span> <span class="o">=</span> <span class="n">user</span>
    <span class="vi">@post</span> <span class="o">=</span> <span class="n">post</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">update?</span>
    <span class="n">user</span><span class="p">.</span><span class="nf">admin?</span> <span class="n">or</span> <span class="n">not</span> <span class="n">post</span><span class="p">.</span><span class="nf">published?</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<h3 id="interactor">Interactor</h3>

<p>InteractorはClean Architecture由来する概念です。</p>

<p>下記の図は見たことある方も多くいらっしゃるかもしれません。赤い部分がClean Architectureにおけるユースケース層になります。このユースケース層に Interactor が表現されています。</p>

<p><img src="https://blog.cleancoder.com/uncle-bob/images/2012-08-13-the-clean-architecture/CleanArchitecture.jpg" alt="inline" /></p>

<p>ユースケース層というアプローチはとても良いと思っています。なぜなら先程「1つのModelが複数の異なるユースケースに密結合して実装されるとき―」と言いましたが、そのユースケースをまさにInteractorとして表現できるからです。</p>

<p>個人的にClean ArchitectureとRailsは相性が良いと思っていて、このようにMVC+InteractorでClean Architectureのそれぞれの層と一致させることができるからです。</p>

<p><img src="/images/posts/ginzarails-21/Clean_Coder_Blog.png" alt="inline" /></p>

<p>💎 gemとしては下記があります。</p>

<ul>
  <li><a href="https://github.com/collectiveidea/interactor-rails">interactor-rails</a></li>
  <li>(not Rails) <a href="https://github.com/hanami">hanami</a>’s <a href="https://github.com/hanami/utils/blob/master/lib/hanami/interactor.rb">Interactor</a></li>
</ul>

<p>hanamiはRailsではありませんが、Clean Architectureに強く影響を受けたRuby製Webフレームワークです。hanamiには Interactor の仕組みが標準で実装されています。</p>

<p>🔧 interactor-railsの場合のコードは下記の通りです（ユーザーを認証するクラス）。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># app/interactors/authenticate_user.rb</span>
<span class="k">class</span> <span class="nc">AuthenticateUser</span>
  <span class="kp">include</span> <span class="no">Interactor</span>

  <span class="k">def</span> <span class="nf">call</span>
    <span class="k">if</span> <span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="p">.</span><span class="nf">authenticate</span><span class="p">(</span><span class="n">context</span><span class="p">.</span><span class="nf">email</span><span class="p">,</span> <span class="n">context</span><span class="p">.</span><span class="nf">password</span><span class="p">)</span>
      <span class="n">context</span><span class="p">.</span><span class="nf">user</span> <span class="o">=</span> <span class="n">user</span>
      <span class="n">context</span><span class="p">.</span><span class="nf">token</span> <span class="o">=</span> <span class="n">user</span><span class="p">.</span><span class="nf">secret_token</span>
    <span class="k">else</span>
      <span class="n">context</span><span class="p">.</span><span class="nf">fail!</span><span class="p">(</span><span class="ss">message: </span><span class="s2">"authenticate_user.failure"</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="c1"># Inside your controller,</span>
<span class="n">result</span> <span class="o">=</span> <span class="no">AuthenticateUser</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="n">session_params</span><span class="p">)</span>  
</code></pre></div></div>

<h3 id="特定の課題の解決">特定の課題の解決</h3>

<p>特定の課題を解決するgemとしては例えば下記のようなものがあります。</p>

<ul>
  <li><strong>論理削除</strong>
    <ul>
      <li>💎 gem: <a href="https://github.com/jhawthorn/discard">discard</a>, <a href="https://github.com/rubysherpas/paranoia">paranoia</a>, <a href="https://github.com/ActsAsParanoid/acts_as_paranoid">acts_as_paranoid</a></li>
      <li>⚠️ <a href="https://www.slideshare.net/t_wada/ronsakucasual">SQLアンチパターン 幻の第26章「とりあえず削除フラグ」</a></li>
    </ul>
  </li>
  <li><strong>要素のソート・並び替え</strong>
    <ul>
      <li>💎 gem: <a href="https://github.com/brendon/acts_as_list">acts_as_list</a>, <a href="https://github.com/mixonic/ranked-model">ranked-model</a></li>
    </ul>
  </li>
  <li><strong>State Machine</strong>
    <ul>
      <li>💎 gem: <a href="https://github.com/aasm/aasm">aasm</a>, <a href="https://github.com/amatsuda/stateful_enum">stateful_enum</a></li>
    </ul>
  </li>
  <li><strong>Tagging</strong>
    <ul>
      <li>💎 gem: <a href="https://github.com/mbleigh/acts-as-taggable-on">acts-as-taggable-on</a></li>
    </ul>
  </li>
  <li><strong>HashをActiveRecordっぽく操作</strong>
    <ul>
      <li>💎 gem: <a href="https://github.com/zilkey/active_hash">active_hash</a></li>
    </ul>
  </li>
</ul>

<p>解決したい課題に応じて導入していくのが良いと思います。</p>

<h3 id="それrailsでできるよ">「それRailsでできるよ」<sup id="fnref:10" role="doc-noteref"><a href="#fn:10" class="footnote" rel="footnote">9</a></sup></h3>

<p>逆にgemを使わずともRails標準で解決できるよって課題も多く存在します。例えば下記のような例です。</p>

<ul>
  <li>:gem: <a href="https://github.com/brainspec/enumerize">enumerize</a> (Emumerized Attributes)
    <ul>
      <li>Rails 4.1: ActiveRecord enum</li>
      <li>参考. <a href="https://api.rubyonrails.org/v5.2.3/classes/ActiveRecord/Enum.html">ActiveRecord::Enum</a></li>
    </ul>
  </li>
  <li>:gem: <a href="https://github.com/eagletmt/switch_point">switch_point</a> (Database R/W Split)
    <ul>
      <li>Rails 6: Multi-DB</li>
      <li>参考: <a href="https://railsguides.jp/active_record_multiple_databases.html">Active Record で複数のデータベース利用 - Railsガイド</a></li>
    </ul>
  </li>
  <li>:gem: <a href="https://github.com/zdennis/activerecord-import">activerecord-import</a> (Bulk Import)
    <ul>
      <li>Rails 6: <code class="language-plaintext highlighter-rouge">insert_all</code>, <code class="language-plaintext highlighter-rouge">upsert_all</code></li>
    </ul>
  </li>
  <li>:gem: <a href="https://github.com/carrierwaveuploader/carrierwave">carrierwave</a>, <a href="https://github.com/shrinerb/shrine">shrine</a> (File Uploader)
    <ul>
      <li>Rails 5.2: Active Storage</li>
      <li>参考: <a href="https://railsguides.jp/active_storage_overview.html">Active Storage の概要 - Railsガイド</a></li>
    </ul>
  </li>
  <li>:gem: <a href="https://github.com/norman/friendly_id">friendly_id</a>
    <ul>
      <li>ActiveRecord: <code class="language-plaintext highlighter-rouge">to_param</code></li>
      <li>参考: <a href="https://api.rubyonrails.org/classes/ActiveRecord/Integration.html#method-i-to_param">ActiveRecord::Integration</a></li>
    </ul>
  </li>
  <li>:gem: <a href="https://github.com/magnusvk/counter_culture">counter_culture</a>
    <ul>
      <li>ActiveRecord: <code class="language-plaintext highlighter-rouge">counter_cache</code></li>
      <li>参考: <a href="https://railsguides.jp/association_basics.html#belongs-to%E3%81%AE%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3-counter-cache">Active Record の関連付け</a></li>
    </ul>
  </li>
  <li>ID/Password認証
    <ul>
      <li>ActiveModel: <code class="language-plaintext highlighter-rouge">has_secure_password</code></li>
      <li>参考: <a href="https://api.rubyonrails.org/classes/ActiveModel/SecurePassword/ClassMethods.html">ActiveModel::SecurePassword::ClassMethods</a></li>
    </ul>
  </li>
  <li>:gem: <a href="https://github.com/rubyconfig/config">config</a> (YAML Config Management)
    <ul>
      <li>Rails Custom configuration:</li>
      <li><code class="language-plaintext highlighter-rouge">Rails::Application.config_for</code></li>
      <li><code class="language-plaintext highlighter-rouge">config.x</code></li>
      <li>参考: <a href="https://railsguides.jp/configuring.html#%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%A0%E8%A8%AD%E5%AE%9A">Rails アプリケーションを設定する - Railsガイド</a></li>
    </ul>
  </li>
</ul>

<h3 id="それrubyでできるよ">「それRubyでできるよ」<sup id="fnref:10:1" role="doc-noteref"><a href="#fn:10" class="footnote" rel="footnote">9</a></sup></h3>

<p>gemを使わずともRubyでもできるよってケースもあります。</p>

<ul>
  <li>:gem: <a href="https://github.com/pry/pry">pry</a>
    <ul>
      <li>Ruby 2.4: <code class="language-plaintext highlighter-rouge">binding.irb</code></li>
      <li>Ruby 2.7: REPL Syntax Highlighting</li>
    </ul>
  </li>
</ul>

<h3 id="saasに切り出す">SaaSに切り出す</h3>

<p>処理をSaaSに切り出す、という意味では下記の例があります。</p>

<ul>
  <li><a href="https://auth0.com/jp/">Auth0</a>
    <ul>
      <li>ユーザー認証ロジックをAuth0に移譲</li>
      <li>認証にともなうMFA、パスワードリセット、セキュリティ対策などの面倒な実装をAuth0が肩代わり</li>
    </ul>
  </li>
  <li><a href="https://sentry.io/welcome/">Sentry</a>
    <ul>
      <li>エラー通知をSentryに移譲</li>
      <li>サービスにエラーをぽんぽん投げ込めばいい感じにエラーをアグリゲーション・可視化・各種通知してくれる</li>
    </ul>
  </li>
  <li><a href="https://newrelic.co.jp/">NewRelic</a>/<a href="https://www.datadoghq.com/ja/">Datadog</a>
    <ul>
      <li>APM (Application Performance Monitoring)を NewRelic/Datadog APMでやる</li>
      <li>自前で Elasticsearch + Kibana 環境を構築してもいいが、構築コスト・運用コストともに高くつく</li>
    </ul>
  </li>
</ul>

<h3 id="sub-rails-wayまとめ">「Sub-Rails Way」まとめ</h3>

<p>gem を使うことでFat Model対処法のバリエーションがぐっと広がります。独自実装でModelを太らせることをせず、使えるgemは積極的に利用していくとよいでしょう。</p>

<p>一方、gemを使わずともRails標準で解決できることも実は多くあるので見極めた上でgem導入しましょう。</p>

<p>また、選択肢はさほど多くないものの、最近はさまざまな便利SaaSが出ているので SaaSを使うのもFat Model対抗手段の１つとして検討してもよいでしょう。</p>

<h2 id="non-rails-way">Non-Rails Way</h2>

<p>Non-Railsはレールに乗らない別のレール、独自路線のことです。</p>

<p><img src="/images/posts/ginzarails-21/non-rails-way.png" alt="fit" /></p>

<p>つまり自らレールを作っていくスタイルです。</p>

<h3 id="form-model">Form Model</h3>

<p>Form Modelとは、<code class="language-plaintext highlighter-rouge">include ActiveModel</code>したRubyクラスのことです。</p>

<p>巷ではForm Objectと呼ばれることが多いですが、＜Formに特化したActiveModel＞という意味で、あえてForm Modelと本発表では呼んでいます。</p>

<p>フォームとForm Modelは一対一で紐付きます。こうすることで <strong>特定の＜Formのユースケース＞に対応したModel</strong> が作成可能になります。</p>

<p>💎 gemの実装としては下記のようなものがあります。</p>

<ul>
  <li><a href="https://github.com/trailblazer/reform">reform</a></li>
  <li><a href="https://github.com/dry-rb/">dry-rb</a>シリーズ（旧・<a href="https://github.com/solnic/virtus">virtus</a>）</li>
</ul>

<p>Form Modelの使い所としては下記のように整理できると思います。</p>

<table>
  <thead>
    <tr>
      <th>紐づく<br />テーブル数</th>
      <th>Form Modelのユースケース</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>問い合わせフォームなどテーブルを作るまでもないフォームで利用</td>
    </tr>
    <tr>
      <td>1</td>
      <td>-</td>
    </tr>
    <tr>
      <td>2以上</td>
      <td><code class="language-plaintext highlighter-rouge">accepts_nested_attributes_for</code>の代わりとして、複雑なフォームの組み立て時に利用</td>
    </tr>
  </tbody>
</table>

<p>テーブルとフォームが1対1で紐づく場合はRails Wayで解決させるのが素直な実装</p>

<p>その他の特定のユースケースに特化したForm Model実装としては、下記のようなものが考えられます。</p>

<ul>
  <li>SearchForm: 条件に基づく検索に特化したフォーム</li>
  <li>DownloadForm: CSVなどのダウンロードに特化したフォーム</li>
</ul>

<h3 id="poro">PORO</h3>

<p>POROとはPlain Old Ruby Objectの略です。元ネタはPoEAAのPOJO (Plain Old Java Object)です。</p>

<p>POROは、ActiveRecordの機能に依存しない純粋なRuby実装です。なので<code class="language-plaintext highlighter-rouge">include ActiveModel</code>しているRubyクラスは個人的にはPOROとは呼んでいません。</p>

<p>純粋なRuby実装なのである意味、 <strong>Ruby Way</strong> とも言うことができます。</p>

<p>POROの主な用途としてはModelの補助輪的な役割だと考えています。</p>

<p>例えば下記の例ではクラスメソッド<code class="language-plaintext highlighter-rouge">create!</code>呼び出し時に引数を受け取って<code class="language-plaintext highlighter-rouge">create!</code>インスタンスメソッド内でトランザクションを張って複数モデルの更新を行っています。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">PostWithNotifications</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">create!</span><span class="p">(</span><span class="n">creator</span><span class="p">:,</span> <span class="n">body</span><span class="p">:)</span>
    <span class="n">new</span><span class="p">(</span><span class="ss">creator: </span><span class="n">creator</span><span class="p">,</span> <span class="ss">body: </span><span class="n">body</span><span class="p">).</span><span class="nf">create!</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">creator</span><span class="p">:,</span> <span class="n">body</span><span class="p">:)</span>
    <span class="vi">@creator</span> <span class="o">=</span> <span class="n">creator</span>
    <span class="vi">@body</span> <span class="o">=</span> <span class="n">body</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">create!</span>
    <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="p">.</span><span class="nf">transaction</span> <span class="k">do</span>
      <span class="n">create_post!</span>
      <span class="n">create_notifications!</span>
    <span class="k">end</span>    
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>このRubyクラスの場合、＜<code class="language-plaintext highlighter-rouge">Post</code>作成とともに<code class="language-plaintext highlighter-rouge">Notification</code>も作成する＞という複数モデル更新のユースケースをPOROに閉じ込めたということができるでしょう。</p>

<h3 id="service-class">Service Class</h3>

<p>続いてはサービスクラスです。</p>

<p>サービスクラスに関してはもしかしたら賛否両論あるかもしれません。サービスという概念がデカすぎる故に、人によって使い方・解釈が異なり、サービスクラスにまつわる巷のすれ違いを起こしている印象があります。</p>

<p>サービスクラスに関してはまずはサービスの定義問題があると思っています。つまり「あなたの言うServiceってなんですか？」という問題です。</p>

<p>一口にサービスといっても様々な文脈のサービスがあります。</p>

<table>
  <thead>
    <tr>
      <th>Architecture</th>
      <th>Service Name</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>PoEAA</strong></td>
      <td>Service Layer</td>
    </tr>
    <tr>
      <td><strong>DDD</strong></td>
      <td>Service Class</td>
    </tr>
    <tr>
      <td><strong>Onion Architecture</strong></td>
      <td>Application Service, Domain Service</td>
    </tr>
    <tr>
      <td><strong>Rails “Service”</strong> ?</td>
      <td>上記のどれでもない”Service”<br />上記を組み合わせた”Service”</td>
    </tr>
  </tbody>
</table>

<p>「どういう文脈のサービスか？」を明確にした上で議論しないとサービスクラスの定義・概念がボンヤリしてしまう印象です。なのでサービスクラスを導入する際は、サービスクラスの定義・使い方を明確にした上でチームに導入していくのが良いと思います。</p>

<p>個人的な見解にはなりますが、＜特定のユースケースの解決＞という意味においてはInteractorのほうが少なくともRailsにおいては筋が良いと考えています。</p>

<p>また、個人的に下手にサービスという巨大で強い概念を持ち込むより、POROという概念で雑にまとめたほうが好みだったりします。</p>

<h3 id="1-table-multiple-models">1 Table Multiple Models</h3>

<p>一つのテーブルに複数Modelを紐付けるアプローチです。</p>

<p>Rails WayだとSTIでのみこれは実現可能ですが、STIを使わずにがんばってアプリケーションコードで複数モデルを表現しちゃいましょうというやり方です。</p>

<p>コードにすると、例えば下記のようなコードになります。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">User::AsSignUp</span> <span class="o">&lt;</span> <span class="no">User</span>
  <span class="n">validates</span> <span class="ss">:password</span><span class="p">,</span> <span class="o">...</span>
  <span class="n">after_create</span> <span class="ss">:send_welcome_email</span>

  <span class="kp">private</span>

  <span class="k">def</span> <span class="nf">send_welcome_email</span>
    <span class="o">...</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>この例では＜<code class="language-plaintext highlighter-rouge">User</code>のサインアップ＞というユースケースにのみ特化したActiveRecordのModelを作成しています。</p>

<p>ただこの実装に関しては、1 Table 1 ModelというRailsのパラダイム（規約）を壊すことになってしまうので、いささか危険思想という印象があります。</p>

<p>ただ僕自身実際にプロダクションに導入して運用した経験はないので、もし実運用における成功例お持ちの方がいれば教えていただけると幸いです。</p>

<h3 id="non-rails-wayまとめ">「Non-Rails Way」まとめ</h3>

<p>4つの Non-Railsを紹介しました。</p>

<ol>
  <li>Form Model</li>
  <li>PORO</li>
  <li>Service Class</li>
  <li>1 Table Multiple Models</li>
</ol>

<p>これらをうまく導入できればFat Modelを倒す強力な武器となるのは間違いないでしょう。</p>

<p>どれをどう導入するかに関しては正解はないと思うのでチームにあった手法を選択すると良いと考えています。</p>

<p>といっても「どれを導入すればいいかわからん…」ってなると思うので個人的なおすすめアプローチを紹介すると、モデルを太らせてしまうような複雑なフォームに関してはForm Modelで表現するのがわかりやすいと思います。</p>

<p>何らかのユースケースに特化したクラスを作りたいのであれば、Sub-Railsのセクションで紹介したInteractorを使うのが個人的にはオススメです。</p>

<p>上記で足りないユースケースが出てきた場合、POROと総称してModelの補助輪となるようなRubyクラスを用意してあげると良いかと思います。</p>

<h2 id="全体のまとめ">全体のまとめ</h2>

<p>Fat Modelを倒すための3つのアプローチを紹介しました。</p>

<ol>
  <li><strong>Rails Way</strong>: Railsの規約に沿った開発アプローチ</li>
  <li><strong>Sub-Rails Way</strong>: Railsの規約をgemで補強・拡張するアプローチ</li>
  <li><strong>Non-Rails Way</strong>: Railsの規約から外れる独自実装アプローチ</li>
</ol>

<p>まずは、 <strong>Rails Way</strong> + <strong>Sub-Rails Way</strong> でFat Modelをダイエットできないか考えましょう。小規模なRailsアプリケーションであれば Rails Way + Sub-Rails Way で十分戦えると思います。</p>

<p>Rails Way + Sub-Rails Way だけで立ち行かなくなった場合に、必要に応じて適切な <strong>Non-Rails Way</strong> を取り入れていきましょう。</p>

<p><strong>Non-Rails Way</strong> はチーム毎に最適解があると思っています。チームで合意できる独自路線を選択・導入すればよいのではないでしょうか。</p>

<h2 id="参考資料">参考資料</h2>

<ul>
  <li>書籍
    <ul>
      <li><a href="https://amzn.to/2TO3ZTe">エンタープライズアプリケーションアーキテクチャパターン</a></li>
      <li><a href="https://amzn.to/2XfXKJT">Clean Architecture　達人に学ぶソフトウェアの構造と設計</a></li>
      <li><a href="https://amzn.to/3exaz8y">エリック・エヴァンスのドメイン駆動設計</a></li>
      <li><a href="https://leanpub.com/growing-rails">Growing Rails Applications in Practice</a> by Henning Koch and Thomas Eisenbarth</li>
    </ul>
  </li>
  <li>アーキテクチャにまつわる資料
    <ul>
      <li><a href="https://martinfowler.com/eaaDev/">Martin Fowler: Development of Further Patterns of Enterprise Application Architecture</a></li>
      <li><a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html">Clean Coder Blog: The Clean Architecture</a></li>
      <li><a href="https://jeffreypalermo.com/2008/07/the-onion-architecture-part-1/">The Onion Architecture : part 1 | Programming with Palermo</a></li>
      <li><a href="https://guides.hanamirb.org/architecture/interactors/">Architecture: Interactors | Hanami Guides</a></li>
      <li><a href="https://qiita.com/yuku_t/items/961194a5443b618a4cac">中規模Web開発のためのMVC分割とレイヤアーキテクチャ - Qiita</a></li>
    </ul>
  </li>
  <li>Rails公式ドキュメント
    <ul>
      <li><a href="https://guides.rubyonrails.org/association_basics.html">Active Record Associations — Ruby on Rails Guides</a></li>
      <li><a href="https://guides.rubyonrails.org/active_model_basics.html">Active Model Basics — Ruby on Rails Guides</a></li>
      <li><a href="https://api.rubyonrails.org/classes/ActiveRecord/NestedAttributes/ClassMethods.html">accepts_nested_attributes_for</a></li>
      <li><a href="https://api.rubyonrails.org/classes/ActiveRecord/Inheritance.html">ActiveRecord::Inheritance</a></li>
      <li><a href="https://api.rubyonrails.org/v6.0.2.1/classes/ActiveSupport/Concern.html">ActiveSupport::Concern</a></li>
    </ul>
  </li>
  <li>Form Model (Form Object)について
    <ul>
      <li><a href="https://tech.libinc.co.jp/entry/2019/04/05/113000">Railsで複数モデルを扱うフォームをすっきり書く（Formオブジェクト） - LiBz Tech Blog</a></li>
      <li><a href="https://moneyforward.com/engineers_blog/2018/12/15/formobject/">accepts_nested_attributes_forを使わず、複数の子レコードを保存する | Money Forward Engineers’ Blog</a></li>
      <li><a href="https://discourse.clean-rails.org/t/model-form-1-1/14">Model と画面上の form が1対1で一致しない場合、どのように実装するのが綺麗なのか？ - clean-rails.org</a></li>
    </ul>
  </li>
  <li>Service Class (Service Object) について
    <ul>
      <li><a href="https://techracho.bpsinc.jp/hachi8833/2017_10_16/46482">Railsで重要なパターンpart 1: Service Object（翻訳）｜TechRacho（テックラッチョ）〜エンジニアの「？」を「！」に〜｜BPS株式会社</a></li>
      <li><a href="https://qiita.com/joker1007/items/2a03500017766bdb0234">てめえらのRailsはオブジェクト指向じゃねえ！まずはCallbackクラス、Validatorクラスを活用しろ！ - Qiita</a></li>
      <li><a href="https://intersect.whitefusion.io/the-art-of-code/why-service-objects-are-an-anti-pattern">Why Service Objects are an Anti-Pattern — INTERSECT</a></li>
      <li><a href="https://techracho.bpsinc.jp/hachi8833/2018_04_16/55130">Service Objectがアンチパターンである理由とよりよい代替手段（翻訳）｜TechRacho（テックラッチョ）〜エンジニアの「？」を「！」に〜｜BPS株式会社</a></li>
    </ul>
  </li>
  <li><a href="https://speakerdeck.com/willnet/concerns-about-concerns">Concerns about Concerns - Speaker Deck</a></li>
  <li><a href="https://tech.kitchhike.com/entry/2018/02/28/221159">Decorator と Presenter を使い分けて、 Rails を ViewModel ですっきりさせよう - KitchHike Tech Blog</a></li>
  <li><a href="https://qiita.com/hanachin_/items/ba1dd93905567d88145c">ActiveRecordのモデルが1つだとつらい - Qiita</a></li>
</ul>

<h2 id="後編質問感想編">後編（質問・感想編）</h2>

<p>別記事にまとめました。</p>

<p><a href="/how-to-deal-with-fat-model-after">銀座Rails#21で「Fat Modelの倒し方」を発表しました 〜質問・感想編〜</a></p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><a href="http://weblog.jamisbuck.org/2006/10/18/skinny-controller-fat-model">Buckblog: Skinny Controller, Fat Model</a> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:a" role="doc-endnote">
      <p><a href="https://speakerdeck.com/hshimoyama/rails-with-applicationmodel">ApplicationModel のある風景 - Speaker Deck</a> <a href="#fnref:a" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:b" role="doc-endnote">
      <p><a href="https://speakerdeck.com/yasaichi/what-is-ruby-on-rails-and-how-to-deal-with-it">Ruby on Railsの正体と向き合い方 - Speaker Deck</a> <a href="#fnref:b" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:c" role="doc-endnote">
      <p><a href="https://leanpub.com/growing-rails">Growing Rails Applications in Practice</a> <a href="#fnref:c" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:6" role="doc-endnote">
      <p><a href="https://twitter.com/dhh/status/964244090224128001">https://twitter.com/dhh/status/964244090224128001</a> <a href="#fnref:6" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:5" role="doc-endnote">
      <p>PoEAA: <a href="https://www.martinfowler.com/eaaCatalog/singleTableInheritance.html">Single Table Inheritance</a> <a href="#fnref:5" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:7" role="doc-endnote">
      <p><a href="https://github.com/rails/rails/pull/26976#discussion_r87855694">https://github.com/rails/rails/pull/26976#discussion_r87855694</a> <a href="#fnref:7" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:8" role="doc-endnote">
      <p>参考: <a href="https://amzn.to/3cekmi3">『Rubyによるデザインパターン』</a> 第11章 オブジェクトを改良する：Decorator <a href="#fnref:8" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:10" role="doc-endnote">
      <p>Ruby/Rails公式の提供する機能はgemより貧弱だったりするのであしからず <a href="#fnref:10" class="reversefootnote" role="doc-backlink">&#8617;</a> <a href="#fnref:10:1" class="reversefootnote" role="doc-backlink">&#8617;<sup>2</sup></a></p>
    </li>
  </ol>
</div>]]></content><author><name>Toshimaru</name></author><category term="presentation" /><category term="rails" /><category term="activerecord" /><summary type="html"><![CDATA[銀座Rails#21で「Fat Modelの倒し方」と題して発表してきた。　肥大化したRailsアプリケーション（Fat Rails Application）において最も辛いレイヤーはどこでしょうか？ 僕はFat Modelだと考えています。 Fat Modelを倒すためのアプローチを 1. Rails Way 2. Sub-Rails Way 3. Non-Rails Way の３つに分けて整理します。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/ginzarails-21/og.jpg" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/ginzarails-21/og.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Roppongi.rb#8で「Make Rails Documents SEO(Search Engine Optimized)」を発表しました</title><link href="https://blog.toshimaru.net/make-rails-documents-seo-search-engine-optimized/" rel="alternate" type="text/html" title="Roppongi.rb#8で「Make Rails Documents SEO(Search Engine Optimized)」を発表しました" /><published>2019-02-25T00:00:00+09:00</published><updated>2019-02-27T00:00:00+09:00</updated><id>https://blog.toshimaru.net/make-rails-documents-seo-search-engine-optimized</id><content type="html" xml:base="https://blog.toshimaru.net/make-rails-documents-seo-search-engine-optimized/"><![CDATA[<p><a href="https://roppongirb.connpass.com/event/118218/">Roppongi.rb #8</a>にて「Make Rails Documents SEO(Search Engine Optimized)」と題して発表してきた。</p>

<h2 id="発表スライド">発表スライド</h2>

<script async="" class="speakerdeck-embed" data-id="2238d7f3d662436b943b125a7b10fec1" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script>

<h2 id="railsdocgithubio">railsdoc.github.io</h2>

<p>発表では僕が過去に行ったいくつかのRails公式ドキュメントのSEO対応の紹介とともに、現在進めているプロジェクトである<a href="https://railsdoc.github.io/">railsdoc.github.io</a>を紹介した。</p>

<p>GitHub: <a href="https://github.com/railsdoc/railsdoc.github.io">railsdoc/railsdoc.github.io: Rails API Documentation.</a></p>

<h2 id="railsdocgithubioのゴール">railsdoc.github.ioのゴール</h2>

<ul>
  <li><a href="https://api.rubyonrails.org/">api.rubyonrails.org</a>をSEO強くする</li>
  <li><a href="https://api.rubyonrails.org/">api.rubyonrails.org</a>を使いやすくする</li>
</ul>

<p>下記はついでにできると良いなーと考えていること。</p>

<ul>
  <li>フロントの技術を少しだけモダンに
    <ul>
      <li><a href="https://getbootstrap.com/">bootstrap</a>を使ってデザイン構成しやすくする</li>
    </ul>
  </li>
  <li>GitHubといい感じの連携</li>
  <li>AMP対応もできると良さそう</li>
</ul>

<h2 id="railsdocgithubioの今後">railsdoc.github.ioの今後</h2>

<p>発表内で紹介したが今後については下記のように考えている。</p>

<ul>
  <li>コードベース整備中 &amp; 未実装箇所の実装</li>
  <li>folk版sdocじゃない独自のドキュメント生成gemを作りたい</li>
</ul>

<h2 id="紹介したprissue">紹介したPR/Issue</h2>

<ul>
  <li><a href="https://github.com/rails/weblog/pull/88">Introduce jekyll-seo-tag by toshimaru · Pull Request #88 · rails/weblog</a></li>
  <li><a href="https://github.com/rails/homepage/pull/73">Add Jekyll SEO tag and Jekyll sitemap by benbalter · Pull Request #73 · rails/homepage</a></li>
  <li><a href="https://github.com/rails/rails/pull/34860">Make Ruby on Rails Guides SNS-friendly by toshimaru · Pull Request #34860 · rails/rails</a></li>
  <li><a href="https://github.com/rails/rails/issues/27633">No Rails 5 in apidock.com/rails · Issue #27633 · rails/rails</a></li>
</ul>

<h2 id="紹介したrails公式ドキュメント">紹介したRails公式ドキュメント</h2>

<ol>
  <li><a href="rubyonrails.org">rubyonrails.org</a></li>
  <li><a href="weblog.rubyonrails.org">weblog.rubyonrails.org</a></li>
  <li><a href="guides.rubyonrails.org">guides.rubyonrails.org</a></li>
  <li><a href="api.rubyonrails.org">api.rubyonrails.org</a></li>
</ol>

<h2 id="その他">その他</h2>

<ul>
  <li>発表には<a href="https://www.deckset.com/">Deckset 2</a>を使った（ずっとDeckset1使ってたけど2にUpdateした）</li>
  <li>何かあればイシューに書いてほしい <a href="https://github.com/railsdoc/railsdoc.github.io/issues">github.com/railsdoc/railsdoc.github.io/issues</a></li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="presentation" /><category term="seo" /><category term="rails" /><summary type="html"><![CDATA[Roppongi.rb #8にて「Make Rails Documents SEO(Search Engine Optimized)」と題して発表してきた。発表スライドは下記になる。発表では僕が過去に行ったいくつかのRails公式ドキュメントのSEO対応の紹介とともに、現在進めているプロジェクトであるrailsdoc.github.ioを紹介した。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/roppongirb8/og.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/roppongirb8/og.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">railsdm2018で「ActiveRecordデータ処理アンチパターン」を発表しました</title><link href="https://blog.toshimaru.net/rdm2018-active-record-anti-patterns/" rel="alternate" type="text/html" title="railsdm2018で「ActiveRecordデータ処理アンチパターン」を発表しました" /><published>2018-03-27T00:00:00+09:00</published><updated>2018-03-27T00:00:00+09:00</updated><id>https://blog.toshimaru.net/rdm2018-active-record-anti-patterns</id><content type="html" xml:base="https://blog.toshimaru.net/rdm2018-active-record-anti-patterns/"><![CDATA[<p><a href="https://railsdm.github.io/2018/">Rails Developers Meetup 2018</a>で「ActiveRecordデータ処理アンチパターン」というタイトルで発表してきました。</p>

<h2 id="発表資料">発表資料</h2>

<script async="" class="speakerdeck-embed" data-id="2bb9d7ceea4b4987bf4c8618a53a1e68" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>

<h2 id="発表概要">発表概要</h2>

<blockquote>
  <p>ActiveRecordはWebエンジニア達が嫌う（？）SQLを書かずとも、Rubyオブジェクトで気軽にデータベースへアクセスできる魔法のようなツールです。しかし便利な反面、何も考えずにゴリゴリActiveRecordを使ってDBアクセスしていると、劇的に重たいクエリが発行されたり非効率的なクエリが量産されたりします。</p>

  <p>本発表ではそれらActiveRecordで陥りがちな罠をパターン化し、ActiveRecordデータ処理アンチパターンとして発表します。</p>

  <p>※発表では実際のサンプルコードとともにパフォーマンスの計測結果も紹介します。</p>
</blockquote>

<h2 id="事前に公開したエントリ">事前に公開したエントリ</h2>

<p>発表資料に出てくる最初の事例はこちらがベースの事例となっています。</p>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">今月末のRails Developer Meetupに先駆けてRailsの遅いバッチ処理を400倍速くする話を書きました  | Rails/ActiveRecord バッチ処理の最適化 - Hack Your Design! <a href="https://t.co/i7JZnZcuLc">https://t.co/i7JZnZcuLc</a></p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/970546164725501952?ref_src=twsrc%5Etfw">March 5, 2018</a></blockquote>

<h2 id="ソースコード">ソースコード</h2>

<p>実際使ったコード、ベンチマーク結果はこちらに上がってます。コードは<code class="language-plaintext highlighter-rouge">lib/tasks/batch.rake</code>、スキーマは<code class="language-plaintext highlighter-rouge">schema.rb</code>、シードデータは<code class="language-plaintext highlighter-rouge">db/*_seed.csv</code>、ベンチマーク結果はCircleCIをそれぞれ参照ください。</p>

<p><a href="https://github.com/toshimaru/rdm-rails5.1">https://github.com/toshimaru/rdm-rails5.1</a></p>

<h2 id="発表モチベーション">発表モチベーション</h2>

<p>今回の発表に至るモチベーションとしては、僕が実際に踏んだActiveRecordの重い処理とか他のエンジニアが書いたActiveRecordコードのパフォーマンス改善のための修正などをやっている中で、その良くない処理及びそれに対する解決アプローチがパターン化できると思ったからです。</p>

<p>僕のアタマの中に「こういうアンチパターンがありそう」というアンチパターン候補がある程度リストアップされていたので、今回の発表を機にそれらにそれっぽい名前を付けて、同時に机上の空論にならないようにそれらをコードに落として、聞き手がイメージしやすいように具体的な事例とともに紹介しました。</p>

<p>結果として、自分の中にあったActiveRecordアンチパターンを命名とともに整理できたことは大変良かったと思っています。またこの資料さえチームに共有しとけば、今後レビューのときとかでもアンチパターンに関するコミュニケーションがしやすくなって個人的に助かりそうです。</p>

<h2 id="紹介したアンチパターン">紹介したアンチパターン</h2>

<p>発表内で紹介したアンチパターンがこちらです。</p>

<ol>
  <li>All Each Pattern</li>
  <li>N+1 Update Queries Pattern</li>
  <li>Ruby Aggregation Pattern</li>
  <li>N+1 Queries Pattern</li>
  <li>Unnecessary Query Pattern</li>
  <li>Unnecessary Mode Initialization Pattern</li>
</ol>

<h2 id="紹介できなかったアンチパターン">紹介できなかったアンチパターン</h2>

<p>何かしらアンチパターン化できそうだけど、時間の都合上しなかったアンチパターンがこちらです。発表しなかったので命名は適当です。</p>

<h3 id="なんでもincludesパターン">なんでもincludesパターン</h3>

<p><code class="language-plaintext highlighter-rouge">joins</code>で良いのになんでも<code class="language-plaintext highlighter-rouge">includes</code>で解決しようとしちゃうパターン。このへんは下記の解説に詳しいです。</p>

<p><a href="https://qiita.com/k0kubun/items/80c5a5494f53bb88dc58">ActiveRecordのjoinsとpreloadとincludesとeager_loadの違い - Qiita</a></p>

<h3 id="too-many-find_or_create_by-パターン">Too many find_or_create_by パターン</h3>

<p><code class="language-plaintext highlighter-rouge">find_or_create_by</code>は、オブジェクトが存在する場合は取得、なければ作成って挙動をするやつです。これをループ内で使いまくっちゃうパターン。</p>

<p>そんなときはSQLのUPSERTの機能を使うのが得策。具体的にはMySQLであれば<code class="language-plaintext highlighter-rouge">INSERT...ON DUPLICATE KEY UPDATE</code>です。</p>

<p>残念なことにUPSERTはActiveRecordの標準機能では提供されていないので、<a href="https://github.com/zdennis/activerecord-import">activerecord-import</a>などのgemを使って解決する必要があります。</p>

<h3 id="has_many関連のcount方法いろいろあるよ問題">has_many関連のcount方法いろいろあるよ問題</h3>

<p>ちゃんとパターン化できていませんが、この問題もなかなか難しい問題です。どのメソッド使ったらよいかはケースバイケースで変わってくるので詳しくは下記を参照されたし。</p>

<p><a href="https://qiita.com/nay3/items/1cda39fb58569d832203">ActiveRecord の has_many関連、件数を調べるメソッドはどれを使えばいい？ - Qiita</a></p>

<h2 id="q--a">Q &amp; A</h2>

<h3 id="アンチパターンの出典は">アンチパターンの出典は？</h3>

<p>全部オレです（笑</p>

<p>一応元ネタというかインスパイアを受けた本としては発表内でも紹介している『SQLアンチパターン』です。</p>

<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=toshimaru-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=4873115892&amp;linkId=6903fbe4f4a55cf4f47b4036bf2f350a"></iframe>

<p>こちらの本が原著は英語で書かれており、それに倣うかたちで英語でアンチパターンを命名しました。まぁ平たく言うとカッコつけて英語にしました以上の理由はありません :smile:</p>

<h3 id="事例１usercreated_atにindex貼らないの">（事例１）User.created_atにINDEX貼らないの？</h3>

<p>下記二点の理由により貼りませんでした。</p>

<ol>
  <li>前提事項としてDBの最適化はしないと述べた</li>
  <li><code class="language-plaintext highlighter-rouge">User.created_at</code> にINDEXを貼ってもINDEX効かない</li>
</ol>

<p><code class="language-plaintext highlighter-rouge">User.created_at</code>にINDEX(<code class="language-plaintext highlighter-rouge">index_users_on_created_at</code>)を貼ったあとの実行計画がこちらになります。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mysql&gt; EXPLAIN UPDATE `users` SET point = point + 100 WHERE (created_at &gt;= '2017-01-01') \G
*************************** 1. row ***************************
           id: 1
  select_type: UPDATE
        table: users
   partitions: NULL
         type: index
possible_keys: index_users_on_created_at
          key: PRIMARY
      key_len: 8
          ref: NULL
         rows: 99574
     filtered: 100.00
        Extra: Using where
1 row in set (0.00 sec)
</code></pre></div></div>

<p>INDEX貼ってても対象範囲が大きいとINDEX効かなくなるんです。そして今回のケースはそれに当たります。（この挙動、実は僕も全然知りませんでした…）</p>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">mysqlで検索の対象範囲が大きくなりすぎるとindexが効かなくなるの知らなかった | [MYSQL] datetimeカラムのインデックスの使われ方をテストしてみた │ revdev <a href="https://t.co/2JK7VD7Ttv">https://t.co/2JK7VD7Ttv</a></p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/974924182369722368?ref_src=twsrc%5Etfw">March 17, 2018</a></blockquote>

<p>テストとして条件の範囲を小さくした実行計画がこちらになります。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mysql&gt; EXPLAIN UPDATE `users` SET point = point + 100 WHERE (created_at &gt;= '2018-01-01') \G
*************************** 1. row ***************************
           id: 1
  select_type: UPDATE
        table: users
   partitions: NULL
         type: range
possible_keys: index_users_on_created_at
          key: index_users_on_created_at
      key_len: 5
          ref: const
         rows: 5903
     filtered: 100.00
        Extra: Using where
1 row in set (0.00 sec)
</code></pre></div></div>

<p>きちんとこちらではINDEXが効いてます。</p>

<h3 id="事例２改善１のコードのモデルってロードされている">（事例２）改善１のコードのモデルってロードされている？</h3>

<p>会場であった質問です。こちらはRails consoleで実際のコードを動かしてあげれば一目瞭然です。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; Post.group(:user_id).select("user_id, SUM(like_count) AS like_count").order("like_count DESC") .limit(100)
  Post Load (976.6ms)  SELECT  user_id, SUM(like_count) AS like_count FROM `posts` GROUP BY `posts`.`user_id` ORDER BY like_count DESC LIMIT 11
=&gt; #&lt;ActiveRecord::Relation [#&lt;Post id: nil, user_id: 2632, like_count: 832&gt;, #&lt;Post id: nil, user_id: 51965, like_count: 800&gt;, #&lt;Post id: nil, user_id: 25068, like_count: 783&gt;, ...]&gt;

&gt; Post.group(:user_id).order("SUM(like_count) DESC") .limit(3000).pluck(:user_id)
   (668.3ms)  SELECT  `posts`.`user_id` FROM `posts` GROUP BY `posts`.`user_id` ORDER BY SUM(like_count) DESC LIMIT 3000
=&gt; [2632, 51965, 25068, 8515, 84933, 67763, 89631, 69494, 78805, 17541, 53344, 7618, 92652, 13704, 94308, 96778, ...
</code></pre></div></div>

<p>一つ目の<code class="language-plaintext highlighter-rouge">.select</code>を使ったコードはログに<code class="language-plaintext highlighter-rouge">Post Load</code>と出現している通り、Postモデルがロードされている一方、<code class="language-plaintext highlighter-rouge">.pluck</code>のほうでは<code class="language-plaintext highlighter-rouge">Post Load</code>とはなにも出ず単純に走ったクエリのみがログに出力されています。</p>

<h3 id="紹介したアンチパターンどれくらいの件数で障害に繋がりそう">紹介したアンチパターン、どれくらいの件数で障害に繋がりそう？</h3>

<p>今回紹介した事例は数千件-数十万くらいの程度のデータ量なのでそこまで酷いパフォーマンス結果は出ませんでしたが、例えば事例１でこれがUserレコード数百万件とか、事例３でレコードが数十万件くらいのオーダーになってくるとボトルネックが表出しそうかな、という印象です。</p>

<p>いずれにせよそこそこの規模のアプリケーションになってくると、数百万レコードを扱うのは当たり前の世界になってくると思うので、そのレコード数をどうActiveRecordの世界で上手に扱うは逃げられないテーマになってくるかなと思います。</p>

<h2 id="発表を終えて">発表を終えて</h2>

<p>30minsと長めの発表は<a href="/aws-summit-tokyo-2015/">AWS Summitぶり</a>だったので時間配分にやや不安があったけど、当日は発表を巻くこともなく余裕をもって25分くらいで発表を終えられたのでよかったです。</p>

<h2 id="その他の資料">その他の資料</h2>

<ul>
  <li>Rails Developer Meetup 2018の全体の発表資料はこちら: <a href="https://qiita.com/dyoshimitsu/items/20a41ab656d2da80e4d9">Rails Developers Meetup 2018 スライドまとめ - Qiita</a></li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="presentation" /><category term="activerecord" /><category term="rails" /><summary type="html"><![CDATA[Rails Developers Meetup 2018で「ActiveRecordデータ処理アンチパターン」というタイトルで発表してきました。紹介したアンチパターン 発表内で紹介したアンチパターンがこちらです。 All Each Pattern N+1 Update Queries Pattern Ruby Aggregation Pattern N+1 Queries Pattern Unnecessary Query Pattern Unnecessary Mode Initialization Pattern 紹介できなかったアンチパターン 何かしらアンチパターン化できそうだけど、時間の都合上しなかったアンチパターンがこちらです。発表しなかったので命名は適当です。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/railsdm/rdm2018.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/railsdm/rdm2018.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">railsdm2017で「「Railsでまだ消耗しているの？」─僕らがRailsで戦い続ける理由─」を発表しました</title><link href="https://blog.toshimaru.net/why-we-use-ruby-on-rails/" rel="alternate" type="text/html" title="railsdm2017で「「Railsでまだ消耗しているの？」─僕らがRailsで戦い続ける理由─」を発表しました" /><published>2017-12-11T00:00:00+09:00</published><updated>2017-12-11T00:00:00+09:00</updated><id>https://blog.toshimaru.net/why-we-use-ruby-on-rails</id><content type="html" xml:base="https://blog.toshimaru.net/why-we-use-ruby-on-rails/"><![CDATA[<p><a href="https://techplay.jp/event/631431">Rails Developers Meetup 2017</a>でLT枠をいただき、「「Railsでまだ消耗しているの？」─僕らがRailsで戦い続ける理由（ワケ）─」と題して発表してきました。ざっくり発表内容をこちらにもまとめてみたいと思います。</p>

<script async="" class="speakerdeck-embed" data-id="68db83f9e02946f08a45817d8fb25b09" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script>

<p>※公開用に一部スライドを編集してあります:wink:</p>

<h2 id="テーマ設定について">テーマ設定について</h2>

<p>Web開発においてGoやPython、PHP、Node.js、Scala、Elixirなど様々な選択肢がある中で「なぜ今、Ruby/Railsを使うのか？」というテーマを個人的に掘り下げてみたかったのでこの機会に発表してみることにしてみました。</p>

<h2 id="railsの2つの哲学">Railsの2つの哲学</h2>

<ol>
  <li><strong>DRY</strong> (Don’t Repeat Yourself): 同じことを繰り返さない</li>
  <li><strong>CoC</strong> (Convention over Configuration): 設定より規約</li>
</ol>

<p>Railsの哲学は上記の２つがありますが、個人的にはDRYよりもCoCがずっと重要だと思ってます。なぜならDRYはプログラミング行為において普遍的な考え方である一方、CoCはRailsが定めたRails独自の規約だからです。</p>

<h2 id="ruby-on-railsの本質">Ruby on Railsの本質</h2>

<p>Ruby on Railsの本質は、<strong>センスの良い規約（=Rail）によって設定および設計の手間を最小限にした</strong> ことだと考えます。</p>

<p>この規約により我々は設定にまつわるコードを数百行書いたりとかする必要もなくなりましたし、設計工程で生じがちな＜俺の考える最強のアプリケーション設計バトル＞や＜俺の考える最強のデータベース設計選手権＞を緩和しコミュニケーションコストを大幅にカットすることができました（とはいえその規約に規定されていない部分の設計はどうするんだという問題は残りますが…）。</p>

<p>この規約によって我々はRuby on Railsで <strong>圧倒的コード量の少なさと生産性の高さを実現</strong> できました。</p>

<h2 id="rails批判〇〇の方が速いよ">Rails批判:「〇〇の方が速いよ」</h2>

<p>パフォーマンス要件がマストでないときにRailsを使いましょう。パフォーマンス要件がマストのケースにおいては（e.g. 広告サーバー）そもそもRubyという言語選択はするべきでないです。</p>

<p>「速い」の定義をどこにおくかも重要なポイントです。この速さを「処理系の速さ」としたらRubyはGoなどには負けますが、「開発の速さ」とした場合はどうでしょうか？　我々にとって価値のある速さはどちらでしょうか？　例えばスタートアップなどにおいて1日でも1時間でも早くPDCAサイクルを回したい場合にRailsのほうが最適ではないでしょうか。</p>

<p>またエンドユーザーにとっての速さは必ずしも処理系の速さとは一致しない点も気をつけてください。かの超絶高速なサイト<a href="https://dev.to/">dev.to</a>はRails製であるという事実を忘れないでください。</p>

<h3 id="devtoはrails製であるという事実">dev.toはRails製であるという事実</h3>

<p>この事実から言えることは <strong>サービス特性と要素技術を正しく理解・把握した上で最適なアーキテクチャを選択する</strong> ことが重要ということです。</p>

<p>例えば<a href="https://dev.to/">dev.to</a> の場合、キャッシュしやすいというサービス特性を利用して、Railsで生成されるコンテンツを爆速CDNであるFastlyに載せて配信させました。これにより結果的に最高の爆速UXを提供できているのです。</p>

<p>つまり速さという点において問題になるレイヤーはアプリケーションサーバーのレイヤーだけではないということです。</p>

<h2 id="rubyrailsが遅いという前に">Ruby/Railsが遅いという前に</h2>

<p>「Ruby/Railsが遅い!」という前に下記はしっかり確認していただきたいものです。</p>

<ul>
  <li>自分のアプリケーション設計やテーブル設計の失敗の責任を、言語やフレームワークに押し付けてはいないか</li>
  <li>するべき最適化をする前に遅いと斬り捨ててはいないか</li>
</ul>

<p>僕の経験上、Railsで”ちゃんと”作ることができれば、爆速ではないかもしれませんがまぁまぁ速いくらいのサイトは実現可能だと思います。</p>

<h2 id="高速化の努力">高速化の努力</h2>

<p>とはいえ高速化の努力はあって、Ruby3に向けてのRuby高速化（いわゆる<a href="http://gihyo.jp/news/report/01/rubykaigi2017/0003">Ruby3x3</a>）や、<a href="https://github.com/Shopify/bootsnap">bootsnap</a>のようなRailsの起動高速などの努力があります。</p>

<h2 id="2018年ruby-on-railsという選択">2018年、Ruby on Railsという選択</h2>

<p>小〜中規模のWebアプリケーション（言い換えるとマイクロサービス化を考えなくても済むような規模）であればRailsで十分戦えると考えています。</p>

<p>なので2018年もRuby on Railsは有効なWebアプリケーションフレームワークの選択肢であり続けでしょう。少なくとも、Ruby on Railsを超えるようなベターオルタナティブが出現しない限りはそうでしょう。</p>

<h2 id="発表を終えて">発表を終えて</h2>

<p>本発表を聞いた人には「じゃあ一生Ruby/Railsを使い続けるのか？」と思われるかもしれませんが、今後Railsくらいの生産性を発揮できてRailsより速いフレームワークが出現するのであれば全然乗り換える準備はあります。</p>

<p>ただドキュメント・ライブラリ・運用実績などの周辺環境も含めてRuby/Rails並みに整うのは相当厳しいように思われますので、あと３年位はRailsの寿命は続くのかなという印象です。</p>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">誰か日本でRubyKaigiじゃなくてRailsKaigiをオーガナイズしてくれる人はいないものか（チラッ<br />めちゃくちゃ人集まることは絶対間違いないと思うのだけど。。。</p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/841439645011394564?ref_src=twsrc%5Etfw">March 14, 2017</a></blockquote>
<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">以前書いたこれ、現場の知見の共有という意味では <a href="https://twitter.com/hashtag/railsdm?src=hash&amp;ref_src=twsrc%5Etfw">#railsdm</a> がやっていってくれてる感ある <a href="https://t.co/XLGDEEKooR">https://t.co/XLGDEEKooR</a></p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/940369828451303424?ref_src=twsrc%5Etfw">December 11, 2017</a></blockquote>

<h2 id="参考">参考</h2>

<ul>
  <li>その他の発表スライドなどはこちら <a href="https://railsdm.github.io/2017/">Rails Developers Meetup 2017</a></li>
  <li>当日のTweetまとめ <a href="https://togetter.com/li/1179895">Rails Developers Meetup 2017 #railsdm - Togetter</a></li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="rails" /><category term="presentation" /><summary type="html"><![CDATA[Rails Developers Meetup 2017でLT枠をいただき、「「Railsでまだ消耗しているの？」─僕らがRailsで戦い続ける理由（ワケ）─」と題して発表してきました。ざっくり発表内容をこちらにもまとめてみたいと思います。ざっくり発表内容をこちらにもまとめてみたいと思います。　※公開用に一部スライドを編集してあります]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/railsdm/rdm2017.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/railsdm/rdm2017.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Roppongi.rb#2で「Infrastructure as (Ruby) Code の現状確認」を発表しました</title><link href="https://blog.toshimaru.net/infrastructure-as-ruby-code-2016/" rel="alternate" type="text/html" title="Roppongi.rb#2で「Infrastructure as (Ruby) Code の現状確認」を発表しました" /><published>2016-11-06T00:00:00+09:00</published><updated>2016-11-06T00:00:00+09:00</updated><id>https://blog.toshimaru.net/infrastructure-as-ruby-code-2016</id><content type="html" xml:base="https://blog.toshimaru.net/infrastructure-as-ruby-code-2016/"><![CDATA[<p>第二回Roppongi.rbを<a href="http://roppongirb.connpass.com/event/42633/">「Infrastructure x Ruby」というテーマで開催</a>した。</p>

<p>僕はその中で「Infrastructure as (Ruby) Code の現状確認」という内容でオープニングLTとして発表したので、その内容をブログにもまとめておく（前回発表分の発表内容まとめはこちら: <a href="http://blog.toshimaru.net/roppongirb-speeding-up-rails/">Roppongi.rbで「Rails高速化戦略」を発表しました</a>）。</p>

<script async="" class="speakerdeck-embed" data-id="786983b0a1f94d1ca1250aa48ce94ed0" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>

<h2 id="目的">目的</h2>

<p>発表の目的としては世に言われる <strong>Infrastructure as Code</strong> の認識・理解を参加者であわせること。</p>

<h2 id="infrastructure-as-codeの意義">Infrastructure as Codeの意義</h2>

<p>大きく３つあると思っている。</p>

<ol>
  <li>インフラ構築手順を秘伝のタレ化させない</li>
  <li>手順をコードに落としてインフラへの変更をトラッキングする</li>
  <li>手順を不変（immutable）にする</li>
</ol>

<h3 id="秘伝のタレ">秘伝のタレ</h3>

<p>秘伝のタレ。一体どういう意味だろうか。まるで秘伝のタレのように継ぎ足し継ぎ足し変更が入り代々受け継がれてきたサーバーを形容する表現が <strong>秘伝のタレ</strong> だ。</p>

<p>秘伝のタレが代々受け継がれている環境なんかでは、メンテナンスされているかどうかまるでわからない「サーバー構築手順書.xls」なんてモノがあったりする。そしてそれは大体において手順書通りにはうまくいかないのが常だ。</p>

<p>インフラ担当者のアタマにしか入っていない隠し味なんかがあったりするとオワタ状態＼(^o^)／。その担当者が退職したりすると誰も現プロダクション環境は再現できません、という状況が出来上がる。</p>

<h3 id="コード化するということ">コード化するということ</h3>

<p>秘伝のタレ化を防ぐために、コード化という行為を行う。ではコード化されることで良い事とはなんだろうか。</p>

<ul>
  <li>コード化される</li>
  <li>➜ Gitでトラック可能になる</li>
  <li>➜ Githubでプルリク可能になる</li>
  <li>➜ Githubでレビュー可能になる</li>
  <li>➜ :blush: = HAPPY!</li>
</ul>

<p>このようにコード化されることでソフトウェア開発のグッドプラクティスであるGithub Workflowに乗ることができる。:surfer:</p>

<h2 id="immutable-infrastructure">Immutable Infrastructure</h2>

<p>次に手順を不変（Immutable）にするということについて。Immutableという言葉はインフラ的文脈ではImmutable Infrastructureという言葉が有名かと思う。</p>

<p>Immutable Infrastructureについては、<a href="http://rebuild.fm/25/">rebuild.fmでnaoyaさんやmizzyさんがmiyagawaさんと話して</a>いたり、<a href="https://speakerdeck.com/naoya/immutable-infrastructure-number-jawsdays">naoyaさんが発表していたり</a>したあたりを契機に日本でも浸透した言葉だと思っている。</p>

<p>出自はというとChad Fowler氏が書いた下記の記事。</p>

<p><a href="http://chadfowler.com/2013/06/23/immutable-deployments.html">Trash Your Servers and Burn Your Code: Immutable Infrastructure and Disposable Components</a></p>

<h3 id="immutable-infrastructure-のキーワード">Immutable Infrastructure のキーワード</h3>

<p>Immutable Infrastructureを僕なりに解釈すると、その言葉の本質は下記のキーワードで表せると思う。</p>

<ul>
  <li>Immutable （不変）</li>
  <li>Disposable（使い捨て）</li>
  <li>Reproducible （再現可能）</li>
  <li>Idempotence（冪等性）</li>
</ul>

<p>Immutable Infrastructureが登場した背景にはAWS, GCPを始めとするIaaSの登場が大きいと思っている。どういうことかというとIaaSでボタン１つでサーバーを上げて必要なくなったら捨てるダイナミックなサーバー、つまり <strong>Disposable</strong> なサーバーが誕生したということが背景の１つにある。</p>

<p>そして、オートスケーリングの恩恵を享受するためにはサーバー・プロビジョニング自動化作業が必要となる。スケール前提のサーバー群はいつ何時でも既存のサーバーと同じ状態のサーバーが立ち上がる必要がある<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>。つまり、構築手順を <strong>Immutable</strong> にし <strong>Reproducible</strong> なサーバー環境にする(= <strong>Idempotence</strong> を担保する)ことが必要。</p>

<h2 id="構成管理ツールの歴史">構成管理ツールの歴史</h2>

<p>メジャーなプロビジョニングツール(構成管理ツール)の歴史を追ってみる。</p>

<ul>
  <li>2005年 <a href="https://docs.puppet.com/puppet/">Puppet</a></li>
  <li>2009年 <a href="https://www.chef.io/chef/">Chef</a></li>
  <li>2012年 <a href="https://www.ansible.com">Ansible</a></li>
  <li>2014年 <a href="https://www.terraform.io">Terraform</a>, <a href="https://github.com/itamae-kitchen/itamae">Itamae</a></li>
</ul>

<h2 id="実装言語別分類">実装言語別分類</h2>

<p>実装言語別に分類してみる。</p>

<table>
  <thead>
    <tr>
      <th>Ruby実装</th>
      <th>Go実装</th>
      <th>Python実装</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Puppet, Chef, Itamae, Serverkit</td>
      <td>Terraform</td>
      <td>Ansible</td>
    </tr>
  </tbody>
</table>

<h2 id="表現別分類">表現別分類</h2>

<p>インフラストラクチャをどうコードで表現しているかの表現体形で分類してみる。</p>

<table>
  <thead>
    <tr>
      <th>RubyによるDSL</th>
      <th>HCLによるDSL</th>
      <th>YAML</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Puppet, Chef, Itamae</td>
      <td>Terraform</td>
      <td>Ansible, Serverkit</td>
    </tr>
  </tbody>
</table>

<h3 id="why-yaml">Why YAML?</h3>

<p>なぜYAMLで表現するのか？ まずはXML/JSONより記述がラクという点がある。そしてYAMLは人間にとってよみやすい、かきやすい、わかりやすいという特徴がある。そしてRailsの設定ファイルなどで一般的に使われている記述フォーマットなので、学習コストが低いという点が利点である。</p>

<h3 id="why-hcl">Why HCL?</h3>

<p><a href="https://github.com/hashicorp/hcl">HCL</a> とは HashiCorp configuration language の略。HCLの<a href="https://github.com/hashicorp/hcl#why">READMEではHLCについてこう説明</a>されている。</p>

<ul>
  <li>:x: JSONダメ。なぜならコメントかけない。しんどい。</li>
  <li>:x: YAMLもダメ。なぜなら初心者には記法むずかしい！</li>
  <li>:x: Rubyとかもダメ。なぜなら自由度高すぎぃ！複雑すぎぃ！</li>
  <li>:o: よろしい、ならば独自言語だ。ということで生まれたのが <strong>HCL</strong></li>
</ul>

<h3 id="why-ruby">Why Ruby?</h3>

<p>なぜRubyを採用するか？ まずはDSLが書きやすいという点。そしてRSpecなどのRuby DSLに代表されるようにRuby DSLは宣言的な記述が可能である。宣言的ということはコードを読んだだけでそのコードの意図が伝わりやすいということだ。そしてDSLといってもRubyはRuby。RubyなのでRubyでできることは何でもできちゃうので、自由度が高い（これは悪い意味に作用することもあってやりすぎるとChefのレシピそのものが秘伝のタレ化する可能性があるので注意）。</p>

<h2 id="infrastructure-as-code-の概念整理">Infrastructure as Code の概念整理</h2>

<p>Infrastructure as Code の概念を整理してみたい。<a href="http://mizzy.org/blog/2013/10/29/1/">mizzyさんのブログでは</a>、プロビジョニングのレイヤーを下記のように分けるような考え方が紹介されていた。</p>

<p><img src="/images/posts/roppongirb2/provisioning-tools.png" alt="provisioning layers" /></p>

<h2 id="シンプルなプロビジョニングレイヤーの考え方">シンプルなプロビジョニング・レイヤーの考え方</h2>

<p>オーケストレーションなどというと抽象的なのとInfrastructure as Codeのスコープが広くなってしまうと思うので、シンプルにこんな風に考えてみるのはどうだろうか。</p>

<p><img src="/images/posts/roppongirb2/infra-as-code-layers.png" alt="infra-as-code-layers" /></p>

<p>上記の考え方で先の構成管理ツールを分類するとこんな感じだ。</p>

<p><img src="/images/posts/roppongirb2/provisioning-categorize.png" alt="provisioning categorize" /></p>

<p>しかしこれで本当に全てはコード化されるか、というとそうではない。サーバーのプロビジョニングでコード化されるのはAWSサービス群のほんの一部、EC2のみだ。</p>

<p><img src="/images/posts/roppongirb2/aws-services.png" alt="AWS services" /></p>

<h2 id="infrastructure-as-code-のカバー範囲">Infrastructure as Code のカバー範囲</h2>

<p>IaaSは仮想サーバ以外にもさまざまなサービスを提供している。AWSの例でいうと、ELB, RDS, VPC, S3, CloudFront, IAM, SecurityGroup などなど。</p>

<p>それらに対するオペレーションをAWS Management ConsoleなどのGUIでやるべきだろうか？</p>

<h3 id="gui-configuration-is-hard">GUI Configuration is hard…</h3>

<p>さきほどのImmutable Infrastructureの文脈でいうと、GUIによる操作はImmutableではない。なぜならGUIは変わるかもしれないし、GUI操作は明確な言語化できないほどにファジーだからだ。では重要な設定をそのGUI任せにしていいのだろうか？</p>

<p>Route53やSecurityGroupなどオペレーションミスで一歩間違うと大障害になりかねない。これらのGUIの設定をimmutableにはできないだろうか。じゃあimmutableなインターフェースであるAPIを叩けばいいじゃない。というところで、<strong>Configuration as Code</strong> という言葉が出て来る。</p>

<p>この考え方を使えばInfrastructure as Codeの概念をさらに良い感じに敷衍できるのではないかと僕は考えた。</p>

<p><img src="/images/posts/roppongirb2/configuratino-as-code.png" alt="Configuration as Code*" /></p>

<p>こう考えるとIaaSの各種サービス群もコード化の対象として捉えることができる。</p>

<h2 id="全てがコードになる例">全てがコードになる例</h2>

<h3 id="route53-configuration">Route53 Configuration</h3>

<p>Route53のコード化例。こんな感じにRuby DSLになる</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">hosted_zone</span> <span class="s2">"example.com."</span> <span class="k">do</span>
  <span class="n">rrset</span> <span class="s2">"example.com."</span><span class="p">,</span> <span class="s2">"A"</span> <span class="k">do</span>
    <span class="n">ttl</span> <span class="mi">300</span>
    <span class="n">resource_records</span><span class="p">(</span>
      <span class="s2">"127.0.0.1"</span><span class="p">,</span>
      <span class="s2">"127.0.0.2"</span>
    <span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>powered by <a href="https://github.com/winebarrel/roadworker">roadworker</a></p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">resource</span> <span class="s">"aws_route53_record"</span> <span class="s">"www"</span> <span class="p">{</span>
 <span class="n">zone_id</span> <span class="o">=</span> <span class="s">"${aws_route53_zone.primary.zone_id}"</span>
 <span class="n">name</span> <span class="o">=</span> <span class="s">"www.example.com"</span>
 <span class="k">type</span> <span class="o">=</span> <span class="s">"A"</span>
 <span class="n">ttl</span> <span class="o">=</span> <span class="s">"300"</span>
 <span class="n">records</span> <span class="o">=</span> <span class="p">[</span><span class="s">"${aws_eip.lb.public_ip}"</span><span class="p">]</span>
<span class="p">}</span>
</code></pre></div></div>

<p>powered by <a href="https://www.terraform.io/docs/providers/aws/r/route.html">AWS: aws_route - Terraform by HashiCorp</a></p>

<h3 id="cloudwatch-alarm">CloudWatch Alarm</h3>

<p>CloudWatchのAlarmだってDSLになる。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">alarm</span> <span class="s2">"alarm1"</span> <span class="k">do</span>
  <span class="n">namespace</span> <span class="s2">"AWS/EC2"</span>
  <span class="n">metric_name</span> <span class="s2">"CPUUtilization"</span>
  <span class="n">dimensions</span> <span class="s2">"InstanceId"</span><span class="o">=&gt;</span><span class="s2">"i-XXXXXXXX"</span>
  <span class="n">period</span> <span class="mi">300</span>
  <span class="n">statistic</span> <span class="ss">:average</span>
  <span class="n">threshold</span> <span class="s2">"&gt;="</span><span class="p">,</span> <span class="mf">50.0</span>
  <span class="n">evaluation_periods</span> <span class="mi">1</span>
  <span class="n">actions_enabled</span> <span class="kp">true</span>
  <span class="n">alarm_actions</span> <span class="p">[]</span>
  <span class="n">ok_actions</span> <span class="p">[]</span>
  <span class="n">insufficient_data_actions</span> <span class="p">[</span><span class="s2">"arn:aws:sns:us-east-1:123456789012:my_topic"</span><span class="p">]</span>
<span class="k">end</span>
</code></pre></div></div>

<p>powered by <a href="https://github.com/winebarrel/radiosonde">radiosonde</a></p>

<h3 id="datadog-alert-configuration">Datadog Alert Configuration</h3>

<p>さらにコード化される対象はIaaSだけではない。Datadogという監視のアラート設定もコード化される。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">monitor</span> <span class="s2">"Check load avg"</span><span class="p">,</span> <span class="ss">:type</span><span class="o">=&gt;</span><span class="s2">"metric alert"</span> <span class="k">do</span>
  <span class="n">query</span> <span class="s2">"avg(last_5m):avg:ddstat.load_avg.1m{host:i-XXXXXXXX} &gt; 1"</span>
  <span class="n">message</span> <span class="s2">"@winebarrel@example.net"</span>
  <span class="n">options</span> <span class="k">do</span>
    <span class="n">locked</span> <span class="kp">false</span>
    <span class="n">new_host_delay</span> <span class="mi">300</span>
    <span class="n">notify_no_data</span> <span class="kp">true</span>
    <span class="n">no_data_timeframe</span> <span class="mi">2</span>
    <span class="n">notify_audit</span> <span class="kp">true</span>
    <span class="n">silenced</span><span class="p">({})</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>powered by <a href="https://github.com/winebarrel/barkdog">barkdog</a></p>

<h3 id="github-member-management">Github Member Management</h3>

<p>Githubのメンバー管理だってTerraformでできちゃうんだぜ。</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">resource</span> <span class="s">"github_membership"</span> <span class="s">"membership_for_some_user"</span> <span class="p">{</span>
    <span class="n">username</span> <span class="o">=</span> <span class="s">"SomeUser"</span>
    <span class="n">role</span> <span class="o">=</span> <span class="s">"member"</span>
<span class="p">}</span>

<span class="n">resource</span> <span class="s">"github_repository"</span> <span class="s">"example"</span> <span class="p">{</span>
  <span class="n">name</span>        <span class="o">=</span> <span class="s">"example"</span>
  <span class="n">description</span> <span class="o">=</span> <span class="s">"My awesome codebase"</span>

  <span class="n">private</span> <span class="o">=</span> <span class="no">true</span>
<span class="p">}</span>

<span class="n">resource</span> <span class="s">"github_repository_collaborator"</span> <span class="s">"a_repo_collaborator"</span> <span class="p">{</span>
    <span class="n">repository</span> <span class="o">=</span> <span class="s">"our-cool-repo"</span>
    <span class="n">username</span> <span class="o">=</span> <span class="s">"SomeUser"</span>
    <span class="n">permission</span> <span class="o">=</span> <span class="s">"admin"</span>
<span class="p">}</span>
</code></pre></div></div>

<p>powered by <a href="https://www.terraform.io/docs/providers/github/">Provider: GitHub - Terraform by HashiCorp</a></p>

<h2 id="全てがプルリクになる">全てがプルリクになる</h2>

<p>冒頭に述べたように、コード化されるということはGithubに乗せてプルリクエストを出せるということだ。</p>

<p><img src="/images/posts/roppongirb2/pull-request.png" alt="Pull Request" /></p>

<p>こんなふうにプルリクになっているとレビューも簡単。</p>

<h2 id="コード化するメリット">コード化するメリット</h2>

<ul>
  <li>レビューによるチェック体制により、より安全なConfigurationオペレーションを実現できる</li>
  <li>CIサービスと連携させてテスト・CDの自動化も可能となる</li>
</ul>

<h2 id="まとめ">まとめ</h2>

<ul>
  <li>コード化することによりGithubワークフロー（プルリク→レビュー→マージ）に乗ることができてハッピー :smile:</li>
  <li>Infrastructure as Code = Server Configuration as Code + Service Configuration as Code ➜ サーバーだけではなく、サービスそれ自体もコード化されていく。</li>
</ul>

<h2 id="感想">感想</h2>

<ul>
  <li>今回の発表はKeynoteでスライド作ったけど、Keynoteはレイアウトとかテーマの設定が自由にできてDecksetよりはデザイン凝ろうと思ったときに便利。</li>
</ul>

<h2 id="参考">参考</h2>

<ul>
  <li><a href="https://speakerdeck.com/ryotarai/itamae-infra-as-code-xian-zhuang-que-ren-hui">Itamae - Infra as Code 現状確認会</a></li>
  <li><a href="http://rebuild.fm/25/">Rebuild: 25: Immutable Infrastructure</a></li>
  <li><a href="https://speakerdeck.com/naoya/infrastructure-as-code">Infrastructure as Code // Speaker Deck</a></li>
  <li><a href="http://mizzy.org/blog/2016/04/22/1/">Infrastructure as Code 再考</a></li>
  <li><a href="http://chadfowler.com/2013/06/23/immutable-deployments.html">Trash Your Servers and Burn Your Code: Immutable Infrastructure and Disposable Components</a></li>
  <li><a href="http://martinfowler.com/bliki/InfrastructureAsCode.html">InfrastructureAsCode</a></li>
</ul>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>特定のサーバーにデータに依存してしまわないように、データ的にはステートレスなサーバー構成が前提となる <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Toshimaru</name></author><category term="ruby" /><category term="roppongirb" /><category term="aws" /><category term="presentation" /><summary type="html"><![CDATA[第二回Roppongi.rbを「Infrastructure x Ruby」というテーマで開催した。 僕はその中で「Infrastructure as (Ruby) Code の現状確認」という内容で発表したので、その内容をブログにもまとめておく。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/roppongirb2/og.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/roppongirb2/og.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Roppongi.rbで「Rails高速化戦略」を発表しました</title><link href="https://blog.toshimaru.net/roppongirb-speeding-up-rails/" rel="alternate" type="text/html" title="Roppongi.rbで「Rails高速化戦略」を発表しました" /><published>2016-07-19T00:00:00+09:00</published><updated>2016-07-19T00:00:00+09:00</updated><id>https://blog.toshimaru.net/roppongirb-speeding-up-rails</id><content type="html" xml:base="https://blog.toshimaru.net/roppongirb-speeding-up-rails/"><![CDATA[<p>自分がオーガナイザーを務めた <a href="http://roppongirb.connpass.com/event/33502/">Roppongi.rb #1</a>で「Rails高速化戦略」という題で発表してきました。スライドは下記になります。</p>

<script async="" class="speakerdeck-embed" data-id="37881a2ec2214ef39d85820f3327bbc2" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>

<p>発表内容をこちらのブログでも文章形式でざっとまとめてみたいと思います。</p>

<h2 id="rails-ruby-遅いよね">Rails (Ruby) 遅いよね</h2>

<p>RailsないしRubyはプログラミング言語の中では速くはない言語であることは言うまでもないと思う<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>。 実際に「Rails/Ruby遅いよねって今まで思ったことある方どれくらいいますか？」と会場でも聞いてみたところ、予想では半数以上手を挙げてくれると思ったのだけど、実際は30人中3~4人くらい。あまりにも意外な結果だったので自分なりに理由を分析してみると２つあるかなと思う。</p>

<h3 id="パフォーマンスを求められないから">パフォーマンスを求められないから</h3>

<p>例えば社内の数人が使うような管理画面の場合。この場合、パフォーマンスよりも機能性（ちゃんと検索・閲覧できるかとかCRUD操作ができるかとか）などが優先されると思う。数人だけが使うのでアクセススパイクもないし、パフォーマンスが問題にもなりにくい。</p>

<h3 id="railsをフレームワークとして使っていないから">Railsをフレームワークとして使っていないから</h3>

<p>すごくパフォーマンスを求められるWebアプリの場合、それが事前にわかっているならまずは言語選択レベルでRailsを選択しないかもしれない。今ならGoとかElixirとかScalaとか代替言語もあるのでそちらを選択した場合はRailsは使わないことになるのでRailsの遅さで困ることもない。</p>

<h2 id="それでもやっぱりrailsだ">それでもやっぱりRailsだ…!</h2>

<p>それでもやっぱりRuby好きのRubyっ子であれば、Rubyは使いたい… ということで、Railsの高速化をする上での戦略を紹介。</p>

<h2 id="ruby-version-up">Ruby Version Up</h2>

<p>まずはRubyバージョンアップ。Rubyバージョンの歴史はこんな感じになっている。</p>

<ul>
  <li>2013.2: Ruby 2.0</li>
  <li>2013.12: Ruby 2.1</li>
  <li>2014.12: Ruby 2.2</li>
  <li>2015.12: Ruby 2.3</li>
  <li>20xx: Ruby 3.0</li>
</ul>

<p>去年matzの口からRuby3のコンセプトが発表された。その驚くべき内容が <strong>Ruby 3 x 3</strong> 。</p>

<p><img src="/images/posts/roppongirb/ruby3x3.png" alt="ruby 3 x 3" /></p>

<p>via. <a href="https://www.youtube.com/watch?v=E9bO1uqs4Oc">Ruby3 challenges - RubyKaigi 2015 Keynote - YouTube</a></p>

<h2 id="とあるrailsアプリの場合">とあるRailsアプリの場合</h2>

<p>会社で取り組んでいるプロダクトのRubyのバージョンは基本的に最新バージョンを使うようにしているものの、中にはレガシーな環境もある。下記はあるプロダクトでRuby2.0 から Ruby2.1に上げた例。結果としては、Ruby 2.0 =&gt; 2.1 Ruby Version Up だけで レスポンス速度が約2倍向上した。</p>

<p><img src="/images/posts/roppongirb/ruby2_0-to-2_1.png" alt="" /></p>

<p>このようにRubyバージョンアップによりアプリケーションコード変更ゼロでも<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup>、速度改善が期待できる。古いRubyお使いの方は今すぐRubyのバージョンアップ！</p>

<h2 id="what-about-rails">What about Rails?</h2>

<p>じゃあRailsはどうだろうか。下記は<a href="https://github.com/amatsuda">amatsuda</a>さんのmatzのRuby 3x3 を受けての発表。</p>

<p><img src="/images/posts/roppongirb/rails3x.png" alt="" /></p>

<p><a href="https://speakerdeck.com/a_matsuda/3x-rails">3x Rails // Speaker Deck</a></p>

<p><code class="language-plaintext highlighter-rouge">?</code>が付いていることで分かる通り3倍速くなるという発表というより、まだまだRailsは速くするために工夫の余地があるよ、というような発表。</p>

<p>下記は同じ<a href="https://github.com/amatsuda">amatsuda</a>さんが発表された<a href="http://togetter.com/li/955629">Rails Upgrade Casual Talks</a>での資料です。</p>

<p><img src="/images/posts/roppongirb/rails-verup1.png" alt="" /></p>

<p>via. <a href="https://speakerdeck.com/a_matsuda/rails-upgrade-casual-talks">Rails Upgrade Casual Talks // Speaker Deck</a></p>

<p>たしかに色んな機能が追加されている中、Railsが劇的に速くなることは考えにくい。解決策は…?</p>

<p><img src="/images/posts/roppongirb/rails-verup2.png" alt="" /></p>

<p><strong>歯を食いしばってRails/Rubyをバージョンアップ</strong> :innocent:</p>

<p>Rails 遅くなってもRuby は速くなっているので、どちらも最新版をしっかり追っかけていけば、遅くなることなくRailsの機能拡張も追っかけていけるのでOK.</p>

<h2 id="ボトルネックを潰す">ボトルネックを潰す</h2>

<p>Railsアプリをどうボトルネックを発見し潰していくか？</p>

<h3 id="推測するな計測せよ">推測するな、計測せよ　</h3>

<p>ボトルネックは計測して数値で示すもの。ボトルネックを発見するためのサービス・ツールをいくつか紹介。</p>

<ul>
  <li><a href="https://newrelic.com/">New Relic</a>: 無料で使えて導入もラクでよい</li>
  <li><a href="https://github.com/MiniProfiler/rack-mini-profiler">rack-mini-profiler</a>: 開発環境導入する。クエリやpartialレンダー時間を表示。</li>
  <li><a href="https://github.com/kainosnoema/rack-lineprof">rack-lineprof</a>: Rubyのコードを行単位で計測したい場合に有効</li>
</ul>

<p>ツールを使った結果ボトルネックになりやすい箇所というとRDBまわり。それを解決するgem・機能を紹介。</p>

<h2 id="activerecord-optimization">ActiveRecord Optimization</h2>

<h3 id="mag_right-問題発見型">:mag_right: 問題発見型</h3>

<ul>
  <li><a href="https://github.com/flyerhzm/bullet">bullet</a>: Kill <code class="language-plaintext highlighter-rouge">N+1</code> issue!</li>
  <li><a href="https://github.com/joker1007/activerecord-cause">activerecord-cause</a>: Logs where ActiveRecord actually loads record</li>
</ul>

<h3 id="key-dbスキーマ最適化型">:key: DBスキーマ最適化型</h3>

<ul>
  <li><a href="https://github.com/pboling/flag_shih_tzu">flag_shih_tzu</a>: Bit fields for ActiveRecord</li>
  <li><a href="http://guides.rubyonrails.org/association_basics.html#counter-cache">counter-cache</a>: cacheing count query result
    <ul>
      <li><a href="https://github.com/magnusvk/counter_culture">counter_culture</a>: Better counter-cache</li>
    </ul>
  </li>
</ul>

<h3 id="zap-クエリ効率化型">:zap: クエリ効率化型</h3>

<ul>
  <li><a href="https://github.com/k0kubun/activerecord-precount">activerecord-precount</a>: Yet another counter_cache alternative.</li>
  <li><a href="https://github.com/zdennis/activerecord-import">activerecord-import</a>: bulk inserting data</li>
</ul>

<h2 id="クエリを意識してactiverecord使いこなそう">クエリを意識してActiveRecord使いこなそう</h2>

<p>ActiveRecordもといORマッパの良さってDBを意識しなくて済むところ。でも高速化を行う上でクエリは避けられない壁。DBを意識せずコードを書いている最近のワカモノはもっとクエリを意識しよう！ <del>老害っぽい発言だ</del></p>

<h2 id="パーシャルレンダリングを減らす">パーシャルレンダリングを減らす</h2>

<h3 id="n1-partial-rendering">N+1 partial rendering</h3>

<p>データN個分<code class="language-plaintext highlighter-rouge">render</code>処理が走ってしまうのを、個人的に <strong>N+1 rendering</strong> と呼んでいる。データの数N+親のビュー1回で <code class="language-plaintext highlighter-rouge">N+1</code>. 例えばこんなコード。</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- views/items/index --&gt;</span>
<span class="cp">&lt;%</span> <span class="vi">@items</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span> <span class="cp">%&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">render</span> <span class="n">item</span> <span class="cp">%&gt;</span>
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
</code></pre></div></div>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- views/items/_item --&gt;</span>
<span class="nt">&lt;tr&gt;</span>
  <span class="nt">&lt;td&gt;</span><span class="cp">&lt;%=</span> <span class="n">item</span><span class="p">.</span><span class="nf">name</span> <span class="cp">%&gt;</span><span class="nt">&lt;/td&gt;</span>
  <span class="nt">&lt;td&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s1">'Show'</span><span class="p">,</span> <span class="n">item</span> <span class="cp">%&gt;</span><span class="nt">&lt;/td&gt;</span>
  <span class="nt">&lt;td&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s1">'Edit'</span><span class="p">,</span> <span class="n">edit_item_path</span><span class="p">(</span><span class="n">item</span><span class="p">)</span> <span class="cp">%&gt;</span><span class="nt">&lt;/td&gt;</span>
  <span class="nt">&lt;td&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s1">'Destroy'</span><span class="p">,</span> <span class="n">item</span><span class="p">,</span> <span class="ss">method: :delete</span> <span class="cp">%&gt;</span><span class="nt">&lt;/td&gt;</span>
<span class="nt">&lt;/tr&gt;</span>
</code></pre></div></div>

<p>この場合のログはこうなる。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Processing by ItemsController#index as HTML
  Rendering items/index.html.erb within layouts/application
  Item Load (0.3ms)  SELECT "items".* FROM "items"
  Rendered items/_item.html.erb (0.5ms)
  Rendered items/_item.html.erb (0.3ms)
  ...snip...
  Rendered items/_item.html.erb (0.5ms)
  Rendered items/_item.html.erb (0.3ms)
  Rendered items/index.html.erb within layouts/application (57.7ms)
Completed 200 OK in 80ms (Views: 77.1ms | ActiveRecord: 0.3ms)
</code></pre></div></div>

<p>Viewで80msくらいかかっている。</p>

<h3 id="collection-rendering">Collection rendering</h3>

<p>上記の場合、Collectionレンダーの機能を使えばもっと効率的にrenderできる。</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- views/items/index --&gt;</span>
<span class="cp">&lt;%=</span> <span class="n">render</span> <span class="vi">@items</span> <span class="cp">%&gt;</span>
</code></pre></div></div>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- views/items/_item --&gt;</span>
<span class="nt">&lt;tr&gt;</span>
  <span class="nt">&lt;td&gt;</span><span class="cp">&lt;%=</span> <span class="n">item</span><span class="p">.</span><span class="nf">name</span> <span class="cp">%&gt;</span><span class="nt">&lt;/td&gt;</span>
  <span class="nt">&lt;td&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s1">'Show'</span><span class="p">,</span> <span class="n">item</span> <span class="cp">%&gt;</span><span class="nt">&lt;/td&gt;</span>
  <span class="nt">&lt;td&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s1">'Edit'</span><span class="p">,</span> <span class="n">edit_item_path</span><span class="p">(</span><span class="n">item</span><span class="p">)</span> <span class="cp">%&gt;</span><span class="nt">&lt;/td&gt;</span>
  <span class="nt">&lt;td&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s1">'Destroy'</span><span class="p">,</span> <span class="n">item</span><span class="p">,</span> <span class="ss">method: :delete</span> <span class="cp">%&gt;</span><span class="nt">&lt;/td&gt;</span>
<span class="nt">&lt;/tr&gt;</span>
</code></pre></div></div>

<p>この場合のログはこうなる。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Processing by ItemsController#index as HTML
  Rendering items/index.html.erb within layouts/application
  Item Load (0.4ms)  SELECT "items".* FROM "items"
  Rendered collection of items/_item.html.erb [29 times] (6.9ms)
  Rendered items/index.html.erb within layouts/application (10.3ms)
Completed 200 OK in 29ms (Views: 26.4ms | ActiveRecord: 0.4ms)
</code></pre></div></div>

<p>ビューで25msくらい。だいたい上記の例と比べると1/3くらいになっている。</p>

<h2 id="rails-caching">Rails caching</h2>

<p>RailsのCacheの仕組みとして<a href="http://guides.rubyonrails.org/caching_with_rails.html">公式ガイド</a>で3つ紹介されているのだが、ご存知だろうか。</p>

<ol>
  <li><strong>Fragment Cache</strong>: View fragment caching.</li>
  <li><strong>Action Cache</strong>: Controller’s action caching (removed in Rails4).</li>
  <li><strong>Page Cache</strong>: Static page caching (removed in Rails4).</li>
</ol>

<h3 id="1-fragment-cache">1. Fragment Cache</h3>

<p><img src="/images/posts/roppongirb/cache-fragment.png" alt="" /></p>

<ul>
  <li>グローバルナビ・サイドバーなどの多く呼ばれる共通コンテンツに有効</li>
  <li>重い処理が走るビューの一部分であればあるほど高速化が期待できる</li>
  <li>Advanced Usage: <strong>Russian Doll Caching</strong></li>
</ul>

<h3 id="2-action-cache">2. Action Cache</h3>

<p><img src="/images/posts/roppongirb/action-cache.png" alt="" /></p>

<ul>
  <li>Rails4で削除されてgem化: <a href="https://github.com/rails/actionpack-action_caching">actionpack-action_caching</a></li>
  <li>Viewの手前のControllerのAction自体の処理が重い場合に有効</li>
  <li><code class="language-plaintext highlighter-rouge">cache_path</code> でキャッシュキーをカスタマイズ可能
    <ul>
      <li>モデルのupdated_at を組み込んだり、PC/スマフォでキャッシュビュー出し分け可能</li>
    </ul>
  </li>
</ul>

<h3 id="3-page-cache">3. Page Cache</h3>
<ul>
  <li>Rails4で削除されてgem化: <a href="https://github.com/rails/actionpack-page_caching">actionpack-page_caching</a></li>
  <li>キャッシュ対象となるControllerのActionの生成するHTMLをまるっと静的ファイルに吐き出す</li>
  <li>その静的ファイルをNGINXなどのWeb Server/Reverse Proxyでハンドリング</li>
</ul>

<h2 id="railsのキャッシュ戦略">Railsのキャッシュ戦略</h2>
<ol>
  <li>Railsデフォルトの FragmentCache を使ってビューのレンダリングを高速化</li>
  <li>それでもダメな場合や Controller 自体の処理が重い場合なら、ActionCache/PageCache を検討</li>
</ol>

<h3 id="warning-注意">:warning: 注意</h3>
<ul>
  <li>キャッシュしても根っこの問題は消えない</li>
  <li>キャッシュのライフサイクル管理</li>
  <li>用法用量を守って正しくお使いください</li>
</ul>

<p>キャッシュしても根っこの問題はバイパスされるだけでそれ自体が解決されるわけではないので、本質的にはその根っこの問題を潰すほうがキャッシュより優先すべき。キャッシュによって<strong>臭いものには蓋</strong>をしていないか。キャッシュによって大きなボトルネックが隠蔽されていないか。本質的な問題を潰した上でなお高速化したい場合にキャッシュを利用するのが筋の良いキャッシュ戦略だと思う。</p>

<p>またキャッシュを行うことでそのライフサイクル管理も必要になってくることはアタマに入れておきたい。どういう場合にキャッシュがexpireすべきなのか(あるいはexpireすべきでないのか)、updateすべきなのか、削除すべきなのか。この辺もきちんと考えた上でキャッシュに取り組みたい。</p>

<h2 id="静的ファイル配信">静的ファイル配信</h2>

<h3 id="nginx">NGINX</h3>

<p>プロダクション運用においては実際Railsが静的ファイルまでサーブすることはなくて、下記のようにNGINXに静的ファイルをサーブさせることが多い。</p>

<p><img src="/images/posts/roppongirb/nginx.png" alt="" /></p>

<h3 id="cdn">CDN</h3>

<p>さらに言うと、Railsの吐く assets:precompile の成果物は、CDNに乗せちゃって配信を最適化してやるともっとよい。</p>

<p><img src="/images/posts/roppongirb/nginx-cdn.png" alt="" /></p>

<h2 id="レイテンシに負けないプロトコル--http2">レイテンシに負けないプロトコル = HTTP/2</h2>

<p>バンド幅大きくなってもページロード時間は大きく変わらない。<strong>光の速度はこれ以上速くならない</strong>。じゃあどうするか。解決策がHTTP/2.</p>

<p><img src="/images/posts/roppongirb/http2-latency.png" alt="" /></p>

<p><img src="/images/posts/roppongirb/http2.png" alt="" /></p>

<p>via. <a href="http://www.slideshare.net/kazuho/dena-http2">ウェブを速くするためにDeNAがやっていること - HTTP/2と、さらにその先</a></p>

<p>下記のBEFORE/AFTERは画像の配信をHTTPからHTTP/2に変更した場合のリクエストをキャプチャしたもの。</p>

<h3 id="before-http2">Before HTTP/2</h3>

<p>HTTP/2前の状態。リクエストが順番に走っていることが見て取れる。</p>

<p><img src="/images/posts/roppongirb/before-http2.png" alt="" /></p>

<h3 id="after-http2">After HTTP/2</h3>

<p>HTTP/2後の状態。リクエストが見事に多重化されている。</p>

<p><img src="/images/posts/roppongirb/after-http2.png" alt="" /></p>

<p><a href="https://www.httpvshttps.com/">こちらのページ</a>ではHTTPSの画像ロードの速度の速さを体感できる。</p>

<p><img src="/images/posts/roppongirb/HTTP_vs_HTTPS.png" alt="" /></p>

<h2 id="ユーザーの体感速度--サーバーサイドレスポンス--クライアントサイドスピード">ユーザーの体感速度 = サーバーサイドレスポンス + クライアントサイド・スピード</h2>

<p>仮にサーバーレスポンスタイムを<code class="language-plaintext highlighter-rouge">1ms</code>にしたとしても、十分に速くなったとはいえない。なぜなら最終的にユーザーが感じるであろうウェブページの体感速度はサーバーサイドのレスポンス速度とクライアントサイドでのページロードのスピードを足し合わせたものだから。サーバーが0msでレスポンス返しても10秒間クライアントサイドの画面が真っ白だったら、ユーザーにとってはそれは10秒待たされてるのと一緒。</p>

<h3 id="rails-helloworld-app-の場合">Rails HelloWorld App の場合</h3>

<p>Rails5をほぼ素の状態でHello Worldという文字列を出力するアプリをHerokuにデプロイして<a href="https://developers.google.com/speed/pagespeed/insights/">Google PageSpeed Insights</a>で計測してみた。</p>

<p>結果は80点以下… :weary:</p>

<p><img src="/images/posts/roppongirb/render-block-js.png" alt="" /></p>

<p><code class="language-plaintext highlighter-rouge">Should Fix</code>として報告されているのは、headタグ内にあるJS読み込みが Render Blocking してますよ、という内容のもの。Webの高速化はサーバーサイドだけで済むようなラクなもんじゃない。</p>

<h2 id="amp-zap">AMP :zap:</h2>

<p>AMPはWeb高速化のベストプラクティスを詰め込んだ仕様/制限のこと。詳しくは下記が参考になる。</p>

<ul>
  <li><a href="https://medium.com/@cramforce/why-amp-is-fast-7d2ff1f48597#.tcozirlt5">Why AMP is fast — Medium</a></li>
  <li><a href="https://mozaic.fm/episodes/22/amp.html">ep22 AMP | mozaic.fm</a></li>
</ul>

<p>またAMPに対応するとページが速くなる他にもおいしいことがあって、GoogleがAMPページをキャッシュしてコンテンツ配信を肩代わりしてくれるのだ。いうなればAMPのためのGoogle無料CDN。これでオーガニック検索のトラフィックはだいぶラクになるかも？</p>

<p>僕も自分の<a href="http://blog.toshima.ru/">英語Tipsブログ</a>をAMP化してみたが非常に高速にページが表示できている。(完全にAMP化はできていないのだけど) まだAMP試していない人は、AMPすげーはやいのでぜひその速さを体感してみてほしい。そしてWebの高速化にまっすぐ向き合ってもらいたいと思う。</p>

<h2 id="その他の参考資料">その他の参考資料</h2>
<ul>
  <li><a href="https://speakerdeck.com/mirakui/high-performance-rails-long-edition">High Performance Rails (long edition) // Speaker Deck</a></li>
  <li><a href="https://speakerdeck.com/joker1007/railspahuomansuji-ben-falseki">Railsパフォーマンス基本のキ // Speaker Deck</a></li>
  <li><a href="http://parashuto.com/rriver/development/page-speed-optimization">デザイナーやディレクターも知っておきたい、ページ表示速度の高速化の基本 – Rriver</a></li>
</ul>

<h2 id="roppongirb-イベントについて">Roppongi.rb イベントについて</h2>
<ul>
  <li><a href="https://twitter.com/hashtag/roppongirb?f=tweets&amp;vertical=default">#roppongirb hashtag on Twitter</a></li>
  <li>イベント発表資料: <a href="http://roppongirb.connpass.com/event/33502/presentation/">Roppongi.rb 資料一覧 - connpass</a></li>
  <li><a href="http://morizyun.github.io/blog/roppongi-rb-ruby-rails/">Roppongi.rb #1 発表の密度が濃くて楽しかったYO! - 酒と泪とRubyとRailsと</a></li>
</ul>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><a href="https://www.techempower.com/benchmarks/">Round 12 results - TechEmpower Framework Benchmarks</a> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>ただしRubyバージョン差異による非互換性を解消するための変更は必要だけどね。 <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Toshimaru</name></author><category term="rails" /><category term="ruby" /><category term="roppongirb" /><category term="presentation" /><category term="web" /><summary type="html"><![CDATA[自分がオーガナイザーを務めた Roppongi.rb #1で「Rails高速化戦略」という題で発表してきました。スライドは下記になります。発表内容をこちらのブログでも文章形式でざっとまとめてみたいと思います。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/roppongirb/title.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/roppongirb/title.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">JSON Schemaについて発表しました</title><link href="https://blog.toshimaru.net/json-schema-collaboration/" rel="alternate" type="text/html" title="JSON Schemaについて発表しました" /><published>2015-12-09T00:00:00+09:00</published><updated>2015-12-09T00:00:00+09:00</updated><id>https://blog.toshimaru.net/json-schema-collaboration</id><content type="html" xml:base="https://blog.toshimaru.net/json-schema-collaboration/"><![CDATA[<p>「JSON Schemaでバックエンドエンジニアとフロントエンドエンジニアがコラボする」と題して<a href="http://gunosy-beer.connpass.com/event/22825/">エムスリー x Gunosy Beer bash</a>で発表してきました。</p>

<p>当日ハッシュタグ: <a href="https://twitter.com/hashtag/gunosybeer?src=hash">#gunosybeer hashtag on Twitter</a></p>

<h2 id="発表資料point_down">発表資料:point_down:</h2>

<script async="" class="speakerdeck-embed" data-id="ddf8953b3746496a848dd7e4038ece4e" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script>

<h1 id="2-types-of-json-schema">2 Types of JSON Schema</h1>

<p><a href="http://json-schema.org/">JSON Schema and Hyper-Schema</a></p>

<ul>
  <li>JSON Schema</li>
  <li>JSON Hyper-Schema</li>
</ul>

<p><img src="/images/posts/jsonschema/json-schema.png" alt="" /></p>

<h2 id="json-schema">JSON Schema</h2>
<ul>
  <li>JSONの <strong>データフォーマット</strong> を記述する</li>
  <li>人間にも機械にもわかりやすいドキュメント</li>
  <li>フォームでサブミットするデータのバリデーションに使える</li>
  <li>自動テストにも使える</li>
</ul>

<h2 id="json-hyper-schema">JSON Hyper-Schema</h2>
<ul>
  <li><strong>Web APIの仕様</strong> を記述する</li>
  <li>APIで期待するデータをJSON Schemaの形式で記述</li>
  <li>日本ではこっちの方がポピュラー？</li>
</ul>

<p>観測範囲内だと日本のコミュニティでJSON Schemaといったときにこちらを指すことが多い気がする。</p>

<h2 id="コラボレーション図">コラボレーション図</h2>

<p>JSON Schemaでコラボレーションした事例を紹介するよ。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>+------------------+
|                  |
|  Client-side JS  |
|     (React)      |
|                  |
+---+--------+-----+
    |        ^
    |        |            +---------------+
    |  JSON  |  &lt;-------- |  JSON Schema  |
    |        |            +---------------+
    v        |
+---+--------+-----+
|                  |
| Server-side API  |
|     (Rails)      |
|                  |
+------------------+
</code></pre></div></div>

<h2 id="json-schema-for-us">JSON Schema for us</h2>
<ul>
  <li>For Humans
    <ul>
      <li>Clear specification</li>
    </ul>
  </li>
  <li>For Apps
    <ul>
      <li>useful for Validation</li>
      <li>useful for Test</li>
      <li>etc.</li>
    </ul>
  </li>
</ul>

<h2 id="repositories">Repositories</h2>
<ul>
  <li>:point_down: Rails API Repo :point_down:</li>
  <li>:point_right: <strong>JSON Schema Repo</strong> :point_left:</li>
  <li>:point_up_2: Frontend Repo :point_up_2:</li>
</ul>

<p>バックエンドAPIのレポジトリ、フロントエンドのJSレポジトリ、共通で使うJSON Schemaのためのレポジトリ、これら３つを用意した。</p>

<h2 id="workflow">Workflow</h2>

<ol>
  <li>必要なAPIとそこに含まれるべきデータを洗い出し</li>
  <li>1をJSON Schemaに落としこむ</li>
  <li>プルリク！</li>
</ol>

<p>1は仕様・ワイヤーをもとにマークダウンでもスプレッドシートでも荒くアウトプット出す。</p>

<p>バックエンドエンジニアとフロントエンドエンジニアが共通認識を深めながらJSON Schemaレポジトリを育てていく。</p>

<p><img src="/images/posts/jsonschema/schema-pr.png" alt="" /></p>

<h2 id="get-usersid">GET /users/{id}</h2>

<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="c1"># user.schema.yml</span>
<span class="na">$schema</span><span class="pi">:</span> <span class="s">http://json-schema.org/draft-04/schema#</span>
<span class="na">title</span><span class="pi">:</span> <span class="s">User</span>
<span class="na">description</span><span class="pi">:</span> <span class="s">An User</span>
<span class="na">type</span><span class="pi">:</span> <span class="s">object</span>
<span class="na">properties</span><span class="pi">:</span>
  <span class="na">id</span><span class="pi">:</span>
    <span class="na">type</span><span class="pi">:</span> <span class="s">integer</span>
  <span class="na">email</span><span class="pi">:</span>
    <span class="na">type</span><span class="pi">:</span> <span class="s">string</span>
    <span class="na">format</span><span class="pi">:</span> <span class="s">email</span>
  <span class="na">name</span><span class="pi">:</span>
    <span class="na">type</span><span class="pi">:</span> <span class="s">string</span>
    <span class="na">minLength</span><span class="pi">:</span> <span class="m">1</span>
    <span class="na">maxLength</span><span class="pi">:</span> <span class="m">32</span>
<span class="na">required</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">id</span>
  <span class="pi">-</span> <span class="s">email</span>
  <span class="pi">-</span> <span class="s">name</span></code></pre></figure>

<p><code class="language-plaintext highlighter-rouge">PUT /users/{id}</code>とかもスキーマ使いまわせる。</p>

<h2 id="json-schema-validation">JSON Schema Validation</h2>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="nb">require</span> <span class="s1">'json-schema'</span>

<span class="n">schema</span> <span class="o">=</span> <span class="p">{</span>
  <span class="s2">"type"</span> <span class="o">=&gt;</span> <span class="s2">"object"</span><span class="p">,</span>
  <span class="s2">"required"</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s2">"a"</span><span class="p">],</span>
  <span class="s2">"properties"</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="s2">"a"</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="s2">"type"</span> <span class="o">=&gt;</span> <span class="s2">"integer"</span><span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="n">data</span> <span class="o">=</span> <span class="p">{</span>
  <span class="s2">"a"</span> <span class="o">=&gt;</span> <span class="mi">5</span>
<span class="p">}</span>

<span class="no">JSON</span><span class="o">::</span><span class="no">Validator</span><span class="p">.</span><span class="nf">validate</span><span class="p">(</span><span class="n">schema</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span></code></pre></figure>

<h2 id="rspec-json-schema-matcher">RSpec JSON Schema Matcher</h2>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">describe</span> <span class="s2">"Fetching the current user"</span> <span class="k">do</span>
  <span class="n">context</span> <span class="s2">"with valid auth token"</span> <span class="k">do</span>
    <span class="n">it</span> <span class="s2">"returns the current user"</span> <span class="k">do</span>
      <span class="n">user</span> <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span>
      <span class="n">auth_header</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">"Auth-Token"</span> <span class="o">=&gt;</span> <span class="n">user</span><span class="p">.</span><span class="nf">auth_token</span> <span class="p">}</span>

      <span class="n">get</span> <span class="n">v1_current_user_url</span><span class="p">,</span> <span class="p">{},</span> <span class="n">auth_header</span>

      <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="nf">status</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span> <span class="mi">200</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">).</span><span class="nf">to</span> <span class="n">match_response_schema</span><span class="p">(</span><span class="s2">"user"</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></figure>

<p>参考: <a href="https://robots.thoughtbot.com/validating-json-schemas-with-an-rspec-matcher">Validating JSON Schemas with an RSpec Matcher</a></p>

<h2 id="ruby-json-schema-library">Ruby JSON Schema Library</h2>
<ul>
  <li><a href="https://github.com/ruby-json-schema/json-schema">ruby-json-schema/json-schema</a></li>
  <li><a href="https://github.com/brandur/json_schema">brandur/json_schema</a></li>
</ul>

<p>ダッシュとアンダースコア！ わかりにくい！！</p>

<h2 id="json-schema-vs-json_schema">json-schema vs json_schema</h2>
<ul>
  <li>depending on <code class="language-plaintext highlighter-rouge">json-schema</code>:
    <ul>
      <li><a href="https://github.com/airbrake/airbrake">airbrake/airbrake</a></li>
      <li><a href="https://github.com/square/fdoc">square/fdoc</a></li>
    </ul>
  </li>
</ul>

<h2 id="json-schema-vs-json_schema-1">json-schema vs json_schema</h2>
<ul>
  <li>depending on <code class="language-plaintext highlighter-rouge">json_schema</code>:
    <ul>
      <li><a href="https://github.com/interagent/committee">interagent/committee</a></li>
      <li><a href="https://github.com/interagent/prmd">interagent/prmd</a></li>
      <li><a href="https://github.com/increments/qiita-rb">increments/qiita-rb</a></li>
      <li><a href="https://github.com/r7kamura/rack-json_schema">r7kamura/rack-json_schema</a></li>
      <li><a href="https://github.com/r7kamura/jdoc">r7kamura/jdoc</a></li>
    </ul>
  </li>
</ul>

<h2 id="javascript-json-schema-library">JavaScript JSON Schema Library</h2>

<p>弊社フロンエンドエンジニアのオススメ2つ。</p>

<ul>
  <li><a href="https://github.com/mafintosh/is-my-json-valid">mafintosh/is-my-json-valid</a></li>
  <li><a href="https://github.com/epoberezkin/ajv">epoberezkin/ajv</a></li>
</ul>

<h2 id="json書くのツラい問題">JSON書くのツラい問題</h2>
<ul>
  <li>「閉じカッコがー!!」</li>
  <li>「カンマがー!!!!」</li>
  <li>「コメントがー!!!!!!」</li>
  <li>「クオテーションがー!!!!!!」</li>
</ul>

<p><strong>黙ってYAMLで書こう。</strong> こっちのが可読性もよいしミスも少ないし書きやすいです。</p>

<h2 id="json-schemaの今とこれから">JSON Schemaの今とこれから</h2>
<ul>
  <li><a href="https://github.com/json-schema/json-schema">json-schema/json-schema</a></li>
</ul>

<p><img src="/images/posts/jsonschema/ima.png" alt="" /></p>

<ul>
  <li><a href="https://github.com/json-schema/json-schema/wiki/v5-Proposals">JSON Schema v5 Proposals</a>が出されている段階</li>
  <li><a href="https://github.com/json-schema/json-schema/issues">Issue</a>や<a href="https://groups.google.com/forum/#!forum/json-schema">Google Groups</a>を追うとよさげ</li>
  <li>v5への具体的なロードマップは引かれていない模様</li>
</ul>

<p><img src="/images/posts/jsonschema/korekara.png" alt="" /></p>

<h2 id="json-schemaコラボでよかったこと">JSON Schemaコラボでよかったこと</h2>
<ul>
  <li>バックエンドエンジニアとフロントエンドエンジニアの仕様の共通認識</li>
  <li>JSON Schemaを先に定義しておくことでバックエンドエンジニアとフロントエンドエンジニアが疎に開発できる</li>
  <li>JSON Schemaでバグの混入を防ぐ</li>
</ul>

<hr />

<h2 id="所感">所感</h2>
<p>時間にシビアなLT形式だったので発表途中でぶった切られた。もう少し簡潔にすべきだったかもしれない。</p>]]></content><author><name>Toshimaru</name></author><category term="jsonschema" /><category term="json" /><category term="presentation" /><summary type="html"><![CDATA[「JSON Schemaでバックエンドエンジニアとフロントエンドエンジニアがコラボする」と題してエムスリー x Gunosy Beer bashで発表してきました。]]></summary></entry></feed>