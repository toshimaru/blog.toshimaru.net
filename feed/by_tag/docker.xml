<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://blog.toshimaru.net/feed/by_tag/docker.xml" rel="self" type="application/atom+xml" /><link href="https://blog.toshimaru.net/" rel="alternate" type="text/html" /><updated>2022-07-22T14:29:02+09:00</updated><id>https://blog.toshimaru.net/feed/by_tag/docker.xml</id><title type="html">Hack Your Design!</title><subtitle>toshimaruの技術系なブログ</subtitle><author><name>Toshimaru</name></author><entry><title type="html">Dockerマルチステージビルドの並列実行</title><link href="https://blog.toshimaru.net/docker-concurrent-build/" rel="alternate" type="text/html" title="Dockerマルチステージビルドの並列実行" /><published>2021-03-15T00:00:00+09:00</published><updated>2021-03-28T00:00:00+09:00</updated><id>https://blog.toshimaru.net/docker-concurrent-build</id><content type="html" xml:base="https://blog.toshimaru.net/docker-concurrent-build/"><![CDATA[<p>本記事では、マルチステージビルド構成の<code class="language-plaintext highlighter-rouge">Dockerfile</code>のビルドの並列実行について紹介したいと思います。</p>

<h2 id="前提">前提</h2>

<ul>
  <li>Docker Desktop v3.2.1
    <ul>
      <li>Docker v20.10</li>
      <li>Docker Compose v1.28</li>
    </ul>
  </li>
</ul>

<p><img src="/images/posts/docker/desktop1.png" alt="" /></p>

<h2 id="dockerfile">Dockerfile</h2>

<p>今回テストで使うマルチステージビルドのサンプルとなる<code class="language-plaintext highlighter-rouge">Dockerfile</code>は下記です。</p>

<div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">FROM</span><span class="w"> </span><span class="s">alpine</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="s">test1</span>
<span class="k">RUN </span><span class="nb">sleep </span>10.1 <span class="c"># sleep from test1</span>

<span class="k">FROM</span><span class="w"> </span><span class="s">alpine</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="s">test2</span>
<span class="k">RUN </span><span class="nb">sleep </span>10.2 <span class="c"># sleep from test2</span>

<span class="k">FROM</span><span class="w"> </span><span class="s">alpine</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="s">test3</span>
<span class="k">RUN </span><span class="nb">sleep </span>10.3 <span class="c"># sleep from test3</span>


<span class="k">FROM</span><span class="s"> alpine</span>
<span class="k">RUN </span><span class="nb">echo</span> <span class="s2">"build start"</span>
<span class="k">RUN </span><span class="nb">sleep </span>10.0 <span class="c"># sleep from main</span>

<span class="k">COPY</span><span class="s"> --from=test1 /tmp /tmp</span>
<span class="k">COPY</span><span class="s"> --from=test2 /tmp /tmp</span>
<span class="k">COPY</span><span class="s"> --from=test3 /tmp /tmp</span>

<span class="k">RUN </span><span class="nb">echo</span> <span class="s2">"build finished"</span>
</code></pre></div></div>

<h2 id="直列実行-vs-並列実行">直列実行 vs 並列実行</h2>

<p>実際に上述の <code class="language-plaintext highlighter-rouge">Dockerfile</code> のビルドを並列実行しない場合（直列実行）と並列実行する場合の結果を比較してみます。</p>

<h3 id="並列実行しない場合">並列実行しない場合</h3>

<p>並列実行をOFFにして実行するには <code class="language-plaintext highlighter-rouge">DOCKER_BUILDKIT=0</code> の環境変数をセットして <code class="language-plaintext highlighter-rouge">docker build</code>を行います。</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nv">DOCKER_BUILDKIT</span><span class="o">=</span>0 docker build <span class="nt">--no-cache</span> <span class="nb">.</span>
<span class="go">Sending build context to Docker daemon  331.1MB
Step 1/13 : FROM alpine as test1
</span><span class="gp"> ---&gt;</span><span class="w"> </span>b7b28af77ffe
<span class="gp">Step 2/13 : RUN sleep 10.1 #</span><span class="w"> </span><span class="nb">sleep </span>from test1
<span class="gp"> ---&gt;</span><span class="w"> </span>Using cache
<span class="gp"> ---&gt;</span><span class="w"> </span>11b4518313de
<span class="go">Step 3/13 : FROM alpine as test2
</span><span class="gp"> ---&gt;</span><span class="w"> </span>b7b28af77ffe
<span class="gp">Step 4/13 : RUN sleep 10.2 #</span><span class="w"> </span><span class="nb">sleep </span>from test2
<span class="gp"> ---&gt;</span><span class="w"> </span>Using cache
<span class="gp"> ---&gt;</span><span class="w"> </span>c61101646517
<span class="go">Step 5/13 : FROM alpine as test3
</span><span class="gp"> ---&gt;</span><span class="w"> </span>b7b28af77ffe
<span class="gp">Step 6/13 : RUN sleep 10.3 #</span><span class="w"> </span><span class="nb">sleep </span>from test3
<span class="gp"> ---&gt;</span><span class="w"> </span>Using cache
<span class="gp"> ---&gt;</span><span class="w"> </span>1aa97a170923
<span class="go">Step 7/13 : FROM alpine
</span><span class="gp"> ---&gt;</span><span class="w"> </span>b7b28af77ffe
<span class="go">Step 8/13 : RUN echo "build start"
</span><span class="gp"> ---&gt;</span><span class="w"> </span>Using cache
<span class="gp"> ---&gt;</span><span class="w"> </span>8b2b09749321
<span class="gp">Step 9/13 : RUN sleep 10.0 #</span><span class="w"> </span><span class="nb">sleep </span>from main
<span class="gp"> ---&gt;</span><span class="w"> </span>Using cache
<span class="gp"> ---&gt;</span><span class="w"> </span>bc3f772d3fb1
<span class="go">Step 10/13 : COPY --from=test1 /tmp /tmp
</span><span class="gp"> ---&gt;</span><span class="w"> </span>Using cache
<span class="gp"> ---&gt;</span><span class="w"> </span>0f861020f1c0
<span class="go">Step 11/13 : COPY --from=test2 /tmp /tmp
</span><span class="gp"> ---&gt;</span><span class="w"> </span>Using cache
<span class="gp"> ---&gt;</span><span class="w"> </span>eea3d212c0b7
<span class="go">Step 12/13 : COPY --from=test3 /tmp /tmp
</span><span class="gp"> ---&gt;</span><span class="w"> </span>Using cache
<span class="gp"> ---&gt;</span><span class="w"> </span>9beba31a0ff6
<span class="go">Step 13/13 : RUN echo "build finished"
</span><span class="gp"> ---&gt;</span><span class="w"> </span>Using cache
<span class="gp"> ---&gt;</span><span class="w"> </span>0986bef3d18f
<span class="go">Successfully built 0986bef3d18f
</span></code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">sleep 10</code> × 4 が直列に実行されるため、ビルドに <strong>最低でも40秒</strong> かかっていました。</p>

<h3 id="並列実行する場合">並列実行する場合</h3>

<p>では次に並列実行してみましょう。</p>

<p>並列実行するには <code class="language-plaintext highlighter-rouge">DOCKER_BUILDKIT=1</code> をセットするか、私の環境の場合 <code class="language-plaintext highlighter-rouge">DOCKER_BUILDKIT</code> の環境変数のセットしなくてもデフォルトで並列実行されるようになっていました。</p>

<p class="info"><strong>Docker Desktop v3.2</strong> を使っている場合は <code class="language-plaintext highlighter-rouge">DOCKER_BUILDKIT=1</code> の環境変数が不要でデフォルトで並列実行されるようになっており、一方、<strong>Docker Desktop v3.1</strong>の場合は並列実行するためには<code class="language-plaintext highlighter-rouge">DOCKER_BUILDKIT=1</code> の環境変数の指定が必要でした。</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>docker build <span class="nt">--no-cache</span> <span class="nb">.</span>
<span class="go">[+] Building 13.9s (14/14) FINISHED
</span><span class="gp"> =&gt;</span><span class="w"> </span><span class="o">[</span>internal] load build definition from Dockerfile                                            0.1s
<span class="gp"> =&gt;</span><span class="w"> </span><span class="o">=&gt;</span> transferring dockerfile: 37B                                                             0.0s
<span class="gp"> =&gt;</span><span class="w"> </span><span class="o">[</span>internal] load .dockerignore                                                               0.1s
<span class="gp"> =&gt;</span><span class="w"> </span><span class="o">=&gt;</span> transferring context: 2B                                                                 0.0s
<span class="gp"> =&gt;</span><span class="w"> </span><span class="o">[</span>internal] load metadata <span class="k">for </span>docker.io/library/alpine:latest                                0.0s
<span class="gp"> =&gt;</span><span class="w"> </span>CACHED <span class="o">[</span>test3 1/2] FROM docker.io/library/alpine                                            0.0s
<span class="gp"> =&gt;</span><span class="w"> </span><span class="o">[</span>test2 2/2] RUN <span class="nb">sleep </span>10.2 <span class="c"># sleep from test2                                              12.4s</span>
<span class="gp"> =&gt;</span><span class="w"> </span><span class="o">[</span>stage-3 2/7] RUN <span class="nb">echo</span> <span class="s2">"build start"</span>                                                        2.3s
<span class="gp"> =&gt;</span><span class="w"> </span><span class="o">[</span>test3 2/2] RUN <span class="nb">sleep </span>10.3 <span class="c"># sleep from test3                                              12.5s</span>
<span class="gp"> =&gt;</span><span class="w"> </span><span class="o">[</span>test1 2/2] RUN <span class="nb">sleep </span>10.1 <span class="c"># sleep from test1                                              12.3s</span>
<span class="gp"> =&gt;</span><span class="w"> </span><span class="o">[</span>stage-3 3/7] RUN <span class="nb">sleep </span>10.0 <span class="c"># sleep from main                                             10.6s</span>
<span class="gp"> =&gt;</span><span class="w"> </span><span class="o">[</span>stage-3 4/7] COPY <span class="nt">--from</span><span class="o">=</span>test1 /tmp /tmp                                                   0.1s
<span class="gp"> =&gt;</span><span class="w"> </span><span class="o">[</span>stage-3 5/7] COPY <span class="nt">--from</span><span class="o">=</span>test2 /tmp /tmp                                                   0.1s
<span class="gp"> =&gt;</span><span class="w"> </span><span class="o">[</span>stage-3 6/7] COPY <span class="nt">--from</span><span class="o">=</span>test3 /tmp /tmp                                                   0.1s
<span class="gp"> =&gt;</span><span class="w"> </span><span class="o">[</span>stage-3 7/7] RUN <span class="nb">echo</span> <span class="s2">"build finished"</span>                                                     0.4s
<span class="gp"> =&gt;</span><span class="w"> </span>exporting to image                                                                          0.2s
<span class="gp"> =&gt;</span><span class="w"> </span><span class="o">=&gt;</span> exporting layers                                                                         0.2s
<span class="gp"> =&gt;</span><span class="w"> </span><span class="o">=&gt;</span> writing image sha256:2dfb39f0fbed99a19fee51b23db685a0878eed7291bce08e88c3226e8fea271d    0.0s
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">sleep 10</code> × 4 が並列に実行されるため、全体として10秒程度でビルドが終了しています。</p>

<h2 id="比較結果">比較結果</h2>

<table>
  <thead>
    <tr>
      <th> </th>
      <th>ビルド時間</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>並列実行しない場合</td>
      <td><strong>50秒</strong></td>
    </tr>
    <tr>
      <td>並列実行する場合</td>
      <td><strong>15秒</strong></td>
    </tr>
  </tbody>
</table>

<p>今回サンプルとなった <code class="language-plaintext highlighter-rouge">Dockerfile</code> の場合、<strong>3倍の高速化</strong> に成功しました。</p>

<h2 id="参考">参考</h2>

<ul>
  <li><a href="https://kotaroooo0-dev.hatenablog.com/entry/2020/06/10/225333">DockerイメージのビルドをBuildKitで並列実行し高速化する - 🤖</a></li>
  <li><a href="https://matsuand.github.io/docs.docker.jp.onthefly/develop/develop-images/multistage-build/">マルチステージビルドの利用 | Docker ドキュメント</a></li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="docker" /><summary type="html"><![CDATA[本記事では、マルチステージビルド構成のDockerfileのビルドの並列実行について紹介したいと思います。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/docker/desktop1.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/docker/desktop1.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">docker-compose で Rails6 + MySQL な環境を構築する</title><link href="https://blog.toshimaru.net/rails-on-docker-compose/" rel="alternate" type="text/html" title="docker-compose で Rails6 + MySQL な環境を構築する" /><published>2019-12-31T00:00:00+09:00</published><updated>2020-01-02T00:00:00+09:00</updated><id>https://blog.toshimaru.net/rails-on-docker-compose</id><content type="html" xml:base="https://blog.toshimaru.net/rails-on-docker-compose/"><![CDATA[<p>docker-compose を使って Ruby 2.7 + Rails 6.0 + MySQL 8.0 の環境を構築してみたいと思います。</p>

<h2 id="ゴール">ゴール</h2>

<p>ゴールはRailsのデフォルトホーム画面を表示させるところまでです。</p>

<h2 id="手順">手順</h2>

<p>下記の手順をベースに進めていきます‥</p>

<p><a href="https://docs.docker.com/compose/rails/">Quickstart: Compose and Rails | Docker Documentation</a></p>

<h3 id="dockerfile">Dockerfile</h3>

<p>適当なディレクトリを用意して、<code class="language-plaintext highlighter-rouge">Dockerfile</code>を下記の通り用意します。</p>

<div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">FROM</span><span class="s"> ruby:2.7</span>
<span class="k">RUN </span>apt-get update <span class="nt">-qq</span> <span class="o">&amp;&amp;</span> apt-get <span class="nb">install</span> <span class="nt">-y</span> nodejs yarnpkg
<span class="k">RUN </span><span class="nb">ln</span> <span class="nt">-s</span> /usr/bin/yarnpkg /usr/bin/yarn
<span class="k">RUN </span><span class="nb">mkdir</span> /app
<span class="k">WORKDIR</span><span class="s"> /app</span>
<span class="k">COPY</span><span class="s"> Gemfile /app/Gemfile</span>
<span class="k">COPY</span><span class="s"> Gemfile.lock /app/Gemfile.lock</span>
<span class="k">RUN </span>bundle <span class="nb">install</span>
<span class="k">COPY</span><span class="s"> . /app</span>

<span class="c"># Add a script to be executed every time the container starts.</span>
<span class="k">COPY</span><span class="s"> entrypoint.sh /usr/bin/</span>
<span class="k">RUN </span><span class="nb">chmod</span> +x /usr/bin/entrypoint.sh
<span class="k">ENTRYPOINT</span><span class="s"> ["entrypoint.sh"]</span>
<span class="k">EXPOSE</span><span class="s"> 3000</span>

<span class="c"># Start the main process.</span>
<span class="k">CMD</span><span class="s"> ["rails", "server", "-b", "0.0.0.0"]</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">yarnpkg</code>でyarnを入れると、yarn という実行ファイルではなく <code class="language-plaintext highlighter-rouge">yarnpkg</code> という実行ファイルになってしまうので、シンボリックリンクを作成している点に留意。</li>
</ul>

<h3 id="初期gemfile">初期Gemfile</h3>

<p>下記の通り<code class="language-plaintext highlighter-rouge">Gemfile</code>と<code class="language-plaintext highlighter-rouge">Gemfile.lock</code>を用意します。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">source</span> <span class="s1">'https://rubygems.org'</span>
<span class="n">gem</span> <span class="s1">'rails'</span><span class="p">,</span> <span class="s1">'~&gt;6'</span>
</code></pre></div></div>

<ul>
  <li>今回は Rails v6 （現時点の最新バージョン）を使います</li>
</ul>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">touch </span>Gemfile.lock
</code></pre></div></div>

<ul>
  <li>現段階では <code class="language-plaintext highlighter-rouge">Gemfile.lock</code> は空でOK</li>
</ul>

<h3 id="entrypointsh">entrypoint.sh</h3>

<p><code class="language-plaintext highlighter-rouge">Dockerfile</code>で<code class="language-plaintext highlighter-rouge">ENTRYPOINT</code>として定義している <code class="language-plaintext highlighter-rouge">entrypoint.sh</code> です。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="nb">set</span> <span class="nt">-e</span>

<span class="c"># Remove a potentially pre-existing server.pid for Rails.</span>
<span class="nb">rm</span> <span class="nt">-f</span> /app/tmp/pids/server.pid

<span class="c"># Then exec the container's main process (what's set as CMD in the Dockerfile).</span>
<span class="nb">exec</span> <span class="s2">"</span><span class="nv">$@</span><span class="s2">"</span>
</code></pre></div></div>

<h3 id="docker-composeyml">docker-compose.yml</h3>

<p><code class="language-plaintext highlighter-rouge">docker-compose.yml</code>を下記の通り用意します。</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">3'</span>
<span class="na">services</span><span class="pi">:</span>
  <span class="na">db</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">mysql:8.0</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">./tmp/db:/var/lib/mysql</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">MYSQL_ALLOW_EMPTY_PASSWORD=1</span>
  <span class="na">web</span><span class="pi">:</span>
    <span class="na">build</span><span class="pi">:</span> <span class="s">.</span>
    <span class="na">command</span><span class="pi">:</span> <span class="s">bash -c "rm -f tmp/pids/server.pid &amp;&amp; bundle exec rails s -p 3000 -b '0.0.0.0'"</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">.:/app</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">3000:3000"</span>
    <span class="na">depends_on</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">db</span>
</code></pre></div></div>

<ul>
  <li>MySQL は 8.0 （現時点の最新バージョン）を使用</li>
  <li><code class="language-plaintext highlighter-rouge">MYSQL_ALLOW_EMPTY_PASSWORD</code> を設定することで <code class="language-plaintext highlighter-rouge">password</code> が空でもrootで接続できるようにしておく</li>
</ul>

<h3 id="rails-new">rails new</h3>

<p><code class="language-plaintext highlighter-rouge">rails new</code> のコマンドをwebコンテナ上で実行してRailsのファイル群を生成します。</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>docker-compose run web bundle <span class="nb">exec </span>rails new <span class="nb">.</span> <span class="nt">--force</span> <span class="nt">--database</span><span class="o">=</span>mysql
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">--force</code> で既存ファイルを上書き</li>
  <li>DBはmysqlを指定</li>
</ul>

<p>Railsのファイル群が <code class="language-plaintext highlighter-rouge">rails new</code> コマンドによって出来上がったので build します。</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>docker-compose build
</code></pre></div></div>

<h3 id="dbホスト名変更">DBホスト名変更</h3>

<p>このままではDBに接続できません。なぜならば host 名を変更する必要があるからです。</p>

<p>下記の通り <code class="language-plaintext highlighter-rouge">config/database.yml</code> のhostの部分を <code class="language-plaintext highlighter-rouge">db</code> に置き換えましょう。</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">default</span><span class="pi">:</span> <span class="nl">&amp;default</span>
  <span class="na">adapter</span><span class="pi">:</span> <span class="s">mysql2</span>
  <span class="na">encoding</span><span class="pi">:</span> <span class="s">utf8mb4</span>
  <span class="na">pool</span><span class="pi">:</span> <span class="s">&lt;%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %&gt;</span>
  <span class="na">username</span><span class="pi">:</span> <span class="s">root</span>
  <span class="na">password</span><span class="pi">:</span>
  <span class="na">host</span><span class="pi">:</span> <span class="s">db</span>
<span class="na">development</span><span class="pi">:</span>
  <span class="na">&lt;&lt;</span><span class="pi">:</span> <span class="nv">*default</span>
  <span class="na">database</span><span class="pi">:</span> <span class="s">app_development</span>
<span class="na">test</span><span class="pi">:</span>
  <span class="na">&lt;&lt;</span><span class="pi">:</span> <span class="nv">*default</span>
  <span class="na">database</span><span class="pi">:</span> <span class="s">app_test</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">host</code> に <code class="language-plaintext highlighter-rouge">db</code> を設定
    <ul>
      <li><code class="language-plaintext highlighter-rouge">db</code> はコンテナ名になります</li>
    </ul>
  </li>
</ul>

<p>build後に docker-compose up します。</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>docker-compose up
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">localhost:3000</code> でRailsが立ち上がるのでアクセスしてみましょう。</p>

<h2 id="error-caching_sha2_password-could-not-be-loaded">Error: caching_sha2_password could not be loaded</h2>

<p>しかしここでRailsに接続すると、下記のようなエラーが発生します。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ActiveRecord::NoDatabaseError

Plugin caching_sha2_password could not be loaded: /usr//usr/lib/x86_64-linux-gnu/mariadb19/plugin/caching_sha2_password.so: cannot open shared object file: No such file or directory
</code></pre></div></div>

<p>これはwebコンテナが mysql 8.0 の<code class="language-plaintext highlighter-rouge">caching_sha2_password</code>認証方式に対応していないためです。</p>

<p>下記の手順で <code class="language-plaintext highlighter-rouge">caching_sha2_password</code> を <code class="language-plaintext highlighter-rouge">mysql_native_password</code>（旧来の認証方式）に変更しましょう。</p>

<h3 id="dbコンテナでmysqlクライアント起動">DBコンテナでmysqlクライアント起動</h3>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>docker-compose <span class="nb">exec </span>db bash
</code></pre></div></div>

<p>dbコンテナのbashを起動後にmysqlコマンドで接続します。</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">#</span><span class="w"> </span>mysql <span class="nt">-u</span> root
<span class="gp">Welcome to the MySQL monitor.  Commands end with ;</span><span class="w"> </span>or <span class="se">\g</span><span class="nb">.</span>
<span class="go">Your MySQL connection id is 9
Server version: 8.0.18 MySQL Community Server - GPL

</span><span class="c">...
</span></code></pre></div></div>

<h3 id="認証方式変更sql">認証方式変更SQL</h3>

<p>下記のクエリでユーザー一覧とその認証方式が閲覧できます。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mysql&gt; select User,Host,plugin from mysql.user;
+------------------+-----------+-----------------------+
| User             | Host      | plugin                |
+------------------+-----------+-----------------------+
| root             | %         | caching_sha2_password |
| mysql.infoschema | localhost | caching_sha2_password |
| mysql.session    | localhost | caching_sha2_password |
| mysql.sys        | localhost | caching_sha2_password |
| root             | localhost | caching_sha2_password |
+------------------+-----------+-----------------------+
5 rows in set (0.00 sec)
</code></pre></div></div>

<p>全て <code class="language-plaintext highlighter-rouge">caching_sha2_password</code> に設定されています。これを<code class="language-plaintext highlighter-rouge">mysql_native_password</code>に変更します。</p>

<p>今回対象となる <code class="language-plaintext highlighter-rouge">root@%</code> のユーザー設定を <code class="language-plaintext highlighter-rouge">ALTER USER</code> を使って変更しましょう。</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">ALTER</span> <span class="k">USER</span> <span class="s1">'root'</span><span class="o">@</span><span class="s1">'%'</span> <span class="n">IDENTIFIED</span> <span class="k">WITH</span> <span class="n">mysql_native_password</span> <span class="k">BY</span> <span class="s1">''</span><span class="p">;</span>
<span class="c1">-- Query OK, 0 rows affected (0.02 sec)</span>
</code></pre></div></div>

<p>変更されました。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mysql&gt; select User,Host,plugin from mysql.user;
+------------------+-----------+-----------------------+
| User             | Host      | plugin                |
+------------------+-----------+-----------------------+
| root             | %         | mysql_native_password |
| mysql.infoschema | localhost | caching_sha2_password |
| mysql.session    | localhost | caching_sha2_password |
| mysql.sys        | localhost | caching_sha2_password |
| root             | localhost | caching_sha2_password |
+------------------+-----------+-----------------------+
5 rows in set (0.00 sec)
</code></pre></div></div>

<h2 id="yay-youre-on-rails">“Yay! You’re on Rails!”</h2>

<p>DBが作成されていないよ、というメッセージが出るので <code class="language-plaintext highlighter-rouge">db:prepare</code> でテーブルを作成します。</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>docker-compose <span class="nb">exec </span>web bundle <span class="nb">exec </span>rails db:prepare
</code></pre></div></div>

<p>これでRailsのホーム画面が表示されるようになります。</p>

<p><img src="/images/posts/docker/railshome.png" alt="rails home" /></p>

<h2 id="参考">参考</h2>

<ul>
  <li>過去に同じことをやったときのエントリ: <a href="docker-compose-rails/">docker-compose で Rails 環境を構築する</a></li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="docker" /><category term="mysql" /><category term="rails" /><summary type="html"><![CDATA[docker-compose を使って Ruby 2.7 + Rails 6.0 + MySQL 8.0 の環境を構築してみたいと思います。ゴールはRailsのデフォルトホーム画面を表示させるところまでです。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/docker/yaml.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/docker/yaml.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Rails on Docker 環境での SystemSpec 環境構築</title><link href="https://blog.toshimaru.net/rails-on-docker-system-spec/" rel="alternate" type="text/html" title="Rails on Docker 環境での SystemSpec 環境構築" /><published>2019-09-18T00:00:00+09:00</published><updated>2019-09-18T00:00:00+09:00</updated><id>https://blog.toshimaru.net/rails-on-docker-system-spec</id><content type="html" xml:base="https://blog.toshimaru.net/rails-on-docker-system-spec/"><![CDATA[<p>Rails on Docker な環境上に SystemSpec(System Test + RSpec) を導入しました。</p>

<h2 id="環境">環境</h2>

<p>今回SystemSpecを導入したのは下記のような環境です。</p>

<ul>
  <li>プロジェクト: <a href="https://github.com/toshimaru/RailsTwitterClone/">RailsTwitterClone</a></li>
  <li>docker-compose</li>
  <li>Ruby 2.6</li>
  <li>chromium-driver</li>
  <li>gem
    <ul>
      <li>rails (5.2)</li>
      <li>rspec-rails</li>
      <li>selenium-webdriver</li>
      <li>capybara</li>
    </ul>
  </li>
</ul>

<h2 id="対応pull-request">対応Pull Request</h2>

<p><a href="https://github.com/toshimaru/RailsTwitterClone/pull/506/files">Re-try System Spec by toshimaru · Pull Request #506 · toshimaru/RailsTwitterClone</a></p>

<h2 id="私のsystemspec遅すぎ">私のSystemSpec、遅すぎ…？</h2>

<p>実は SystemSpec を導入しようと試みたのは今回で二回目です。一回目は SystemTest が Rails の機能の一つとしてリリースされて間もない頃に試したのですが、テスト全体にかかる時間が劇的に遅くなったため、導入を断念したという経緯があります。</p>

<p>当時のPull Requestがこちら: <a href="https://github.com/toshimaru/RailsTwitterClone/pull/216">Try System Spec by toshimaru · Pull Request #216 · toshimaru/RailsTwitterClone</a></p>

<blockquote>
  <p>Before</p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Finished in 15.74 seconds (files took 7.65 seconds to load)
152 examples, 0 failures
</code></pre></div>  </div>

  <p>After</p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Finished in 58.46 seconds (files took 7.64 seconds to load)
152 examples, 3 failures
</code></pre></div>  </div>
</blockquote>

<p>しかしこれは結果からいうと設定が悪かったのでした。下記のように system テストを Headless Chrome で走るように設定していましたが、これだとすべての System テストが Headless Chrome モードで起動してしまい、結果的に遅くなります。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">RSpec</span><span class="p">.</span><span class="nf">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
  <span class="o">...</span>
  <span class="n">config</span><span class="p">.</span><span class="nf">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">,</span> <span class="ss">type: :system</span><span class="p">)</span> <span class="k">do</span>
    <span class="n">driven_by</span> <span class="ss">:selenium_chrome_headless</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>下記のようにJSを起動させる必要のない System テストは従来通りの<code class="language-plaintext highlighter-rouge">rack_test</code>、<code class="language-plaintext highlighter-rouge">js: true</code>なテストは<code class="language-plaintext highlighter-rouge">selenium_chrome_headless</code>に設定してやればテスト全体が高速に実行可能になりました。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">RSpec</span><span class="p">.</span><span class="nf">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
  <span class="o">...</span>
  <span class="n">config</span><span class="p">.</span><span class="nf">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">,</span> <span class="ss">type: :system</span><span class="p">)</span> <span class="k">do</span>
    <span class="n">driven_by</span> <span class="ss">:rack_test</span>
  <span class="k">end</span>

  <span class="n">config</span><span class="p">.</span><span class="nf">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">,</span> <span class="ss">type: :system</span><span class="p">,</span> <span class="ss">js: </span><span class="kp">true</span><span class="p">)</span> <span class="k">do</span>
    <span class="n">driven_by</span> <span class="ss">:selenium_chrome_headless</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<h2 id="dockerfile">Dockerfile</h2>

<p>今回利用した <code class="language-plaintext highlighter-rouge">Dockerfile</code> は Ruby 2.6 のベースイメージに <code class="language-plaintext highlighter-rouge">chromium-driver</code> をインストールしたコンテナとなります。</p>

<div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">FROM</span><span class="s"> ruby:2.6</span>

<span class="k">RUN </span>apt-get update <span class="nt">-qq</span> <span class="o">&amp;&amp;</span> apt-get <span class="nb">install</span> <span class="nt">-y</span> nodejs chromium-driver 
</code></pre></div></div>

<h3 id="chrome-failed-to-start-exited-abnormally">Chrome failed to start: exited abnormally</h3>

<p>しかし、上述の環境において<code class="language-plaintext highlighter-rouge">rspec</code>を実行すると下記のようなエラーが発生します。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Failure/Error: Unable to infer file and line number from backtrace

  Selenium::WebDriver::Error::UnknownError:
      unknown error: Chrome failed to start: exited abnormally
      (unknown error: DevToolsActivePort file doesn't exist)
      (The process started from chrome location /usr/bin/chromium is no longer running, so ChromeDriver is assuming that Chrome has crashed.)
</code></pre></div></div>

<p>このエラーは Chrome が<code class="language-plaintext highlighter-rouge">sandbox</code>モードで起動していることに起因します。下記のような<code class="language-plaintext highlighter-rouge">no-sandbox</code>オプション付きの Headless Chrome を Capybara に driver として登録してやることで回避します。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Capybara</span><span class="p">.</span><span class="nf">register_driver</span> <span class="ss">:headless_chrome</span> <span class="k">do</span> <span class="o">|</span><span class="n">app</span><span class="o">|</span>
  <span class="n">browser_options</span> <span class="o">=</span> <span class="o">::</span><span class="no">Selenium</span><span class="o">::</span><span class="no">WebDriver</span><span class="o">::</span><span class="no">Chrome</span><span class="o">::</span><span class="no">Options</span><span class="p">.</span><span class="nf">new</span><span class="p">.</span><span class="nf">tap</span> <span class="k">do</span> <span class="o">|</span><span class="n">opts</span><span class="o">|</span>
    <span class="n">opts</span><span class="p">.</span><span class="nf">args</span> <span class="o">&lt;&lt;</span> <span class="s2">"--headless"</span>
    <span class="n">opts</span><span class="p">.</span><span class="nf">args</span> <span class="o">&lt;&lt;</span> <span class="s2">"--disable-gpu"</span>
    <span class="n">opts</span><span class="p">.</span><span class="nf">args</span> <span class="o">&lt;&lt;</span> <span class="s2">"--no-sandbox"</span>
  <span class="k">end</span>
  <span class="no">Capybara</span><span class="o">::</span><span class="no">Selenium</span><span class="o">::</span><span class="no">Driver</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="ss">browser: :chrome</span><span class="p">,</span> <span class="ss">options: </span><span class="n">browser_options</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<p>こうして登録した<code class="language-plaintext highlighter-rouge">headless_chrome</code>をSystemTestに対して適応させてやればOKです。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">RSpec</span><span class="p">.</span><span class="nf">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
  <span class="o">...</span>
  <span class="n">config</span><span class="p">.</span><span class="nf">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">,</span> <span class="ss">type: :system</span><span class="p">,</span> <span class="ss">js: </span><span class="kp">true</span><span class="p">)</span> <span class="k">do</span>
    <span class="n">driven_by</span> <span class="ss">:headless_chrome</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>これできちんとDocker上でSystemSpecが通るようになりました。</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>docker-compose run web rspec
<span class="go">
Randomized with seed 30150
............................................................................................................Capybara starting Puma...
* Version 4.1.1 , codename: Fourth and One
* Min threads: 0, max threads: 4
* Listening on tcp://127.0.0.1:38789
</span><span class="c">...............................................
</span><span class="go">
Finished in 19.87 seconds (files took 8.8 seconds to load)
155 examples, 0 failures
</span></code></pre></div></div>

<h2 id="公式ではno-sandboxをデフォルトにはしてくれない">公式ではno-sandboxをデフォルトにはしてくれない？</h2>

<p>余談ですが、Capybara本体で登録されている<code class="language-plaintext highlighter-rouge">selenium_chrome_headless</code>に<code class="language-plaintext highlighter-rouge">no-sandbox</code>オプションを付与する変更をPRしてみましたが、下記の通りRejectされてしまいました。</p>

<p><a href="https://github.com/teamcapybara/capybara/pull/2241">Add <code class="language-plaintext highlighter-rouge">no-sandbox</code> option for selenium_chrome_headless by toshimaru · Pull Request #2241 · teamcapybara/capybara</a></p>

<h3 id="securityを担保するためのsandbox">Securityを担保するためのsandbox</h3>

<p>sandboxはセキュリティを高めるための環境なので基本的には <strong>デフォルトで no-sandbox にするべきではない</strong> という判断のようです。</p>

<blockquote>
  <p>Sandbox leverages the OS-provided security to allow code execution that cannot make persistent changes to the computer or access information that is confidential.</p>
</blockquote>

<p>via. <a href="https://chromium.googlesource.com/chromium/src/+/master/docs/design/sandbox.md">Sandbox</a></p>

<h2 id="参考">参考</h2>

<ul>
  <li><a href="https://qiita.com/ngron/items/f61b8635b4d67f666d75">Rails + Selenium + DockerでSystemSpecの環境構築 - Qiita</a></li>
  <li><a href="https://news.mynavi.jp/article/20081009-a027/">Google Chrome サンドボックスで実現するセキュリティ、Windowsの機能に依存 | マイナビニュース</a></li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="rspec" /><category term="rails" /><category term="docker" /><summary type="html"><![CDATA[Rails on Docker な環境上に SystemSpec(System Test + RSpec) を導入しました。 環境 今回SystemSpecを導入したのは下記のような環境です。私のSystemSpec、遅すぎ…？ 実は SystemSpec を導入しようと試みたのは今回で二回目です。一回目は SystemTest が Rails の機能の一つとしてリリースされて間もない頃に試したのですが、テスト全体にかかる時間が劇的に遅くなったため、導入を断念したという経緯があります。しかしこれは結果からいうと設定が悪かったのでした。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/systemspec/og.jpg" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/systemspec/og.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">docker-compose で Rails 環境を構築する</title><link href="https://blog.toshimaru.net/docker-compose-rails/" rel="alternate" type="text/html" title="docker-compose で Rails 環境を構築する" /><published>2016-04-09T00:00:00+09:00</published><updated>2016-04-09T00:00:00+09:00</updated><id>https://blog.toshimaru.net/docker-compose-rails</id><content type="html" xml:base="https://blog.toshimaru.net/docker-compose-rails/"><![CDATA[<p><code class="language-plaintext highlighter-rouge">docker-machine</code>, <code class="language-plaintext highlighter-rouge">docker-compose</code> を使ってローカルにRails on docker な環境を構築してみます。</p>

<h2 id="前提">前提</h2>

<ul>
  <li>docker-machine</li>
  <li>docker-compose</li>
</ul>

<p>それぞれのバージョンは下記の通り。</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>docker-machine <span class="nt">-v</span>
<span class="go">docker-machine version 0.6.0, build e27fb87

</span><span class="gp">$</span><span class="w"> </span>docker-compose <span class="nt">-v</span>
<span class="go">docker-compose version 1.6.2, build unknown
</span></code></pre></div></div>

<h2 id="docker-machine-準備">docker-machine 準備</h2>

<p><code class="language-plaintext highlighter-rouge">docker-machine create</code> でdefaultのmachineを作成します。</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>docker-machine create <span class="nt">--driver</span> virtualbox default
<span class="go">Running pre-create checks...
(...snip...)
(default) Creating VirtualBox VM...
(default) Creating SSH key...
(default) Starting the VM...
(default) Check network to re-create if needed...
(default) Found a new host-only adapter: "vboxnet0"
(default) Waiting for an IP...
Waiting for machine to be running, this may take a few minutes...
Detecting operating system of created instance...
Waiting for SSH to be available...
Detecting the provisioner...
Provisioning with boot2docker...
Copying certs to the local machine directory...
Copying certs to the remote machine...
Setting Docker configuration on the remote daemon...
Checking connection to Docker...
Docker is up and running!
To see how to connect your Docker Client to the Docker Engine running on this virtual machine, run: docker-machine env default
</span></code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">docker-machine ls</code> で状態を確認。</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>docker-machine <span class="nb">ls</span>
<span class="go">NAME      ACTIVE   DRIVER       STATE     URL                         SWARM   DOCKER    ERRORS
default   -        virtualbox   Running   tcp://192.168.99.100:2376           v1.10.3
</span></code></pre></div></div>

<p>STATE: Running になってますね。</p>

<h3 id="環境変数設定">環境変数設定</h3>

<p>docker-machine の環境変数をセットします。</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">eval</span> <span class="s2">"</span><span class="si">$(</span>docker-machine <span class="nb">env </span>default<span class="si">)</span><span class="s2">"</span>
</code></pre></div></div>

<h2 id="rails設定">Rails設定</h2>

<h3 id="dockerfile">Dockerfile</h3>

<p>このように<code class="language-plaintext highlighter-rouge">Dockerfile</code>を作成します。</p>

<div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">FROM</span><span class="s"> ruby:2.3.0</span>
<span class="k">RUN </span>apt-get update <span class="nt">-qq</span> <span class="o">&amp;&amp;</span> apt-get <span class="nb">install</span> <span class="nt">-y</span> build-essential libpq-dev
<span class="k">RUN </span><span class="nb">mkdir</span> /myapp
<span class="k">WORKDIR</span><span class="s"> /myapp</span>
<span class="k">ADD</span><span class="s"> Gemfile /myapp/Gemfile</span>
<span class="k">ADD</span><span class="s"> Gemfile.lock /myapp/Gemfile.lock</span>
<span class="k">RUN </span>bundle <span class="nb">install</span>
<span class="k">ADD</span><span class="s"> . /myapp</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">Dockerfile</code>に書いてある内容はだいたいこんな感じ。</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">FROM</code>: Docker hub のrubyイメージ、2.3.0タグをベースイメージとする</li>
  <li><code class="language-plaintext highlighter-rouge">WORKDIR</code>: <code class="language-plaintext highlighter-rouge">mkdir /myapp</code>してそこをワーキングディレクトリと宣言</li>
  <li><code class="language-plaintext highlighter-rouge">Gemfile</code>, <code class="language-plaintext highlighter-rouge">Gemfile.lock</code>を追加</li>
  <li><code class="language-plaintext highlighter-rouge">WORKDIR</code>にて<code class="language-plaintext highlighter-rouge">bundle install</code>する</li>
</ul>

<h3 id="docker-composeyml">docker-compose.yml</h3>

<p><code class="language-plaintext highlighter-rouge">docker-compose.yml</code>を用意します。<code class="language-plaintext highlighter-rouge">docker-compose.yml</code>はこんな感じです。</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">2'</span>
<span class="na">services</span><span class="pi">:</span>
  <span class="na">db</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">mysql</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="na">MYSQL_ALLOW_EMPTY_PASSWORD</span><span class="pi">:</span> <span class="s2">"</span><span class="s">yes"</span>
  <span class="na">web</span><span class="pi">:</span>
    <span class="na">build</span><span class="pi">:</span> <span class="s">.</span>
    <span class="na">command</span><span class="pi">:</span> <span class="s">bundle exec rails s -p 3000 -b '0.0.0.0'</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">.:/myapp</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">3000:3000"</span>
    <span class="na">depends_on</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">db</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">web</code>, <code class="language-plaintext highlighter-rouge">db</code> の２つのサービスを用意します。今回は<code class="language-plaintext highlighter-rouge">db</code>はmysqlでいきます。</p>

<h3 id="gemfile-gemfilelock">Gemfile, Gemfile.lock</h3>

<p><code class="language-plaintext highlighter-rouge">Gemfile</code>はこんな感じ。rails 4.2.6 でいきましょう。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">source</span> <span class="s1">'https://rubygems.org'</span>
<span class="n">gem</span> <span class="s1">'rails'</span><span class="p">,</span> <span class="s1">'4.2.6'</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">Gemfile.lock</code>は空っぽで :ok: .</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">touch </span>Gemfile.lock
</code></pre></div></div>

<h3 id="rails-new">rails new</h3>

<p>これで準備完了。次に<code class="language-plaintext highlighter-rouge">docker-compose</code>を通して<code class="language-plaintext highlighter-rouge">rails new</code>します。</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>docker-compose run web rails new <span class="nb">.</span> <span class="nt">--force</span> <span class="nt">--database</span><span class="o">=</span>mysql <span class="nt">--skip-bundle</span>
</code></pre></div></div>

<p>これでwebコンテナが起動して<code class="language-plaintext highlighter-rouge">rails new</code>され、カレントディレクトリにその成果物が生成されています。</p>

<p>Gemfileの<code class="language-plaintext highlighter-rouge">therubyracer</code> gemのコメントを外して<code class="language-plaintext highlighter-rouge">docker-compose build</code>します。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">gem</span> <span class="s1">'therubyracer'</span><span class="p">,</span> <span class="ss">platforms: :ruby</span>
</code></pre></div></div>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>docker-compose build
<span class="go">db uses an image, skipping
Building web
Step 1 : FROM ruby:2.3.0
</span><span class="gp"> ---&gt;</span><span class="w"> </span>268e5f4c6264
<span class="go">Step 2 : RUN apt-get update -qq &amp;&amp; apt-get install -y build-essential libpq-dev
</span><span class="gp"> ---&gt;</span><span class="w"> </span>Using cache
<span class="gp"> ---&gt;</span><span class="w"> </span>b5f055055282
<span class="go">Step 3 : RUN mkdir /myapp
</span><span class="gp"> ---&gt;</span><span class="w"> </span>Using cache
<span class="gp"> ---&gt;</span><span class="w"> </span>ef58bac5859f
<span class="go">Step 4 : WORKDIR /myapp
</span><span class="gp"> ---&gt;</span><span class="w"> </span>Using cache
<span class="gp"> ---&gt;</span><span class="w"> </span>d712516a5383
<span class="go">Step 5 : ADD Gemfile /myapp/Gemfile
</span><span class="gp"> ---&gt;</span><span class="w"> </span>Using cache
<span class="gp"> ---&gt;</span><span class="w"> </span>45897d961453
<span class="go">Step 6 : ADD Gemfile.lock /myapp/Gemfile.lock
</span><span class="gp"> ---&gt;</span><span class="w"> </span>Using cache
<span class="gp"> ---&gt;</span><span class="w"> </span>1e9aadcd1985
<span class="go">Step 7 : RUN bundle install
</span><span class="gp"> ---&gt;</span><span class="w"> </span>Running <span class="k">in </span>db6cade21717
<span class="go">Fetching gem metadata from https://rubygems.org/...........
Fetching version metadata from https://rubygems.org/...
Fetching dependency metadata from https://rubygems.org/..
Resolving dependencies...
Installing rake 11.1.2
...snip...
Removing intermediate container b18b021bc248
Step 8 : ADD . /myapp
</span><span class="gp"> ---&gt;</span><span class="w"> </span>e259ae327e06
<span class="go">Removing intermediate container 568e85cfeee6
Successfully built e259ae327e06
</span></code></pre></div></div>

<h2 id="データベース設定">データベース設定</h2>

<p>デフォルトだとデータベースの向き先が<code class="language-plaintext highlighter-rouge">localhost</code>になっていますので、これを<code class="language-plaintext highlighter-rouge">db</code>コンテナに向けてやる必要があります。</p>

<p>下記の通り、<code class="language-plaintext highlighter-rouge">config/database.yml</code>内のhostに<code class="language-plaintext highlighter-rouge">db</code>を指定しましょう。</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># config/database.yml</span>
<span class="na">default</span><span class="pi">:</span> <span class="nl">&amp;default</span>
  <span class="na">adapter</span><span class="pi">:</span> <span class="s">mysql2</span>
  <span class="na">encoding</span><span class="pi">:</span> <span class="s">utf8</span>
  <span class="na">pool</span><span class="pi">:</span> <span class="m">5</span>
  <span class="na">username</span><span class="pi">:</span> <span class="s">root</span>
  <span class="na">password</span><span class="pi">:</span>
  <span class="na">host</span><span class="pi">:</span> <span class="s">db</span>

<span class="na">development</span><span class="pi">:</span>
  <span class="na">&lt;&lt;</span><span class="pi">:</span> <span class="nv">*default</span>
  <span class="na">database</span><span class="pi">:</span> <span class="s">myapp_development</span>
</code></pre></div></div>

<p>データベースの設定が完了したらデータベースを作成します。</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>docker-compose run web rake db:create
</code></pre></div></div>

<h2 id="docker-compose-up">docker-compose up</h2>

<p><code class="language-plaintext highlighter-rouge">docker-compose up</code>してrails serverを立ち上げます。</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>docker-compose up
<span class="go">Recreating rails1_db_1
Recreating rails1_web_1
Attaching to rails1_db_1, rails1_web_1
db_1  | 2016-04-09T16:48:34.775827Z 0 [Note] mysqld (mysqld 5.7.11) starting as process 1 ...
...snip...
db_1  | Version: '5.7.11'  socket: '/var/run/mysqld/mysqld.sock'  port: 3306  MySQL Community Server (GPL)
web_1 | [2016-04-09 16:48:38] INFO  WEBrick 1.3.1
web_1 | [2016-04-09 16:48:38] INFO  ruby 2.3.0 (2015-12-25) [x86_64-linux]
</span><span class="gp">web_1 | [2016-04-09 16:48:38] INFO  WEBrick::HTTPServer#</span>start: <span class="nv">pid</span><span class="o">=</span>1 <span class="nv">port</span><span class="o">=</span>3000
</code></pre></div></div>

<p>これでrails serverが準備できました。<code class="language-plaintext highlighter-rouge">192.168.99.100:3000</code>でページが見ることができます。</p>

<p>ちなみにdocker-machineのIPアドレスは下記のように取得可能です。</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>docker-machine ip default
<span class="go">192.168.99.100
</span></code></pre></div></div>

<p>これにて完了！</p>

<h2 id="参考">参考</h2>

<ul>
  <li><a href="https://docs.docker.com/compose/rails/">Quickstart: Compose and Rails</a></li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="docker" /><summary type="html"><![CDATA[docker-machine, docker-compose を使ってローカルにdocker Rails環境を構築してみます。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/docker/compose.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/docker/compose.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Ruby on Rails を Google App Engine 上で動かしてみる</title><link href="https://blog.toshimaru.net/ruby-on-google-app-engine/" rel="alternate" type="text/html" title="Ruby on Rails を Google App Engine 上で動かしてみる" /><published>2016-03-26T00:00:00+09:00</published><updated>2016-03-26T00:00:00+09:00</updated><id>https://blog.toshimaru.net/ruby-on-google-app-engine</id><content type="html" xml:base="https://blog.toshimaru.net/ruby-on-google-app-engine/"><![CDATA[<p><a href="http://www.publickey1.jp/blog/16/google_app_enginerubynodejsgcp_next_2016.html">［速報］Google App EngineがRubyとNode.jsのサポートを発表。GCP Next 2016 － Publickey</a></p>

<p>ということでRuby on RailsをGoogle App Engine 上で動かしてみました。手順は公式ドキュメント・ <a href="https://cloud.google.com/ruby/getting-started/hello-world">How to run Hello World - Ruby — Google Cloud Platform</a> を参考に進めていきます。</p>

<h2 id="前提">前提</h2>

<ul>
  <li>gcloud コマンドが使えること（<a href="https://cloud.google.com/sdk/">Google Cloud SDK</a>に含まれています）</li>
  <li>Google Cloud Platformにログイン済みであり、今回のデプロイ先となるプロジェクトが作成済みであること</li>
</ul>

<h2 id="手順">手順</h2>

<h3 id="プロジェクトセットアップ">プロジェクトセットアップ</h3>

<p><a href="https://github.com/GoogleCloudPlatform/getting-started-ruby">GoogleCloudPlatform/getting-started-ruby</a> のHello World Appを今回は動かしますのでまずはプロジェクトをクローンします。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git clone https://github.com/GoogleCloudPlatform/getting-started-ruby.git
$ cd 1-hello-world
</code></pre></div></div>

<p>まずは通常のRuby on Railsアプリと同じく<code class="language-plaintext highlighter-rouge">bundle install</code>してRailsサーバーを立てましょう。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ bundle install
$ rails server
</code></pre></div></div>

<p>これで<code class="language-plaintext highlighter-rouge">localhost:3000</code>でデプロイされるHello World Appが見れました。</p>

<h3 id="gcloud-セットアップ">gcloud セットアップ</h3>

<p>gcloud を使って行きますがいくつか事前の設定が必要あります。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># 初期化
$ gcloud init

# Googleログインする
$ gcloud auth login

# 今回作成したプロジェクトIDをセット
$ gcloud config set project {your-project-id}
</code></pre></div></div>

<p>これでapp deployコマンドが動作しました。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ gcloud preview app deploy
</code></pre></div></div>

<p>デプロイされたあとは AppEngine Console のバージョンの一覧に出てきます。</p>

<p><img src="/images/posts/ruby-gae/deploy-version.png" alt="deploy-version" /></p>

<h3 id="デプロイ時のログ">デプロイ時のログ</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Beginning deployment...
If this is your first deployment, this may take a while...done.

Using Ruby 2.2.4 as requested in the .ruby-version file
Verifying that Managed VMs are enabled and ready.
Building and pushing image for module [default]
Started cloud build [789f0d61-dc0a-4994-8292-02a5ff9f65de].
To see logs in the Cloud Console: https://console.developers.google.com/logs?project=your-project-id&amp;service=cloudbuild.googleapis.com&amp;key1=789f0d61-dc0a-4994-8292-02a5ff9f65de&amp;logName=projects/your-project-id/logs/cloudbuild
--------------------------------- REMOTE BUILD OUTPUT ----------------------------------
starting build "789f0d61-dc0a-4994-8292-02a5ff9f65de"

FETCHSOURCE
Fetching storage object: gs://staging.your-project-id.appspot.com/your-project-id.default.20160326t100408#1458954328349000
Copying gs://staging.your-project-id.appspot.com/your-project-id.default.20160326t100408#1458954328349000...
Downloading file:///tmp/source-archive.tgz:                      13.32 KiB/13.32 KiB
FETCHBUILDER
Using default tag: latest
latest: Pulling from cloud-builders/dockerizer
bf61d14f65db: Pulling fs layer
3ea15286bc1a: Pulling fs layer
515285067dbf: Pulling fs layer
5e89b839ecfa: Pulling fs layer
e63e5abf57a3: Pulling fs layer
ec858f8c1767: Pulling fs layer
51d0afdd2ff8: Pulling fs layer
415319aa0c90: Pulling fs layer
51d0afdd2ff8: Verifying Checksum
51d0afdd2ff8: Download complete
415319aa0c90: Verifying Checksum
415319aa0c90: Download complete
5e89b839ecfa: Verifying Checksum
5e89b839ecfa: Download complete
3ea15286bc1a: Verifying Checksum
3ea15286bc1a: Download complete
515285067dbf: Verifying Checksum
515285067dbf: Download complete
e63e5abf57a3: Verifying Checksum
e63e5abf57a3: Download complete
ec858f8c1767: Verifying Checksum
ec858f8c1767: Download complete
bf61d14f65db: Verifying Checksum
bf61d14f65db: Download complete
bf61d14f65db: Pull complete
3ea15286bc1a: Pull complete
515285067dbf: Pull complete
5e89b839ecfa: Pull complete
e63e5abf57a3: Pull complete
ec858f8c1767: Pull complete
51d0afdd2ff8: Pull complete
415319aa0c90: Pull complete
Digest: sha256:b80a8cc7ed504307717c7530e795b0c2dea1ff99957806e0785ae831309084ae
Status: Downloaded newer image for gcr.io/cloud-builders/dockerizer:latest
BUILD
Client:
 Version:      1.9.1
 API version:  1.21
 Go version:   go1.4.3
 Git commit:   a34a1d5
 Built:        Fri Nov 20 17:56:04 UTC 2015
 OS/Arch:      linux/amd64

Server:
 Version:      1.9.1
 API version:  1.21
 Go version:   go1.4.2
 Git commit:   a34a1d5
 Built:        Fri Nov 20 13:12:04 UTC 2015
 OS/Arch:      linux/amd64
Sending build context to Docker daemon 90.62 kB
Step 1 : FROM gcr.io/google_appengine/ruby
 ---&gt; 3e6d0d6d0575
Step 2 : RUN cd /rbenv/plugins/ruby-build &amp;&amp;     git pull &amp;&amp;     rbenv install -s 2.2.4 &amp;&amp;     rbenv global 2.2.4 &amp;&amp;     gem install -q --no-rdoc --no-ri bundler --version 1.11.2 &amp;&amp;     gem install -q --no-rdoc --no-ri foreman --version 0.78.0
 ---&gt; Running in 451faee44d37
Already up-to-date.
Successfully installed bundler-1.11.2
1 gem installed
Successfully installed foreman-0.78.0
1 gem installed
 ---&gt; 5da2526068cb
Removing intermediate container 451faee44d37
Step 3 : ENV RBENV_VERSION 2.2.4
 ---&gt; Running in 1e6f8d74782b
 ---&gt; 416110028d7d
Removing intermediate container 1e6f8d74782b
Step 4 : COPY Gemfile Gemfile.lock /app/
 ---&gt; 0ab134d54690
Removing intermediate container 7337fb40c45b
Step 5 : RUN bundle install &amp;&amp; rbenv rehash
 ---&gt; Running in 0c258ea5a1be
Don't run Bundler as root. Bundler can ask for sudo if it is needed, and
installing your bundle as root will break this application for all non-root
users on this machine.
Fetching gem metadata from https://rubygems.org/...........
Fetching version metadata from https://rubygems.org/...
Fetching dependency metadata from https://rubygems.org/..
Using rake 10.4.2
Installing i18n 0.7.0
Installing json 1.8.3 with native extensions
Installing minitest 5.7.0
Installing thread_safe 0.3.5
Installing builder 3.2.2
Installing erubis 2.7.0
Installing mini_portile 0.6.2
Installing rack 1.6.4
Installing mime-types 2.6.1
Installing arel 6.0.0
Installing cliver 0.3.2
Installing diff-lcs 1.2.5
Installing multi_json 1.11.2
Installing websocket-extensions 0.1.2
Using bundler 1.11.2
Using thor 0.19.1
Installing rspec-support 3.3.0
Installing tzinfo 1.2.2
Installing nokogiri 1.6.6.2 with native extensions
Installing rack-test 0.6.3
Installing sprockets 3.2.0
Installing mail 2.6.3
Installing websocket-driver 0.6.3 with native extensions
Installing rspec-core 3.3.1
Installing rspec-expectations 3.3.0
Installing rspec-mocks 3.3.1
Installing activesupport 4.2.2
Installing tzinfo-data 1.2015.6
Installing loofah 2.0.2
Installing xpath 2.0.0
Installing rails-deprecated_sanitizer 1.0.3
Installing globalid 0.3.5
Installing activemodel 4.2.2
Installing rails-html-sanitizer 1.0.2
Installing capybara 2.4.4
Installing rails-dom-testing 1.0.6
Installing activejob 4.2.2
Installing activerecord 4.2.2
Installing poltergeist 1.8.1
Installing actionview 4.2.2
Installing actionpack 4.2.2
Installing actionmailer 4.2.2
Installing railties 4.2.2
Installing sprockets-rails 2.3.2
Installing rspec-rails 3.3.2
Installing rails 4.2.2
Bundle complete! 6 Gemfile dependencies, 47 gems now installed.
Use `bundle show [gemname]` to see where a bundled gem is installed.
 ---&gt; 9fde5c5bec0c
Removing intermediate container 0c258ea5a1be
Step 6 : COPY . /app/
 ---&gt; 05eb1e2b6b90
Removing intermediate container e885ebd8251c
Step 7 : ENTRYPOINT bundle exec rackup -p 8080 -E production config.ru
 ---&gt; Running in 1b616e80361d
 ---&gt; 0695731649da
Removing intermediate container 1b616e80361d
Successfully built 0695731649da
PUSH
The push refers to a repository [appengine.gcr.io/gcloud/your-project-id.default.20160326t100408] (len: 1)
Sending image list
Pushing repository appengine.gcr.io/gcloud/your-project-id.default.20160326t100408 (1 tags)
Image 3bc7cdb36864 already pushed, skipping
Image 4bfc20f0ed66 already pushed, skipping
Image ff52712bb308 already pushed, skipping
Image 5880acd9ad50 already pushed, skipping
Image 096d9403d234 already pushed, skipping
Image 956eb41cd003 already pushed, skipping
Image 01eaa1a367c4 already pushed, skipping
Image 943d779f0853 already pushed, skipping
Image 3cc9009b6572 already pushed, skipping
Image b19c39f03dbb already pushed, skipping
Image ca6428f24e68 already pushed, skipping
Image 7b90390ae965 already pushed, skipping
Image cb10a2abbe53 already pushed, skipping
Image 31bee42bdd8a already pushed, skipping
Image a04427afe410 already pushed, skipping
Image 8f70e181ae11 already pushed, skipping
Image 72b1839f75eb already pushed, skipping
Image 0ea63ea23bf2 already pushed, skipping
Image 86100fe6deed already pushed, skipping
Image 45ab69b78373 already pushed, skipping
Image 32066980c48e already pushed, skipping
Image fc85fe8bcbac already pushed, skipping
Image 76b185852e95 already pushed, skipping
Image eec69d4fcd9a already pushed, skipping
Image 17402d207077 already pushed, skipping
Image 27bea8c63202 already pushed, skipping
Image 3e6d0d6d0575 already pushed, skipping
5da2526068cb: Pushing
5da2526068cb: Image successfully pushed
416110028d7d: Pushing
416110028d7d: Image successfully pushed
0ab134d54690: Pushing
0ab134d54690: Image successfully pushed
9fde5c5bec0c: Pushing
9fde5c5bec0c: Image successfully pushed
05eb1e2b6b90: Pushing
05eb1e2b6b90: Image successfully pushed
0695731649da: Pushing
0695731649da: Image successfully pushed
Pushing tag for rev [0695731649da] on {https://appengine.gcr.io/v1/repositories/gcloud/your-project-id.default.20160326t100408/tags/latest}
DONE
----------------------------------------------------------------------------------------

Updating module [default]...done.
Deployed module [default] to [https://your-project-id.appspot.com]
</code></pre></div></div>

<h2 id="appyml">app.yml</h2>

<p>今回使われている<code class="language-plaintext highlighter-rouge">app.yml</code>はこんな感じでした。</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># [START runtime]</span>
<span class="na">runtime</span><span class="pi">:</span> <span class="s">ruby</span>
<span class="na">vm</span><span class="pi">:</span> <span class="no">true</span>
<span class="na">entrypoint</span><span class="pi">:</span> <span class="s">bundle exec rackup -p 8080 -E production config.ru</span>
<span class="c1"># [END runtime]</span>

<span class="c1"># [START resources]</span>
<span class="na">resources</span><span class="pi">:</span>
  <span class="na">cpu</span><span class="pi">:</span> <span class="s">.5</span>
  <span class="na">memory_gb</span><span class="pi">:</span> <span class="m">1.3</span>
  <span class="na">disk_size_gb</span><span class="pi">:</span> <span class="m">10</span>
<span class="c1"># [END resources]</span>

<span class="c1"># [START scaling]</span>
<span class="na">automatic_scaling</span><span class="pi">:</span>
  <span class="na">min_num_instances</span><span class="pi">:</span> <span class="m">1</span>
  <span class="na">max_num_instances</span><span class="pi">:</span> <span class="m">5</span>
  <span class="na">cool_down_period_sec</span><span class="pi">:</span> <span class="m">60</span>
  <span class="na">cpu_utilization</span><span class="pi">:</span>
    <span class="na">target_utilization</span><span class="pi">:</span> <span class="m">0.5</span>
<span class="c1"># [END scaling]</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">runtime</code>の設定がrubyプロジェクトに共通の設定で<code class="language-plaintext highlighter-rouge">resources</code>, <code class="language-plaintext highlighter-rouge">scaling</code>は環境に合わせて適宜チューニングしてください。デフォルトの状態としてはミニマルな設定になっているようです。</p>

<h2 id="参考">参考</h2>

<ul>
  <li><a href="https://github.com/GoogleCloudPlatform/ruby-docker">GoogleCloudPlatform/ruby-docker: Docker images for Ruby</a></li>
  <li><a href="https://github.com/GoogleCloudPlatform/ruby-docker/blob/master/appengine/Dockerfile">ruby-docker/Dockerfile at master · GoogleCloudPlatform/ruby-docker</a></li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="google-app-engine" /><category term="rails" /><category term="docker" /><summary type="html"><![CDATA[Ruby on RailsをGoogle App Engine 上で動かしてみました。手順はGoogle公式ドキュメントの「How to run Hello World - Ruby — Google Cloud Platform」を参考に進めていきます。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/ruby-gae/ruby.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/ruby-gae/ruby.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>