<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="https://blog.toshimaru.net/feed/by_tag/isucon.xml" rel="self" type="application/atom+xml" /><link href="https://blog.toshimaru.net/" rel="alternate" type="text/html" /><updated>2022-10-31T09:41:08+09:00</updated><id>https://blog.toshimaru.net/feed/by_tag/isucon.xml</id><title type="html">Hack Your Design!</title><subtitle>toshimaruの技術系なブログ</subtitle><author><name>Toshimaru</name></author><entry><title type="html">ISUCON7に参加してきました</title><link href="https://blog.toshimaru.net/isucon7/" rel="alternate" type="text/html" title="ISUCON7に参加してきました" /><published>2017-10-28T00:00:00+09:00</published><updated>2017-10-28T00:00:00+09:00</updated><id>https://blog.toshimaru.net/isucon7</id><content type="html" xml:base="https://blog.toshimaru.net/isucon7/"><![CDATA[<p>isuconに参加してきました。結果は<a href="http://isucon.net/archives/50961437.html">400組中154位</a>で予選敗退。予選敗退となりましたが初めてのisucon参加にしては中の上に食い込めてまぁまぁだったのではないでしょうか。</p>

<p>※使用言語はRubyでした。</p>

<h2 id="事前準備">事前準備</h2>

<ul>
  <li>isuconの練習時間は取れなかったので、参加ブログや過去問を読み漁りました
    <ul>
      <li>使えそうな設定・ブログエントリなどはgistにまとめて秘伝のタレとして準備しておきました</li>
      <li>また協議中に使えそうなツール・コマンドもさらっと触っておきました</li>
    </ul>
  </li>
  <li>当日の開発用レポジトリは事前にGitHub上にプライベートレポジトリを作成しておきチームメンバーを招待しておきました</li>
  <li>ボトルネック把握用にカジュアルに導入できるisucon用NewRelicのアカウントも作成しておきました</li>
  <li>コミュニケーションツールとしてはSlackに専用のチャンネルを用意しておきました（今考えると新規にSlackチームを作ってもよかったかもしれません）</li>
</ul>

<h2 id="方針">方針</h2>

<p>上述の事前準備のなかで当日の競技の流れをイメトレしてなんとなくの方針を決めました。</p>

<ul>
  <li>作業がバッティングしないようにどの領域（App, WebServer, DB, CacheStore）を誰が見るかを決めてから作業する</li>
  <li>競技開始1時間くらいは全員でマニュアル読み、アプリケーション触ってアプリケーション把握、なんとなくのボトルネックのあたりを付ける</li>
  <li>競技終了1時間前にはコードをフリーズして再起動試験に備える</li>
</ul>

<h2 id="当日の立ち回り">当日の立ち回り</h2>

<p>今回は同僚の redfit と s-jcs [敬称略]の三人と出たのですが僕含め三人ともに業務ではアプリケーションを主に担当しているので今回はチーム的にインフラ・ミドルウェアチューニングが弱いチーム構成になってました。</p>

<p>なので当日の立ち回りとしては、わりとインフラ業務経験がそこまで深くない s-jcs がアプリケーションを中心に担当してもらい、僕はインフラ・ミドルウェア周りを中心に攻めることにして、redfit には全般的に見てもらおうということになりました。</p>

<p><img src="/images/posts/isucon/isucon7-photo.jpg" alt="" /></p>

<h2 id="やったこと">やったこと</h2>

<h3 id="mysql">MySQL</h3>

<p>まず僕はMySQLの設定をしました。遅いクエリを特定して、インデックスを貼ればすぐに高速化が実現すること、また吐かれているクエリからAppの特性が透けてみえてくるのでは？という意図からMySQLから着手することにしました。</p>

<p>まずはスロークエリとしてクエリログを全部吐くように設定。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>slow_query_log                = 1
slow_query_log_file           = /var/lib/mysql/mysqld-slow.log
long_query_time               = 0
log-queries-not-using-indexes = 1
</code></pre></div></div>

<p>吐かれたクエリをざっとみてインデックス貼れそうな部分を貼ります。</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">CREATE</span> <span class="k">INDEX</span> <span class="n">idx_channel_id</span> <span class="k">ON</span> <span class="n">message</span><span class="p">(</span><span class="n">channel_id</span><span class="p">)</span>
<span class="k">CREATE</span> <span class="k">INDEX</span> <span class="n">idx_image_name</span> <span class="k">ON</span> <span class="n">image</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">my.cnf</code>の設定は後に<code class="language-plaintext highlighter-rouge">too many connection</code>を観測していたので、<code class="language-plaintext highlighter-rouge">max_connections</code>を少しいじったくらいでそれ以外はいじってません。</p>

<p>吐かれるクエリをザッと見て同じタイプのクエリが複数吐かれているのを観測できたので、アプリで複数のN+1の問題があることは想像がつきました。一方、例えば10秒とかかかるような激遅クエリが走っているわけではないので、何かしらの激遅クエリがボトルネックにはなってなさそうであることがわかりました。</p>

<h3 id="app">App</h3>

<p>上記の作業の裏でアプリケーションのチューニングをメンバーがやってたのですが劇的に得点が伸びません。上位陣の点数を見てここから抜けるには何かしらのブレークスルーが必要であろうと思い、ここでicons問題を解決しなければどーにもならなそうということに気づきます。</p>

<p>ここで僕はミドルウェア関係を手を止めicons問題の解決のためにアプリに手を出すことにしました（この時点で16時位だったと思います）。まずはDBに入った icons を書き出して NGINXでサーブするところまでをやりました。</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">File</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="n">row</span><span class="p">[</span><span class="s2">"name"</span><span class="p">],</span> <span class="s2">"w"</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="n">f</span><span class="p">.</span><span class="nf">puts</span><span class="p">(</span><span class="n">row</span><span class="p">[</span><span class="s2">"data"</span><span class="p">])</span> <span class="p">}</span>
</code></pre></div></div>

<p>というコードでDBの画像を書き出していたのですが、ベンチが互換性チェックで落ちることに気づきます。</p>

<p>最初は画像がぶっ壊れてるのかと思ったのですが、見かけ上は全く同じ画像になっています。cmpを使ってバイナリのdiffをとってもこれといった差分は出ません。しかし画像のmd5を見てみると確かに値が違う。</p>

<p>うーん…となり違うとしたら画像のメタデータかファイル末尾のなにかだろうと思い、viのxxdを使ってhexdump形式でファイルを確認してみました。ここでRubyの <code class="language-plaintext highlighter-rouge">file.puts</code> で画像ファイル末尾に改行が余計に入ってしまう点に気づけました。</p>

<p>この問題で30分以上は時間を潰してしまいました。最初からシンプルに <code class="language-plaintext highlighter-rouge">File.write</code> あたりを使っておけばよかったなぁと後悔。</p>

<h3 id="nginx">NGINX</h3>

<p>Iconsは書き出せた、では次はそのファイルの効率的な配信だ、ということでassets関連のファイルがキャッシャブルな状態で配信されているかを確認しました。</p>

<p>ここでCacheControlヘッダーあたりが怪しいということには気づけたのですがうまく設定を煮詰めることができずタイムアップ。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>location /fonts/ {
    add_header Cache-Control "public";
}
location /js/ {
    add_header Cache-Control "public";
}
location /css/ {
    add_header Cache-Control "public";
}
location /icons/ {
    add_header Cache-Control "public";
}
</code></pre></div></div>

<p>普段仕事でこのへんのNginxのconfは触る機会がないので設定がスムーズに進まず時間を浪費してしまいました。（実際作業時間の半分以上はああでもないこうでもないと言いながら適当な情報をクグる時間になっていたと思います）</p>

<h2 id="問題について">問題について</h2>

<p>今までのisucon の傾向を考慮しつつ、事前にある程度どんな構成で出題されそうか予測を立てていました。予想とその結果は以下の通り。</p>

<ul>
  <li>App
    <ul>
      <li>予想候補: Rails/Sinatra</li>
      <li>予想: Sinatra</li>
      <li>結果: Sinatra  → 的中</li>
    </ul>
  </li>
  <li>App Server
    <ul>
      <li>予想候補: Unicorn/Puma</li>
      <li>予想: Unicorn</li>
      <li>結果: Puma → 外れ</li>
    </ul>
  </li>
  <li>DB
    <ul>
      <li>予想候補: MySQL/Postgres</li>
      <li>予想: MySQL</li>
      <li>結果: MySQL  → 的中</li>
    </ul>
  </li>
  <li>WebServer
    <ul>
      <li>予想候補: NGINX /Apache</li>
      <li>予想: NGINX</li>
      <li>結果: NGINX  → 的中</li>
    </ul>
  </li>
  <li>メモリストア
    <ul>
      <li>予想候補: Memcache/ Redis</li>
      <li>予想: Memcache</li>
      <li>結果: 無し → ハズレ</li>
    </ul>
  </li>
  <li>サーバー構成
    <ul>
      <li>予想候補: Web+DB一体型の小さいサーバー一台 / WebとDBを分離した小さいサーバー二台</li>
      <li>予想: Web+DB 一体型のサーバー一台</li>
      <li>結果: Web2台 DB1台の三台構成  → 大外れ</li>
    </ul>
  </li>
</ul>

<p>App, DB, Webは概ね予想の通りでしたがまさか複数台構成、それも三台出くるとは思いもしませんでした（運営様お疲れ様です）。</p>

<p>複数台を想定していなかったので競技中はサーバー間のプロキシ戦略とか分散戦略とか全然ぱっと思い浮かばなかったです。これは大きな敗因だったと思います。</p>

<p>またAWS脳の僕としては画像の扱いは「はぁ？ AWS におくやろ普通（少なくともファイル配信サーバーおくやろ）」と思考停止しており、画像をDBに保存するなんて発想はとうの昔に忘れてしまっておりました。なのでicons問題に対してぱっとスマートなソリューションを頭に浮かべられなかったのは甘かったところでした。</p>

<blockquote class="twitter-tweet" data-lang="ja">
<p lang="ja" dir="ltr">今回のISUSON、3台なのでweb x2 db x1 で予選通過できるんだけどこれが5台や10台だったらより帯域を有効利用するアーキテクチャが強くなるし、一台にファイル書き込みを寄せる奴には負けないと思ってる</p>&mdash; fujiwara (@fujiwara) <a href="https://twitter.com/fujiwara/status/923533843520413697?ref_src=twsrc%5Etfw">October 26, 2017</a>
</blockquote>

<p>今回は２台のWebだったけどこれが10台だったらという思考実験をやってみるのも面白そうです。</p>

<h2 id="反省点まとめ">反省点まとめ</h2>

<ul>
  <li>systemd 慣れてなさすぎてダメだった
    <ul>
      <li>最近業務でコマンドでサーバー操作することもめっきりなくなってるし systemd を使っていないので使って覚えるしかなさそう</li>
      <li>参考情報: <a href="https://qiita.com/tukiyo3/items/092fc32318bd3d1a0846">CentOS7で使われているsystemctlについて少しまとめた - Qiita</a></li>
    </ul>
  </li>
  <li>サーバー作業中、<code class="language-plaintext highlighter-rouge">vim</code>という存在しないコマンドを叩いて何度エラーになったかわからないので大人しくサーバーにはvimを入れよう</li>
  <li>nginx力が低く効率的なサーバー構成を組めなかった
    <ul>
      <li>今回の敗因は何と言ってもicons問題を解決できずボトルネックをiconsからアプリケーションに移せなかったこと</li>
    </ul>
  </li>
  <li><a href="https://gist.github.com/941/8c64842b71995a2d448315e2594f62c2">マニュアル</a>ちゃんと読んでおこう
    <ul>
      <li>sleep の値変えてスコア変わって一喜一憂していたけどマニュアルにはこう書いてあった -&gt;「GET /fetch へのアクセスには点数が加算されません。」</li>
      <li>304加点に関する記述もされており、そこで静的ファイルに関してピンと来てればもっと早い段階でスコア伸ばせていたと思う</li>
      <li>次は一番最初に声に出して読み合わせとかすると良いかもしれない</li>
    </ul>
  </li>
  <li>業務でサーバー作業全然しないので作業時間の半分くらいはGoogleでああでもないこうでもないと調べる時間だった感覚
    <ul>
      <li>サーバー作業もっとスラスラできるようになりたい</li>
    </ul>
  </li>
  <li>Nginxのログをalpで解析するのができなかった
    <ul>
      <li>Nginxのログをベンチマーカーの気持ちになりながら目グレップする必要あった</li>
    </ul>
  </li>
  <li>アプリケーションのデータベースconnection 閉じ忘れ気づけなかった。これで too many connectionが発生してたっぽい</li>
  <li>デプロイスクリプト用意する予定だったけどちゃんと用意できなかった
    <ul>
      <li>これにより再起動漏れとかが発生した</li>
    </ul>
  </li>
  <li>confファイルのrepo管理が徹底できず雑管理してしまった</li>
  <li>複数台でそれぞれのホスト間の名前解決どうしてるかを見るのに <code class="language-plaintext highlighter-rouge">/etc/hosts</code> はすぐに確認しておいてよかった</li>
</ul>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">cat</span> /etc/hosts
<span class="go">127.0.0.1       localhost
192.168.101.1   app1011
192.168.101.2   app1012
192.168.101.3   app1013 db
</span></code></pre></div></div>

<h2 id="良かったこと">良かったこと</h2>

<ul>
  <li>Discord良い</li>
  <li>MacのGUIは有効に使えたと思う。MacのGUI便利。
    <ul>
      <li>DBはSequel Proでカジュアルに覗くのが良い</li>
      <li>FileはforkLift使ってカジュアルに転送できたのが良い(今回DBのdumpファイルとか持ってきた)</li>
    </ul>
  </li>
  <li>同僚と出場したので、会社利用させてもらったのでWiFiも快適だったしホワイトボード・ディスプレイなどの設備も使えて良かった</li>
</ul>

<h2 id="運営の方へ">運営の方へ</h2>

<p>ベンチマーカーの結果が安定しなかったり、開催日両日共に開始時間が遅れたりもしましたが、参加を終えてその不満も忘れるくらい準備が大変だったろうなぁとお察しします。あれだけのサーバー台数を参加者全員に用意するのは本当にすごい！</p>

<p>出題についでですが、<code class="language-plaintext highlighter-rouge">Cache-Controle: Public, max-age</code>に関して何か色々物申す方がいらっしゃるようですが、これに関しては気づける人はちゃんと気づけたし特段奇問という印象は僕は受けなかったです。</p>

<p>コンテスト規模は年々拡大する一方ですが、今年も開催してくださりありがとうございました！</p>

<h2 id="最後に">最後に</h2>

<blockquote class="twitter-tweet" data-lang="ja">
<p lang="ja" dir="ltr">エンジョイ勢です <a href="https://twitter.com/hashtag/isucon?src=hash&amp;ref_src=twsrc%5Etfw">#isucon</a></p>&mdash; toshimaru (@toshimaru_e) <a href="https://twitter.com/toshimaru_e/status/921933892780568576?ref_src=twsrc%5Etfw">October 22, 2017</a>
</blockquote>

<p>今回のisuconはエンジョイ勢として臨んだのですがずっと出たかったisuconだったので実際参加してみてとてもエンジョイできました。</p>

<p>とはいえ圧倒的なスコア差を上位陣に見せられて悔しさはかなり残りました。今年なんとなくの雰囲気を掴めたので来年も出場し、上位陣に食い込めるように精進していきたいと思います。</p>

<h2 id="参考">参考</h2>

<ul>
  <li>問題: <a href="https://github.com/isucon/isucon7-qualify">isucon/isucon7-qualify: ISUCON7 予選問題の参照実装とベンチマーカー</a></li>
  <li>今回の出題に関してキャッシュコントロールに関してこちらが参考になります: <a href="http://landau.jp/blog/10/">静的ファイルのキャッシュコントロールについて ISUCON7 – そろそろちゃんとやります</a></li>
  <li>学びが多い関連エントリ(特に上位陣のは参考になる) <a href="http://isucon.net/archives/50949740.html">ISUCON7 オンライン予選 関連エントリまとめ : ISUCON公式Blog</a></li>
  <li>過去問: <a href="https://github.com/matsuu/vagrant-isucon">https://github.com/matsuu/vagrant-isucon</a></li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="isucon" /><summary type="html"><![CDATA[isuconに参加してきました。結果は400組中154位で予選敗退。今回のisuconはエンジョイ勢として臨んだのですがずっと出たかったisuconだったので実際参加してみてとてもエンジョイできました。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/isucon/isucon7.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/isucon/isucon7.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>