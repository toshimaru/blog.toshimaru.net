<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://blog.toshimaru.net/feed/by_tag/php.xml" rel="self" type="application/atom+xml" /><link href="https://blog.toshimaru.net/" rel="alternate" type="text/html" /><updated>2021-07-15T09:51:10+09:00</updated><id>https://blog.toshimaru.net/feed/by_tag/php.xml</id><title type="html">Hack Your Design!</title><subtitle>toshimaruの技術系なブログ</subtitle><author><name>Toshimaru</name></author><entry><title type="html">接続元のグローバルIP出すやつ作った</title><link href="https://blog.toshimaru.net/gae-ip-info/" rel="alternate" type="text/html" title="接続元のグローバルIP出すやつ作った" /><published>2016-02-10T00:00:00+09:00</published><updated>2019-05-19T00:00:00+09:00</updated><id>https://blog.toshimaru.net/gae-ip-info</id><content type="html" xml:base="https://blog.toshimaru.net/gae-ip-info/">&lt;p&gt;&lt;a href=&quot;http://www.ugtop.com/spill.shtml&quot;&gt;確認くん&lt;/a&gt;とかいちいち検索してページにいったりするのがダルかったので、自分のわかりやすいURLでGoogle App Engine上にPHPで接続元グローバルIP出すやつ作った。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ip.toshima.ru/&quot;&gt;Your IP address info&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;裏機能&quot;&gt;裏機能&lt;/h2&gt;

&lt;p&gt;コマンドラインで簡単に抽出できるように&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl&lt;/code&gt;で叩いたらIPだけ出力するような裏機能付けた。&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt; ip.toshima.ru
&lt;span class=&quot;go&quot;&gt;xxx.xxx.x.x
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;google-app-engine-という選択&quot;&gt;Google App Engine という選択&lt;/h2&gt;

&lt;p&gt;Google App Engine、一昔前はとっつきにくかったけど今は管理画面も使いやすくなってドキュメントも丁寧になってきたしデプロイ周りのCLIツールも整ってきているので良い感じである。&lt;/p&gt;

&lt;p&gt;Herokuが有料になった今、個人サービスでなにかさっと作りたいときはGAEは良さそう。&lt;/p&gt;</content><author><name>Toshimaru</name></author><category term="google-app-engine" /><category term="php" /><summary type="html">確認くんとかいちいち検索してページにいったりするのがダルかったので、自分のわかりやすいURLでGoogle App Engine上にPHPで接続元グローバルIP出すやつ作った。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/ip.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/ip.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PHP5.4 から導入された trait 機能の使いドコロ</title><link href="https://blog.toshimaru.net/php-trait/" rel="alternate" type="text/html" title="PHP5.4 から導入された trait 機能の使いドコロ" /><published>2013-12-08T00:00:00+09:00</published><updated>2013-12-08T00:00:00+09:00</updated><id>https://blog.toshimaru.net/php-trait</id><content type="html" xml:base="https://blog.toshimaru.net/php-trait/">&lt;p&gt;この記事は&lt;a href=&quot;http://www.adventar.org/calendars/101&quot;&gt;PHP Advent Calendar 2013&lt;/a&gt;の8日目の記事です。本エントリではphp5.4の注目機能の１つである&lt;a href=&quot;http://php.net/manual/ja/language.oop5.traits.php&quot;&gt;trait&lt;/a&gt;をどうやって扱うべきかを書いてみようと思います。&lt;/p&gt;

&lt;h2 id=&quot;traitとは&quot;&gt;Traitとは&lt;/h2&gt;

&lt;p&gt;Traitとは継承関係と関係なく実装を再利用できる仕組みのことです&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;。言い換えるならば、「多重継承」であったり「Mix-in」を可能にする仕組みと言えるでしょう。Rubyistの間ではMix-inの概念は当たり前のことでしょうが、PHP界隈ではTraitは新しい機能ということもあり浸透していない概念かと思います（Ruby以外にもTraitと似た機構はあるみたいですね&lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;）。&lt;/p&gt;

&lt;p&gt;本エントリではPHPerの間では未だ聞き慣れないであろうTraitの概念を実コードとともに紹介してみようと思います。&lt;/p&gt;

&lt;h2 id=&quot;traitの特徴&quot;&gt;Traitの特徴&lt;/h2&gt;

&lt;p&gt;Traitの簡単な特徴は以下の通りです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;PHP5.4以降必須&lt;/li&gt;
  &lt;li&gt;Trait自身のインスタンスを作成することはできない&lt;/li&gt;
  &lt;li&gt;振る舞いを継承関係のような上下方向ではなく水平方向に定義可能&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;traitを使うと嬉しくなる状況&quot;&gt;Traitを使うと嬉しくなる状況&lt;/h2&gt;

&lt;p&gt;ではTraitを使うべき状況、使うと嬉しい状況とはどんな状況でしょうか？　まずは下記を満たす実装を普通にPHPで書いてみます。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;人間(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Human&lt;/code&gt;): 「話す」「逃げる」などの基本行動が可能&lt;/li&gt;
  &lt;li&gt;戦士(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Warrior&lt;/code&gt;): 基本行動に加え「物理攻撃」が可能&lt;/li&gt;
  &lt;li&gt;魔法使い(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Wizard&lt;/code&gt;): 基本行動に加え「魔法攻撃」が可能&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;結果、このようになりました。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Human&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;talk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;話す&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;escape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;逃げる&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cd&quot;&gt;/**
     * 使用可能なコマンド一覧を出力
     */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;get_called_class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$class&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos; can use &apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;get_class_methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;`&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$method&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;` &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Warrior&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Human&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;攻撃&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Wizard&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Human&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;魔法&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;Warrior&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;commands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; Warrior can use `attack` `talk` `escape` `commands`&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Wizard&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;commands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; Wizard can use `spell` `talk` `escape` `commands`&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;基本行動可能な&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Human&lt;/code&gt;クラスがあってそれを継承した&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Warrior&lt;/code&gt;,&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Wizard&lt;/code&gt;がいて…。普通のコードかと思います。&lt;/p&gt;

&lt;h3 id=&quot;追加要件魔法戦士を追加したい&quot;&gt;追加要件：「魔法戦士を追加したい！」&lt;/h3&gt;

&lt;p&gt;こんな要望がきました。「魔法戦士も追加したいんだよねー！」　さて上記のような実装に魔法戦士を加えるとしたらどうなるでしょうか？&lt;/p&gt;

&lt;p&gt;魔法も攻撃もできなきゃいけないから、まず&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Warrior&lt;/code&gt;を継承してその次に&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Wizard&lt;/code&gt;も継承して…と、ここで多重継承の問題が出てきますね。愚直に&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Human&lt;/code&gt;を継承した魔法戦士を作ってもいいのですが、同じコードを二度は書きたくないですよね。DRYに行きたいですよね、ね？&lt;/p&gt;

&lt;h3 id=&quot;traitを使ってみる&quot;&gt;Traitを使ってみる&lt;/h3&gt;

&lt;p&gt;そこでTraitの出番です。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;trait&lt;/code&gt;であれば振る舞いを水平方向に構成できちゃうんです。え？よくわからない？　コードを見てください。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Attackable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;攻撃&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Spellable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;魔法&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Human&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;talk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;話す&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;escape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;逃げる&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cd&quot;&gt;/**
     * 使用可能なコマンド一覧を出力
     */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;get_called_class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$class&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos; can use &apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;get_class_methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;`&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$method&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;` &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WarriorWizard&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Human&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Attackable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Spellable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;WarriorWizard&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;commands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; WarriorWizard can use `talk` `escape` `commands` `attack` `spell`&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ww&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WarriorWizard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ww&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;spell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 魔法&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ww&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;attack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 攻撃&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;まずは&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Attackable&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Spellable&lt;/code&gt;というトレイト、つまり「物理攻撃が可能である」「魔法攻撃が可能である」という特性を定義します。ここまでくればもう簡単。あとはそれを&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WarriorWizard&lt;/code&gt;クラス内で&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;use&lt;/code&gt;してやるだけです。これで&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WarriorWizard&lt;/code&gt;は魔法も物理攻撃も可能になります。&lt;/p&gt;

&lt;p&gt;ね？簡単でしょ？&lt;/p&gt;

&lt;h2 id=&quot;今後のtrait事情まだ来ないであろうtraitの波&quot;&gt;今後のTrait事情―まだ来ないであろうTraitの波　&lt;/h2&gt;

&lt;p&gt;今回紹介したTraitはフレームワークの設計を根本から変えうる素晴らしい機能なのですが、&lt;a href=&quot;http://w3techs.com/technologies/details/pl-php/5/all&quot;&gt;PHP5.4の使用率がまだ10%&lt;/a&gt;なこと、まだまだTraitを使ったコード使用例が少ないこと、これらを考えるとTraitがPHPerに広く普及するにはあと2,3年はかかるのかな、と考えています。&lt;/p&gt;

&lt;p&gt;CakePHP3では、PHP5.4が必須となり、&lt;a href=&quot;http://www.engineyard.co.jp/blog/2013/cakephp3-preprepreview/&quot;&gt;trait機能がうまく活用された設計&lt;/a&gt;となっています。このフレームワークレベルでのTrait有効活用を機に、Traitを利用したナイスなコード、ひいてはPHP5.4の使用が今後増えていけばいいなと思っています。&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://www.slideshare.net/tlync/trait&quot;&gt;Trait とは? その使い道を考えてみる&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;RubyだとMix-in、Scalaだとtrait、Perl6だとrole　にあたります。 &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Toshimaru</name></author><category term="php" /><summary type="html">この記事はPHP Advent Calendar 2013の8日目の記事です。本エントリではphp5.4の注目機能の１つであるtraitをどうやって扱うべきかを書いてみようと思います。</summary></entry><entry><title type="html">PHPのプロパティをStrictに定義する</title><link href="https://blog.toshimaru.net/php-force-property/" rel="alternate" type="text/html" title="PHPのプロパティをStrictに定義する" /><published>2013-12-01T00:00:00+09:00</published><updated>2013-12-01T00:00:00+09:00</updated><id>https://blog.toshimaru.net/php-force-property</id><content type="html" xml:base="https://blog.toshimaru.net/php-force-property/">&lt;p&gt;本記事は&lt;a href=&quot;http://www.adventar.org/calendars/101&quot;&gt;PHP Advent Calendar 2013&lt;/a&gt;一日目の記事として書きます。　現在僕しかカレンダーに参加していないようなのでお暇な方は是非参加してみてくださいね！&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;PHPといえばそのユルさ・ルーズさが嫌われる１つの原因ですよね（と同時に好かれる理由でもある）。例えば&lt;a href=&quot;http://www.php.net/manual/ja/language.oop5.properties.php&quot;&gt;プロパティ&lt;/a&gt;に関してこんなユルさがあります。&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toshimaru/6dc602b5ce5db54f8db0.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;まずは1を見てください。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;public&lt;/code&gt;なプロパティには普通にアクセスできて、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;private&lt;/code&gt;なプロパティにはアクセスできない。普通ですね。&lt;/p&gt;

&lt;p&gt;次に2です。未定義の&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hoge&lt;/code&gt;プロパティにアクセスしてみます。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Undefined property&lt;/code&gt;で怒られます。ここもOK.&lt;/p&gt;

&lt;p&gt;次に3。未定義の&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hoge&lt;/code&gt;プロパティを外部からセットしてみます。エラーは起こりません。この辺から少しおかしい。その後、もう一度2でやったことをやってみます。今度はうまくいきます（なんと！）。&lt;/p&gt;

&lt;p&gt;「え、じゃあプロパティ外部から自由に定義し放題じゃないですか」と思ったあなた、その通り、PHPでは自由にプロパティを外部から弄くり回せちゃうわけです。4でやっているように。&lt;/p&gt;

&lt;h2 id=&quot;解決策-strictなプロパティ&quot;&gt;解決策 (Strictなプロパティ)&lt;/h2&gt;

&lt;p&gt;実際のところもうちょっと厳密にプロパティを制御したいですよね。外部からプロパティを自由に操作してほしくはない。プロパティを強制することはできないだろうか、ということで出来上がったのがこちら。&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/toshimaru/4721470.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;まず注目してもらいたいのは、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;val&lt;/code&gt;という変数を&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;private&lt;/code&gt;として宣言しているところです。これにより&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;val&lt;/code&gt;変数はクラスに隠蔽されています。&lt;/p&gt;

&lt;p&gt;ではどう&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;val&lt;/code&gt;変数にアクセスするのか？　通常であれば&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getVal()&lt;/code&gt;,&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setVal()&lt;/code&gt;なんていうアクセッサーを用意しちゃうところですが、ここでは&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__get&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__set&lt;/code&gt;の&lt;a href=&quot;http://php.net/manual/ja/language.oop5.magic.php&quot;&gt;マジックメソッド&lt;/a&gt;を利用することで普遍的に実装しています。&lt;/p&gt;

&lt;p&gt;これにより最初に紹介した例の3,4のような自由にプロパティを外部から定義できちゃうようなことは防げます。小さい実装のわりにはこれで得られるメリットが大きく、我ながら素敵な実装と思うんですが、どうでしょう？&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;次回のPHP Advent CalendarはPHP5.4について書きたいと思います。&lt;/p&gt;</content><author><name>Toshimaru</name></author><category term="php" /><summary type="html">本記事はPHP Advent Calendar 2013一日目の記事として書きます。　現在僕しかカレンダーに参加していないようなのでお暇な方は是非参加してみてくださいね！</summary></entry><entry><title type="html">Composerで始める PHPのライブラリ管理</title><link href="https://blog.toshimaru.net/how-to-use-composer-autoload/" rel="alternate" type="text/html" title="Composerで始める PHPのライブラリ管理" /><published>2013-10-24T00:00:00+09:00</published><updated>2013-10-24T00:00:00+09:00</updated><id>https://blog.toshimaru.net/how-to-use-composer-autoload</id><content type="html" xml:base="https://blog.toshimaru.net/how-to-use-composer-autoload/">&lt;p&gt;PHPも&lt;a href=&quot;http://getcomposer.org/&quot;&gt;Composer&lt;/a&gt;の登場によりライブラリのインストール、依存性管理が格段に楽になりました。既にPHPのライブラリ管理のスタンダードになっていますが、改めてComposerの導入手順について紹介してみたいと思います。&lt;/p&gt;

&lt;h2 id=&quot;composerのインストール&quot;&gt;Composerのインストール&lt;/h2&gt;

&lt;p&gt;PHPのバージョンは5.3以降が必要です。PHP5.2以前はさっさと捨てるべし！&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -s https://getcomposer.org/installer | php
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;さてこれで&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;composer.phar&lt;/code&gt;が手に入りました。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;composer&lt;/code&gt;コマンドを使えるようにするためにパスの通った場所に&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;composer.phar&lt;/code&gt;を移動しましょう。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo mv composer.phar /usr/local/bin/composer
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;composer&lt;/code&gt;コマンド準備完了です。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ composer
   ______
  / ____/___  ____ ___  ____  ____  ________  _____
 / /   / __ \/ __ `__ \/ __ \/ __ \/ ___/ _ \/ ___/
/ /___/ /_/ / / / / / / /_/ / /_/ (__  )  __/ /
\____/\____/_/ /_/ /_/ .___/\____/____/\___/_/
                    /_/
Composer version b482ebe0ca18321d9322bd913af73c1c55adebf1 2013-09-23 09:55:49
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;依存関係の記述&quot;&gt;依存関係の記述&lt;/h2&gt;

&lt;p&gt;composerはプロジェクトルートの &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;composer.json&lt;/code&gt; ファイルにライブラリを記述することで依存関係の管理を行います。（composer.jsonはnpmにおけるpackage.jsonみたいなものです）早速ファイルを作ってライブラリを記述してみましょう。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ touch composer.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;composer.json&lt;/code&gt;ファイルに下記のように記述します。ここではPHPUnitをインストールしてみます。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
    &quot;require&quot;: {
        &quot;phpunit/phpunit&quot;: &quot;3.7.*&quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;ライブラリのインストール&quot;&gt;ライブラリのインストール&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;composer.json&lt;/code&gt;ファイルを記述し終えたら、composerコマンドでライブラリのインストールを行います。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ composer install
Loading composer repositories with package information
Installing dependencies (including require-dev)
  - Installing symfony/yaml (v2.3.6)
    Loading from cache

  - ..............

  - Installing phpunit/phpunit (3.7.28)
    Loading from cache

phpunit/phpunit suggests installing phpunit/php-invoker (&amp;gt;=1.1.0,&amp;lt;1.2.0)
Writing lock file
Generating autoload files
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;うまいこといきました。ライブラリは&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vendor&lt;/code&gt;ディレクトリ下に格納されます。この時同時にバージョン情報が書かれた&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;composer.lock&lt;/code&gt;ファイルも生成します。&lt;/p&gt;

&lt;h2 id=&quot;ライブラリのアップデート&quot;&gt;ライブラリのアップデート&lt;/h2&gt;

&lt;p&gt;ライブラリのアップデートに関しては下記のコマンドでOK.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ composer update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;モダンなPHPパッケージ管理であればComposer一択でしょう。PEARとの使い分けに関しては&lt;a href=&quot;http://ja.phptherightway.com/#依存関係の管理&quot;&gt;PHP Right Way&lt;/a&gt;にはこのように書いてあります。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Composer を使うのは、ひとつのプロジェクトにおける依存関係を管理するとき。&lt;/li&gt;
    &lt;li&gt;PEAR を使うのは、システム全体の PHP 環境の依存関係を管理するとき。&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;大抵の場合、後者のようにシステム全体で依存性管理をしなきゃならん理由はないと思うのでComposerで依存管理を行いましょう！&lt;/p&gt;</content><author><name>Toshimaru</name></author><category term="php" /><category term="composer" /><summary type="html">PHPもComposerの登場によりライブラリのインストール、依存性管理が格段に楽になりました。既にPHPのライブラリ管理のスタンダードになっていますが、改めてComposerの導入手順について紹介してみたいと思います。</summary></entry><entry><title type="html">PHPって言うほど悪い言語じゃない</title><link href="https://blog.toshimaru.net/php-is-not-bad-language/" rel="alternate" type="text/html" title="PHPって言うほど悪い言語じゃない" /><published>2013-10-20T00:00:00+09:00</published><updated>2013-10-20T00:00:00+09:00</updated><id>https://blog.toshimaru.net/php-is-not-bad-language</id><content type="html" xml:base="https://blog.toshimaru.net/php-is-not-bad-language/">&lt;p&gt;&lt;strong class=&quot;red&quot;&gt;※ただしPHP5.3以降に限る。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;PHPってよく「PHP(笑)」って後ろに笑マークが付いたり、Disられたりすることが多い。でも僕には「笑」を付けるほどPHPは悪い言語だとは思えないんだよね。&lt;/p&gt;

&lt;h2 id=&quot;phpの良いところ&quot;&gt;PHPの良いところ&lt;/h2&gt;

&lt;p&gt;PHPの良さはなんといってもその&lt;strong&gt;とっつきやすさ&lt;/strong&gt;だと思う。何も知らない初学者が「WEBページ作りたいよ！WEBプログラミングしたいよ！」といったときに第一の選択肢となるのはPHPだ。なんせPHPは「ぴーえっちぴー：はいぱーてきすとぷろせっさー」なんだからな！　HyperText作るための言語、それこそPHPの本質たるところなのです。&lt;/p&gt;

&lt;p&gt;逆にその手軽さがイケてないコードを量産していてるとも言えて、結果的にそうやって生まれたイケてないコードのいくつかを見て「PHPはダメ言語」って判断してしまいがちだけど、それは早急だと思う&lt;sup id=&quot;fnref:phpway&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:phpway&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;またPHPの&lt;a href=&quot;http://blog.clock-up.jp/entry/2013/09/01/141859&quot;&gt;公式リファレンスは他のどの言語よりも情報が充実していると思う&lt;/a&gt;。簡潔な良いコード例がたくさん載ってるし、PHPのバージョン情報も明記されている。PHPは日本語情報もたくさんあるので困ったときに日本語で検索して情報も出やすい。&lt;/p&gt;

&lt;h2 id=&quot;phpの悪いところ&quot;&gt;PHPの悪いところ&lt;/h2&gt;

&lt;p&gt;とはいえ、PHPは関数が直感に反していていたり、引数が覚えにくかったり、まぁイケてないところは&lt;a href=&quot;http://www.rubyist.net/~matz/20080126.html#p04&quot;&gt;たくさんある&lt;/a&gt;。それは認めよう。&lt;/p&gt;

&lt;p&gt;ただ近年のPHP動向とか知ってる？　けっこう凄いんだぜ？&lt;/p&gt;

&lt;h2 id=&quot;近年のphpの進化&quot;&gt;近年のPHPの進化&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://getcomposer.org/&quot;&gt;Composer&lt;/a&gt;で外部ライブラリのインストール、依存関係管理できる。フレームワークもMVCな&lt;a href=&quot;https://github.com/symfony/symfony&quot;&gt;Symfony&lt;/a&gt;,&lt;a href=&quot;https://github.com/cakephp/cakephp&quot;&gt;CakePHP&lt;/a&gt;,&lt;a href=&quot;https://github.com/fuel/fuel&quot;&gt;FuelPHP&lt;/a&gt;から、SinatraライクのMicroフレームワークな&lt;a href=&quot;https://github.com/codeguy/Slim&quot;&gt;Slim&lt;/a&gt;,&lt;a href=&quot;https://github.com/fabpot/Silex&quot;&gt;Silex&lt;/a&gt;だってある。CakePHPなんかは日本で人気が高く日本語情報がネットに沢山あってググりやすい。&lt;a href=&quot;https://github.com/laravel/laravel&quot;&gt;Laravel&lt;/a&gt;なんかは今グングン成長している注目株のMVCフレームワークだ。&lt;a href=&quot;https://github.com/sebastianbergmann/phpunit&quot;&gt;PHPUnit&lt;/a&gt;でテストも書ける。PHPUnitの書き方がイケてない？　ならモダンな&lt;a href=&quot;https://github.com/atoum/atoum&quot;&gt;atoum&lt;/a&gt;もある。PHPは遅い？　だったら&lt;a href=&quot;http://phalconphp.com/en/&quot;&gt;The fastest
PHP Framework, Phalcon&lt;/a&gt;という選択肢も今ならある。&lt;/p&gt;

&lt;h2 id=&quot;phpのコードは汚い&quot;&gt;PHPのコードは汚い？&lt;/h2&gt;

&lt;p&gt;正直5.2以前はけっこう汚いコードが多いと思う。PHP4の書き方の名残があるコードなんて最低だ。ただPHP5.3以降は綺麗に書けるようになってきてる。&lt;/p&gt;

&lt;p&gt;PHP5.3以降からは名前空間がサポートされて、これとComposerのAutoloadの機能を使えば&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;require&lt;/code&gt;地獄から解放される。他にも5.3では無名関数がサポートされた。&lt;/p&gt;

&lt;p&gt;PHP5.4からは新しいショートArrayシンタックスが追加されてかつての&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;array&lt;/code&gt;書きまくり地獄からは解放されそうだし、Traitの導入によりRubyのMix-inみたいなことも可能になった。&lt;/p&gt;

&lt;p&gt;PHP5.5ではジェネレータの機能により&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yield&lt;/code&gt;キーワードが使えるようになったり、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;finally&lt;/code&gt;節も追加される（この辺は今更感ありまくりだけど）。&lt;/p&gt;

&lt;p&gt;シンタックスとか言語特性上限界がありますけど（PHPは言語特性上、クソコードが書きやすい）、Rubyでもきっとクソなコード書く人はクソなコードを書くだろうし、Ruby on Railsでもレールの乗り方を無視してクソみたいなコードを書く奴もいるだろう。クソコードはPHPに限った話じゃないぜ。 :shit:&lt;/p&gt;

&lt;h2 id=&quot;phpがwebを作っている&quot;&gt;PHPがWEBを作っている！&lt;/h2&gt;

&lt;p&gt;Googleが無縁であるはずのPHPをGoogle App Engineの言語の一つとして採用したのはなぜか？　&lt;a href=&quot;http://agilecatcloud.com/2013/07/04/google-app-engine-%E3%81%8C-php-%E3%82%92%E3%82%B5%E3%83%9D%E3%83%BC%E3%83%88%E3%81%99%E3%82%8B%EF%BC%9A-%E3%81%AA%E3%81%9C%E3%81%AA%E3%82%89-75-%E3%81%AE-web-%E3%82%92%E3%82%AB%E3%83%90%E3%83%BC/&quot;&gt;PHPがWEBの75％を作っている、とGoogleが判断した&lt;/a&gt;からだ。&lt;/p&gt;

&lt;p&gt;世界で一番使われているCMSはなにか？　WordPressだ。WordPressはPHPで作られている&lt;sup id=&quot;fnref:wp&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:wp&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;世界最大のSNS、Facebookで使われている言語はなにか？　PHPだ。さらに彼らは&lt;a href=&quot;http://2013.8-p.info/japanese/09-28-languages.html&quot;&gt;HipHopというPHPから C++への変換するソフトを作るというかなり頭のイカれたことをやっていたり、Hackという型付のPHP方言を使用していたり&lt;/a&gt;するらしい。Facebook、お前のPHP愛が怖い&lt;sup id=&quot;fnref:fbd&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:fbd&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h2 id=&quot;phpを笑うな&quot;&gt;PHPを笑うな&lt;/h2&gt;

&lt;p&gt;「PHP（笑）」って言っている人がどれだけ上記のような状況を知った上で笑っているのだろうか。僕は上記の状況を鑑みるにもうPHPに「笑」なんて付けることはできない。むしろ軽率に付けててゴメン、とおもった。&lt;/p&gt;

&lt;p&gt;正直自分も今まで、PHPの後ろに「笑」が付いていた。技術ブログ界隈でPHPがよくDisられたりするのを見聞きしてたから僕も知らず知らずのうちにPHPをネタにしてたんだ。でも冷静に考えるとその当時、PHPの良さなんて何も知らなかったのだ。&lt;/p&gt;

&lt;h2 id=&quot;なんか見たことある光景&quot;&gt;なんか見たことある光景？&lt;/h2&gt;

&lt;p&gt;この光景、デジャヴじゃね？とも思った。&lt;/p&gt;

&lt;p&gt;JavaScriptだって&lt;a href=&quot;http://bl.ocks.org/anonymous/raw/6281225/#9&quot;&gt;AJAX技術の台頭で持て囃される以前は言語として見放されていた&lt;/a&gt;。それがAJAX以降どうだ。どんどん便利なライブラリが誕生し、JSを使ったリッチなUIの提供は当たり前となった。そしてNodeの登場以降は全世界の優秀なエンジニアたちがそのテクノロジーの可能性にこぞって注目した。&lt;a href=&quot;http://altjs.org/&quot;&gt;AltJS&lt;/a&gt;の勢いも強まっている。&lt;/p&gt;

&lt;p&gt;PHPはさすがにJSまでの再評価までいかなくとも、少なくともWEB言語の第一位の座に居座り続けてもいいのではないかと思う（そして今後のPHPの進化にも期待したい）。&lt;/p&gt;

&lt;h2 id=&quot;最後に&quot;&gt;最後に&lt;/h2&gt;

&lt;p&gt;「PHP（笑）」の時代は終わりを告げた。ぼくはPHPは悪い言語だとは思わないし、お世辞にもすごく良い言語とも言うことはできない。ただ＜侮れない言語＞であると思うのです。&lt;/p&gt;

&lt;p&gt;PHPはPerlほど真面目じゃないし、Pythonほどスマートじゃないし、Rubyほど垢抜けてないし、JavaScriptほど流行に敏感じゃないけど、そんなPHPが、僕は嫌いじゃない。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p&gt;&lt;a href=&quot;http://t.co/oYy20r6aYU&quot;&gt;http://t.co/oYy20r6aYU&lt;/a&gt; 「ぼくの経験上、一番PHPをバカにし、言語の重要性をうそぶく連中は、大体自分たちが提唱する言語でもロクな仕事ができないことが多い」。これはわからないけれど、自分の経験から語ると、優秀なエンジニアだなと思う人ほどPHPを評価している感じ&lt;/p&gt;&amp;mdash; 紀平 拓男（Takuo Kihira） (@tkihira) &lt;a href=&quot;https://twitter.com/tkihira/statuses/384552044247257088&quot;&gt;September 30, 2013&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:phpway&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;「そんなこといってもぉ、どんなコード書いたらイケてるとかわかんないしぃ」というスイーツなそこのあなた。&lt;a href=&quot;http://www.phptherightway.com/&quot;&gt;PHP The Right Way.&lt;/a&gt;を今すぐ嫁。「技術書高ぃしぃ〜、重ぃしぃ〜、いゃ〜」とか「英語とか読めないしぃ〜」とかつべこべ言う前に無料だし&lt;a href=&quot;http://ja.phptherightway.com/&quot;&gt;日本語版&lt;/a&gt;もあるので黙って全部読むべし。 &lt;a href=&quot;#fnref:phpway&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:wp&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;と、ここでホンネを言うと、WordPressの作りはかなり&lt;a href=&quot;http://mask-legacy.tumblr.com/post/62315583278/in-wordpress-phpcon2013-wctokyo&quot;&gt;アレ&lt;/a&gt;なので個人的にはさっさと世代交代してほしいのだわ &lt;a href=&quot;#fnref:wp&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fbd&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://japan.internet.com/webtech/20131018/5.html&quot;&gt;今後はD言語&lt;/a&gt;なのか？ &lt;a href=&quot;#fnref:fbd&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Toshimaru</name></author><category term="php" /><summary type="html">※ただしPHP5.3以降に限る。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/phplogo.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/phplogo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">超簡単コマンドでローカルにHTTPサーバーを起動する方法</title><link href="https://blog.toshimaru.net/simple-command-web-server/" rel="alternate" type="text/html" title="超簡単コマンドでローカルにHTTPサーバーを起動する方法" /><published>2013-10-07T00:00:00+09:00</published><updated>2019-05-20T00:00:00+09:00</updated><id>https://blog.toshimaru.net/simple-command-web-server</id><content type="html" xml:base="https://blog.toshimaru.net/simple-command-web-server/">&lt;p&gt;スタティックなサイトをサクッとローカルで確認したいときのTipsです。&lt;/p&gt;

&lt;h2 id=&quot;phpを使う&quot;&gt;PHPを使う&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://php.net/manual/ja/features.commandline.webserver.php&quot;&gt;PHPのビルトインウェブサーバー&lt;/a&gt;を使うのが最も簡単な方法だと思います。&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;php &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; localhost:8888
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;pytnonを使う&quot;&gt;Pytnonを使う&lt;/h2&gt;

&lt;p&gt;pythonを使うならこんな感じ。&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;python &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; SimpleHTTPServer
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これでポート8000でWebサーバが起動。ポート指定したければこう。&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;python &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; SimpleHTTPServer 8888
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://qiita.com/sudahiroshi/items/e74d61d939f18779970d&quot;&gt;ワンライナーWebサーバを集めてみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Toshimaru</name></author><category term="php" /><category term="python" /><summary type="html">スタティックなサイトをサクッとローカルで確認したいときのTipsです。</summary></entry><entry><title type="html">[PHP][Ruby]実行速度を計測する</title><link href="https://blog.toshimaru.net/php-5492/" rel="alternate" type="text/html" title="[PHP][Ruby]実行速度を計測する" /><published>2012-12-02T00:00:00+09:00</published><updated>2020-05-15T00:00:00+09:00</updated><id>https://blog.toshimaru.net/php-5492</id><content type="html" xml:base="https://blog.toshimaru.net/php-5492/">&lt;h2 id=&quot;php&quot;&gt;PHP&lt;/h2&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$time_start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;microtime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 何か重たい処理&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;microtime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$time_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$time&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; 秒&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;ruby&quot;&gt;Ruby&lt;/h2&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;beginning_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 何か重たい処理&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;end_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Time elapsed &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beginning_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; seconds&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これを使って&lt;a href=&quot;/php-99717&quot;&gt;処理のパフォーマンス比較&lt;/a&gt;をやると良い感じ。&lt;/p&gt;</content><author><name>Toshimaru</name></author><category term="php" /><category term="ruby" /><summary type="html">PHP</summary></entry><entry><title type="html">phpの@(アットマーク)はオーバーヘッドが大きいから使わないほうがよい</title><link href="https://blog.toshimaru.net/php-99717/" rel="alternate" type="text/html" title="phpの@(アットマーク)はオーバーヘッドが大きいから使わないほうがよい" /><published>2012-11-30T00:00:00+09:00</published><updated>2012-11-30T00:00:00+09:00</updated><id>https://blog.toshimaru.net/php-99717</id><content type="html" xml:base="https://blog.toshimaru.net/php-99717/">&lt;p&gt;事の発端はこれ。Arrayにキーがセットされていて、かつ、そのキーの値をチェックしたい。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 1.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;isset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$checkedAry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;key&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$checkedAry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;key&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;val&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 処理&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 2. 1より早いんじゃね？&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$checkedAry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;key&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;val&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// でもNoticeでちゃうよ！&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// PHP Notice:  Undefined index: index&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 3. 2の「PHP Notice」の回避策　＠&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$checkedAry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;key&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;val&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 処理&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;１と３なら３のほうが処理早いんじゃね？ってことで試してみたところ、こうなった。 （PHP 5.3.3）&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;key1&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;val1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;key2&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;val2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;key3&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;val3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;key4&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;val4&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;key1&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;val1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;key2&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;val2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;key3&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;val3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$time_start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;microtime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$checkedAry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;isset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$checkedAry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;key4&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$checkedAry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;key4&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;val4&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;microtime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$time_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$time&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; second&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$time_start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;microtime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$checkedAry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$checkedAry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;key4&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;val4&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;microtime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$time_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$time&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; second&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;３回やってみてこんな結果でした。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0.098845958709717 second
0.19816088676453 second

0.097808122634888 second
0.15862894058228 second

0.10174417495728 second
0.16551208496094 second
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;つまり&lt;strong&gt;＠付きのほうがそうじゃないほうより１．５倍～２倍程度遅い&lt;/strong&gt;、ということになります。&lt;/p&gt;

&lt;p&gt;ただ、&lt;strong&gt;＠付きのほうがシンプルに書ける場合もある&lt;/strong&gt;ので、今回の例のようにループさせている場合でないのであれば、＠付きを使ってもよいのかもしれません。&lt;/p&gt;</content><author><name>Toshimaru</name></author><category term="php" /><summary type="html">事の発端はこれ。Arrayにキーがセットされていて、かつ、そのキーの値をチェックしたい。</summary></entry><entry><title type="html">[php] array_merge VS array +(plus)</title><link href="https://blog.toshimaru.net/php-arraymerge-vs-plus/" rel="alternate" type="text/html" title="[php] array_merge VS array +(plus)" /><published>2012-10-30T00:00:00+09:00</published><updated>2012-10-30T00:00:00+09:00</updated><id>https://blog.toshimaru.net/php-arraymerge-vs-plus</id><content type="html" xml:base="https://blog.toshimaru.net/php-arraymerge-vs-plus/">&lt;p&gt;PHPのarray_merge関数による配列の足し合わせとプラス（＋）による足し合わせってどう違うの？ってことで実際に試してみた。&lt;/p&gt;
&lt;p&gt;&lt;script src=&quot;https://gist.github.com/3978567.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;上記から、同じキーで足し合わせたとき、array_mergeでは後からきたarray（第二引数）で先のarray(第一引数)を上書きして、プラスの加算のほうではすでに最初のキーで定義してある値はプラスによる加算によってその値は変化しないことがわかります。&lt;/p&gt;
&lt;h4&gt;まとめ&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;array_merge() は後勝ち&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;+ (プラス)は先勝ち&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Toshimaru</name></author><category term="php" /><summary type="html">PHPのarray_merge関数による配列の足し合わせとプラス（＋）による足し合わせってどう違うの？ってことで実際に試してみた。 上記から、同じキーで足し合わせたとき、array_mergeでは後からきたarray（第二引数）で先のarray(第一引数)を上書きして、プラスの加算のほうではすでに最初のキーで定義してある値はプラスによる加算によってその値は変化しないことがわかります。 まとめ array_merge() は後勝ち + (プラス)は先勝ち</summary></entry><entry><title type="html">[PHP]URL safe な base64 encode メソッド</title><link href="https://blog.toshimaru.net/phpurl-safe-base64-encode/" rel="alternate" type="text/html" title="[PHP]URL safe な base64 encode メソッド" /><published>2012-10-06T00:00:00+09:00</published><updated>2012-10-06T00:00:00+09:00</updated><id>https://blog.toshimaru.net/phpurl-safe-base64-encode</id><content type="html" xml:base="https://blog.toshimaru.net/phpurl-safe-base64-encode/">&lt;p&gt;base64エンコード時でに出てくる記号 +(プラス) , /(スラッシュ) , =(イコール) .　このbase64エンコードした値をさらにURLのパラメータで使うためにURLエンコードすると、パーセントエンコーディングされてしまいます。&lt;/p&gt;
&lt;p&gt;そこで、パーセントエンコーディングされないURLセーフなbase64エンコードメソッドを作ります。&lt;/p&gt;
&lt;p&gt;&lt;script src=&quot;https://gist.github.com/3775127.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;たしかにこれで問題なさそうですね。&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;php &amp;gt; echo  urlencode(&apos;test+/=&apos;);
test%2B%2F%3D
php &amp;gt; echo  urlencode(&apos;test_-.&apos;);
test_-.&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;</content><author><name>Toshimaru</name></author><category term="php" /><summary type="html">base64エンコード時でに出てくる記号 +(プラス) , /(スラッシュ) , =(イコール) .　このbase64エンコードした値をさらにURLのパラメータで使うためにURLエンコードすると、パーセントエンコーディングされてしまいます。 そこで、パーセントエンコーディングされないURLセーフなbase64エンコードメソッドを作ります。 たしかにこれで問題なさそうですね。 php &amp;gt; echo urlencode(&apos;test+/=&apos;); test%2B%2F%3D php &amp;gt; echo urlencode(&apos;test_-.&apos;); test_-.</summary></entry></feed>