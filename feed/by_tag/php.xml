<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="https://blog.toshimaru.net/feed/by_tag/php.xml" rel="self" type="application/atom+xml" /><link href="https://blog.toshimaru.net/" rel="alternate" type="text/html" /><updated>2022-11-05T23:59:22+09:00</updated><id>https://blog.toshimaru.net/feed/by_tag/php.xml</id><title type="html">Hack Your Design!</title><subtitle>toshimaruの技術系なブログ</subtitle><author><name>Toshimaru</name></author><entry><title type="html">接続元のグローバルIP出すやつ作った</title><link href="https://blog.toshimaru.net/gae-ip-info/" rel="alternate" type="text/html" title="接続元のグローバルIP出すやつ作った" /><published>2016-02-10T00:00:00+09:00</published><updated>2019-05-19T00:00:00+09:00</updated><id>https://blog.toshimaru.net/gae-ip-info</id><content type="html" xml:base="https://blog.toshimaru.net/gae-ip-info/"><![CDATA[<p><a href="http://www.ugtop.com/spill.shtml">確認くん</a>とかいちいち検索してページにいったりするのがダルかったので、自分のわかりやすいURLでGoogle App Engine上にPHPで接続元グローバルIP出すやつ作った。</p>

<p><a href="https://ip.toshima.ru/">Your IP address info</a></p>

<h2 id="裏機能">裏機能</h2>

<p>コマンドラインで簡単に抽出できるように<code class="language-plaintext highlighter-rouge">curl</code>で叩いたらIPだけ出力するような裏機能付けた。</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>curl <span class="nt">-L</span> ip.toshima.ru
<span class="go">xxx.xxx.x.x
</span></code></pre></div></div>

<h2 id="google-app-engine-という選択">Google App Engine という選択</h2>

<p>Google App Engine、一昔前はとっつきにくかったけど今は管理画面も使いやすくなってドキュメントも丁寧になってきたしデプロイ周りのCLIツールも整ってきているので良い感じである。</p>

<p>Herokuが有料になった今、個人サービスでなにかさっと作りたいときはGAEは良さそう。</p>]]></content><author><name>Toshimaru</name></author><category term="google-app-engine" /><category term="php" /><summary type="html"><![CDATA[確認くんとかいちいち検索してページにいったりするのがダルかったので、自分のわかりやすいURLでGoogle App Engine上にPHPで接続元グローバルIP出すやつ作った。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/ip.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/ip.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PHP5.4 から導入された trait 機能の使いドコロ</title><link href="https://blog.toshimaru.net/php-trait/" rel="alternate" type="text/html" title="PHP5.4 から導入された trait 機能の使いドコロ" /><published>2013-12-08T00:00:00+09:00</published><updated>2013-12-08T00:00:00+09:00</updated><id>https://blog.toshimaru.net/php-trait</id><content type="html" xml:base="https://blog.toshimaru.net/php-trait/"><![CDATA[<p>この記事は<a href="http://www.adventar.org/calendars/101">PHP Advent Calendar 2013</a>の8日目の記事です。本エントリではphp5.4の注目機能の１つである<a href="http://php.net/manual/ja/language.oop5.traits.php">trait</a>をどうやって扱うべきかを書いてみようと思います。</p>

<h2 id="traitとは">Traitとは</h2>

<p>Traitとは継承関係と関係なく実装を再利用できる仕組みのことです<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>。言い換えるならば、「多重継承」であったり「Mix-in」を可能にする仕組みと言えるでしょう。Rubyistの間ではMix-inの概念は当たり前のことでしょうが、PHP界隈ではTraitは新しい機能ということもあり浸透していない概念かと思います（Ruby以外にもTraitと似た機構はあるみたいですね<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup>）。</p>

<p>本エントリではPHPerの間では未だ聞き慣れないであろうTraitの概念を実コードとともに紹介してみようと思います。</p>

<h2 id="traitの特徴">Traitの特徴</h2>

<p>Traitの簡単な特徴は以下の通りです。</p>

<ul>
  <li>PHP5.4以降必須</li>
  <li>Trait自身のインスタンスを作成することはできない</li>
  <li>振る舞いを継承関係のような上下方向ではなく水平方向に定義可能</li>
</ul>

<h2 id="traitを使うと嬉しくなる状況">Traitを使うと嬉しくなる状況</h2>

<p>ではTraitを使うべき状況、使うと嬉しい状況とはどんな状況でしょうか？　まずは下記を満たす実装を普通にPHPで書いてみます。</p>

<ul>
  <li>人間(<code class="language-plaintext highlighter-rouge">Human</code>): 「話す」「逃げる」などの基本行動が可能</li>
  <li>戦士(<code class="language-plaintext highlighter-rouge">Warrior</code>): 基本行動に加え「物理攻撃」が可能</li>
  <li>魔法使い(<code class="language-plaintext highlighter-rouge">Wizard</code>): 基本行動に加え「魔法攻撃」が可能</li>
</ul>

<p>結果、このようになりました。</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>

<span class="kd">class</span> <span class="nc">Human</span> <span class="p">{</span>
    <span class="k">function</span> <span class="n">talk</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">echo</span> <span class="s1">'話す'</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">function</span> <span class="n">escape</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">echo</span> <span class="s1">'逃げる'</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="cd">/**
     * 使用可能なコマンド一覧を出力
     */</span>
    <span class="k">static</span> <span class="k">function</span> <span class="n">commands</span><span class="p">()</span> <span class="p">{</span>
        <span class="nv">$class</span> <span class="o">=</span> <span class="nb">get_called_class</span><span class="p">();</span>
        <span class="k">echo</span> <span class="nv">$class</span> <span class="mf">.</span> <span class="s1">' can use '</span><span class="p">;</span>
        <span class="k">foreach</span> <span class="p">(</span><span class="nb">get_class_methods</span><span class="p">(</span><span class="nv">$class</span><span class="p">)</span> <span class="k">as</span> <span class="nv">$method</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">echo</span> <span class="s2">"`</span><span class="si">{</span><span class="nv">$method</span><span class="si">}</span><span class="s2">` "</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">Warrior</span> <span class="kd">extends</span> <span class="nc">Human</span> <span class="p">{</span>
    <span class="k">function</span> <span class="n">attack</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">echo</span> <span class="s1">'攻撃'</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">Wizard</span> <span class="kd">extends</span> <span class="nc">Human</span> <span class="p">{</span>
    <span class="k">function</span> <span class="n">spell</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">echo</span> <span class="s1">'魔法'</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="nc">Warrior</span><span class="o">::</span><span class="nf">commands</span><span class="p">();</span> <span class="c1">//=&gt; Warrior can use `attack` `talk` `escape` `commands`</span>
<span class="nc">Wizard</span><span class="o">::</span><span class="nf">commands</span><span class="p">();</span> <span class="c1">//=&gt; Wizard can use `spell` `talk` `escape` `commands`</span></code></pre></figure>

<p>基本行動可能な<code class="language-plaintext highlighter-rouge">Human</code>クラスがあってそれを継承した<code class="language-plaintext highlighter-rouge">Warrior</code>,<code class="language-plaintext highlighter-rouge">Wizard</code>がいて…。普通のコードかと思います。</p>

<h3 id="追加要件魔法戦士を追加したい">追加要件：「魔法戦士を追加したい！」</h3>

<p>こんな要望がきました。「魔法戦士も追加したいんだよねー！」　さて上記のような実装に魔法戦士を加えるとしたらどうなるでしょうか？</p>

<p>魔法も攻撃もできなきゃいけないから、まず<code class="language-plaintext highlighter-rouge">Warrior</code>を継承してその次に<code class="language-plaintext highlighter-rouge">Wizard</code>も継承して…と、ここで多重継承の問題が出てきますね。愚直に<code class="language-plaintext highlighter-rouge">Human</code>を継承した魔法戦士を作ってもいいのですが、同じコードを二度は書きたくないですよね。DRYに行きたいですよね、ね？</p>

<h3 id="traitを使ってみる">Traitを使ってみる</h3>

<p>そこでTraitの出番です。<code class="language-plaintext highlighter-rouge">trait</code>であれば振る舞いを水平方向に構成できちゃうんです。え？よくわからない？　コードを見てください。</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>

<span class="kd">trait</span> <span class="nc">Attackable</span> <span class="p">{</span>
    <span class="k">function</span> <span class="n">attack</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">echo</span> <span class="s1">'攻撃'</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">trait</span> <span class="nc">Spellable</span> <span class="p">{</span>
    <span class="k">function</span> <span class="n">spell</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">echo</span> <span class="s1">'魔法'</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">Human</span> <span class="p">{</span>
    <span class="k">function</span> <span class="n">talk</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">echo</span> <span class="s1">'話す'</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">function</span> <span class="n">escape</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">echo</span> <span class="s1">'逃げる'</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="cd">/**
     * 使用可能なコマンド一覧を出力
     */</span>
    <span class="k">static</span> <span class="k">function</span> <span class="n">commands</span><span class="p">()</span> <span class="p">{</span>
        <span class="nv">$class</span> <span class="o">=</span> <span class="nb">get_called_class</span><span class="p">();</span>
        <span class="k">echo</span> <span class="nv">$class</span> <span class="mf">.</span> <span class="s1">' can use '</span><span class="p">;</span>
        <span class="k">foreach</span> <span class="p">(</span><span class="nb">get_class_methods</span><span class="p">(</span><span class="nv">$class</span><span class="p">)</span> <span class="k">as</span> <span class="nv">$method</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">echo</span> <span class="s2">"`</span><span class="si">{</span><span class="nv">$method</span><span class="si">}</span><span class="s2">` "</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">WarriorWizard</span> <span class="kd">extends</span> <span class="nc">Human</span> <span class="p">{</span>
    <span class="kn">use</span> <span class="nc">Attackable</span><span class="p">,</span> <span class="nc">Spellable</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">WarriorWizard</span><span class="o">::</span><span class="nf">commands</span><span class="p">();</span> <span class="c1">//=&gt; WarriorWizard can use `talk` `escape` `commands` `attack` `spell`</span>

<span class="nv">$ww</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">WarriorWizard</span><span class="p">();</span>
<span class="nv">$ww</span><span class="o">-&gt;</span><span class="nf">spell</span><span class="p">();</span> <span class="c1">//=&gt; 魔法</span>
<span class="nv">$ww</span><span class="o">-&gt;</span><span class="nf">attack</span><span class="p">();</span> <span class="c1">//=&gt; 攻撃</span></code></pre></figure>

<p>まずは<code class="language-plaintext highlighter-rouge">Attackable</code>、<code class="language-plaintext highlighter-rouge">Spellable</code>というトレイト、つまり「物理攻撃が可能である」「魔法攻撃が可能である」という特性を定義します。ここまでくればもう簡単。あとはそれを<code class="language-plaintext highlighter-rouge">WarriorWizard</code>クラス内で<code class="language-plaintext highlighter-rouge">use</code>してやるだけです。これで<code class="language-plaintext highlighter-rouge">WarriorWizard</code>は魔法も物理攻撃も可能になります。</p>

<p>ね？簡単でしょ？</p>

<h2 id="今後のtrait事情まだ来ないであろうtraitの波">今後のTrait事情―まだ来ないであろうTraitの波　</h2>

<p>今回紹介したTraitはフレームワークの設計を根本から変えうる素晴らしい機能なのですが、<a href="http://w3techs.com/technologies/details/pl-php/5/all">PHP5.4の使用率がまだ10%</a>なこと、まだまだTraitを使ったコード使用例が少ないこと、これらを考えるとTraitがPHPerに広く普及するにはあと2,3年はかかるのかな、と考えています。</p>

<p>CakePHP3では、PHP5.4が必須となり、<a href="http://www.engineyard.co.jp/blog/2013/cakephp3-preprepreview/">trait機能がうまく活用された設計</a>となっています。このフレームワークレベルでのTrait有効活用を機に、Traitを利用したナイスなコード、ひいてはPHP5.4の使用が今後増えていけばいいなと思っています。</p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><a href="http://www.slideshare.net/tlync/trait">Trait とは? その使い道を考えてみる</a> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>RubyだとMix-in、Scalaだとtrait、Perl6だとrole　にあたります。 <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Toshimaru</name></author><category term="php" /><summary type="html"><![CDATA[この記事はPHP Advent Calendar 2013の8日目の記事です。本エントリではphp5.4の注目機能の１つであるtraitをどう扱うべきかを書いてみようと思います。]]></summary></entry><entry><title type="html">PHPのプロパティをStrictに定義する</title><link href="https://blog.toshimaru.net/php-force-property/" rel="alternate" type="text/html" title="PHPのプロパティをStrictに定義する" /><published>2013-12-01T00:00:00+09:00</published><updated>2013-12-01T00:00:00+09:00</updated><id>https://blog.toshimaru.net/php-force-property</id><content type="html" xml:base="https://blog.toshimaru.net/php-force-property/"><![CDATA[<p>本記事は<a href="http://www.adventar.org/calendars/101">PHP Advent Calendar 2013</a>一日目の記事として書きます。　現在僕しかカレンダーに参加していないようなのでお暇な方は是非参加してみてくださいね！</p>

<hr />

<p>PHPといえばそのユルさ・ルーズさが嫌われる１つの原因ですよね（と同時に好かれる理由でもある）。例えば<a href="http://www.php.net/manual/ja/language.oop5.properties.php">プロパティ</a>に関してこんなユルさがあります。</p>

<script src="https://gist.github.com/toshimaru/6dc602b5ce5db54f8db0.js"></script>

<p>まずは1を見てください。<code class="language-plaintext highlighter-rouge">public</code>なプロパティには普通にアクセスできて、<code class="language-plaintext highlighter-rouge">private</code>なプロパティにはアクセスできない。普通ですね。</p>

<p>次に2です。未定義の<code class="language-plaintext highlighter-rouge">hoge</code>プロパティにアクセスしてみます。<code class="language-plaintext highlighter-rouge">Undefined property</code>で怒られます。ここもOK.</p>

<p>次に3。未定義の<code class="language-plaintext highlighter-rouge">hoge</code>プロパティを外部からセットしてみます。エラーは起こりません。この辺から少しおかしい。その後、もう一度2でやったことをやってみます。今度はうまくいきます（なんと！）。</p>

<p>「え、じゃあプロパティ外部から自由に定義し放題じゃないですか」と思ったあなた、その通り、PHPでは自由にプロパティを外部から弄くり回せちゃうわけです。4でやっているように。</p>

<h2 id="解決策-strictなプロパティ">解決策 (Strictなプロパティ)</h2>

<p>実際のところもうちょっと厳密にプロパティを制御したいですよね。外部からプロパティを自由に操作してほしくはない。プロパティを強制することはできないだろうか、ということで出来上がったのがこちら。</p>

<script src="https://gist.github.com/toshimaru/4721470.js"></script>

<p>まず注目してもらいたいのは、<code class="language-plaintext highlighter-rouge">val</code>という変数を<code class="language-plaintext highlighter-rouge">private</code>として宣言しているところです。これにより<code class="language-plaintext highlighter-rouge">val</code>変数はクラスに隠蔽されています。</p>

<p>ではどう<code class="language-plaintext highlighter-rouge">val</code>変数にアクセスするのか？　通常であれば<code class="language-plaintext highlighter-rouge">getVal()</code>,<code class="language-plaintext highlighter-rouge">setVal()</code>なんていうアクセッサーを用意しちゃうところですが、ここでは<code class="language-plaintext highlighter-rouge">__get</code>, <code class="language-plaintext highlighter-rouge">__set</code>の<a href="http://php.net/manual/ja/language.oop5.magic.php">マジックメソッド</a>を利用することで普遍的に実装しています。</p>

<p>これにより最初に紹介した例の3,4のような自由にプロパティを外部から定義できちゃうようなことは防げます。小さい実装のわりにはこれで得られるメリットが大きく、我ながら素敵な実装と思うんですが、どうでしょう？</p>

<hr />

<p>次回のPHP Advent CalendarはPHP5.4について書きたいと思います。</p>]]></content><author><name>Toshimaru</name></author><category term="php" /><summary type="html"><![CDATA[本記事はPHP Advent Calendar 2013一日目の記事として書きます。　現在僕しかカレンダーに参加していないようなのでお暇な方は是非参加してみてくださいね！ PHPといえばそのユルさ・ルーズさが嫌われる１つの原因ですよね（と同時に好かれる理由でもある）。例えばプロパティに関してこんなユルさがあります。]]></summary></entry><entry><title type="html">Composerで始める PHPのライブラリ管理</title><link href="https://blog.toshimaru.net/how-to-use-composer-autoload/" rel="alternate" type="text/html" title="Composerで始める PHPのライブラリ管理" /><published>2013-10-24T00:00:00+09:00</published><updated>2013-10-24T00:00:00+09:00</updated><id>https://blog.toshimaru.net/how-to-use-composer-autoload</id><content type="html" xml:base="https://blog.toshimaru.net/how-to-use-composer-autoload/"><![CDATA[<p>PHPも<a href="http://getcomposer.org/">Composer</a>の登場によりライブラリのインストール、依存性管理が格段に楽になりました。既にPHPのライブラリ管理のスタンダードになっていますが、改めてComposerの導入手順について紹介してみたいと思います。</p>

<h2 id="composerのインストール">Composerのインストール</h2>

<p>PHPのバージョンは5.3以降が必要です。PHP5.2以前はさっさと捨てるべし！</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ curl -s https://getcomposer.org/installer | php
</code></pre></div></div>

<p>さてこれで<code class="language-plaintext highlighter-rouge">composer.phar</code>が手に入りました。<code class="language-plaintext highlighter-rouge">composer</code>コマンドを使えるようにするためにパスの通った場所に<code class="language-plaintext highlighter-rouge">composer.phar</code>を移動しましょう。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sudo mv composer.phar /usr/local/bin/composer
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">composer</code>コマンド準備完了です。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ composer
   ______
  / ____/___  ____ ___  ____  ____  ________  _____
 / /   / __ \/ __ `__ \/ __ \/ __ \/ ___/ _ \/ ___/
/ /___/ /_/ / / / / / / /_/ / /_/ (__  )  __/ /
\____/\____/_/ /_/ /_/ .___/\____/____/\___/_/
                    /_/
Composer version b482ebe0ca18321d9322bd913af73c1c55adebf1 2013-09-23 09:55:49
</code></pre></div></div>

<h2 id="依存関係の記述">依存関係の記述</h2>

<p>composerはプロジェクトルートの <code class="language-plaintext highlighter-rouge">composer.json</code> ファイルにライブラリを記述することで依存関係の管理を行います。（composer.jsonはnpmにおけるpackage.jsonみたいなものです）早速ファイルを作ってライブラリを記述してみましょう。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ touch composer.json
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">composer.json</code>ファイルに下記のように記述します。ここではPHPUnitをインストールしてみます。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
    "require": {
        "phpunit/phpunit": "3.7.*"
    }
}
</code></pre></div></div>

<h2 id="ライブラリのインストール">ライブラリのインストール</h2>

<p><code class="language-plaintext highlighter-rouge">composer.json</code>ファイルを記述し終えたら、composerコマンドでライブラリのインストールを行います。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ composer install
Loading composer repositories with package information
Installing dependencies (including require-dev)
  - Installing symfony/yaml (v2.3.6)
    Loading from cache

  - ..............

  - Installing phpunit/phpunit (3.7.28)
    Loading from cache

phpunit/phpunit suggests installing phpunit/php-invoker (&gt;=1.1.0,&lt;1.2.0)
Writing lock file
Generating autoload files
</code></pre></div></div>

<p>うまいこといきました。ライブラリは<code class="language-plaintext highlighter-rouge">vendor</code>ディレクトリ下に格納されます。この時同時にバージョン情報が書かれた<code class="language-plaintext highlighter-rouge">composer.lock</code>ファイルも生成します。</p>

<h2 id="ライブラリのアップデート">ライブラリのアップデート</h2>

<p>ライブラリのアップデートに関しては下記のコマンドでOK.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ composer update
</code></pre></div></div>

<h2 id="まとめ">まとめ</h2>

<p>モダンなPHPパッケージ管理であればComposer一択でしょう。PEARとの使い分けに関しては<a href="http://ja.phptherightway.com/#依存関係の管理">PHP Right Way</a>にはこのように書いてあります。</p>

<blockquote>
  <ul>
    <li>Composer を使うのは、ひとつのプロジェクトにおける依存関係を管理するとき。</li>
    <li>PEAR を使うのは、システム全体の PHP 環境の依存関係を管理するとき。</li>
  </ul>
</blockquote>

<p>大抵の場合、後者のようにシステム全体で依存性管理をしなきゃならん理由はないと思うのでComposerで依存管理を行いましょう！</p>]]></content><author><name>Toshimaru</name></author><category term="php" /><category term="composer" /><summary type="html"><![CDATA[PHPもComposerの登場によりライブラリのインストール、依存性管理が格段に楽になりました。既にPHPのライブラリ管理のスタンダードになっていますが、改めてComposerの導入手順について紹介してみたいと思います。]]></summary></entry><entry><title type="html">PHPって言うほど悪い言語じゃない</title><link href="https://blog.toshimaru.net/php-is-not-bad-language/" rel="alternate" type="text/html" title="PHPって言うほど悪い言語じゃない" /><published>2013-10-20T00:00:00+09:00</published><updated>2013-10-20T00:00:00+09:00</updated><id>https://blog.toshimaru.net/php-is-not-bad-language</id><content type="html" xml:base="https://blog.toshimaru.net/php-is-not-bad-language/"><![CDATA[<p><strong class="red">※ただしPHP5.3以降に限る。</strong></p>

<p>PHPってよく「PHP(笑)」って後ろに笑マークが付いたり、Disられたりすることが多い。でも僕には「笑」を付けるほどPHPは悪い言語だとは思えないんだよね。</p>

<h2 id="phpの良いところ">PHPの良いところ</h2>

<p>PHPの良さはなんといってもその<strong>とっつきやすさ</strong>だと思う。何も知らない初学者が「WEBページ作りたいよ！WEBプログラミングしたいよ！」といったときに第一の選択肢となるのはPHPだ。なんせPHPは「ぴーえっちぴー：はいぱーてきすとぷろせっさー」なんだからな！　HyperText作るための言語、それこそPHPの本質たるところなのです。</p>

<p>逆にその手軽さがイケてないコードを量産していてるとも言えて、結果的にそうやって生まれたイケてないコードのいくつかを見て「PHPはダメ言語」って判断してしまいがちだけど、それは早急だと思う<sup id="fnref:phpway" role="doc-noteref"><a href="#fn:phpway" class="footnote" rel="footnote">1</a></sup>。</p>

<p>またPHPの<a href="http://blog.clock-up.jp/entry/2013/09/01/141859">公式リファレンスは他のどの言語よりも情報が充実していると思う</a>。簡潔な良いコード例がたくさん載ってるし、PHPのバージョン情報も明記されている。PHPは日本語情報もたくさんあるので困ったときに日本語で検索して情報も出やすい。</p>

<h2 id="phpの悪いところ">PHPの悪いところ</h2>

<p>とはいえ、PHPは関数が直感に反していていたり、引数が覚えにくかったり、まぁイケてないところは<a href="http://www.rubyist.net/~matz/20080126.html#p04">たくさんある</a>。それは認めよう。</p>

<p>ただ近年のPHP動向とか知ってる？　けっこう凄いんだぜ？</p>

<h2 id="近年のphpの進化">近年のPHPの進化</h2>

<p><a href="http://getcomposer.org/">Composer</a>で外部ライブラリのインストール、依存関係管理できる。フレームワークもMVCな<a href="https://github.com/symfony/symfony">Symfony</a>,<a href="https://github.com/cakephp/cakephp">CakePHP</a>,<a href="https://github.com/fuel/fuel">FuelPHP</a>から、SinatraライクのMicroフレームワークな<a href="https://github.com/codeguy/Slim">Slim</a>,<a href="https://github.com/fabpot/Silex">Silex</a>だってある。CakePHPなんかは日本で人気が高く日本語情報がネットに沢山あってググりやすい。<a href="https://github.com/laravel/laravel">Laravel</a>なんかは今グングン成長している注目株のMVCフレームワークだ。<a href="https://github.com/sebastianbergmann/phpunit">PHPUnit</a>でテストも書ける。PHPUnitの書き方がイケてない？　ならモダンな<a href="https://github.com/atoum/atoum">atoum</a>もある。PHPは遅い？　だったら<a href="http://phalconphp.com/en/">The fastest
PHP Framework, Phalcon</a>という選択肢も今ならある。</p>

<h2 id="phpのコードは汚い">PHPのコードは汚い？</h2>

<p>正直5.2以前はけっこう汚いコードが多いと思う。PHP4の書き方の名残があるコードなんて最低だ。ただPHP5.3以降は綺麗に書けるようになってきてる。</p>

<p>PHP5.3以降からは名前空間がサポートされて、これとComposerのAutoloadの機能を使えば<code class="language-plaintext highlighter-rouge">require</code>地獄から解放される。他にも5.3では無名関数がサポートされた。</p>

<p>PHP5.4からは新しいショートArrayシンタックスが追加されてかつての<code class="language-plaintext highlighter-rouge">array</code>書きまくり地獄からは解放されそうだし、Traitの導入によりRubyのMix-inみたいなことも可能になった。</p>

<p>PHP5.5ではジェネレータの機能により<code class="language-plaintext highlighter-rouge">yield</code>キーワードが使えるようになったり、<code class="language-plaintext highlighter-rouge">finally</code>節も追加される（この辺は今更感ありまくりだけど）。</p>

<p>シンタックスとか言語特性上限界がありますけど（PHPは言語特性上、クソコードが書きやすい）、Rubyでもきっとクソなコード書く人はクソなコードを書くだろうし、Ruby on Railsでもレールの乗り方を無視してクソみたいなコードを書く奴もいるだろう。クソコードはPHPに限った話じゃないぜ。 :shit:</p>

<h2 id="phpがwebを作っている">PHPがWEBを作っている！</h2>

<p>Googleが無縁であるはずのPHPをGoogle App Engineの言語の一つとして採用したのはなぜか？　<a href="http://agilecatcloud.com/2013/07/04/google-app-engine-%E3%81%8C-php-%E3%82%92%E3%82%B5%E3%83%9D%E3%83%BC%E3%83%88%E3%81%99%E3%82%8B%EF%BC%9A-%E3%81%AA%E3%81%9C%E3%81%AA%E3%82%89-75-%E3%81%AE-web-%E3%82%92%E3%82%AB%E3%83%90%E3%83%BC/">PHPがWEBの75％を作っている、とGoogleが判断した</a>からだ。</p>

<p>世界で一番使われているCMSはなにか？　WordPressだ。WordPressはPHPで作られている<sup id="fnref:wp" role="doc-noteref"><a href="#fn:wp" class="footnote" rel="footnote">2</a></sup>。</p>

<p>世界最大のSNS、Facebookで使われている言語はなにか？　PHPだ。さらに彼らは<a href="http://2013.8-p.info/japanese/09-28-languages.html">HipHopというPHPから C++への変換するソフトを作るというかなり頭のイカれたことをやっていたり、Hackという型付のPHP方言を使用していたり</a>するらしい。Facebook、お前のPHP愛が怖い<sup id="fnref:fbd" role="doc-noteref"><a href="#fn:fbd" class="footnote" rel="footnote">3</a></sup>。</p>

<h2 id="phpを笑うな">PHPを笑うな</h2>

<p>「PHP（笑）」って言っている人がどれだけ上記のような状況を知った上で笑っているのだろうか。僕は上記の状況を鑑みるにもうPHPに「笑」なんて付けることはできない。むしろ軽率に付けててゴメン、とおもった。</p>

<p>正直自分も今まで、PHPの後ろに「笑」が付いていた。技術ブログ界隈でPHPがよくDisられたりするのを見聞きしてたから僕も知らず知らずのうちにPHPをネタにしてたんだ。でも冷静に考えるとその当時、PHPの良さなんて何も知らなかったのだ。</p>

<h2 id="なんか見たことある光景">なんか見たことある光景？</h2>

<p>この光景、デジャヴじゃね？とも思った。</p>

<p>JavaScriptだって<a href="http://bl.ocks.org/anonymous/raw/6281225/#9">AJAX技術の台頭で持て囃される以前は言語として見放されていた</a>。それがAJAX以降どうだ。どんどん便利なライブラリが誕生し、JSを使ったリッチなUIの提供は当たり前となった。そしてNodeの登場以降は全世界の優秀なエンジニアたちがそのテクノロジーの可能性にこぞって注目した。<a href="http://altjs.org/">AltJS</a>の勢いも強まっている。</p>

<p>PHPはさすがにJSまでの再評価までいかなくとも、少なくともWEB言語の第一位の座に居座り続けてもいいのではないかと思う（そして今後のPHPの進化にも期待したい）。</p>

<h2 id="最後に">最後に</h2>

<p>「PHP（笑）」の時代は終わりを告げた。ぼくはPHPは悪い言語だとは思わないし、お世辞にもすごく良い言語とも言うことはできない。ただ＜侮れない言語＞であると思うのです。</p>

<p>PHPはPerlほど真面目じゃないし、Pythonほどスマートじゃないし、Rubyほど垢抜けてないし、JavaScriptほど流行に敏感じゃないけど、そんなPHPが、僕は嫌いじゃない。</p>

<blockquote class="twitter-tweet"><p><a href="http://t.co/oYy20r6aYU">http://t.co/oYy20r6aYU</a> 「ぼくの経験上、一番PHPをバカにし、言語の重要性をうそぶく連中は、大体自分たちが提唱する言語でもロクな仕事ができないことが多い」。これはわからないけれど、自分の経験から語ると、優秀なエンジニアだなと思う人ほどPHPを評価している感じ</p>&mdash; 紀平 拓男（Takuo Kihira） (@tkihira) <a href="https://twitter.com/tkihira/statuses/384552044247257088">September 30, 2013</a></blockquote>
<script async="" src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:phpway" role="doc-endnote">
      <p>「そんなこといってもぉ、どんなコード書いたらイケてるとかわかんないしぃ」というスイーツなそこのあなた。<a href="http://www.phptherightway.com/">PHP The Right Way.</a>を今すぐ嫁。「技術書高ぃしぃ〜、重ぃしぃ〜、いゃ〜」とか「英語とか読めないしぃ〜」とかつべこべ言う前に無料だし<a href="http://ja.phptherightway.com/">日本語版</a>もあるので黙って全部読むべし。 <a href="#fnref:phpway" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:wp" role="doc-endnote">
      <p>と、ここでホンネを言うと、WordPressの作りはかなり<a href="http://mask-legacy.tumblr.com/post/62315583278/in-wordpress-phpcon2013-wctokyo">アレ</a>なので個人的にはさっさと世代交代してほしいのだわ <a href="#fnref:wp" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:fbd" role="doc-endnote">
      <p><a href="http://japan.internet.com/webtech/20131018/5.html">今後はD言語</a>なのか？ <a href="#fnref:fbd" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Toshimaru</name></author><category term="php" /><summary type="html"><![CDATA[PHPってよく「PHP(笑)」って後ろに笑マークが付いたり、Disられたりすることが多い。でも僕には「笑」を付けるほどPHPは悪い言語だとは思えない。PHPを笑うな。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/phplogo.png" /><media:content medium="image" url="https://blog.toshimaru.net/images/posts/phplogo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">超簡単コマンドでローカルにHTTPサーバーを起動する方法</title><link href="https://blog.toshimaru.net/simple-command-web-server/" rel="alternate" type="text/html" title="超簡単コマンドでローカルにHTTPサーバーを起動する方法" /><published>2013-10-07T00:00:00+09:00</published><updated>2019-05-20T00:00:00+09:00</updated><id>https://blog.toshimaru.net/simple-command-web-server</id><content type="html" xml:base="https://blog.toshimaru.net/simple-command-web-server/"><![CDATA[<p>スタティックなサイトをサクッとローカルで確認したいときのTipsです。</p>

<h2 id="phpを使う">PHPを使う</h2>

<p><a href="http://php.net/manual/ja/features.commandline.webserver.php">PHPのビルトインウェブサーバー</a>を使うのが最も簡単な方法だと思います。</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>php <span class="nt">-S</span> localhost:8888
</code></pre></div></div>

<h2 id="pytnonを使う">Pytnonを使う</h2>

<p>pythonを使うならこんな感じ。</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>python <span class="nt">-m</span> SimpleHTTPServer
</code></pre></div></div>

<p>これでポート8000でWebサーバが起動。ポート指定したければこう。</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>python <span class="nt">-m</span> SimpleHTTPServer 8888
</code></pre></div></div>

<h2 id="参考">参考</h2>

<ul>
  <li><a href="https://qiita.com/sudahiroshi/items/e74d61d939f18779970d">ワンライナーWebサーバを集めてみた - Qiita</a></li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="php" /><category term="python" /><summary type="html"><![CDATA[ローカル上にWEBサーバーを起動できる超簡単なワンラインコマンドを紹介します]]></summary></entry><entry><title type="html">[PHP][Ruby]実行速度を計測する</title><link href="https://blog.toshimaru.net/php-5492/" rel="alternate" type="text/html" title="[PHP][Ruby]実行速度を計測する" /><published>2012-12-02T00:00:00+09:00</published><updated>2020-05-15T00:00:00+09:00</updated><id>https://blog.toshimaru.net/php-5492</id><content type="html" xml:base="https://blog.toshimaru.net/php-5492/"><![CDATA[<h2 id="php">PHP</h2>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$time_start</span> <span class="o">=</span> <span class="nb">microtime</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>

<span class="c1">// 何か重たい処理</span>

<span class="nv">$time</span> <span class="o">=</span> <span class="nb">microtime</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="o">-</span> <span class="nv">$time_start</span><span class="p">;</span>
<span class="k">echo</span> <span class="s2">"</span><span class="si">{</span><span class="nv">$time</span><span class="si">}</span><span class="s2"> 秒"</span><span class="p">;</span>
</code></pre></div></div>

<h2 id="ruby">Ruby</h2>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">beginning_time</span> <span class="o">=</span> <span class="no">Time</span><span class="p">.</span><span class="nf">now</span>

<span class="c1"># 何か重たい処理</span>

<span class="n">end_time</span> <span class="o">=</span> <span class="no">Time</span><span class="p">.</span><span class="nf">now</span>
<span class="nb">puts</span> <span class="s2">"Time elapsed </span><span class="si">#{</span><span class="p">(</span><span class="n">end_time</span> <span class="o">-</span> <span class="n">beginning_time</span><span class="p">)</span><span class="si">}</span><span class="s2"> seconds"</span>
</code></pre></div></div>

<p>これを使って<a href="/php-99717">処理のパフォーマンス比較</a>をやると良い感じ。</p>]]></content><author><name>Toshimaru</name></author><category term="php" /><category term="ruby" /><summary type="html"><![CDATA[PHP]]></summary></entry><entry><title type="html">phpの@(アットマーク)はオーバーヘッドが大きいから使わないほうがよい</title><link href="https://blog.toshimaru.net/php-99717/" rel="alternate" type="text/html" title="phpの@(アットマーク)はオーバーヘッドが大きいから使わないほうがよい" /><published>2012-11-30T00:00:00+09:00</published><updated>2012-11-30T00:00:00+09:00</updated><id>https://blog.toshimaru.net/php-99717</id><content type="html" xml:base="https://blog.toshimaru.net/php-99717/"><![CDATA[<p>事の発端はこれ。Arrayにキーがセットされていて、かつ、そのキーの値をチェックしたい。</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="c1">// 1.</span>
<span class="k">if</span> <span class="p">(</span><span class="k">isset</span><span class="p">(</span><span class="nv">$checkedAry</span><span class="p">[</span><span class="s1">'key'</span><span class="p">])</span> <span class="o">&amp;&amp;</span> <span class="nv">$checkedAry</span><span class="p">[</span><span class="s1">'key'</span><span class="p">]</span> <span class="o">==</span> <span class="s2">"val"</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 処理</span>
<span class="p">}</span>

<span class="c1">// 2. 1より早いんじゃね？</span>
<span class="k">if</span> <span class="p">(</span><span class="nv">$checkedAry</span><span class="p">[</span><span class="s1">'key'</span><span class="p">]</span> <span class="o">==</span> <span class="s2">"val"</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// でもNoticeでちゃうよ！</span>
    <span class="c1">// PHP Notice:  Undefined index: index</span>
<span class="p">}</span>

<span class="c1">// 3. 2の「PHP Notice」の回避策　＠</span>
<span class="k">if</span> <span class="p">(</span><span class="o">@</span><span class="nv">$checkedAry</span><span class="p">[</span><span class="s1">'key'</span><span class="p">]</span> <span class="o">==</span> <span class="s2">"val"</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 処理</span>
<span class="p">}</span></code></pre></figure>

<p>１と３なら３のほうが処理早いんじゃね？ってことで試してみたところ、こうなった。 （PHP 5.3.3）</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="nv">$ary</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
    <span class="k">array</span><span class="p">(</span> <span class="s2">"key1"</span> <span class="o">=&gt;</span> <span class="s2">"val1"</span><span class="p">,</span> <span class="s2">"key2"</span> <span class="o">=&gt;</span> <span class="s2">"val2"</span><span class="p">,</span><span class="s2">"key3"</span> <span class="o">=&gt;</span> <span class="s2">"val3"</span><span class="p">,</span><span class="s2">"key4"</span> <span class="o">=&gt;</span> <span class="s2">"val4"</span><span class="p">),</span>
    <span class="k">array</span><span class="p">(</span> <span class="s2">"key1"</span> <span class="o">=&gt;</span> <span class="s2">"val1"</span><span class="p">,</span> <span class="s2">"key2"</span> <span class="o">=&gt;</span> <span class="s2">"val2"</span><span class="p">,</span><span class="s2">"key3"</span> <span class="o">=&gt;</span> <span class="s2">"val3"</span><span class="p">),</span>
<span class="p">);</span>

<span class="nv">$time_start</span> <span class="o">=</span> <span class="nb">microtime</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>

<span class="nv">$index</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="k">foreach</span> <span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">100000</span><span class="p">)</span> <span class="k">as</span> <span class="nv">$count</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$index</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">-</span> <span class="nv">$index</span><span class="p">;</span>
    <span class="nv">$checkedAry</span> <span class="o">=</span> <span class="nv">$ary</span><span class="p">[</span><span class="nv">$index</span><span class="p">];</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">isset</span><span class="p">(</span><span class="nv">$checkedAry</span><span class="p">[</span><span class="s1">'key4'</span><span class="p">])</span> <span class="o">&amp;&amp;</span> <span class="nv">$checkedAry</span><span class="p">[</span><span class="s1">'key4'</span><span class="p">]</span> <span class="o">==</span> <span class="s2">"val4"</span><span class="p">)</span> <span class="p">{</span>
        <span class="nb">pow</span><span class="p">(</span><span class="nv">$count</span><span class="p">,</span> <span class="nv">$count</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="nv">$time</span> <span class="o">=</span> <span class="nb">microtime</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="o">-</span> <span class="nv">$time_start</span><span class="p">;</span>
<span class="k">echo</span> <span class="s2">"</span><span class="nv">$time</span><span class="s2"> second"</span><span class="p">;</span>

<span class="nv">$time_start</span> <span class="o">=</span> <span class="nb">microtime</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>

<span class="nv">$index</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="k">foreach</span> <span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">100000</span><span class="p">)</span> <span class="k">as</span> <span class="nv">$count</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$index</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">-</span> <span class="nv">$index</span><span class="p">;</span>
    <span class="nv">$checkedAry</span> <span class="o">=</span> <span class="nv">$ary</span><span class="p">[</span><span class="nv">$index</span><span class="p">];</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">@</span><span class="nv">$checkedAry</span><span class="p">[</span><span class="s1">'key4'</span><span class="p">]</span> <span class="o">==</span> <span class="s2">"val4"</span><span class="p">)</span> <span class="p">{</span>
        <span class="nb">pow</span><span class="p">(</span><span class="nv">$count</span><span class="p">,</span> <span class="nv">$count</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="nv">$time</span> <span class="o">=</span> <span class="nb">microtime</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="o">-</span> <span class="nv">$time_start</span><span class="p">;</span>
<span class="k">echo</span> <span class="s2">"</span><span class="nv">$time</span><span class="s2"> second"</span><span class="p">;</span></code></pre></figure>

<p>３回やってみてこんな結果でした。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0.098845958709717 second
0.19816088676453 second

0.097808122634888 second
0.15862894058228 second

0.10174417495728 second
0.16551208496094 second
</code></pre></div></div>

<p>つまり<strong>＠付きのほうがそうじゃないほうより１．５倍～２倍程度遅い</strong>、ということになります。</p>

<p>ただ、<strong>＠付きのほうがシンプルに書ける場合もある</strong>ので、今回の例のようにループさせている場合でないのであれば、＠付きを使ってもよいのかもしれません。</p>]]></content><author><name>Toshimaru</name></author><category term="php" /><summary type="html"><![CDATA[PHPで@(アットマーク)は使うべからず]]></summary></entry><entry><title type="html">[php] array_merge VS array +(plus)</title><link href="https://blog.toshimaru.net/php-arraymerge-vs-plus/" rel="alternate" type="text/html" title="[php] array_merge VS array +(plus)" /><published>2012-10-30T00:00:00+09:00</published><updated>2012-10-30T00:00:00+09:00</updated><id>https://blog.toshimaru.net/php-arraymerge-vs-plus</id><content type="html" xml:base="https://blog.toshimaru.net/php-arraymerge-vs-plus/"><![CDATA[<p>PHPのarray_merge関数による配列の足し合わせとプラス（＋）による足し合わせってどう違うの？ってことで実際に試してみた。</p>
<p><script src="https://gist.github.com/3978567.js"></script></p>
<p>上記から、同じキーで足し合わせたとき、array_mergeでは後からきたarray（第二引数）で先のarray(第一引数)を上書きして、プラスの加算のほうではすでに最初のキーで定義してある値はプラスによる加算によってその値は変化しないことがわかります。</p>
<h4>まとめ</h4>
<ul>
<li><strong>array_merge() は後勝ち</strong></li>
<li><strong>+ (プラス)は先勝ち</strong></li>
</ul>]]></content><author><name>Toshimaru</name></author><category term="php" /><summary type="html"><![CDATA[PHPのarray_merge関数による配列の足し合わせとプラス（＋）による足し合わせってどう違うの？ってことで実際に試してみた。 上記から、同じキーで足し合わせたとき、array_mergeでは後からきたarray（第二引数）で先のarray(第一引数)を上書きして、プラスの加算のほうではすでに最初のキーで定義してある値はプラスによる加算によってその値は変化しないことがわかります。 まとめ array_merge() は後勝ち + (プラス)は先勝ち]]></summary></entry><entry><title type="html">[PHP]URL safe な base64 encode メソッド</title><link href="https://blog.toshimaru.net/phpurl-safe-base64-encode/" rel="alternate" type="text/html" title="[PHP]URL safe な base64 encode メソッド" /><published>2012-10-06T00:00:00+09:00</published><updated>2012-10-06T00:00:00+09:00</updated><id>https://blog.toshimaru.net/phpurl-safe-base64-encode</id><content type="html" xml:base="https://blog.toshimaru.net/phpurl-safe-base64-encode/"><![CDATA[<p>base64エンコード時でに出てくる記号 +(プラス) , /(スラッシュ) , =(イコール) .　このbase64エンコードした値をさらにURLのパラメータで使うためにURLエンコードすると、パーセントエンコーディングされてしまいます。</p>
<p>そこで、パーセントエンコーディングされないURLセーフなbase64エンコードメソッドを作ります。</p>
<p><script src="https://gist.github.com/3775127.js"></script></p>
<p>たしかにこれで問題なさそうですね。</p>
<div class="CodeRay">
  <div class="code"><pre>php &gt; echo  urlencode('test+/=');
test%2B%2F%3D
php &gt; echo  urlencode('test_-.');
test_-.</pre></div>
</div>]]></content><author><name>Toshimaru</name></author><category term="php" /><summary type="html"><![CDATA[base64エンコード時でに出てくる記号 +(プラス) , /(スラッシュ) , =(イコール) .　このbase64エンコードした値をさらにURLのパラメータで使うためにURLエンコードすると、パーセントエンコーディングされてしまいます。 そこで、パーセントエンコーディングされないURLセーフなbase64エンコードメソッドを作ります。 たしかにこれで問題なさそうですね。 php &gt; echo urlencode('test+/='); test%2B%2F%3D php &gt; echo urlencode('test_-.'); test_-.]]></summary></entry></feed>